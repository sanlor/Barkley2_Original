<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2510000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

active = 1;
ypos = 0;
togglespeed = 4;
health_flicker = 0;
health_ready = 0; // GZ ADDED - for o_qmenu_button / quickmenu interface

x = view_xview + view_wview/2 - sprite_width/2;
y = view_yview + view_hview - sprite_height*ypos;

player_hp = 1; // Update each frame (value is in percentage of max hp)

//temp
anim = 0;
dna = 0.75;
injured = 0;
glance = 0;
c = 0;
chargeSin = 0;
cm[0] = 4;
cm[1] = 9;
cm[2] = 18;
cm[3] = 27;

draw_set_font(global.fn_2)
m_anim = 0;

moneyCount = 0;
moneyShow = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shake apply
Shake("apply");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step
ClockTime("step");

x = (view_xview + view_wview/2 - (sprite_width-1)/2) div 1;
y = (view_yview + view_hview - (sprite_height-1)*ypos) div 1;

active = !global.event and !instance_exists(ustation);
    
if (active) {
    ypos = min(ypos + dt()/togglespeed, 1);
} else {
    ypos = max(ypos - dt()/togglespeed, 0);
}
    
// charge meter
c = min(max(0, c), 3)
if (c == 0) s_charge = s_charge4
if (c == 1) s_charge = s_charge9
if (c == 2) s_charge = s_charge18
if (c == 3) s_charge = s_charge27
chargeSin += dt();

// anim
if !scr_pause_isPaused() anim += ((0.25 * 30) / 10) * dt(); //transhumanism
ano = anim;
anim = anim mod 14

// doomface
if (ano &gt; anim and !irandom(6)) //was anim &gt; 13 and !irandom(9)
{
    glance = choose(-1, 1); //scr_math_nsign(irandom(1));
    wait = 5 + floor(random(15));
}
    
if (glance != 0)
{
    if (wait &gt; 0) wait -= dt();
    else glance = 0;
}
        
draw_set_font(global.fn_2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw gun size lines
hudPosX = x;//0;
hudPosY = y;//240 - 41;
//Draw hud BG
draw_sprite_ext(s1x1, 0, hudPosX + 32, hudPosY + 8, 49, 24, 0, make_color_rgb(19, 19, 25), ypos);

var _gun = _gun_equipped; //scr_player_equip("object");
if(_gun == NULL) exit;
if (ds_exists(_gun, ds_type_map) == 0) exit;
linSpr = assetOrNull(_gun[? "hudIconSprite"], asset_sprite);
if (linSpr == NULL) exit;
        
//Draw lines - do horz
//linSpr = global.gunSprite[| sub];
linSpc = global.gunSize[? linSpr];
linSpc = (8 / 97) * linSpc; //linSpc is now a value of 26 to 97, a difference of 71 !!!
linSpc = (8 + ((8 / 97) * 26)) - linSpc;
if (global.gunSize[? linSpr] == 97) linSpc = 2;
dx = hudPosX + 32 + 25;
dy = hudPosY + 8 + 12;

//Draw black lines to get right contrast
linColCon = merge_color(make_color_rgb(0, 72, 72), make_color_rgb(255, 255, 255), o_hoopz.swaptick / 6);
for (h = 0; h &lt; 2; h += 1)
{
    if (h == 0) { linAlp = 1 * ypos; linCol = c_black; } //alpha obsolete
    else { linAlp = 0.5 * ypos; linCol = linColCon; draw_set_colour_write_enable(true, true, true, false); }
    //Do horz lines
    draw_sprite_ext(s1x1, 0, hudPosX + 32, dy, 49, 1, 0, linCol, linAlp);
    for (i = linSpc; i &lt; 12; i += linSpc) draw_sprite_ext(s1x1, 0, hudPosX + 32, dy + i, 49, 1, 0, linCol, linAlp);
    for (i = linSpc; i &lt; 13; i += linSpc) draw_sprite_ext(s1x1, 0, hudPosX + 32, dy - i, 49, 1, 0, linCol, linAlp);
    
    //Do vert lines
    draw_sprite_ext(s1x1, 0, dx, hudPosY + 8, 1, 24, 0, linCol, linAlp);
    for (i = linSpc; i &lt; 24; i += linSpc) draw_sprite_ext(s1x1, 0, dx + i, hudPosY + 8, 1, 24, 0, linCol, linAlp);
    for (i = linSpc; i &lt; 25; i += linSpc) draw_sprite_ext(s1x1, 0, dx - i, hudPosY + 8, 1, 24, 0, linCol, linAlp);
}
draw_set_colour_write_enable(true, true, true, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// No HUD option is on //
if global.noHud = true then exit;

/// Draw hud
x = floor(view_xview[0] + view_wview[0] / 2 - (sprite_width - 1) / 2);
y = floor(view_yview[0] + view_hview[0] - (sprite_height - 1) * ypos);

_gun_equipped = scr_player_equip("object"); //Return current equipped gun
if (instance_exists(o_qmenu) &amp;&amp; o_qmenu.menu_type == "guns")
{
    if (o_qmenu.item_selected == 5)
        _gun_equipped = scr_equipment_guns_bag_drawGun()
    else
        _gun_equipped = scr_equipment_guns_bandolier_getGun(scr_gun("order", o_qmenu.item_selected));
}

//gz debug for tile script
if(global.DEBUGMODE &amp;&amp; keyboard_check(ord('8')) &amp;&amp; instance_exists(sys_collision))
{
    vx = view_xview[0];
    vy = view_yview[0];
    draw_set_color(c_fuchsia);
    draw_rectangle(vx, vy, vx + 5, vy + 5, 0);
    for (_x = floor(vx / 16); _x &lt; floor(vx / 16) + 25; _x += 1)
    {
        for (_y = floor(vy / 16); _y &lt; floor(vy / 16) + 18; _y += 1)
        {
            if (ds_grid_get(sys_collision.c_footgrid, _x, _y) == 1) draw_set_color(c_fuchsia);
            else draw_set_color(c_black);
            dx = (floor(vx / 16) + (_x - floor(vx / 16))) * 16;
            dy = (floor(vy / 16) + (_y - floor(vy / 16))) * 16;
            draw_rectangle(dx, dy, dx + 15, dy + 15, 1);
        }
    }
}
//gz debug for tile script
overlay_alpha = 0.25;

/*    
with o_hoopz {
    if visible{
        var a = image_alpha;
        image_alpha = other.overlay_alpha;
        scr_player_draw_executePipeline();
        image_alpha = a;
    }
}
*/

with vo_overlayed {
    if (visible) {
        var a = image_alpha;
        image_alpha = other.overlay_alpha;
        event_perform(ev_draw,0);
        image_alpha = a;
    }
}

if !global.enemyPlacementMode {
           
// draw hud
draw_set_color(c_white);
if floor(ypos) {
    draw_sprite(sprite_index,0,x,y);  
    
    // marquee
    Marquee("draw");
    draw_set_font(global.fn_2);
}

//Draw gun lines before HUD
event_user(0);

// over hud
draw_sprite_ext(sprite_index,1,x,y,1,1,0,c_white,ypos);

dy = y - (view_hview[0] - (sprite_height-1));
//Draw active item
gcc = make_color_rgb(177,223,190);

var candyPos = scr_items_candy_getCurrent();
if (candyPos != NULL) {
    var candy = scr_items_get(ITEMTYPE_CANDY, candyPos);
    var spriteName = assetOrNull(candy[? "sprite"], asset_sprite);
    if (spriteName != NULL) {
        draw_sprite(spriteName, candy[? "image"], x + global.pocketX, dy + global.pocketY);
    }
}

//Draw active ability
var zauberPos = scr_items_zauber_getCurrent();
if (zauberPos != NULL) {
    scr_items_draw(scr_items_get(ITEMTYPE_ZAUBER, zauberPos), x + global.zauberX, dy + global.zauberY);
}

//////////////////////////////////////////////////////////////////////////////////////////GZ ADDED

// draw player health
{
    // If player exists, read HP
    if (instance_exists(o_hoopz)) {
        player_hp = scr_stats_getCurrentStat(o_hoopz, STAT_CURRENT_HP) / scr_stats_getEffectiveStat(o_hoopz, STAT_EFFECTIVE_MAX_HP);
    } else player_hp = 0;
    
    // GZ COMMENTED LINE BELOW
    // var _health_img, _render_h, _spr_h, _top, _bottom, _height; 
    // i use the above values in o_qmenu_button for showing the health bar
    // Determine part of image to render
    health_ready = 1; // GZ ADDED for o_qmenu_button / quickmenu
    _top = 5; // Top of hud redscreen
    _bottom = 35; // Bottom of hud redscreen
    _height = _bottom - _top
    _top = _top + (player_hp * _height);
    
    // Determine image based on flickering variable
    if (health_flicker &gt; 0) {
        _health_img = 2 + (health_flicker mod 2);
        health_flicker -= 1;
    }
    else {
        _health_img = 2;
    }
    
    // Render
    draw_sprite_part(sprite_index, _health_img, 0, _top, sprite_width, _bottom - _top, x, y + _top);
    // GZ NOTE - do not edit the values _health_img, _render_h, _spr_h, _top, _bottom, _height 
    // beyond this point as o_qmenu_button uses them to draw the health bar
}

if floor(ypos) {
    // draw dna
    var humBio = scr_savedata_get("player.humanism.bio");
    var humCyber = scr_savedata_get("player.humanism.cyber");
    var humCosmic = scr_savedata_get("player.humanism.cosmic");
    var humZauber = scr_savedata_get("player.humanism.zauber");
    var humTotal = humBio + humCyber +humCosmic + humZauber;
    
    var DNA_W = 70;
    var dnaLeft, dnaWidth;
    
    dnaLeft = 0;
    // Bio
    dnaWidth = (humBio / humTotal) * DNA_W;
    if (dnaWidth &gt; 0) { draw_sprite_part(s_hud_dna_bio,   anim, dnaLeft, 0, (dnaWidth), 13, x+275+dnaLeft,y+8); }
    dnaLeft += dnaWidth;
    // Zauber
    dnaWidth = (humZauber / humTotal) * DNA_W;
    if (dnaWidth &gt; 0) { draw_sprite_part(s_hud_dna_zauber,anim, dnaLeft, 0, (dnaWidth), 13, x+275+dnaLeft,y+8); }
    dnaLeft += dnaWidth;
    // Cosmic
    dnaWidth = (humCosmic / humTotal) * DNA_W;
    if (dnaWidth &gt; 0) { draw_sprite_part(s_hud_dna_cosmic,anim, dnaLeft, 0, (dnaWidth), 13, x+275+dnaLeft,y+8); }
    dnaLeft += dnaWidth;
    // Cyber
    dnaWidth = (humCyber / humTotal) * DNA_W;
    if (dnaWidth &gt; 0) { draw_sprite_part(s_hud_dna_cyber, anim, dnaLeft, 0, (dnaWidth), 13, x+275+dnaLeft,y+8); }
    

    
    
    var _gun;
    _gun = _gun_equipped;
    
    // ammo
    var _bullets;
    _bullets = 0
    if(_gun != NULL &amp;&amp; ds_exists(_gun, ds_type_map))
    {
        _bullets = _gun[? "pCurAmmo"];
    }
    
    // Ammo display //
    //for(i=0; i&lt;4; i+=1)
    //charge
    var charge = 0;
    if(_gun != NULL &amp;&amp; ds_exists(_gun, ds_type_map)) {
        charge = _gun[? "pChargeRatio"];
    }

    // Display ammo as such: Empty zeroes are a bit darker shade than actual bullet diplay numbers, during charge numbers get a blue tint to them //
    var color_nobullet = make_color_rgb(50, 100, 90);
    var color_bullet = make_color_rgb(135, 210, 190);
    var color_nobullet_charge = make_color_rgb(50, 120, 150);
    var color_bullet_charge = make_color_rgb(50, 160 + irandom(70), 230 + irandom(25));
    if _bullets &gt; 0 then
        {
        // Thousands //
        if _bullets &lt; 1000 then 
            {
            if charge &gt;= 1 then draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-0)))mod 10,(x+88+0*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, color_nobullet_charge, image_alpha * random_range(0.8, 1)); 
            else draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-0)))mod 10,(x+88+0*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, color_nobullet, image_alpha);
            }
        else 
            {
            if charge &gt;= 1 then draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-0)))mod 10,(x+88+0*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, color_bullet_charge, image_alpha * random_range(0.8, 1)); 
            else draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-0)))mod 10,(x+88+0*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, color_bullet, image_alpha); 
            }
            
        // Hundreds //
        if _bullets &lt; 100 then 
            {
            if charge &gt;= 1 then draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-1)))mod 10,(x+88+1*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, color_nobullet_charge, image_alpha * random_range(0.8, 1));
            else draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-1)))mod 10,(x+88+1*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, color_nobullet, image_alpha);
            }
        else 
            {
            if charge &gt;= 1 then draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-1)))mod 10,(x+88+1*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, color_bullet_charge, image_alpha * random_range(0.8, 1));
            else draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-1)))mod 10,(x+88+1*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, color_bullet, image_alpha);
            }
            
        // Tens //
        if _bullets &lt; 10 then 
            {
            if charge &gt;= 1 then draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-2)))mod 10,(x+88+2*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, color_nobullet_charge, image_alpha * random_range(0.8, 1));
            else draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-2)))mod 10,(x+88+2*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, color_nobullet, image_alpha);
            }
        else 
            {
            if charge &gt;= 1 then draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-2)))mod 10,(x+88+2*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, color_bullet_charge, image_alpha * random_range(0.8, 1));
            else draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-2)))mod 10,(x+88+2*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, color_bullet, image_alpha);
            }
            
        // Ones //
        if _bullets &lt;= 0 then 
            {
            if charge &gt;= 1 then draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-3)))mod 10,(x+88+3*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, color_nobullet_charge, image_alpha * random_range(0.8, 1));
            else draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-3)))mod 10,(x+88+3*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, color_nobullet, image_alpha); 
            }
        else 
            {
            if charge &gt;= 1 then draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-3)))mod 10,(x+88+3*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, color_bullet_charge, image_alpha * random_range(0.8, 1));
            else draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-3)))mod 10,(x+88+3*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, color_bullet, image_alpha);
            }
        }
    else
        {
        // No ammo left, make it all RED //
        draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-0)))mod 10,(x+88+0*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, make_color_rgb(170, 50, 50), image_alpha); 
        draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-1)))mod 10,(x+88+1*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, make_color_rgb(170, 50, 50), image_alpha);
        draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-2)))mod 10,(x+88+2*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, make_color_rgb(170, 50, 50), image_alpha);        
        draw_sprite_ext(s_hud_num,abs(floor(_bullets/power(10,3-3)))mod 10,(x+88+3*sprite_get_width(s_hud_num)) div 1,y+11, 1, 1, 0, make_color_rgb(170, 50, 50), image_alpha);
        }
    
    // doomface - GZ NOTE: if this changes, change o_qmenu_button draw hover code as well
    //set above is player_hp which is 0-1, use as doomface ref
    player_hp = min(1, max(0, player_hp));
    injured = floor(abs(1 - player_hp) * 5);
    if (scr_quest_get_state("player_is_fantomas") == 1) then draw_sprite(s_hud_face_fantomas,(3*injured+1)+glance,x+179,y+5)
    else draw_sprite(s_hud_face,(3*injured+1)+glance,x+179,y+5)
    
    // gun
    if (!scr_player_getGunHolstered()) gc = 1; else gc = 0.4;

    if(_gun != NULL  &amp;&amp; ds_exists(_gun, ds_type_map))
    {
        var hudtyp = assetOrNull(_gun[? "hudIconSprite"], asset_sprite);
        if (hudtyp != NULL) {
            var hudmat = _gun[? "hudIconFrame"];
            //draw_sprite_ext(hudspr,_gun[? "hudIconFrame"],x+32,y+8,1,1,0,_gun[? "col"],gc)
            scr_hud_gun_draw_ext(hudtyp, hudmat, x + 32, y + 8, 1, 1, _gun[? "col"], gc);
        }
    }
    
    // gun swap (replace)
    if (!scr_player_getGunHolstered())
        gcc = make_color_rgb(177,223,190);
    else
        gcc = make_color_rgb(19,55,55);
    
    //d3d_set_fog(1, gcc, 0, 0);
    
    if(o_hoopz.gunPouchShow&gt;0){o_hoopz.gunPouchShow-=0.25;}
    if(o_hoopz.gunCountShow&gt;0){o_hoopz.gunCountShow-=0.25;}
  
    if(moneyShow&gt;0)
    {
        draw_set_font(global.fn_small);
        draw_set_alpha(median(0,1,moneyShow/5))
        //draw_text(x+220,y-8,"NEURO SHEKELS "+ string(moneyCount));
        draw_set_alpha(1);
        
        if(moneyCount == scr_money_count())
        {
            moneyShow-=0.25;
        }
        else
        {
            if(moneyCount+1&lt;scr_money_count())
            {
                moneyCount+=1;
            }
            else if (moneyCount-1&gt;scr_money_count())
            {
                moneyCount-=1;
            }
            else{moneyCount = scr_money_count();}
        }
    }
    
    if(_gun != NULL &amp;&amp; ds_exists(_gun, ds_type_map))
    {
        charge = _gun[? "pChargeRatio"];
    
        if(o_hoopz.gunPouchShow&gt;0)
        {
            draw_set_font(global.fn_small);
            draw_set_alpha(median(0,1,o_hoopz.gunPouchShow/5))
            draw_text(x+5,y-8, string_upper(_gun[? "pModel"]));
            draw_set_alpha(1);
        }
        
        if(o_hoopz.gunCountShow&gt;0)
        {
            draw_set_font(global.fn_small);
            draw_set_alpha(median(0,1,o_hoopz.gunCountShow/5))
            draw_text(x+320,y-26, string_upper("gun pouch:#" +
                   string(scr_equipment_guns_bag_getSlotsUsed()) + "-" +
                   string(scr_equipment_guns_bag_getSlotsTotal() - scr_equipment_guns_bag_getSlotsUsed())));
            draw_set_alpha(1);
        }
        
        d3d_set_fog(1, gcc, 0, 0);
        var hudspr = assetOrNull(_gun[? "hudIconSprite"], asset_sprite);
        if (hudspr != NULL) {
            scr_hud_gun_draw_ext(hudspr, _gun[? "hudIconFrame"], x + 32, y + 8, 1, 1, _gun[? "col"], o_hoopz.swaptick / 6);
        }

        if(o_hoopz.gunPouchShow&gt;20)
        {
            var _nb,_i,_gn,_in;
            if (scr_equipment_guns_bandolier_equippedFrom()) {
                _nb = scr_equipment_guns_bandolier_getSlotsUsed();
                _in = scr_equipment_guns_bandolier_getSlot(scr_equipment_guns_getCurrentGun());
            } else {
                _nb = 1;
            }
            _sep = 240/_nb;
            for(_i=0; _i&lt;_nb; _i+=1)
            {
                if (scr_equipment_guns_bandolier_equippedFrom()) //Pouch
                { 
                    _gn = scr_equipment_guns_bandolier_getGun(_i);
                    if(_i==_in){_a=1;}else{_a=0.5;} 
                }
                else //Bag
                { 
                    _gn = scr_equipment_guns_bag_drawGun();
                    _a = 1; 
                }
                if(o_hoopz.gunPouchShow&lt;25){_a = _a*((o_hoopz.gunPouchShow-20)/5);}
                d3d_set_fog(1, gcc, 0, 0);
                if (_gn != NULL &amp;&amp; ds_exists(_gn, ds_type_map)) hudspr = assetOrNull(_gn[? "hudIconSprite"], asset_sprite);
                else hudspr = NULL;
                if (hudspr != NULL) {
                    scr_hud_gun_draw_ext(hudspr,_gn[? "hudIconFrame"],x+92-24+_sep*_i,y-24,0.7,0.7,_gn[? "col"],_a);
                }

                
                draw_set_font(global.fn_small);
                draw_set_alpha(_a);
                d3d_set_fog(false, 0, 0, 0);
                draw_text(x+92-24+_sep*_i + 6,y-24 - 10,string_upper(string(_gn[? "pCurAmmo"])));
                draw_set_alpha(1);
            }
        }
    }   
         
    d3d_set_fog(false, 0, 0, 0); 
    
    //charge
    var charge = 0;
    if(_gun != NULL &amp;&amp; ds_exists(_gun, ds_type_map)) {
        charge = _gun[? "pChargeRatio"];
    }
    var charge_spr = s_charge9;
    var charge_img = charge * 9;
    var charge_rem = charge_img - floor(charge_img);
    charge_img = floor(charge_img);
    
    if (charge_img &gt;= 9) {
        if (((chargeSin*3) mod 2) &gt;= 1) charge_img = 10;            
    }
    else {
        if ((chargeSin mod 1) &lt; charge_rem) {
            charge_img += 1;
        }
    }
    draw_sprite(charge_spr, charge_img, x+7, y+5);
    if charge &gt;= 1 then 
        {
        draw_set_alpha(0.25);
        draw_set_color(c_white);
        draw_rectangle(view_xview, view_yview, view_xview + 383, view_yview + 239, true);
        }
}

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Do nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>192,192</point>
  </PhysicsShapePoints>
</object>
