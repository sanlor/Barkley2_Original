<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<extension>
  <name>B2Script</name>
  <version>0.3.0</version>
  <packageID></packageID>
  <ProductID></ProductID>
  <date>14/01/15</date>
  <license>Free to use, also for commercial games.</license>
  <description></description>
  <helpfile></helpfile>
  <androidProps>0</androidProps>
  <iosProps>0</iosProps>
  <installdir></installdir>
  <classname></classname>
  <androidclassname></androidclassname>
  <sourcedir></sourcedir>
  <androidsourcedir></androidsourcedir>
  <macsourcedir></macsourcedir>
  <maclinkerflags></maclinkerflags>
  <maccompilerflags></maccompilerflags>
  <androidinject></androidinject>
  <androidmanifestinject></androidmanifestinject>
  <iosplistinject></iosplistinject>
  <androidactivityinject></androidactivityinject>
  <gradleinject></gradleinject>
  <iosSystemFrameworks/>
  <iosThirdPartyFrameworks/>
  <androidPermissions/>
  <IncludedResources/>
  <files>
    <file>
      <filename>b2script.gml</filename>
      <origname>extensions\b2script.gml</origname>
      <init></init>
      <final></final>
      <kind>2</kind>
      <uncompress>0</uncompress>
      <ConfigOptions>
        <Config name="Default">
          <CopyToMask>17593039687918</CopyToMask>
        </Config>
        <Config name="Develop">
          <CopyToMask>9223372036854775807</CopyToMask>
        </Config>
      </ConfigOptions>
      <ProxyFiles/>
      <functions>
        <function>
          <name>b2script_init</name>
          <externalName>b2script_init</externalName>
          <kind>11</kind>
          <help>b2script_init(constantsFile)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>b2script_load</name>
          <externalName>b2script_load</externalName>
          <kind>11</kind>
          <help>b2script_load(filename)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>b2script_run</name>
          <externalName>b2script_run</externalName>
          <kind>11</kind>
          <help>b2script_run(filename, args...)</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>b2script_failure</name>
          <externalName>b2script_failure</externalName>
          <kind>11</kind>
          <help>b2script_failure(section, line, error)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>executor</name>
          <externalName>executor</externalName>
          <kind>11</kind>
          <help>executor(syntaxTree)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>executor_inner</name>
          <externalName>executor_inner</externalName>
          <kind>11</kind>
          <help>executor_inner(syntaxTree, state)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>executor_script_execute_arglist</name>
          <externalName>executor_script_execute_arglist</externalName>
          <kind>11</kind>
          <help>executor_script_execute_arglist(script, args)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>executor_word</name>
          <externalName>executor_word</externalName>
          <kind>11</kind>
          <help>executor_word(word, state)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>executor_compare</name>
          <externalName>executor_compare</externalName>
          <kind>11</kind>
          <help>executor_compare(val1, val2, comparator)</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>executor_function</name>
          <externalName>executor_function</externalName>
          <kind>11</kind>
          <help>executor_function(functionName, args)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>executor_function_checkArgLength</name>
          <externalName>executor_function_checkArgLength</externalName>
          <kind>11</kind>
          <help>executor_function_checkArgLength(functionName, args, checkLength)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>executor_doArithmeticExpr</name>
          <externalName>executor_doArithmeticExpr</externalName>
          <kind>11</kind>
          <help>executor_doArithmeticExpr(arithExpr)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>executor_variable_get</name>
          <externalName>executor_variable_get</externalName>
          <kind>11</kind>
          <help>executor_variable_get(word)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>executor_variable_set</name>
          <externalName>executor_variable_set</externalName>
          <kind>11</kind>
          <help>executor_variable_set(word, value)</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>grammar_read</name>
          <externalName>grammar_read</externalName>
          <kind>11</kind>
          <help>grammar_read(filename)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>grammar_read_line</name>
          <externalName>grammar_read_line</externalName>
          <kind>11</kind>
          <help>grammar_read_line(line)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>grammar_tokenize</name>
          <externalName>grammar_tokenize</externalName>
          <kind>11</kind>
          <help>grammar_tokenize(string)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>grammar_add_token</name>
          <externalName>grammar_add_token</externalName>
          <kind>11</kind>
          <help>grammar_add_token(tokens, token)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>lexer</name>
          <externalName>lexer</externalName>
          <kind>11</kind>
          <help>lexer(grammar, filename)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>lexer_findToken</name>
          <externalName>lexer_findToken</externalName>
          <kind>11</kind>
          <help>lexer_findToken(grammar, line)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>lexer_stripComments</name>
          <externalName>lexer_stripComments</externalName>
          <kind>11</kind>
          <help>lexer_stripComments(line)</help>
          <returnType>1</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>parser</name>
          <externalName>parser</externalName>
          <kind>11</kind>
          <help>parser(grammar, tokens)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>parser_parse_syntax</name>
          <externalName>parser_parse_syntax</externalName>
          <kind>11</kind>
          <help>parser_parse_syntax(grammar, lexer_tokens, syntax_to_parse, pos)</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>parser_syntax_is_token</name>
          <externalName>parser_syntax_is_token</externalName>
          <kind>11</kind>
          <help>parser_syntax_is_token(grammar, syntax)</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>json_encode_list</name>
          <externalName>json_encode_list</externalName>
          <kind>11</kind>
          <help>json_encode_list(list)</help>
          <returnType>1</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ds_list_add_list</name>
          <externalName>ds_list_add_list</externalName>
          <kind>11</kind>
          <help>ds_list_add_list(list, list_to_add)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>assert</name>
          <externalName>assert</externalName>
          <kind>11</kind>
          <help>assert(statement, error_message)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>string_trim</name>
          <externalName>string_trim</externalName>
          <kind>11</kind>
          <help>string_trim(string)</help>
          <returnType>1</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>string_is_alphanumeric</name>
          <externalName>string_is_alphanumeric</externalName>
          <kind>11</kind>
          <help>string_is_alphanumeric(string)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>string_is_empty</name>
          <externalName>string_is_empty</externalName>
          <kind>11</kind>
          <help>string_is_empty(string)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>string_startswith</name>
          <externalName>string_startswith</externalName>
          <kind>11</kind>
          <help>string_startswith(string, substr)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>string_startswithchar</name>
          <externalName>string_startswithchar</externalName>
          <kind>11</kind>
          <help>string_startswithchar(string, char)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>string_endswithchar</name>
          <externalName>string_endswithchar</externalName>
          <kind>11</kind>
          <help>string_endswithchar(string, char)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>log_debug</name>
          <externalName>log_debug</externalName>
          <kind>11</kind>
          <help>log_debug(message)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>log_warn</name>
          <externalName>log_warn</externalName>
          <kind>11</kind>
          <help>log_warn(message)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>log_error</name>
          <externalName>log_error</externalName>
          <kind>11</kind>
          <help>log_error(error_message)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>char_is_whitespace</name>
          <externalName>char_is_whitespace</externalName>
          <kind>11</kind>
          <help>char_is_whitespace(char)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>char_is_alphanumeric</name>
          <externalName>char_is_alphanumeric</externalName>
          <kind>11</kind>
          <help>char_is_alphanumeric(c)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>char_is_numeric</name>
          <externalName>char_is_numeric</externalName>
          <kind>11</kind>
          <help>char_is_numeric(c)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>executor_doBoolExpr</name>
          <externalName>executor_doBoolExpr</externalName>
          <kind>11</kind>
          <help>executor_doBoolExpr(boolexpr, state)</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>grammar_addConstants</name>
          <externalName>grammar_addConstants</externalName>
          <kind>11</kind>
          <help>grammar_addConstants(grammar, constantsFile)</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>executor_stopExec</name>
          <externalName>executor_stopExec</externalName>
          <kind>11</kind>
          <help>executor_stopExec()</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
      </functions>
      <constants>
        <constant>
          <name>NULL</name>
          <value>-1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>s_port_hoopz</name>
          <value>"s_port_hoopz"</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>s_portrait</name>
          <value>"s_portrait"</value>
          <hidden>0</hidden>
        </constant>
      </constants>
    </file>
    <file>
      <filename>b2script.gr</filename>
      <origname>extensions\b2script.gr</origname>
      <init></init>
      <final></final>
      <kind>4</kind>
      <uncompress>0</uncompress>
      <ConfigOptions>
        <Config name="Default">
          <CopyToMask>9223372036854775807</CopyToMask>
        </Config>
        <Config name="Develop">
          <CopyToMask>9223372036854775807</CopyToMask>
        </Config>
      </ConfigOptions>
      <ProxyFiles/>
      <functions/>
      <constants/>
    </file>
  </files>
</extension>
