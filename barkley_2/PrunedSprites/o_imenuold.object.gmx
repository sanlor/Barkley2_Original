<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_m_frame</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-290000000</depth>
  <persistent>0</persistent>
  <parentName>o_menus</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Pause game during HUD
scr_pause_doPause();

visible = 1;
idvisible = 1;
on = 0;
unfocus = 0;
active = 0;
first = 1;
i_config = 0;
i_timer = 0;

scr_init_keycodes();
scr_init_mousecodes();

with o_ui {
    instance_destroy();
}

// Create the background layers behind the menu.
menu_background[0] = b_layer0; // All green with green boxes.
menu_background[1] = b_layer1; // Matrix 01s.
menu_background[2] = b_layer2; // Matrix 01s.
menu_background[3] = b_layer3; // Outlines of green boxes.
menu_background[4] = b_layer4; // Green crosshair.
menu_background[5] = b_layer5; // 6469617065720(upsidedown9)0(backwards6).
menu_background[6] = b_layer6; // Outlines of green boxes.
menu_background[7] = b_layer7; // 6469617065720(upsidedown9)0(backwards6).

// Set some initial values for the backgrounds.
for(i=0;i&lt;8;i+=1) {
    menu_background_alpha[i] = 0;
    menu_background_x[i] = irandom(room_height);
    menu_background_y[i] = irandom(room_width);
    menu_background_horizontal_speed[i] = 0;
    menu_background_vertical_speed[i] = 0;
}

// Set horizontal and vertical speeds for the backgrounds.
// The green background with boxes moves to the upper left or lower right.
menu_background_horizontal_speed[0] = scr_rand_sign();
menu_background_vertical_speed[0] = menu_background_horizontal_speed[0];
// The first matrix 01s moves horizontally either left or right.
menu_background_horizontal_speed[1] = scr_rand_sign();
// The second matrix 01s moves vertically either up or down.
menu_background_vertical_speed[2] = scr_rand_sign();
// The second boxes move to the upper left or the lower right.
menu_background_vertical_speed[3] = scr_rand_sign();
menu_background_horizontal_speed[3] = menu_background_vertical_speed[3];
// The weird number combo moves horizontally either left or right.
menu_background_horizontal_speed[5] = scr_rand_sign();
// The third boxes move to the upper left or the lower right.
menu_background_vertical_speed[6] = scr_rand_sign();
menu_background_horizontal_speed[6] = menu_background_vertical_speed[6];
// The weird number combo moves horizontally the opposite of the other one.
menu_background_horizontal_speed[7] = menu_background_horizontal_speed[5]*-1;

// Backgrounds 4 and 7 are special when it comes to their x and y.
// The crosshair is dependant on the cursor.
menu_background_x[4] = (o_curs.x div 12);
menu_background_y[4] = (o_curs.y div 12);
// The weird number combos start at the same position.
menu_background_x[7] = menu_background_x[5];
menu_background_y[7] = menu_background_y[5];

// frame
left = 0;
right = 1;
side = right;
pressed = 0;
image_xscale = 0.125;
image_yscale = 0.125;
image_speed = 0;

xo = view_xview+82-side*68;
yo = view_yview+14; 

// side
image_index = side;
// Update the backgrounds based on which side the menu tab is on (left or right).
for(i=0;i&lt;8;i+=1) {
    menu_background_x[i] += scr_math_nsign(side) * 76;
}

// buttons
hover = -1;
b_hover = -1;
db_hover = b_hover;
state = global.menu_state;
global.menu_state = 0;
dstate = state;

for(i=0;i&lt;8;i+=1) {
    arr_boff[i] = 0;
}

kc_i = 0;

//cursor
o_curs.sprite_index = s_wincurs;
dfx = global.cursor_fx;
global.cursor_fx = 0;
dclr = o_curs.image_blend;
o_curs.image_blend = c_white;

dhover = 0;
hoveron = 0;
option_change = -1;
last_option = 0;

delay = 1;

scr_menu_options();

// select
ls = 0;
lx = 1;
ly = 2;
ks = 3;
kx = 4;
ky = 5;

ar_config[0,ls] = 'Up';
ar_config[0,lx] = 6;
ar_config[0,ly] = 53;
ar_config[1,ls] = 'Down';
ar_config[1,lx] = 6;
ar_config[1,ly] = 67;
ar_config[2,ls] = 'Left';
ar_config[2,lx] = 6;
ar_config[2,ly] = 81;
ar_config[3,ls] = 'Right';
ar_config[3,lx] = 6;
ar_config[3,ly] = 94;

ar_config[0,ks] = 'W Key';
ar_config[0,kx] = 69;
ar_config[0,ky] = 53;
ar_config[1,ks] = 'S Key';
ar_config[1,kx] = 69;
ar_config[1,ky] = 67;
ar_config[2,ks] = 'A Key';
ar_config[2,kx] = 69;
ar_config[2,ky] = 81;
ar_config[3,ks] = 'D Key';
ar_config[3,kx] = 69;
ar_config[3,ky] = 94;

ar_config[4,ls] = 'Attack';
ar_config[4,lx] = 6;
ar_config[4,ly] = 133;
ar_config[5,ls] = 'Holster';
ar_config[5,lx] = 6;
ar_config[5,ly] = 147;
ar_config[6,ls] = 'Next';
ar_config[6,lx] = 6;
ar_config[6,ly] = 161;
ar_config[7,ls] = 'Previous';
ar_config[7,lx] = 6;
ar_config[7,ly] = 175;

ar_config[4,ks] = 'Left Click';
ar_config[4,kx] = 69;
ar_config[4,ky] = 133;
ar_config[5,ks] = 'Space,^MMB';
ar_config[5,kx] = 69;
ar_config[5,ky] = 147;
ar_config[6,ks] = 'Wheel Up';
ar_config[6,kx] = 69;
ar_config[6,ky] = 161;
ar_config[7,ks] = 'Wheel Dwn';
ar_config[7,kx] = 69;
ar_config[7,ky] = 175;

ar_config[8,ls] = 'Aim,^Cursor';
ar_config[8,lx] = 148;
ar_config[8,ly] = 53;
ar_config[9,ls] = 'Pause,^Menu';
ar_config[9,lx] = 148;
ar_config[9,ly] = 67;
ar_config[10,ls] = 'Activate,^OK';
ar_config[10,lx] = 148;
ar_config[10,ly] = 81;
ar_config[11,ls] = 'Run,^Roll'; 
ar_config[11,lx] = 148;
ar_config[11,ly] = 95;

ar_config[8,ks] = 'Mouse';
ar_config[8,kx] = 223;
ar_config[8,ky] = 53;
ar_config[9,ks] = 'Esc';
ar_config[9,kx] = 223;
ar_config[9,ky] = 67;
ar_config[10,ks] = 'Left Click';
ar_config[10,kx] = 223;
ar_config[10,ky] = 81;
ar_config[11,ks] = 'Shift';
ar_config[11,kx] = 223;
ar_config[11,ky] = 94;

ar_config[12,ls] = 'Skill';
ar_config[12,lx] = 148;
ar_config[12,ly] = 133;
ar_config[13,ls] = 'Q. Menu';
ar_config[13,lx] = 148;
ar_config[13,ly] = 147;
ar_config[14,ls] = 'Candy';
ar_config[14,lx] = 148;
ar_config[14,ly] = 161;

ar_config[12,ks] = 'Right Click';
ar_config[12,kx] = 223;
ar_config[12,ky] = 133;
ar_config[13,ks] = 'R Key';
ar_config[13,kx] = 223;
ar_config[13,ky] = 147;
ar_config[14,ks] = 'E Key';
ar_config[14,kx] = 223;
ar_config[14,ky] = 161;

ar_ctitle[0,lx] = 5;
ar_ctitle[0,ly] = 59;
ar_ctitle[0,ls] = 'Select/Move';
ar_ctitle[2,lx] = 147;
ar_ctitle[2,ly] = 59;
ar_ctitle[2,ls] = 'Action';
ar_ctitle[1,lx] = 5;
ar_ctitle[1,ly] = 138;
ar_ctitle[1,ls] = 'Weapon';
ar_ctitle[3,lx] = 147;
ar_ctitle[3,ly] = 138;
ar_ctitle[3,ls] = 'Use';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.cursor_fx = dfx;
o_curs.image_blend = dclr;
scr_pause_unPause();

with o_ui {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>unfocus = (instance_exists(o_dropdown) or scr_slider_check());

// Check to see if we want to exit out of the menu.
if on and kc_i {
   image_xscale -= 1/6;
}

// Switch which side of the screen the menu appears on (left or right).
if keyboard_check_pressed(ord("N")) {
    side = !side;
    image_index = side;
    // Add or subtract 76 (size of the menu tab) to the backgrounds.
    for(i=0;i&lt;8;i+=1) {
        menu_background_x[i] += scr_math_nsign(side) * 76;
    }
    with o_slider {
        x -= scr_math_nsign(other.side) * 69;
    }
    with o_dropdown {
        x -= scr_math_nsign(other.side) * 69;
    }
}

// Entering or exiting functionality (growing or shrinking).
if abs(image_xscale) != 1 {
    // Shrink if the menu is on, grow if it is off.
    if on {
        with o_slider {
            instance_destroy();
        }
        image_xscale -= 1/6;
        if image_xscale &lt; 0 {
            image_xscale = 0;
        }
        // If the menu is no longer visible, destroy it.
        if image_xscale == 0 {
            instance_destroy();
        }
    } else {
        image_xscale += 1/6;
        if image_xscale &gt;= 1 {
            image_xscale = 1;
            on = 1;
            visible = 1;
            o_curs.visible = 1;
            o_slider.visible = 1;
        }
    }
    // Scale the y the same as the x.
    image_yscale = image_xscale;
} else {
    // If the menu isn't growing or shrinking, update the backgrounds.
    for(i=0;i&lt;8;i+=1) {
        menu_background_x[i] += menu_background_horizontal_speed[i];
        menu_background_y[i] += menu_background_vertical_speed[i];
        menu_background_alpha[i] = min(1,menu_background_alpha[i]+(irandom(2)*0.05));
    }
}

// Set the crosshair background to be dependant on the cursor.
menu_background_x[4] = (o_curs.x div 12);
menu_background_y[4] = (o_curs.y div 12);

o_curs.sprite_index = s_wincurs;

if !pressed or active {
    hover = -1;
}

if !active {
    for(i=0;i&lt;8;i+=1) {
        if scr_mouse_rect(view_xview+13+side*304,view_yview+32+23*i,view_xview+13+54+side*304,view_yview+32+23*i+15) {
            if !pressed {
                hover = i;
            }
            o_curs.sprite_index = s_winhand;
        }
    }
}
dstate = state;
if pressed = 1 {
    if hover = 0 {
        state = 0;
    }
    if hover = 3 {
        state = 3;
    } else if hover = 5 {
        state = 2;
    } else if hover = 6 {
        game_end();
    } else if hover = 7 {
        kc_i = 1;
    }
}

if state != dstate {
    with o_slider {
        instance_destroy();
    }
}

if pressed &gt; 0 {
    pressed -= 1;
}
if hover &gt; -1 and mouse_check_button_pressed(mb_left) {
    pressed = 6;
}

if first and image_xscale = 1 {
    first = 0;
}

if !unfocus {
    //options root
    if state = 2 {
        scr_menu_options();
    }
    if state = 3 {
        scr_menu_config();
    }
}

// link hover
//if scr_mouse_rect(view_xview+98-side*68,view_yview+20,view_xview+150-side*68,view_yview+62)
//    o_curs.sprite_index = s_winhand;
    
//if mouse_check_button_pressed(mb_left) and hover = -1
//    if scr_mouse_rect(view_xview+98-side*68,view_yview+20,view_xview+150-side*68,view_yview+62)
//        state = !state;
        
delay = max(0,delay-1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Begin by drawing the backgrounds.
for (i=0; i&lt;8; i++) {
    draw_background_tiled_ext(menu_background[i],
                              menu_background_x[i] div 1 + view_xview,
                              menu_background_y[i] div 1 + view_yview,
                              1,
                              1,
                              c_white,
                              menu_background_alpha[i]);
}

x = view_xview+view_wview/2;
y = view_yview+view_hview/2;

fixed = (image_xscale == 1); //abs(image_xscale) and abs(image_yscale);

if fixed and unfocus or active
    scr_menu_dark();

draw_sprite_ext(s_m_frame,2,x,y,image_xscale,image_yscale,0,image_blend,!fixed);
draw_sprite_ext(s_m_frame,image_index,x,y,image_xscale,image_yscale,0,image_blend,image_alpha);

if fixed {
    if hover != -1 {
        draw_sprite(s_m_bhover,hover,view_xview+13+side*301,view_yview+32+23*hover);
        if pressed {
            draw_sprite(s_m_bselected,hover,view_xview+13+side*301,view_yview+32+23*hover);
        }
    }
        
    // disabled buttons
    for(i=0;i&lt;8;i+=1) {
        if arr_boff[i] or active {
            draw_sprite(s_m_bselected,i,view_xview+13+side*301,view_yview+32+23*i);
        }
    }
    
    xo = view_xview+82-side*69;
    yo = view_yview+14;      
        
    //screen placeholder (clean this up)
    if state = 0 {        // status
        draw_background(b_status,xo,yo);
    } else if state = 1 {   // status char sub
        draw_background(b_char,xo,yo);
    } else if state = 2 { // options
        scr_menu_options();
    } else if state = 3 {
        scr_draw_set_def();
        draw_background(b_config,xo,yo);
        if state = dstate {
            draw_set_color(c_white);
            // button hover
            if b_hover != -1 {
                switch b_hover {
                    case 0: 
                        draw_sprite_ext(s_button_hover,0,xo+0,yo+3,1,1,0,c_white,0.75-.5*(b_hover != db_hover)); 
                        break;
                    case 1: 
                        draw_sprite_ext(s_button_hover,1,xo+3,yo+34,1,1,0,c_white,0.75-.5*(b_hover != db_hover)); 
                        break;
                    case 2: 
                        draw_sprite_ext(s_button_hover,2,xo+103,yo+34,1,1,0,c_white,0.75-.5*(b_hover != db_hover)); 
                        break;
                    case 3: 
                        draw_sprite_ext(s_button_hover,2,xo+198,yo+34,1,1,0,c_white,0.75-.5*(b_hover != db_hover)); 
                        break;
                }
            }
            
            c_light = c_white;
            c_dark = c_green_gray;
            if active {
                c_light = c_gray;
                c_dark = c_dkgray;
            }      
           
            // draw labels 
            yo += 22;
            for(i=0;i&lt;15; i+=1) {
                draw_set_color(c_dark);
                draw_text(xo+ar_config[i,lx],yo+ar_config[i,ly],ar_config[i,ls]);
                if !(i = 8 or i = 9) {
                    draw_set_color(c_light);
                }
                draw_text(xo+ar_config[i,kx],yo+ar_config[i,ky],ar_config[i,ks]);
            }
            yo -= 22;
            
            // draw titles   
            draw_set_color(c_light);
            for(i=0;i&lt;4;i+=1) {
                draw_text(xo+ar_ctitle[i,lx],yo+ar_ctitle[i,ly],ar_ctitle[i,ls]);
            }
            
            // draw overlay
            draw_background(b_config_over,xo,yo);
            
            if active {  
                // draw highlighted label
                yo += 22;
                if active {
                    draw_sprite(s_button_hover,4+(i_config&gt;7),xo+ar_config[i_config,lx]-3,yo+ar_config[i_config,ly]-3);
                }
                draw_set_color(c_green_gray);
                draw_text(xo+ar_config[i_config,lx],yo+ar_config[i_config,ly],ar_config[i_config,ls]);
                draw_set_color(c_oyellow);
                if ar_config[i_config,ks] != "Reserved" {
                    draw_set_color(c_ltyellow);
                }
                draw_text(xo+ar_config[i_config,kx],yo+ar_config[i_config,ky],ar_config[i_config,ks]);            
                yo -= 22;

                // draw highlighted title
                t_i = i_config div 4;
                draw_set_color(c_ltgray)
                draw_text(xo+ar_ctitle[t_i,lx],yo+ar_ctitle[t_i,ly],ar_ctitle[t_i,ls]);            
            }
            
            // draw page title
            draw_set_font(global.fn_1);
            if active {
                draw_set_color(c_green_gray);
            }
            draw_text(xo+47,yo+5,'Options');
            draw_set_color(c_ltblue);
            draw_text(xo+108,yo+5,'Control Configuration');          
            
            draw_set_font(global.fn_2);
            if !active {
                draw_set_color(c_white);
            }
            
            // draw buttons
            draw_text(xo+6,yo+38,"Modify");
            draw_text(xo+106,yo+38,"Revert");
            draw_text(xo+201,yo+38,"Defaults");
            
            // draw button hover
            if active {
                draw_set_color(c_white);
                draw_sprite(s_button_hover,3,xo+100,yo+32);
                draw_text(xo+106,yo+38,"Press Esc to Skip");
                draw_set_color(c_oyellow);
                draw_text(xo+144,yo+38,"Esc");    
            }    
            
            draw_set_color(c_white);
        }
    }
}

draw_set_color(c_black);
if o_control.t_winscale or o_control.t_setscale or global.first {
    draw_rectangle(view_xview-2,view_yview-2,view_xview+view_wview+2,view_yview+view_hview+2,0);
    o_curs.visible = 0;
    o_slider.visible = 0;
    global.first = 0;
}
scr_draw_set_def();

with o_slider {
    event_perform(ev_draw, ev_draw);
}
with o_dropdown {
    event_perform(ev_draw, ev_draw)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>192,120</point>
    <point>192,192</point>
  </PhysicsShapePoints>
</object>
