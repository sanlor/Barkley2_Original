<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
////////////////////////////////////////////////////instance_create(0, 0, o3DHud);
//1280, 720);
//window_set_size(960, 540);
dep = 0;
siz = 3; //was 4
global.honeyMain = o3DCamera;

speedToggle = 0;
speedWalk = (1.0 * 60); speedUD = (64 / 1000);
xupn = 0; yupn = 0; zupn = 0;
xtt = 0; ytt = 0; ztt = 0;
xto = 0; yto = 0; zto = 0;
xtr = 0; ytr = 0; ztr = 0;
xsi = 0; ysi = 0; zsi = 0;
pointX = 0; pointY = 0; pointZ = 0;
qx = 0;
qy = 0;
qz = 0;
mobiusLR = 0;
mobiusUD = 0;
mobius = 0;
jones = 0;
move = 0;

xang=270
xangTo=xang
yang=0
zang=0
radius=24

moveDx=0
moveDy=0
moveDz=0

camDx=1
camDy=0
camDz=0


camX = 0; //x;
camY = 256 - (16 * 2) - 2; //y;
camZ = 0;

camXP = camX; camYP = camY; camZP = camZ;

xup=0
yup=0
zup=1

global.billboardDirection = 0;
wid2 = display_get_width() / 2;
hei2 = display_get_height() / 2;
display_mouse_set(wid2, hei2);
draw_set_color(c_white);
d3d_start();
d3d_set_lighting(false); 
///////////////////////////////////////texture = sprite_get_texture(sprite1, 0);
///////////////////////////////////////radius = 16;
z = 34;//256 + 64; //54;//32;
//26 = 2.8
direction = 90;
pitch = 0;
walkSpeed = 5;
room_speed = 999;
//display_reset(8, true);//true);

d3d_set_projection_ext(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16 / 9, .1, 32000); //1, 32000
//d3d_set_culling(true);

if (0)
{
    //window_set_size(1920, 1080); display_reset(8, true);
    //window_set_size(1920 / 2, 1080 / 2);
    //window_set_size(1920, 1080); display_reset(0, false);
}
else
{
    window_set_size(1920 / 1, 1080 / 1); //960, 540
    display_reset(8, false); //2 - //0, 2, 4, or 8 aa
}
//display_reset(0, false);
//texture_set_interpolation(1);
window_set_fullscreen(1);
display_set_gui_size(1920, 1080);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
window_set_caption("PITCH: " + Str(pitch) + " Z: " + Str(z) + "FPS: " + string(fps));
walkSpeed = (speedWalk / 1000) * global.mil; //5 * 60
camXP = camX; camYP = camY; camZP = camZ;
camXD = 0; camYD = 0; camZD = 0;
if (keyboard_check(ord("W")))// || keyboard_check(vk_up)) 
{
    //move_contact_solid(direction,walkSpeed);
    camXD += lengthdir_x(walkSpeed, direction);
    camYD += lengthdir_y(walkSpeed, direction);
    walking = 1;
}
else if (keyboard_check(ord("S")))// || keyboard_check(vk_down)) 
{
    //move_contact_solid(direction-180,walkSpeed);
    camXD += lengthdir_x(walkSpeed, direction - 180);
    camYD += lengthdir_y(walkSpeed, direction - 180);
    walking = 1;
}
if (keyboard_check(ord("A")))// || keyboard_check(vk_left)) 
{
    //move_contact_solid(direction-270,walkSpeed/2);
    camXD += lengthdir_x(walkSpeed, direction + 90);
    camYD += lengthdir_y(walkSpeed, direction + 90);
    walking = 1;
}
else if (keyboard_check(ord("D")))// || keyboard_check(vk_right)) 
{
    //move_contact_solid(direction-90,walkSpeed/2);
    camXD += lengthdir_x(walkSpeed, direction - 90);
    camYD += lengthdir_y(walkSpeed, direction - 90);
    walking = 1;
}

camX += camXD * 0.5;
camY += camYD * 0.5;
x = round(camX * 100) / 100;
y = round(camY * 100) / 100;

//Z
if (keyboard_check(ord("Q")))
{
    z += speedUD * global.mil; //90 / 1000
}
else if (keyboard_check(ord("E")))
{
    z -= speedUD * global.mil;
}
z = Clamp(-(512 * 4), z, 512 * 4); //1 was lowest

direction -= (display_mouse_get_x() -display_get_width()/2)/10;
pitch += (display_mouse_get_y() -display_get_height()/2)/10;
pitch = Clamp(-89, pitch, 89); //was 100
display_mouse_set(display_get_width()/2,display_get_height()/2);

global.billboardDirection = point_direction(x + lengthdir_x(10, direction), y + lengthdir_y(10, direction), x, y);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
d3d_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
fov = global.fov;

xC = 0;
xP = lengthdir_x(xC, direction-90);
yP = lengthdir_y(xC, direction-90);

distance = 1;
xf = x + (cos(degtorad(direction)) * cos(degtorad(pitch)) * distance);
yf = y + ((-sin(degtorad(direction))) * cos(degtorad(pitch)) * distance);
zf = z + (sin(degtorad(pitch - 180)) * distance);
d3d_set_projection_ext(x, y, z, xf, yf, zf, xP, yP, 1, fov, 16 / 9, 1, 16000); //z is y!!!
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// game_end()
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
