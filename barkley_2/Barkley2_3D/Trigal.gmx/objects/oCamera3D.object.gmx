<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
x = 0;
y = 0;
z = 32;
x = room_width / 2;
y = room_height / 2;

dir = 0;
pit = 0;

global.billboardDirection = 0;
speedWalk = (2 * 60); speedUD = (64 / 1000);

wid2 = display_get_width() / 2;
hei2 = display_get_height() / 2;
display_mouse_set(wid2, hei2);
draw_set_color(c_white);
d3d_start();
d3d_set_lighting(false); 
draw_set_alpha_test(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step

window_set_caption("PITCH: " + Str(pit) + " Z: " + Str(z) + "FPS: " + string(fps));
walkSpeed = (speedWalk / 1000) * global.mil; //5 * 60

if (keyboard_check(ord("W")))// || keyboard_check(vk_up)) 
{
    x += lengthdir_x(walkSpeed, dir);
    y += lengthdir_y(walkSpeed, dir);
    walking = 1;
}
else if (keyboard_check(ord("S")))// || keyboard_check(vk_down)) 
{
    x += lengthdir_x(walkSpeed, dir - 180);
    y += lengthdir_y(walkSpeed, dir - 180);
    walking = 1;
}
if (keyboard_check(ord("A")))// || keyboard_check(vk_left)) 
{
    x += lengthdir_x(walkSpeed, dir + 90);
    y += lengthdir_y(walkSpeed, dir + 90);
    walking = 1;
}
else if (keyboard_check(ord("D")))// || keyboard_check(vk_right)) 
{
    x += lengthdir_x(walkSpeed, dir - 90);
    y += lengthdir_y(walkSpeed, dir - 90);
    walking = 1;
}


//Z
if (true) //global.debugMode &gt;= 1)
{
    if (keyboard_check(ord("Q")))
    {
        z += speedUD * global.mil; //90 / 1000
    }
    else if (keyboard_check(ord("E")))
    {
        z -= speedUD * global.mil;
    }
    z = Clp(-(512 * 4), z, 512 * 4); //1 was lowest
}

dir -= (display_mouse_get_x() -display_get_width()/2)/10;
pit += (display_mouse_get_y() -display_get_height()/2)/10;
pit = Clp(-89.00, pit, 89.00); //was 100
display_mouse_set(display_get_width()/2,display_get_height()/2);

global.billboardDirection = point_direction(x + lengthdir_x(10, dir), y + lengthdir_y(10, dir), x, y);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
fov = 75;//16 / 9;
xC = 0;
xP = lengthdir_x(xC, dir-90);
yP = lengthdir_y(xC, dir-90);

distance = 1;
xf = x + (cos(degtorad(dir)) * cos(degtorad(pit)) * distance);
yf = y + ((-sin(degtorad(dir))) * cos(degtorad(pit)) * distance);
zf = z + (sin(degtorad(pit - 180)) * distance);

d3d_set_projection_ext(x, y, z, xf, yf, zf, xP, yP, 1, fov, 16 / 9, 1, 16000);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
