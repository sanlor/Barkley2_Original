<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//The dimensions of the display. Depends on the device.
globalvar display_width, display_height;
//The aspect ratio of the display. Depends on the device.
globalvar aspect_ratio;
//The offset of the device. This is the difference between the widescreen+ bleed area (MAX_WIDTH)
//and the display width. This is necessary in order to draw GUI elements consistently across devices.
globalvar gui_offset;
//The dimensions of the GUI. This will be scaled to the dimensions of the display.
globalvar gui_width, gui_height;

gui_offset = 0;
gui_width = view_wview;
gui_height = view_hview;

timer = 0;
drawprims = false;

simulate("PC Unscaled");

changing = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer++;

if(timer &gt;= 2 &amp;&amp; changing)
{
    //Get the aspect ratio...
    aspect_ratio = display_width/display_height;
    //...and use that aspect ratio to conform the viewport to the screen.
    view_hview = 240;
    view_hport = 240;
    view_wview = view_hview*aspect_ratio;
    view_wport = view_wview;
    
    //The GUI offset will decide how much width to add/remove on either side of the screen. This produces the desired aspect ratio.
    gui_offset = (MAX_WIDTH - view_wview) / 2;
    
    view_xview = gui_offset;
    
    //The GUI size is the view size. This DOES NOT CHANGE across devices.
    display_set_gui_size(view_wview,view_hview);
    
    gui_width = display_get_gui_width();
    gui_height = display_get_gui_height();
    
    window_center();
    
    changing = false;
}

if(keyboard_check_pressed(vk_space))
{
    drawprims = !drawprims;
}

if(keyboard_check_pressed(vk_enter))
{
    if(!window_get_fullscreen())
    {
        window_set_fullscreen(true);
    }
    else
    {
        window_set_fullscreen(false);
        window_center();
    }
}

if(keyboard_check_pressed(ord('1')))
{
    simulate("PC Unscaled");
    timer = 0;
    changing = true;
}

if(keyboard_check_pressed(ord('2')))
{
    simulate("PC 18:10");
    timer = 0;
    changing = true;
}

if(keyboard_check_pressed(ord('3')))
{
    simulate("Nexus S");
    timer = 0;
    changing = true;
}

if(keyboard_check_pressed(ord('4')))
{
    simulate("iPhone 4");
    timer = 0;
    changing = true;
}

if(keyboard_check_pressed(ord('5')))
{
    simulate("iPhone 5");
    timer = 0;
    changing = true;
}

if(keyboard_check_pressed(ord('6')))
{
    simulate("iPad");
    timer = 0;
    changing = true;
}

if(keyboard_check_pressed(ord('7')))
{
    simulate("iPad Retina");
    timer = 0;
    changing = true;
}

if(keyboard_check_pressed(ord('8')))
{
    simulate("Galaxy S3");
    timer = 0;
    changing = true;
}

if(keyboard_check_pressed(ord('9')))
{
    simulate("Galaxy S5");
    timer = 0;
    changing = true;
}

if(keyboard_check_pressed(ord('0')))
{
    simulate("Your System");
    timer = 0;
    changing = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center);
draw_set_font(font0);
draw_set_color(c_red);

draw_rectangle(0, 0, 16, 16, false);
draw_rectangle(0, gui_height - 16, 16, gui_height, false);
draw_rectangle(gui_width - 16, 0, gui_width, 16, false);
draw_rectangle(gui_width - 16, gui_height - 16, gui_width, gui_height, false);

//In order to draw elements on a changing GUI like this, you need to use an offset.
//Just subtract gui_offset from the x position of every element, and all your GUI elements will be consistently drawn across window changes.

if(drawprims)
{
    draw_set_color(c_lime);
    draw_set_alpha(0.5);
    draw_rectangle(111-gui_offset,145,175-gui_offset,208, false);
    draw_circle(216-gui_offset, 177, 32, false);
    draw_triangle(248-gui_offset,145,312-gui_offset,145,280-gui_offset,209,false);
}

draw_set_color(c_white);
draw_set_alpha(1);

draw_text((view_wview / 2), 218, idstring);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
