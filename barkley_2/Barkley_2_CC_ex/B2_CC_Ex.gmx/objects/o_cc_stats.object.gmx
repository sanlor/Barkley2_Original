<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Dont run the event after this for this character //
o_cc_data.event_finished_stats = true;

// Phase setup //
phase[2] = 0;

// Textbox setup //
textbox_written = "";
textbox_goal = "";
textbox_pause = 0;
textbox_position = 0;
textbox_skip = false;  

// Alpha setup //
alpha_event = 1;
alpha_event_goal = 1;
alpha_backdrop = 1;
alpha_textbox_timer = 0
alpha_textbox = 0;
alpha_textbox_goal = 0;

// Other shite //
o_cc_wizard.alpha_goal = 0;
timer_transition = 0;

active = true;
text_active = false;
text_title = "Yippee";
text_info = "Boink";
image_xscale = 0;
image_yscale = 0;
button_race = false;
check_data = false;

// Buttons //
for (i=0; i&lt;7; i+=1;) 
    {
    button_attribute[i] = false;
    button_attribute_value[i] = false;
    if i &lt; 6 then
        {
        attribute_value[i] = 3 + irandom(15);
        attribute_value_memory[i] = attribute_value[i];
        }
    }
for (i=0; i&lt;5; i+=1;) button_page[i] = false;
for (i=0; i&lt;14; i+=1;) button_aptitude[i] = false;
for (i=0; i&lt;5; i+=1;) button_other[i] = false;
for (i=0; i&lt;12; i+=1;)
    {
    button_physical_info[i] = false;
    button_physical_value[i] = false;
    physical_value[i] = irandom(4);
    button_knowledge_info[i] = false;
    button_knowledge_value[i] = false;
    knowledge_value[i] = irandom(4);
    }
for (i=0; i&lt;14; i+=1;)
    {
    button_aptitude_info[i] = false;
    button_aptitude_value[i] = false;
    aptitude_value[i] = irandom(4);
    }

// Misc //
attribute_points = 10;
attribute_points_memory = 10;
attribute_points_physical = 10;
attribute_points_knowledge = 10;
attribute_points_aptitude = 10;
race_id = 0;
page_scroll = 0;
page_id = 1;

// Race benefits //
for (i=0; i&lt;7; i+=1;) 
    {
    for (u=0; u&lt;7; u+=1;) attribute_value_bonus[i, u] = 0;
    }
   
    // Goblinoids //     
    attribute_value_bonus[1, 2] = +2;
    attribute_value_bonus[1, 3] = +2;
    attribute_value_bonus[1, 4] = -2;
    attribute_value_bonus[1, 5] = -2;
    
    // Sludge Elf //
    attribute_value_bonus[2, 0] = +2;
    attribute_value_bonus[2, 4] = +2;
    attribute_value_bonus[2, 2] = -2;
    attribute_value_bonus[2, 5] = -2;
    
    // Demon //
    attribute_value_bonus[3, 4] = +2;
    attribute_value_bonus[3, 5] = +2;
    attribute_value_bonus[3, 2] = +2;
    attribute_value_bonus[3, 3] = -6;
    
    // Mutant //
    attribute_value_bonus[4, 1] = +4;
    attribute_value_bonus[4, 0] = -2;
    attribute_value_bonus[4, 4] = -2;

    // Gorgon //
    attribute_value_bonus[5, 5] = +4;
    attribute_value_bonus[5, 2] = +2;
    attribute_value_bonus[5, 3] = -4;
    attribute_value_bonus[5, 0] = -2;
    
    // Will-o'-the-Wisp //
    attribute_value_bonus[6, 1] = +4;
    attribute_value_bonus[6, 2] = +4;
    attribute_value_bonus[6, 3] = +4;
    attribute_value_bonus[6, 0] = -6;
    attribute_value_bonus[6, 4] = -6;
    
// Other buttons //
other_title[0] = "Change race";
other_title[1] = "Reroll";
other_title[2] = "Save roll";
other_title[3] = "Load roll";

// Attributes, page 01 //
attribute_title[0] = "Strength:";
attribute_title[1] = "Intelligence:";
attribute_title[2] = "Wisdom:";
attribute_title[3] = "Agility:"
attribute_title[4] = "Constitution:";
attribute_title[5] = "Charisma:";
attribute_title[6] = "Points left:"

// Attribute infos page 01 //
attribute_info[0] = "Strength governs the amount of physical damage you're capable of inflicting, the amount of weight you're capable of carrying and your ability to interact with heavy objects.##It also affects the amount of hit points you gain per level and your chance to hit opponents.##It is a vital statistic for all warrior-type characters.";
attribute_info[1] = "Intelligence determines your cognitive abilities and determines both the amount of wizard spells you can cast and their effectiveness.##It also influences your character's perception and certain dialogue choices.##Intelligence is a necessary statistic for all characters, but especially wizards and loremasters.";
attribute_info[2] = "Wisdom is a measurement of your understanding of the universe and their self-awareness.##It affects the number of shaman spells you can learn as well as their power. It also affects certain dialogue choices. Characters with a high wisdom value gain a bonus to experience.##It is a necessary stat for shamans, revelators and religious warriors.";
attribute_info[3] = "Agility governs your ability to dodge attacks and strike opponents. Characters with a high agility are better able to wield daggers, short swords, bows and Eastern weaponry.##It also influences your chances to perform a critical or killing blow.##It is a vital statistic for warriors, thieves, decapitators and ronin.";
attribute_info[4] = "Constitution is a measure of a character's endurance. It allows you to better withstand status ailments like poisoning and stunning and increases the amount of hit points you gain per level.##It is especially useful for characters that will spend the majority of their time on the front lines of the battlefield.";
attribute_info[5] = "Charisma determines a character's skill in interacting with others. Characters with exceptionally high charisma have access to additional dialogue choices and can buy items for a lower price.##It also affects your ability to cause and resist certain mental status effects like charm and hypnosis.##It is an important statistic for enchanters, troubadours and samurai.";

// Race names //
race_title[0] = "Human";;
race_title[1] = "Goblinoid";
race_title[2] = "Sludge Elf";
race_title[3] = "Demon";
race_title[4] = "Mutant";
race_title[5] = "Gorgon";
race_title[6] = "Will-o'-the-Wisp";

// Race describtions //
race_info[0] = "Humans are the most common race in the cosmos and can be found on nearly every planet and moon.##Although they are not particularly gifted in any domain, their exploration of the galaxy has led to contact with many other races, making them competent diplomats. Compared to many other species, they have a fairly short lifespan.##Humans gain additional skill points at each level.";
race_info[1] = "Goblinoid is the catch-all term for the multitude of small, green-skinned species that hail from the Zigguratlands.##They are quick, mischievous and have an overactive imagination that has gotten many a Goblinoid in trouble. Schizophrenia, considered a mental disorder by most other species, is the norm in Goblinoids and often leads to strained interactions with others.##They gain a bonus to wisdom and agility and but suffer from poor charisma and constitution.";
race_info[2] = "Sludge Elves are tall, mystical people that hail from the asteroid system of Bode's Galaxy.##They are an imperialistic race and seek to colonize the cosmos to further the enigmatic goals of their immortal God Emperor. Their emphasis on martial arts and militarism has made them powerful combatants feared throughout the galaxy but has left them with a society that values little the arts and scholarship.##They gain a bonus to strength and constitution but lose points in wisdom and charisma.";
race_info[3] = "Demons are the infernal spawn of Shadrach, Meshach and Abednigo, Omnipotent Warlords of Mount Purgatory.##Although they are few in number, they hold great power and influence across the cosmos. They are eternal seekers of knowledge and scour galaxies for ancient lore, often destroying them in the process.##Demons gain a great bonus to constitution, charisma and wisdom but suffer from poor agility.";
race_info[4] = "Mutants are the warped product of nuclear radiation. There is no standard mutant - they vary in size, appearance and natural capabilities, their mutations ranging from disfiguring and repulsive to mystical and sometimes even beneficial.##They live all across the cosmos and have no society of their own, living in the cities and countries of other races. Because of the wild variance in their appearance, a mutant is just as likely to be a servant as it is a king.##Mutants receive a bonus to intelligence at the expense of their constitution and strength.";
race_info[5] = "Exclusively female, Gorgons are known for their ability to turn those that look into their eyes to stone, as well as their deceptive charm.##They have the upper bodies of voluptuous human females and the lower bodies of a snake and must wear specially-crafted equipment because of this.##They gain a bonus to charisma and wisdom but lose points in strength and agility.##They have the unique ability to petrify others twice a day but can only wear armor that fits their irregular bodies."
race_info[6] = "Will-o'-the-Wisps are hovering, incorporeal orbs of light caught somewhere between this dimension and another. Inhumanoid, they are able to communicate telepathically in a universal psionic language understood by sentient creatures.##They cannot carry any items or use equipment because they are incorporeal and can only be damaged through magic, psychic or high technological means.##They gain substantial bonuses to intelligence, wisdom and agility but suffer greatly in strength and constitution.";

// Physical skills //
skill_physical[0, 0] = "Climbing";
skill_physical[0, 1] = "Climbing is a measure of how well you are able to scale vertical surfaces.##Governed by agility."
skill_physical[1, 0] = "Rowing";
skill_physical[1, 1] = "Rowing is your ability to consistently and powerfully maneuver oars in the water.##Governed by constitution."
skill_physical[2, 0] = "Swimming";
skill_physical[2, 1] = "Swimming determines the length of time and distance you can travel in water without a ship.##Governed by constitution."
skill_physical[3, 0] = "Yoga"
skill_physical[3, 1] = "Yoga is your knowledge of the metaphysical and ritual series of exercises that connect mind and body.##Governed by wisdom."
skill_physical[4, 0] = "Brawling"
skill_physical[4, 1] = "Brawling is the measure of your ability to fight with weapons or gloves.##Governed by strength.";
skill_physical[5, 0] = "Tumbling"
skill_physical[5, 1] = "Tumbling is a character's ability to perform gymnastic and acrobatic feats.##Governed by agility.";
skill_physical[6, 0] = "Melee"
skill_physical[6, 1] = "Melee is your ability to fight with close-range weapons like swords, staff, axes and stun rods. It does not affect your ability to fight unarmed.##Governed by strength.";
skill_physical[7, 0] = "Long Range"
skill_physical[7, 1] = "Long Range determines your ability to fight with projectile weapons like gun's, bows, and psychic dischargers. It does not affect your ability to use projectile spells.##Governed by agility.";
skill_physical[8, 0] = "Dodging"
skill_physical[8, 1] = "Dodging is your ability to avoid enemy attacks, both short and long-range. It does not influence your chance to avoid enemy spells.##Governed by agility.";
skill_physical[9, 0] = "Critical Hit"
skill_physical[9, 1] = "Critical Hit is a character's chance to inflict a critical attack, which deals additional damage based on the type of weapon you're using. It also influences assassination classes' chance to inflict a killing blow.##Governed by agility.";
skill_physical[10, 0] = "Karate"
skill_physical[10, 1] = "Karate is your knowledge of Eastern martial arts. A higher karate skill gives access to more advanced unarmed abilities and also adds to your speed when using Eastern melee weapons.##Governed by agility."
skill_physical[11, 0] = "Tackling"
skill_physical[11, 1] = "Tackling is a character's ability to disable an enemy in unarmed combat. A higher tackle skill gives you more advanced disabling abilities in combat.##Governed by strength."

// Knowledge skills //
skill_knowledge[0, 0] = "Vidcon"
skill_knowledge[0, 1] = "The vidcon skill represents a character's knowledge of and ability to perform well in vidcons, or console video games.##Governed by intelligence."
skill_knowledge[1, 0] = "Herb Lore"
skill_knowledge[1, 1] = "Herb Lore determines your knowledge of medicinal herbs that can be used to treat wounds, disease and poison. A character with high herb lore is better able to find and identify various herbs.##Governed by wisdom."
skill_knowledge[2, 0] = "History"
skill_knowledge[2, 1] = "History is your knowledge of past events, both local and intergalactic.##Governed by intelligence."
skill_knowledge[3, 0] = "Geography"
skill_knowledge[3, 1] = "Geography is your knowledge of both local and planetary landmarks and scientific topography.##Governed by intelligence."
skill_knowledge[4, 0] = "Geology"
skill_knowledge[4, 1] = "Geology is a character's knowledge of the physical and chemical dynamics of rocks and planetary surfaces.##Governed by intelligence."
skill_knowledge[5, 0] = "Sports"
skill_knowledge[5, 1] = "Sports determines both your knowledge of sporting rules and your ability to perform in them.##Governed by strength."
skill_knowledge[6, 0] = "Cyberlore"
skill_knowledge[6, 1] = "Cyberlore is a character's ability to use computers. Used in decoding, encrypting, cybersleuthing and data mining.##Governed by intelligence."
skill_knowledge[7, 0] = "Tactics"
skill_knowledge[7, 1] = "Tactics is a measure of a character's understanding of combat strategy, both large and small scale.##Governed by intelligence."
skill_knowledge[8, 0] = "Religion"
skill_knowledge[8, 1] = "Religion is your knowledge and understanding of religious customs, doctrines and dynamics.##Governed by wisdom."
skill_knowledge[9, 0] = "Etiquette"
skill_knowledge[9, 1] = "Etiquette is a character's knowledge of and ability to participate in the social customs and conventions of the upper classes.##Governed by charisma."
skill_knowledge[10, 0] = "Candy"
skill_knowledge[10, 1] = "Candy determines a character's knowledge of candy types, tastes and history. It determines your ability to correctly identify and manipulate various candies.##Governed by intelligence."
skill_knowledge[11, 0] = "Dwarflore"
skill_knowledge[11, 1] = "Dwarflore is your knowledge of Dwarf culture, history, customs and physiology. It aids in your ability to interact with Dwarfs of all types.##Governed by wisdom."

// Aptitude skills //
skill_aptitude[0, 0] = "Haggling"
skill_aptitude[0, 1] = "Haggling is your ability to barter, which increases selling prices and decreases buying prices.##Governed by charisma."
skill_aptitude[1, 0] = "Hacking"
skill_aptitude[1, 1] = "Hacking is a character's ability to manipulate analog and digital computers in ways they were not intended.##Governed by intelligence."
skill_aptitude[2, 0] = "Lockpicking"
skill_aptitude[2, 1] = "Lockpicking is a character's skill in opening locks without the proper key.##Governed by agility."
skill_aptitude[3, 0] = "Dunking"
skill_aptitude[3, 1] = "Dunking is a character's knowledge of and ability to perform dunks and dunk-based maneuvers with a basketball.##Governed by wisdom."
skill_aptitude[4, 0] = "Seduction"
skill_aptitude[4, 1] = "Seduction is a measure of your skill in sexually enticing others.##Governed by charisma."
skill_aptitude[5, 0] = "Jokecraft"
skill_aptitude[5, 1] = "Jokecraft is your ability to detect, comprehend and formulate humor.##Governed by charisma."
skill_aptitude[6, 0] = "Persuasion"
skill_aptitude[6, 1] = "Persuasion is your ability to convince others to believe or act upon your point of view.##Governed by charisma."
skill_aptitude[7, 0] = "Disguise"
skill_aptitude[7, 1] = "Disguise determines a character's skill in impersonation and pretending to be someone else.##Governed by charisma."
skill_aptitude[8, 0] = "Medicine"
skill_aptitude[8, 1] = "Medicine is your knowledge, both scientific and traditional, of remedies that treat illness and disease.##Governed by intelligence."
skill_aptitude[9, 0] = "Stealth"
skill_aptitude[9, 1] = "Stealth is the measure of your ability to hide and move undetected.##Governed by agility."
skill_aptitude[10, 0] = "Blacksmithing"
skill_aptitude[10, 1] = "Blacksmithing is a character's knowledge of and ability to perform the craft of weapon and armor creation.##Governed by strength."
skill_aptitude[11, 0] = "Arts&amp;Crafts"
skill_aptitude[11, 1] = "Arts&amp;Crafts is a character's knowledge of and ability to perform visual art such as ceramics, sculpting, drawing and finger painting.##Governed by wisdom."

// Set bonuses //
event_user(0);

// skill_aptitude[4, 0] = "Cooking"
// skill_aptitude[4, 1] = "Cooking is a measure of your understanding of food preparation. A high cooking skill allows you to cook food that provides more stamina. Governed by wisdom."

// skill_aptitude[6, 0] = "Scouting"
// skill_aptitude[6, 1] = "Scouting is a character's ability to extract useful information performing reconnaissance in the field. Governed by agility."

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Active //
if active = true then
    {
    if text_active = false then
        {
        for (i=0; i&lt;5; i+=1;) button_page[i] = scr_cc_button_xy(26 + i * 32, 51 + i * 32, 194, 217);
        
        if page_id = 1 then
            {
            for (i=0; i&lt;6; i+=1;) // 7?
                {
                button_attribute[i] = scr_cc_button_xy(198, 293, 28 + i * 16, 38 + i * 16);
                button_attribute_value[i] = scr_cc_button_xy(307, 357, 28 + i * 16, 38 + i * 16);
                }
            for (i=0; i&lt;5; i+=1;) button_other[i] = scr_cc_button_xy(198, 293, 148 + i * 16, 160 + i * 16);
            button_race = scr_cc_button_xy(26, 179, 158, 185);
            }
        
        if page_id = 2 then
            {
            for (i=0; i&lt;12; i+=1;) 
                {
                button_physical_info[i] = scr_cc_button_xy(198, 293, 20 + i * 16, 30 + i * 16);
                button_physical_value[i] = scr_cc_button_xy(307, 357, 20 + i * 16, 30 + i * 16);
                }
            }
        else if page_id = 3 then
            {
            for (i=0; i&lt;12; i+=1;) 
                {
                button_knowledge_info[i] = scr_cc_button_xy(198, 293, 20 + i * 16, 30 + i * 16);
                button_knowledge_value[i] = scr_cc_button_xy(307, 357, 20 + i * 16, 30 + i * 16);
                }
            }
        else if page_id = 4 then
            {
            for (i=0; i&lt;12; i+=1;) 
                {
                button_aptitude_info[i] = scr_cc_button_xy(198, 293, 20 + i * 16, 30 + i * 16);
                button_aptitude_value[i] = scr_cc_button_xy(307, 357, 20 + i * 16, 30 + i * 16);
                }
            }
        }
    
    // BG //
    if text_active = true then
        {
        if image_xscale &lt; 1 then image_xscale += 0.05;
        if image_yscale &lt; 1 then image_yscale += 0.05;
        }
    else
        {
        alpha_textbox_goal = 0;
        if image_xscale &gt; 0 then image_xscale -= 0.05;
        if image_yscale &gt; 0 then image_yscale -= 0.05;
        }
    
    // Left click //
    if mouse_check_button_pressed(mb_left) then // BONG if scr_input_check_pressed(KEYID_ACTION, PLAYER1) then
        {
        // Race description //
        if page_id = 1 and button_race = true then
            {
            if text_active = false then
                {
                text_active = true;
                text_title = race_title[race_id];
                text_info = race_info[race_id];
                alpha_textbox_timer = 20;
                alpha_textbox_goal = 1;
                }
            }
        
        // Change page //
        for (i=0; i&lt;5; i+=1;) 
            {
            if button_page[i] = true then page_id = i;
            
            // Exit event //
            if page_id = 0 and phase[2] = 0 then 
                {
                alpha_event_goal = 0;
                active = false;
                timer_transition = 15;
                phase[2] = 25;
                }
            }
        
        // Add points to things or get info //
        if page_id = 2 then
            {
            for (i=0; i&lt;12; i+=1;) 
                {
                if button_physical_value[i] = true then 
                    {
                    if attribute_points_physical &gt; 0 then
                        {
                        attribute_points_physical -= 1;
                        physical_value[i] += 1;
                        }
                    }
                else if button_physical_info[i] = true and text_active = false then
                    {
                    text_active = true;
                    text_title = skill_physical[i, 0];
                    text_info = skill_physical[i, 1];
                    alpha_textbox_timer = 20;
                    alpha_textbox_goal = 1;
                    }
                }
            }
        else if page_id = 3 then
            {
            for (i=0; i&lt;12; i+=1;) 
                {
                if button_knowledge_value[i] = true then 
                    {
                    if attribute_points_knowledge &gt; 0 then
                        {
                        attribute_points_knowledge -= 1;
                        knowledge_value[i] += 1;
                        }
                    }
                else if button_knowledge_info[i] = true and text_active = false then
                    {
                    text_active = true;
                    text_title = skill_knowledge[i, 0];
                    text_info = skill_knowledge[i, 1];
                    alpha_textbox_timer = 20;
                    alpha_textbox_goal = 1;
                    }
                }
            }
        else if page_id = 4 then
            {
            for (i=0; i&lt;12; i+=1;) 
                {
                if button_aptitude_value[i] = true then 
                    {
                    if attribute_points_aptitude &gt; 0 then
                        {
                        attribute_points_aptitude -= 1;
                        aptitude_value[i] += 1;
                        }
                    }
                else if button_aptitude_info[i] = true and text_active = false then
                    {
                    text_active = true;
                    text_title = skill_aptitude[i, 0];
                    text_info = skill_aptitude[i, 1];
                    alpha_textbox_timer = 20;
                    alpha_textbox_goal = 1;
                    }
                }
            }
            
        // Attributes //
        for (i=0; i&lt;7; i+=1;) 
            {
            if button_attribute[i] = true and text_active = false then 
                {
                text_active = true;
                text_title = attribute_title[i];
                text_info = attribute_info[i];
                alpha_textbox_timer = 20;
                alpha_textbox_goal = 1;
                }
            }
            
        // Stats //
        for (i=0; i&lt;6; i+=1;) 
            {
            if button_attribute_value[i] = true then 
                {
                if attribute_points &gt; 0 then
                    {
                    attribute_points -= 1;
                    attribute_value[i] += 1;
                    event_user(0);
                    }
                }
            }
            
        // Change race //
        if button_other[0] = true then
            {
            if race_id &lt; 6 then race_id += 1;
            else race_id = 0;
            }
            
        // Reroll //
        if button_other[1] = true then
            {
            for (i=0; i&lt;6; i+=1;) attribute_value[i] = 3 + irandom(15);
            attribute_points = 10;
            event_user(0);
            }
            
        // Save roll //
        if button_other[2] = true then
            {
            for (i=0; i&lt;6; i+=1;) attribute_value_memory[i] = attribute_value[i];
            attribute_points_memory = attribute_points;
            }
            
        // Load roll //
        if button_other[3] = true then
            {
            for (i=0; i&lt;6; i+=1;) attribute_value[i] = attribute_value_memory[i];
            attribute_points = attribute_points_memory;
            event_user(0);
            }
        }
        
    // Right click //
    if mouse_check_button_pressed(mb_right) then // BONG if scr_input_check_pressed(KEYID_HOLSTER, PLAYER1) then
        {        
        // Remove info box //
        text_active = false;
                
        // Stats //
        for (i=0; i&lt;6; i+=1;) 
            {
            if button_attribute_value[i] = true then 
                {
                if attribute_value[i] &gt; 0 then
                    {
                    attribute_points += 1;
                    attribute_value[i] -= 1;
                    event_user(0);
                    }
                }
            }
            
        // Take points from things //
        if page_id = 2 then
            {
            for (i=0; i&lt;12; i+=1;) 
                {
                if button_physical_value[i] = true then 
                    {
                    if physical_value[i] &gt; 0 then
                        {
                        attribute_points_physical += 1;
                        physical_value[i] -= 1;
                        }
                    }
                }
            }
        else if page_id = 3 then
            {
            for (i=0; i&lt;12; i+=1;) 
                {
                if button_knowledge_value[i] = true then 
                    {
                    if knowledge_value[i] &gt; 0 then
                        {
                        attribute_points_knowledge += 1;
                        knowledge_value[i] -= 1;
                        }
                    }
                }
            }
        else if page_id = 4 then
            {
            for (i=0; i&lt;12; i+=1;) 
                {
                if button_aptitude_value[i] = true then 
                    {
                    if aptitude_value[i] &gt; 0 then
                        {
                        attribute_points_aptitude += 1;
                        aptitude_value[i] -= 1;
                        }
                    }
                }
            }
        }
    }  
    
// Transition //
if timer_transition &gt; 0 then
    {
    // Tick down //
    timer_transition -= dt();
    
     // Event //
     if timer_transition &lt;= 0 then instance_create(0, 0, o_cc_transition);
     }
    
// End of this event //
if phase[2] &gt; 0 then
    {
    // Tick down //
    phase[2] -= 1;
    
    // Check the data //
    if check_data = false then event_user(1);
    
    // End //
    if phase[2] = 0 then
        {
        instance_create(x, y, o_cc_placenta);
        instance_destroy();
        }
    }

// Alpha //
if alpha_textbox_timer = 0 then
    {
    if alpha_textbox &lt; alpha_textbox_goal then alpha_textbox += 0.25;
    if alpha_textbox &gt; alpha_textbox_goal then alpha_textbox -= 0.25;
    }
else alpha_textbox_timer -= 1;

if alpha_event &lt; alpha_event_goal then alpha_event += 0.025;
if alpha_event &gt; alpha_event_goal then alpha_event -= 0.025;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Character Data //
o_cc_data.character_stats_race = race_id;

// Only do this once //
check_data = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Bonus points //
bonus_physical[4] = floor((attribute_value[0] + attribute_value_bonus[race_id, 0]) * 0.5 - 4);
bonus_physical[6] = floor((attribute_value[0] + attribute_value_bonus[race_id, 0]) * 0.5 - 4);
bonus_physical[11] = floor((attribute_value[0] + attribute_value_bonus[race_id, 0]) * 0.5 - 4);
bonus_knowledge[5] = floor((attribute_value[0] + attribute_value_bonus[race_id, 0]) * 0.5 - 4);
bonus_aptitude[10] = floor((attribute_value[0] + attribute_value_bonus[race_id, 0]) * 0.5 - 4);

bonus_knowledge[0] = floor((attribute_value[1] + attribute_value_bonus[race_id, 1]) * 0.5 - 4);
bonus_knowledge[2] = floor((attribute_value[1] + attribute_value_bonus[race_id, 1]) * 0.5 - 4);
bonus_knowledge[3] = floor((attribute_value[1] + attribute_value_bonus[race_id, 1]) * 0.5 - 4);
bonus_knowledge[4] = floor((attribute_value[1] + attribute_value_bonus[race_id, 1]) * 0.5 - 4);
bonus_knowledge[6] = floor((attribute_value[1] + attribute_value_bonus[race_id, 1]) * 0.5 - 4);
bonus_knowledge[7] = floor((attribute_value[1] + attribute_value_bonus[race_id, 1]) * 0.5 - 4);
bonus_knowledge[10] = floor((attribute_value[1] + attribute_value_bonus[race_id, 1]) * 0.5 - 4);
bonus_aptitude[1] = floor((attribute_value[1] + attribute_value_bonus[race_id, 1]) * 0.5 - 4);
bonus_aptitude[8] = floor((attribute_value[1] + attribute_value_bonus[race_id, 1]) * 0.5 - 4);

bonus_knowledge[1] = floor((attribute_value[2] + attribute_value_bonus[race_id, 2]) * 0.5 - 4);
bonus_knowledge[8] = floor((attribute_value[2] + attribute_value_bonus[race_id, 2]) * 0.5 - 4);
bonus_knowledge[11] = floor((attribute_value[2] + attribute_value_bonus[race_id, 2]) * 0.5 - 4);
bonus_aptitude[3] = floor((attribute_value[2] + attribute_value_bonus[race_id, 2]) * 0.5 - 4);
bonus_physical[3] = floor((attribute_value[2] + attribute_value_bonus[race_id, 2]) * 0.5 - 4);
bonus_aptitude[11] = floor((attribute_value[2] + attribute_value_bonus[race_id, 2]) * 0.5 - 4);

bonus_physical[0] = floor((attribute_value[3] + attribute_value_bonus[race_id, 3]) * 0.5 - 4);
bonus_physical[5] = floor((attribute_value[3] + attribute_value_bonus[race_id, 3]) * 0.5 - 4);
bonus_physical[7] = floor((attribute_value[3] + attribute_value_bonus[race_id, 3]) * 0.5 - 4);
bonus_physical[8] = floor((attribute_value[3] + attribute_value_bonus[race_id, 3]) * 0.5 - 4);
bonus_physical[9] = floor((attribute_value[3] + attribute_value_bonus[race_id, 3]) * 0.5 - 4);
bonus_physical[10] = floor((attribute_value[3] + attribute_value_bonus[race_id, 3]) * 0.5 - 4);
bonus_aptitude[9] = floor((attribute_value[3] + attribute_value_bonus[race_id, 3]) * 0.5 - 4);
bonus_aptitude[2] = floor((attribute_value[3] + attribute_value_bonus[race_id, 3]) * 0.5 - 4);

bonus_physical[1] = floor((attribute_value[4] + attribute_value_bonus[race_id, 4]) * 0.5 - 4);
bonus_physical[2] = floor((attribute_value[4] + attribute_value_bonus[race_id, 4]) * 0.5 - 4);

bonus_knowledge[9] = floor((attribute_value[5] + attribute_value_bonus[race_id, 5]) * 0.5 - 4);
bonus_aptitude[0] = floor((attribute_value[5] + attribute_value_bonus[race_id, 5]) * 0.5 - 4);
bonus_aptitude[4] = floor((attribute_value[5] + attribute_value_bonus[race_id, 5]) * 0.5 - 4);
bonus_aptitude[5] = floor((attribute_value[5] + attribute_value_bonus[race_id, 5]) * 0.5 - 4);
bonus_aptitude[6] = floor((attribute_value[5] + attribute_value_bonus[race_id, 5]) * 0.5 - 4);
bonus_aptitude[7] =floor((attribute_value[5] + attribute_value_bonus[race_id, 5]) * 0.5 - 4);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// BG //
draw_sprite_ext(s_cc_stats_backdrop, 0, 192, 120, 1, 1, 0, c_white, alpha_backdrop);

// Statroll page //
if page_id &lt;= 1 then
    {
    // Draw backdrop //
    draw_sprite_ext(s_cc_stats_frames_1, 0, 192, 120, 1, 1, 0, c_white, alpha_event);
    
    // Draw portraits //
    draw_sprite_ext(s_cc_stats_race_portrait, race_id, 101, 96, 1, 1, 0, c_white, alpha_event);
    draw_set_font(global.fn_1);
    draw_set_alpha(alpha_event);
    draw_set_halign(fa_center);
    if button_race = true then draw_set_color(make_color_rgb(140, 255, 110));
    else draw_set_color(c_white);
    draw_text(101, 162, race_title[race_id]);
    draw_set_font(global.fn_2);
    
    // Draw attributes //
    draw_set_halign(fa_left);
    draw_set_alpha(alpha_event);
    for (i=0; i&lt;6; i+=1;) 
        {
        if button_attribute[i] = true then draw_set_color(make_color_rgb(140, 255, 110)); 
        else draw_set_color(c_white);
        draw_text(202, 28 + i * 16, attribute_title[i]);
        
        if button_attribute_value[i] = true then draw_set_color(make_color_rgb(40, 255, 255)); 
        else draw_set_color(make_color_rgb(140, 140, 200));
        draw_text(312, 28 + i * 16, attribute_value[i]);
        
        // Race bonuses //
        draw_set_color(make_color_rgb(170, 250, 170)); 
        if attribute_value_bonus[race_id, i] &gt; 0 then draw_text(334, 28 + i * 16, "+"+string(attribute_value_bonus[race_id, i]));
        else if attribute_value_bonus[race_id, i] &lt; 0 then
            {
            draw_set_color(make_color_rgb(250, 170, 170)); 
            draw_text(334, 28 + i * 16, string(attribute_value_bonus[race_id, i]));
            }
        }
        
    // Points left //
    draw_set_color(make_color_rgb(255, 80, 80));
    draw_text(202, 124, "Points left");
        
    // Skill points //
    if attribute_points &gt; 0 then draw_set_color(make_color_rgb(60, 250, 10));
    else draw_set_color(make_color_rgb(240, 30, 70));
    draw_text(312, 124, attribute_points);
    
    // Other things //
    for (i=0; i&lt;4; i+=1;)
        {
        if button_other[i] = true then draw_set_color(make_color_rgb(255, 40, 10));
        else draw_set_color(make_color_rgb(220, 190, 190));
        draw_text(202, 154 + i * 16, other_title[i]);
        }
    }
else if page_id = 2 then
    {
    // Draw backdrop //
    draw_sprite_ext(s_cc_stats_frames_2, 0, 192, 120, 1, 1, 0, c_white, alpha_event);
    draw_set_alpha(alpha_event);
    
    // Draw title ((
    draw_set_font(global.fn_1);
    draw_set_alpha(alpha_event);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_text(101, 162, "Physical");
    draw_set_font(global.fn_2);
    draw_set_halign(fa_left);
    
    // Physical skills //
    for (i=0; i&lt;12; i+=1;) 
        {
        if button_physical_info[i] = true then draw_set_color(make_color_rgb(140, 255, 110)); 
        else draw_set_color(c_white);
        draw_text(202, 20 + i * 16, skill_physical[i, 0]);
        
        if button_physical_value[i] = true then draw_set_color(make_color_rgb(180, 180, 255)); 
        else draw_set_color(make_color_rgb(140, 140, 200));
        draw_text(316, 20 + i * 16, physical_value[i]);
        
        // Bonuses //
        draw_set_color(make_color_rgb(170, 250, 170)); 
        if bonus_physical[i] &gt; 0 then draw_text(338, 20 + i * 16, "+"+string(bonus_physical[i]));
        else if bonus_physical[i] &lt; 0 then
            {
            draw_set_color(make_color_rgb(250, 170, 170)); 
            draw_text(338, 20 + i * 16, bonus_physical[i]);
            }
        }
        
    // Points left //
    draw_set_color(make_color_rgb(255, 80, 80));
    draw_text(202, 212, "Points left");
    
    // Skill points //
    if attribute_points_physical &gt; 0 then draw_set_color(make_color_rgb(60, 250, 10));
    else draw_set_color(make_color_rgb(240, 30, 70));
    draw_text(316, 212, attribute_points_physical);
    }
else if page_id = 3 then
    {
    // Draw backdrop //
    draw_sprite_ext(s_cc_stats_frames_2, 0, 192, 120, 1, 1, 0, c_white, alpha_event);
    draw_set_alpha(alpha_event);
    
    // Draw title ((
    draw_set_font(global.fn_1);
    draw_set_alpha(alpha_event);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_text(101, 162, "Knowledge");
    draw_set_font(global.fn_2);
    draw_set_halign(fa_left);
    
    // Knowledge skills //
    for (i=0; i&lt;12; i+=1;) 
        {
        if button_knowledge_info[i] = true then draw_set_color(make_color_rgb(140, 255, 110));  
        else draw_set_color(c_white);
        draw_text(202, 20 + i * 16, skill_knowledge[i, 0]);
    
        if button_knowledge_value[i] = true then draw_set_color(make_color_rgb(180, 180, 255)); 
        else draw_set_color(make_color_rgb(140, 140, 200));
        draw_text(316, 20 + i * 16, knowledge_value[i]);
        
        // Bonuses //
        draw_set_color(make_color_rgb(170, 250, 170)); 
        if bonus_knowledge[i] &gt; 0 then draw_text(338, 20 + i * 16, "+"+string(bonus_knowledge[i]));
        else if bonus_knowledge[i] &lt; 0 then
            {
            draw_set_color(make_color_rgb(250, 170, 170)); 
            draw_text(338, 20 + i * 16, bonus_knowledge[i]);
            }
        }
        
    // Points left //
    draw_set_color(make_color_rgb(255, 80, 80));
    draw_text(202, 212, "Points left");
    
    // Skill points //
    if attribute_points_knowledge &gt; 0 then draw_set_color(make_color_rgb(60, 250, 10));
    else draw_set_color(make_color_rgb(240, 30, 70));
    draw_text(316, 212, attribute_points_knowledge);
    }
else if page_id = 4 then
    {
    // Draw backdrop //
    draw_sprite_ext(s_cc_stats_frames_2, 0, 192, 120, 1, 1, 0, c_white, alpha_event);
    draw_set_alpha(alpha_event);
    
    // Draw title ((
    draw_set_font(global.fn_1);
    draw_set_alpha(alpha_event);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_text(101, 162, "Aptitude");
    draw_set_font(global.fn_2);
    draw_set_halign(fa_left);
    
    // Aptitude skills //
    for (i=0; i&lt;12; i+=1;) 
        {
        if button_aptitude_info[i] = true then draw_set_color(make_color_rgb(140, 255, 110)); 
        else draw_set_color(c_white);
        draw_text(202, 20 + i * 16, skill_aptitude[i, 0]);
        
        if button_aptitude_value[i] = true then draw_set_color(make_color_rgb(180, 180, 255)); 
        else draw_set_color(make_color_rgb(140, 140, 200));
        draw_text(316, 20 + i * 16, aptitude_value[i]);
        
        // Bonuses //
        draw_set_color(make_color_rgb(170, 250, 170)); 
        if bonus_aptitude[i] &gt; 0 then draw_text(338, 20 + i * 16, "+"+string(bonus_aptitude[i]));
        else if bonus_aptitude[i] &lt; 0 then
            {
            draw_set_color(make_color_rgb(250, 170, 170)); 
            draw_text(338, 20 + i * 16, bonus_aptitude[i]);
            }
        }
        
        // Points left //
    draw_set_color(make_color_rgb(255, 80, 80));
    draw_text(202, 212, "Points left");
    
    // Skill points //
    if attribute_points_aptitude &gt; 0 then draw_set_color(make_color_rgb(60, 250, 10));
    else draw_set_color(make_color_rgb(240, 30, 70));
    draw_text(316, 212, attribute_points_aptitude);
    }
        
// Page border thing //
for (i=0; i&lt;5; i+=1;)
    {
    if page_id = i then draw_sprite_ext(s_cc_stats_button_border, 0, 39 + i * 32, 206, 1, 1, 0, c_white, alpha_event * 0.75);
    else if button_page[i] = true then draw_sprite_ext(s_cc_stats_button_border, 0, 39 + i * 32, 206, 1, 1, 0, c_white, alpha_event * 0.25);
    }
    
// Message box //
draw_sprite_ext(s_cc_stats_messagebox, 0, 192, 120, image_xscale, image_yscale, 0, c_white, 1);
draw_set_alpha(alpha_textbox);
draw_set_halign(fa_left);
draw_set_font(global.fn_2);
draw_set_color(c_red);
draw_text(32, 22, text_title);
draw_set_color(c_white);
draw_text_ext(32, 38, text_info, -1, 320);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
