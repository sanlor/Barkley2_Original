<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //
alpha = 0;
alpha_goal = 1;
pool_member_selected = 0;
pool_member_hover = -1;
kill_mode = false;
active = false;

for (i=0; i&lt;30; i+=1;) 
    {
    button_hover_pool_member[i] = false;
    }
    
for (i=0; i&lt;30; i+=1;)
    {
    pool_member_portrait[i] = s_cc_party_pool;
    pool_member_name[i] = "Empty";
    pool_member_race[i] = "";
    pool_member_class[i] = "";
    pool_member_genders[i, 0] = false; 
    pool_member_genders[i, 1] = false;  
    pool_member_genders[i, 2] = false;  
    pool_member_genders[i, 3] = false; 
    pool_member_genders[i, 4] = false; 
    pool_member_genders[i, 5] = false; 
    pool_member_blood[i] = 0; 
    pool_member_zodiac[i] = 0;
    for (l=0; l&lt;5; l+=1;) pool_member_glamp[i, l] = 0;
    }

// Test guys // 
pool_member_portrait[0] = s_port_hoopzShock;
pool_member_name[0] = "Hooprick";
pool_member_race[0] = "Pseudo-Dwarf";
pool_member_class[0] = "Forlorn Youngster";
pool_member_genders[0, 0] = true; 
pool_member_genders[0, 1] = true; 
pool_member_genders[0, 2] = true; 
pool_member_genders[0, 3] = true; 
pool_member_genders[0, 4] = true; 
pool_member_genders[0, 5] = false;
pool_member_blood[0] = 0; 
pool_member_zodiac[0] = 0;
for (i=0; i&lt;5; i+=1;) pool_member_glamp[0, i] = irandom(20);

pool_member_portrait[1] = s_port_delphine;
pool_member_name[1] = "Delfinos";
pool_member_race[1] = "Yeti";
pool_member_class[1] = "Bounty-Hunter";
pool_member_genders[1, 0] = true; 
pool_member_genders[1, 1] = true; 
pool_member_genders[1, 2] = false; 
pool_member_genders[1, 3] = true; 
pool_member_genders[1, 4] = true; 
pool_member_genders[1, 5] = false;
pool_member_blood[1] = 1; 
pool_member_zodiac[1] = 5;
for (i=0; i&lt;5; i+=1;) pool_member_glamp[1, i] = irandom(20);

pool_member_portrait[2] = s_port_wilcy;
pool_member_name[2] = "Wilkins";
pool_member_race[2] = "Post-Human";
pool_member_class[2] = "Driller";
pool_member_genders[2, 0] = false; 
pool_member_genders[2, 1] = true; 
pool_member_genders[2, 2] = true; 
pool_member_genders[2, 3] = true; 
pool_member_genders[2, 4] = true; 
pool_member_genders[2, 5] = false;
pool_member_blood[2] = 2; 
pool_member_zodiac[2] = 4;
for (i=0; i&lt;5; i+=1;) pool_member_glamp[2, i] = irandom(20);

pool_member_portrait[3] = s_port_suresh;
pool_member_name[3] = "Sureshka";
pool_member_race[3] = "Clown";
pool_member_class[3] = "Unemployed";
pool_member_genders[3, 0] = true; 
pool_member_genders[3, 1] = true; 
pool_member_genders[3, 2] = false; 
pool_member_genders[3, 3] = true; 
pool_member_genders[3, 4] = true; 
pool_member_genders[3, 5] = false;
pool_member_blood[3] = 5; 
pool_member_zodiac[3] = 8;
for (i=0; i&lt;5; i+=1;) pool_member_glamp[3, i] = irandom(20);

pool_member_portrait[4] = s_port_cruce;
pool_member_name[4] = "Trolop";
pool_member_race[4] = "Clown";
pool_member_class[4] = "Unemployed";
pool_member_genders[4, 0] = true; 
pool_member_genders[4, 1] = true; 
pool_member_genders[4, 2] = false; 
pool_member_genders[4, 3] = true; 
pool_member_genders[4, 4] = true; 
pool_member_genders[4, 5] = false;
pool_member_blood[4] = 5; 
pool_member_zodiac[4] = 8;
for (i=0; i&lt;5; i+=1;) pool_member_glamp[4, i] = irandom(20);

pool_member_portrait[5] = s_port_clive;
pool_member_name[5] = "Clive";
pool_member_race[5] = "Clown";
pool_member_class[5] = "Unemployed";
pool_member_genders[5, 0] = true; 
pool_member_genders[5, 1] = true; 
pool_member_genders[5, 2] = false; 
pool_member_genders[5, 3] = true; 
pool_member_genders[5, 4] = true; 
pool_member_genders[5, 5] = false;
pool_member_blood[5] = 5; 
pool_member_zodiac[5] = 8;
for (i=0; i&lt;5; i+=1;) pool_member_glamp[5, i] = irandom(20);

pool_member_portrait[6] = s_port_slag;
pool_member_name[6] = "Slag";
pool_member_race[6] = "Clown";
pool_member_class[6] = "Unemployed";
pool_member_genders[6, 0] = true; 
pool_member_genders[6, 1] = true; 
pool_member_genders[6, 2] = false; 
pool_member_genders[6, 3] = true; 
pool_member_genders[6, 4] = true; 
pool_member_genders[6, 5] = false;
pool_member_blood[6] = 5; 
pool_member_zodiac[6] = 8;
for (i=0; i&lt;5; i+=1;) pool_member_glamp[6, i] = irandom(20);

pool_member_portrait[7] = s_port_cruce;
pool_member_name[7] = "Cruce";
pool_member_race[7] = "Clown";
pool_member_class[7] = "Unemployed";
pool_member_genders[7, 0] = true; 
pool_member_genders[7, 1] = true; 
pool_member_genders[7, 2] = false; 
pool_member_genders[7, 3] = true; 
pool_member_genders[7, 4] = true; 
pool_member_genders[7, 5] = false;
pool_member_blood[7] = 5; 
pool_member_zodiac[7] = 8;
for (i=0; i&lt;5; i+=1;) pool_member_glamp[7, i] = irandom(20);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// While active only //
if active = true then
    {
    // Buttons //
    for (i=0; i&lt;10; i+=1;) button_hover_pool_member[i] = scr_cc_button_xy(12 + i * 36, 46 + i * 36, 26, 76);
    for (i=0; i&lt;10; i+=1;) button_hover_pool_member[i+10] = scr_cc_button_xy(12 + i * 36, 46 + i * 36, 78, 128);      
    for (i=0; i&lt;10; i+=1;) button_hover_pool_member[i+20] = scr_cc_button_xy(12 + i * 36, 46 + i * 36, 130, 180);
      
    // Member hover //
    for (i=0; i&lt;30; i+=1;) 
        {
        if button_hover_pool_member[i] = true then 
            {
            pool_member_hover = i;
            i = 30;
            }
        else pool_member_hover = -1;
        }
     
    // Select / kick pool member //
    for (i=0; i&lt;30; i+=1;)
        {
        if mouse_check_button_pressed(mb_left) then // BONG if scr_input_check_pressed(KEYID_ACTION, PLAYER1) then
            {
            if button_hover_pool_member[i] = true then 
                {
                // Pick a cahracter or go to KILL MODE? //
                if i != 29 then
                    {
                    // Normal //
                    if kill_mode = false and string(pool_member_name[i]) != "Empty" then
                        {
                        // Sound //
                        // BONG audio_play_sound_at_xy(sn_cc_button_accept, false, 10, 0, 0);
                        
                        // Into the party you go //
                        pool_member_selected = i;
                        event_user(0);
                        with o_cc_party alpha_goal = 1;
                        
                        // De-activate //
                        alpha_goal = 0;
                        active = false;
                        
                        // End //
                        i = 30;
                        }
                    // KILL MODE //
                    else 
                        {
                        // Remove character //
                        if i &gt;= 7 then 
                            {
                            //audio_play_sound_at_xy(sn_cc_name_clear, false, 10, 0, 0);
                            pool_member_selected = i;
                            event_user(1);
                            }
                        }
                    }
                else
                    {
                    // Sound //
                    //audio_play_sound_at_xy(sn_cc_generic_button1, false, 10, 0, 0);
                    
                    // KILL MODE TOGGLE //
                    if kill_mode = false then kill_mode = true; 
                    else kill_mode = false;
                    }
                }
            }   
        }
    
    // Enough of this //
    if mouse_check_button_pressed(mb_right) then // BONG if scr_input_check_pressed(KEYID_HOLSTER, PLAYER1) then
        {
        // Disable killmode or just leave the pool menu //
        if kill_mode = true then 
            {
            // Sound //
            //audio_play_sound_at_xy(sn_cc_generic_button1, false, 10, 0, 0);
            kill_mode = false;
            }
        else
            {
            // Welcome back o' sweet party screen //
            with o_cc_party alpha_goal = 1;
                
            // De-activate //
            alpha_goal = 0;
            active = false;
            }
        } 
    }
    
// Alpha //
if alpha &lt; alpha_goal then alpha += 0.1;
else if alpha &gt; alpha_goal then alpha -= 0.1;

// Activate //
if alpha &gt;= 0.5 and alpha_goal = 1 then active = true;
if alpha &lt;= 0 and alpha_goal = 0 and active = false then instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// KILL MODE //
pool_member_portrait[pool_member_selected] = s_cc_party_pool;
pool_member_name[pool_member_selected] = "Empty";
pool_member_race[pool_member_selected] = "";
pool_member_class[pool_member_selected] = "";
pool_member_genders[pool_member_selected, 0] = false; 
pool_member_genders[pool_member_selected, 1] = false;  
pool_member_genders[pool_member_selected, 2] = false;  
pool_member_genders[pool_member_selected, 3] = false; 
pool_member_genders[pool_member_selected, 4] = false; 
pool_member_genders[pool_member_selected, 5] = false; 
pool_member_blood[pool_member_selected] = 0; 
pool_member_zodiac[pool_member_selected] = 0;
for (l=0; l&lt;5; l+=1;) pool_member_glamp[pool_member_selected, l] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Basic info //
o_cc_party.party_member_portrait[o_cc_party.party_member_selected] = pool_member_portrait[pool_member_selected];
o_cc_party.party_member_name[o_cc_party.party_member_selected] = pool_member_name[pool_member_selected];
o_cc_party.party_member_race[o_cc_party.party_member_selected] = pool_member_race[pool_member_selected];
o_cc_party.party_member_class[o_cc_party.party_member_selected] = pool_member_class[pool_member_selected];

// Genders //
o_cc_party.party_member_genders[o_cc_party.party_member_selected, 0] = pool_member_genders[pool_member_selected, 0];
o_cc_party.party_member_genders[o_cc_party.party_member_selected, 1] = pool_member_genders[pool_member_selected, 1];
o_cc_party.party_member_genders[o_cc_party.party_member_selected, 2] = pool_member_genders[pool_member_selected, 2];
o_cc_party.party_member_genders[o_cc_party.party_member_selected, 3] = pool_member_genders[pool_member_selected, 3];
o_cc_party.party_member_genders[o_cc_party.party_member_selected, 4] = pool_member_genders[pool_member_selected, 4];
o_cc_party.party_member_genders[o_cc_party.party_member_selected, 5] = pool_member_genders[pool_member_selected, 5];

// Blood &amp; Zodiac //
o_cc_party.party_member_blood[o_cc_party.party_member_selected] = pool_member_blood[pool_member_selected];
o_cc_party.party_member_zodiac[o_cc_party.party_member_selected] = pool_member_zodiac[pool_member_selected];

// Add into party //
o_cc_party.party_slot_open[o_cc_party.party_member_selected] = false;

// G.L.A.M.P. //
for (l=0; l&lt;5; l+=1;) o_cc_party.party_member_glamp[o_cc_party.party_member_selected, l] = pool_member_glamp[pool_member_selected, l];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw backdrop //
draw_sprite_ext(s_cc_party_pool_layout, 0, 192, 120, 1, 1, 0, c_white, alpha);

// Party portraits //
for (i=0; i&lt;10; i+=1;) draw_sprite_ext(pool_member_portrait[i], 0, 12 + i * 36, 26, 1, 1, 0, c_white, alpha);
for (i=0; i&lt;10; i+=1;) draw_sprite_ext(pool_member_portrait[i + 10], 0, 12 + i * 36, 78, 1, 1, 0, c_white, alpha);
for (i=0; i&lt;9; i+=1;) draw_sprite_ext(pool_member_portrait[i + 20], 0, 12 + i * 36, 130, 1, 1, 0, c_white, alpha);
draw_sprite_ext(s_cc_party_pool, 1, 12 + 9 * 36, 130, 1, 1, 0, c_white, alpha);

// Selected //
draw_set_alpha(alpha * 0.2);
if pool_member_hover != -1 then
    {
    if pool_member_hover &lt;= 9 then draw_rectangle(12 + pool_member_hover * 36, 26, 45 + pool_member_hover * 36, 75, false);
    else if pool_member_hover &lt;= 19 then draw_rectangle(12 + (pool_member_hover - 10) * 36, 77, 46 + (pool_member_hover - 10) * 36, 127, false);
    else if pool_member_hover &lt;= 29 then draw_rectangle(12 + (pool_member_hover - 20) * 36, 129, 46 + (pool_member_hover - 20) * 36, 179, false);
    }

// Text setup //
draw_set_alpha(alpha);
draw_set_halign(fa_left);

// Character info //
for (i=0; i&lt;30; i+=1;)
    {
    // Hover over a character //
    if button_hover_pool_member[i] = true then
        {
        // Empty slot or not? //
        if pool_member_name[i] = "Empty" then
            {
            // Text setup //
            draw_set_color(make_color_rgb(120, 140, 255));
            draw_set_alpha(alpha)
            
            // Empty //
            draw_text(30, 207, "Empty slot");
            }
        else
            {
            // Text setup //
            draw_set_color(make_color_rgb(120, 140, 255));
            draw_set_alpha(alpha)
            
            // Name //
            draw_text(10, 191, pool_member_name[i]);
            
            // Race //
            draw_set_color(c_white);
            draw_text(10, 207, pool_member_race[i]);
            
            // Class //
            draw_text(10, 223, pool_member_class[i]);
            
            // G.L.A.M.P. //
            draw_set_color(make_color_rgb(60, 255, 20));
            draw_text(148, 191, "G:");
            draw_text(148, 207, "L:");
            draw_text(148, 223, "A:");
            draw_text(186, 191, "M:");
            draw_text(186, 207, "P:");
            
            draw_set_color(c_white);
            draw_text(164, 191, pool_member_glamp[i, 0]);
            draw_text(164, 207, pool_member_glamp[i, 1]);
            draw_text(164, 223, pool_member_glamp[i, 2]);
            draw_text(202, 191, pool_member_glamp[i, 3]);
            draw_text(202, 207, pool_member_glamp[i, 4]);
            
            // Zodiac and Blood //
            draw_set_color(make_color_rgb(20, 255, 255));
            draw_text(230, 191, "Zod:");
            draw_text(230, 207, "Bld:");
            draw_set_color(c_white);
            
            // Zodiac //
            switch (pool_member_zodiac[i])
                {
                case 0: draw_text(262, 191, "Aries"); break;
                case 1: draw_text(262, 191, "Taurus"); break;
                case 2: draw_text(262, 191, "Gemini"); break;
                case 3: draw_text(262, 191, "Cancer"); break;
                case 4: draw_text(262, 191, "Leo"); break;
                case 5: draw_text(262, 191, "Virgo"); break;
                case 6: draw_text(262, 191, "Libra"); break;
                case 7: draw_text(262, 191, "Scorpio"); break;
                case 8: draw_text(262, 191, "Ophiucus"); break;
                case 9: draw_text(262, 191, "Sagittarius"); break;
                case 10: draw_text(262, 191, "Capricorn"); break;
                case 11: draw_text(262, 191, "Aquarius"); break;
                case 12: draw_text(262, 191, "Pisces"); break;
                }
                
            // Blood //
            switch (pool_member_blood[i])
                {
                case 0: draw_text(262, 207, "Blood A"); break;
                case 1: draw_text(262, 207, "Blood B"); break;
                case 2: draw_text(262, 207, "Blood AB"); break;
                case 3: draw_text(262, 207, "Blood O"); break;
                case 4: draw_text(262, 207, "10w30"); break;
                case 5: draw_text(262, 207, "Corn Syrup"); break;
                }
                    
            // Gender //
            draw_set_color(make_color_rgb(255, 40, 100));
            draw_text(230, 223, "Gen:");
            draw_set_color(c_white);
            
            if pool_member_genders[i, 0] = true then draw_text(262, 223, "M");
            else draw_text(262, 223, "-");
            if pool_member_genders[i, 1] = true then draw_text(277, 223, "F");
            else draw_text(277, 223, "-");
            if pool_member_genders[i, 2] = true then draw_text(292, 223, "D");
            else draw_text(292, 223, "-");
            if pool_member_genders[i, 3] = true then draw_text(307, 223, "E");
            else draw_text(307, 223, "-");
            if pool_member_genders[i, 4] = true then draw_text(322, 223, "O");
            else draw_text(322, 223, "-");
            if pool_member_genders[i, 5] = true then draw_text(337, 223, "X");
            else draw_text(337, 223, "-");
            }
        }
    }

// Title //
draw_set_color(c_white);
draw_set_font(global.fn_1);
draw_set_halign(fa_center);
draw_set_alpha(alpha)
draw_text(192, 2, "Select a character");
draw_set_halign(fa_left);
draw_set_font(global.fn_2);

// Kill mode //
if kill_mode = true then
    {
    draw_set_color(c_red);
    draw_circle(o_pointer.x, o_pointer.y, 16, true);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
