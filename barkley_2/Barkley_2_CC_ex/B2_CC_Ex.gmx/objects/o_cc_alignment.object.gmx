<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Dont run the event after this for this character //
o_cc_data.event_finished_alignment = true;

// Phase setup //
phase[0] = 18;
phase[1] = 1;
phase[2] = 0;
phase[3] = 0;

// Phase skipping //
phase_skip_time = 0;
phase_skip_to = 0;
phase_skip = 0;

// Textbox setup //
textbox_written = "";
textbox_goal = "";
textbox_pause = 0;
textbox_position = 0;
textbox_skip = false;  

// Alpha setup //
alpha_textbox = 0;
alpha_textbox_goal = 0;
alpha_textbox_timer = 0;
alpha_event = 0;
alpha_event_goal = 0;
alpha_board = 0;
alpha_board_goal = 0;

// Other shite //
o_cc_wizard.alpha_goal = 1;
timer_transition = 0;
timer_active = 0;

move_piece = 0;
piece_x = 4.5;
piece_y = 4.5;
piece_x_goal = 4.5;
piece_y_goal = 4.5;
grid_y = -240;
grid_y_goal = -240;

option_hover[0] = false;
option_hover[1] = false;
option_hover[2] = false;
option_hover[3] = false;
option_hover[4] = false;

question = false;
question_id = irandom(31)
questions_asked = 0;
alignment = 0;

for (o=0; o&lt;10; o+=1;) 
    {
    for (i=0; i&lt;10; i+=1;) 
        {
        alpha_piece[i, o] = 0; 
        alpha_piece_goal[i, o] = 0.15; 
        }
    }

// Defaults //
option[0] = "Strongly agree";
option[1] = "Agree";
option[2] = "Neutral";
option[3] = "Disagree";
option[4] = "Strongly disagree";

// Text //
text[0] = "We all live by codes, whether or not we realize it.#Some struggle to uphold the values of our society#- the lawful - while others choose to follow their#whims and desires - the chaotic.";
text[1] = "Some reach outward through acts of charity and#kindness - the good - and others delve inward,#indulging in the pleasures of our earthly existence#- the evil."; 
text[2] = "It has been said that the differences between#these groups - ah, no, these... archetypes, these#fundamental paradigms of human capability - are#irreconcilable.";
text[3] = "I do not believe so - but I digress.";
text[4] = "I will make a series of statements and I will ask you#whether you agree, disagree or have no opinion#at all. It is through this method we will determine#the code by which you live."
text[5] = "Yes, it is all becoming very clear now. Your#answers have revealed to me the fundamental core#of your beliefs. You are...";

// Alignemnt descriptions //
text_alignment[0, 0] = 3;
text_alignment[0, 1] = "Lawful good. You are a paragon of virtue, morality#and order on the chaotic streets of the#Post-Cyberpocalypse."; 
text_alignment[0, 2] = "You routinely put others before yourself and#always act out of a sense of honor and compassion.#You feel it is your duty to protect those that can't#protect themselves."; 
text_alignment[0, 3] = "Lawful Good is the alignment most found in#nanorevelators and digital Magi. Dracula and#Popeye are both Lawful Good.";
 
text_alignment[1, 0] = 3;
text_alignment[1, 1] = "Lawful Neutral. You believe firmly that law is the#only thing that keeps the Post-Cyberpocalypse#from permanently imploding into chaos."; 
text_alignment[1, 2] = "For you, morality is not part of the equation, only#that justice as dictated by the CyberNET Mainframe#is executed. Lawful Neutral is the alignment most#found in technosavants and cryptoartificers."; 
text_alignment[1, 3] = "Dracula and Popeye are both Lawful Neutral.";

text_alignment[2, 0] = 3;
text_alignment[2, 1] = "Lawful Evil. You work within the boundaries of the#law to serve yourself. You find the easiest and#best way to gain power is through climbing the#hierarchy and exploiting the people beneath you."; 
text_alignment[2, 2] = "Kindness and charity do not matter to you and you#are not averse to manipulating the law or abusing#loopholes to get what you want. Lawful Evil is the#alignment most found in cybershaman."; 
text_alignment[2, 3] = "Dracula and Popeye are both Lawful Evil.";

text_alignment[3, 0] = 3;
text_alignment[3, 1] = "Neutral Good. People who are Neutral Good follow#their conscience and code of ethics but do not#necessarily feel obligated to do so within the#boundary of the law."; 
text_alignment[3, 2] = "You feel that the law is a good thing, but can be#misused in the wrong hands. You generally try to#defend the poor and weak of the#Post-Cyberpocalypse.";
text_alignment[3, 3] = "Neutral Good is the alignment most found in#cyberpilgrims and Afrofuturists. Dracula and#Popeye are both Neutral Good.";

text_alignment[4, 0] = 3;
text_alignment[4, 1] = "True Neutral. Most of the wayfarers who traverse#the CyberNET Mainframe aren't attached to any#strict ideology or belief system."; 
text_alignment[4, 2] = "You understand the harsh realities of Augmented#Reality, appreciate that all humans share in their#suffering, and have adopted a live-and-let-live#approach to the Post-Cyberpocalypse."; 
text_alignment[4, 3] = "Dracula and Popeye are both True Neutral.";

text_alignment[5, 0] = 3;
text_alignment[5, 1] = "Neutral Evil. You exist solely to serve yourself#and view people as stepping stones to further#your personal goals.";
text_alignment[5, 2] = "You have no problem acting outside the law but#you do not revel in anarchy like those of the#Chaotic alignment. You do not help others unless#you directly benefit from it.";
text_alignment[5, 3] = "Neutral Evil is the alignment most found in digital#yeomen and webmasters. Dracula and Popeye are#both Neutral Evil.";

text_alignment[6, 0] = 3;
text_alignment[6, 1] = "Chaotic Good. You follow a strict moral code of#helping others and social justice. You believe that#government and authority hinder the general#welfare and often find yourself at odds with -"; 
text_alignment[6, 2] = " - bureaucracy. Many consider you to be a#Post-Cyberpocalyptic Robin Hood. Chaotic Good is#the alignment most found in hacktivists and#cracktivists." 
text_alignment[6, 3] = "Dracula and Popeye are both Chaotic Good.";

text_alignment[7, 0] = 3;
text_alignment[7, 1] = "Chaotic Neutral. You believe strongly that all#people should be free to live how they choose and#that no authority can dictate right from wrong."; 
text_alignment[7, 2] = "Good and evil are nebulous, artificial concepts,#often one in the same, and it is disingenuous to#try to categorize all human behavior as one or the#other. You tend to favor bitcoins."; 
text_alignment[7, 3] = "Chaotic Neutral is the alignment most found in#cryptozauberists and virtual smugglers. Dracula#and Popeye are both Chaotic Neutral.";

text_alignment[8, 0] = 2;
text_alignment[8, 1] = "Chaotic Evil. You do whatever you want whenever#you want with no thought of consequences or the#people you hurt. You are aggressive, impulsive and#enjoy destruction for its own sake."; 
text_alignment[8, 2] = "Chaotic Evil is the alignment most found in#datamancers, B.I.O. guerrillas and techno#decapitators. Dracula and Popeye are both Chaotic#Evil.";

// Questions //
question_text[0] = "The Tales of Game's brand plays an important part of my every day life.";
question_text[1] = "It's hypocritical that they can call each other halflings but we have to call them hobbits.";
question_text[2] = "I believe strongly in the healing power of medicine.";
question_text[3] = "I have never jacked off to a UFO.";
question_text[4] = "Subs not dubs.";
question_text[5] = "Cops just wanna have fun!";
question_text[6] = "Jocks are the cornerstone of our society.";
question_text[7] = "Homework is for the ignorant.";
question_text[8] = "Teachers are bullshit.";
question_text[9] = "The instrument I most identify with is the bugle.";
question_text[10] = "There is a lot of untapped power in jocks.";
question_text[11] = "It is never okay to use the words 'meh' or 'feh'.";
question_text[12] = "I think repeating internet memes out loud in real life is really cool";
question_text[13] = "My goal is to amass more trophies than anyone else.";
question_text[14] = "I'm willing to forgo my sense of right and wrong for candy and toys.";
question_text[15] = "I am descended from an ancient jock.";
question_text[16] = "Dare not disturb me while I play vidcons, mom.";
question_text[17] = "Touch my sport whistle at your own peril.";
question_text[18] = "The government doesn't have the right to tell gamers what to play.";
question_text[19] = "I support pan-dwarfism.";
question_text[20] = "Refs can't tell me what to do.";
question_text[21] = "I spend more time in cyberspace than meatspace.";
question_text[22] = "Jock jams soothe the aching soul.";
question_text[23] = "Murder is getting out of hand these days. It should be against the law.";
question_text[24] = "There is no law in cyberspace.";
question_text[25] = "I would never touch a ghost in an inappropriate place.";
question_text[26] = "Bring on the juggling clowns!";
question_text[27] = "Don't cuss near parents and teachers.";
question_text[28] = "Get a life...";
question_text[29] = "Something about bigotry rubs me the wrong way.";
question_text[30] = "Bw...bwahahaha...";
question_text[31] = "I am the ultimate life form.";
    
// Effects of answers //
answer_x[0, 0] = -1;
answer_x[0, 1] = -3;
answer_x[0, 2] = +0;
answer_x[0, 3] = +2;
answer_x[0, 4] = +2;

answer_y[0, 0] = -3;
answer_y[0, 1] = +0;
answer_y[0, 2] = +1;
answer_y[0, 3] = +0;
answer_y[0, 4] = +1;

answer_x[1, 0] = +3;
answer_x[1, 1] = -2;
answer_x[1, 2] = +0;
answer_x[1, 3] = +0;
answer_x[1, 4] = -2;

answer_y[1, 0] = -2;
answer_y[1, 1] = +0;
answer_y[1, 2] = +3;
answer_y[1, 3] = -1;
answer_y[1, 4] = -2;

answer_x[2, 0] = -1;
answer_x[2, 1] = -4;
answer_x[2, 2] = +1;
answer_x[2, 3] = +2;
answer_x[2, 4] = +0;

answer_y[2, 0] = -4;
answer_y[2, 1] = +2;
answer_y[2, 2] = +1;
answer_y[2, 3] = +0;
answer_y[2, 4] = +0;

answer_x[3, 0] = +2;
answer_x[3, 1] = +0;
answer_x[3, 2] = +0;
answer_x[3, 3] = +0;
answer_x[3, 4] = -2;

answer_y[3, 0] = +0;
answer_y[3, 1] = +0;
answer_y[3, 2] = +3;
answer_y[3, 3] = -1;
answer_y[3, 4] = -3;

answer_x[4, 0] = +0;
answer_x[4, 1] = +0;
answer_x[4, 2] = +2;
answer_x[4, 3] = -3;
answer_x[4, 4] = +0;

answer_y[4, 0] = +0;
answer_y[4, 1] = +3;
answer_y[4, 2] = +0;
answer_y[4, 3] = +2;
answer_y[4, 4] = -3;

answer_x[5, 0] = +1;
answer_x[5, 1] = +2;
answer_x[5, 2] = +0;
answer_x[5, 3] = +0;
answer_x[5, 4] = -3;

answer_y[5, 0] = -3;
answer_y[5, 1] = +0;
answer_y[5, 2] = -4;
answer_y[5, 3] = +0;
answer_y[5, 4] = -2;

answer_x[6, 0] = -1;
answer_x[6, 1] = +0;
answer_x[6, 2] = +0;
answer_x[6, 3] = -2;
answer_x[6, 4] = +1;

answer_y[6, 0] = +0;
answer_y[6, 1] = +2;
answer_y[6, 2] = +2;
answer_y[6, 3] = -3;
answer_y[6, 4] = +0;

answer_x[7, 0] = -1;
answer_x[7, 1] = -2;
answer_x[7, 2] = -1;
answer_x[7, 3] = +3;
answer_x[7, 4] = +2;

answer_y[7, 0] = +1;
answer_y[7, 1] = -4;
answer_y[7, 2] = +3;
answer_y[7, 3] = +0;
answer_y[7, 4] = +2;

answer_x[8, 0] = +0;
answer_x[8, 1] = +2;
answer_x[8, 2] = +3;
answer_x[8, 3] = +1;
answer_x[8, 4] = +0;

answer_y[8, 0] = +0;
answer_y[8, 1] = +0;
answer_y[8, 2] = +1;
answer_y[8, 3] = -3;
answer_y[8, 4] = -1;

answer_x[9, 0] = -3;
answer_x[9, 1] = +0;
answer_x[9, 2] = -2;
answer_x[9, 3] = +1;
answer_x[9, 4] = +0;

answer_y[9, 0] = +2;
answer_y[9, 1] = -1;
answer_y[9, 2] = +3;
answer_y[9, 3] = +0;
answer_y[9, 4] = +0;

answer_x[10, 0] = -4;
answer_x[10, 1] = +0;
answer_x[10, 2] = +2;
answer_x[10, 3] = +4;
answer_x[10, 4] = -1;

answer_y[10, 0] = -3;
answer_y[10, 1] = -1;
answer_y[10, 2] = +0;
answer_y[10, 3] = +1;
answer_y[10, 4] = +2;

answer_x[11, 0] = +2;
answer_x[11, 1] = +0;
answer_x[11, 2] = +0;
answer_x[11, 3] = -6;
answer_x[11, 4] = -2;

answer_y[11, 0] = -3;
answer_y[11, 1] = -1;
answer_y[11, 2] = +0;
answer_y[11, 3] = +2;
answer_y[11, 4] = +3;

answer_x[12, 0] = -2;
answer_x[12, 1] = -1;
answer_x[12, 2] = +0;
answer_x[12, 3] = +1;
answer_x[12, 4] = +1;

answer_y[12, 0] = +2;
answer_y[12, 1] = +0;
answer_y[12, 2] = +3;
answer_y[12, 3] = -2;
answer_y[12, 4] = -1;

answer_x[13, 0] = -2;
answer_x[13, 1] = -1;
answer_x[13, 2] = +0;
answer_x[13, 3] = +3;
answer_x[13, 4] = +1;

answer_y[13, 0] = +3;
answer_y[13, 1] = +0;
answer_y[13, 2] = +3;
answer_y[13, 3] = -3;
answer_y[13, 4] = -2;

answer_x[14, 0] = +0;
answer_x[14, 1] = +0;
answer_x[14, 2] = +2;
answer_x[14, 3] = +1;
answer_x[14, 4] = +1;

answer_y[14, 0] = -2;
answer_y[14, 1] = +1;
answer_y[14, 2] = -2;
answer_y[14, 3] = +0;
answer_y[14, 4] = +3;

answer_x[15, 0] = +4;
answer_x[15, 1] = -2;
answer_x[15, 2] = +0;
answer_x[15, 3] = +0;
answer_x[15, 4] = -2;

answer_y[15, 0] = -3;
answer_y[15, 1] = +0;
answer_y[15, 2] = +2;
answer_y[15, 3] = +0;
answer_y[15, 4] = -4;

answer_x[16, 0] = +0;
answer_x[16, 1] = +0;
answer_x[16, 2] = +0;
answer_x[16, 3] = -1;
answer_x[16, 4] = +4;

answer_y[16, 0] = +0;
answer_y[16, 1] = +2;
answer_y[16, 2] = -2;
answer_y[16, 3] = +3;
answer_y[16, 4] = +1;

answer_x[17, 0] = +2;
answer_x[17, 1] = -1;
answer_x[17, 2] = +0;
answer_x[17, 3] = +0;
answer_x[17, 4] = -3;

answer_y[17, 0] = +0;
answer_y[17, 1] = +0;
answer_y[17, 2] = +3;
answer_y[17, 3] = +1;
answer_y[17, 4] = +1;

answer_x[18, 0] = +0;
answer_x[18, 1] = +0;
answer_x[18, 2] = +0;
answer_x[18, 3] = +2;
answer_x[18, 4] = -3;

answer_y[18, 0] = +0;
answer_y[18, 1] = -2;
answer_y[18, 2] = +3;
answer_y[18, 3] = +2;
answer_y[18, 4] = +1;

answer_x[19, 0] = +2;
answer_x[19, 1] = +0;
answer_x[19, 2] = -1;
answer_x[19, 3] = -2;
answer_x[19, 4] = +0;

answer_y[19, 0] = +0;
answer_y[19, 1] = +0;
answer_y[19, 2] = -2;
answer_y[19, 3] = +0;
answer_y[19, 4] = +1;

answer_x[20, 0] = +0;
answer_x[20, 1] = -1;
answer_x[20, 2] = -2;
answer_x[20, 3] = +3;
answer_x[20, 4] = +1;

answer_y[20, 0] = -1;
answer_y[20, 1] = -2;
answer_y[20, 2] = +1;
answer_y[20, 3] = +2;
answer_y[20, 4] = +0;

answer_x[21, 0] = -1;
answer_x[21, 1] = -3;
answer_x[21, 2] = +0;
answer_x[21, 3] = +2;
answer_x[21, 4] = +2;

answer_y[21, 0] = -2;
answer_y[21, 1] = +0;
answer_y[21, 2] = -3;
answer_y[21, 3] = +0;
answer_y[21, 4] = +2;

answer_x[22, 0] = -2;
answer_x[22, 1] = +0;
answer_x[22, 2] = +0;
answer_x[22, 3] = +3;
answer_x[22, 4] = +1;

answer_y[22, 0] = +4;
answer_y[22, 1] = +0;
answer_y[22, 2] = +3;
answer_y[22, 3] = +0;
answer_y[22, 4] = +1;

answer_x[23, 0] = +0;
answer_x[23, 1] = +0;
answer_x[23, 2] = +0;
answer_x[23, 3] = +2;
answer_x[23, 4] = +1;

answer_y[23, 0] = +0;
answer_y[23, 1] = -2;
answer_y[23, 2] = +1;
answer_y[23, 3] = +0;
answer_y[23, 4] = -1;

answer_x[24, 0] = +0;
answer_x[24, 1] = +3;
answer_x[24, 2] = +0;
answer_x[24, 3] = -3;
answer_x[24, 4] = -2;

answer_y[24, 0] = +3;
answer_y[24, 1] = -2;
answer_y[24, 2] = -2;
answer_y[24, 3] = +2;
answer_y[24, 4] = -1;

answer_x[25, 0] = +0;
answer_x[25, 1] = +1;
answer_x[25, 2] = +0;
answer_x[25, 3] = -3;
answer_x[25, 4] = -1;

answer_y[25, 0] = -1;
answer_y[25, 1] = -2;
answer_y[25, 2] = +0;
answer_y[25, 3] = +2;
answer_y[25, 4] = -1;

answer_x[26, 0] = -1;
answer_x[26, 1] = -3;
answer_x[26, 2] = +0;
answer_x[26, 3] = +4;
answer_x[26, 4] = +2;

answer_y[26, 0] = -1;
answer_y[26, 1] = +0;
answer_y[26, 2] = -2;
answer_y[26, 3] = +0;
answer_y[26, 4] = +2;

answer_x[27, 0] = +0;
answer_x[27, 1] = +0;
answer_x[27, 2] = +0;
answer_x[27, 3] = -3;
answer_x[27, 4] = +4;

answer_y[27, 0] = +0;
answer_y[27, 1] = +2;
answer_y[27, 2] = -1;
answer_y[27, 3] = +3;
answer_y[27, 4] = +2;

answer_x[28, 0] = +0;
answer_x[28, 1] = +0;
answer_x[28, 2] = +0;
answer_x[28, 3] = +2;
answer_x[28, 4] = -3;

answer_y[28, 0] = +0;
answer_y[28, 1] = -1;
answer_y[28, 2] = +2;
answer_y[28, 3] = +3;
answer_y[28, 4] = +1;

answer_x[29, 0] = -7;
answer_x[29, 1] = +0;
answer_x[29, 2] = +1;
answer_x[29, 3] = +2;
answer_x[29, 4] = -1;

answer_y[29, 0] = -1;
answer_y[29, 1] = -2;
answer_y[29, 2] = +0;
answer_y[29, 3] = +3;
answer_y[29, 4] = +2;

answer_x[30, 0] = +2;
answer_x[30, 1] = +0;
answer_x[30, 2] = +0;
answer_x[30, 3] = +0;
answer_x[30, 4] = -1;

answer_y[30, 0] = +0;
answer_y[30, 1] = +0;
answer_y[30, 2] = +1;
answer_y[30, 3] = -3;
answer_y[30, 4] = -1;

answer_x[31, 0] = +2;
answer_x[31, 1] = -1;
answer_x[31, 2] = +0;
answer_x[31, 3] = +0;
answer_x[31, 4] = -2;

answer_y[31, 0] = -3;
answer_y[31, 1] = +0;
answer_y[31, 2] = +3;
answer_y[31, 3] = -1;
answer_y[31, 4] = -2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Phases //
if phase[0] &gt; 0 then
    {
    // Tick down //
    phase[0] -= dt();
    
    // Event //
    if phase[0] &lt;= 0 then
        {
        // Introduction to hand scanner //
        if phase[1] &gt;= 1 and phase[1] &lt;= 5 then scr_cc_textbox(text[phase[1] - 1]);
            
        // Question //
        if phase[1] = 6 then timer_active = 5;
                
        // Move the piece //
        if phase[1] = 7 then // 7
            {
            grid_y_goal = 0;
            move_piece = 10;
            }
            
        // Wizard is back //
        if phase[1] = 8 and alpha_board = 0 then
            {
            // Talk shit //
            scr_cc_textbox(text[5]);
            
            // Set alignment //
            if piece_x &gt;= 0 and piece_x &lt;= 2 then
                {
                if piece_y &gt;= 0 and piece_y &lt;= 2 then alignment = 0;
                else if piece_y &gt;= 3 and piece_y &lt;= 6 then alignment = 1;
                else if piece_y &gt;= 7 and piece_y &lt;= 9 then alignment = 2;
                }
            else if piece_x &gt;= 3 and piece_x &lt;= 6 then
                {
                if piece_y &gt;= 0 and piece_y &lt;= 2 then alignment = 3;
                else if piece_y &gt;= 3 and piece_y &lt;= 6 then alignment = 4;
                else if piece_y &gt;= 7 and piece_y &lt;= 9 then alignment = 5;
                }
            else if piece_x &gt;= 7 and piece_x &lt;= 9 then
                {
                if piece_y &gt;= 0 and piece_y &lt;= 2 then alignment = 6;
                else if piece_y &gt;= 3 and piece_y &lt;= 6 then alignment = 7;
                else if piece_y &gt;= 7 and piece_y &lt;= 9 then alignment = 8;
                }
                
            // Save the alignment as character data //
            o_cc_data.character_alignment = alignment;
            o_cc_data.pax[10] = scr_cc_paxcode_convert(alignment);
            }
        
        // Alignemnt descriptions, and then end //
        if phase[1] &gt;= 9 and phase[1] &lt;= 12 then
            {
            if text_alignment[alignment, 0] &gt;= phase[1] - 8 then scr_cc_textbox(text_alignment[alignment, phase[1] - 8]);
            else 
                {
                timer_transition = 15;
                phase[2] = 25;
                }
            }
        }
    } 
    
// Active timer //
if timer_active &gt; 0 then   
    {
    // Tick down //
    timer_active -= dt();
    
    // Event //
    if timer_active &lt;= 0 then 
        {
        // Alpha //
        o_cc_wizard.alpha_goal = 0;
        
        // Next question //
        question_id += 1 + irandom(2);
        if question_id &gt; 31 then question_id -= 32;
               
        // Keep on goin? //
        if questions_asked &lt; 6 then
            {
            // Not enough questions yet, keep on going //
            grid_y_goal = -240;
            questions_asked += 1;
            alpha_event_goal = 1;
            alpha_board_goal = 1;
            question = true;
            }
        else
            {
            // Enough questions have been asked, end it // //
            o_cc_wizard.alpha_goal = 1;
            alpha_event_goal = 0;
            alpha_board_goal = 0;
            phase[1] = 8;
            phase[0] = 10;
            }
        }
    }
    
// Move piece //
if phase[1] = 7 and phase[0] &lt;= 0 then
    {
    if move_piece &gt; 0 then move_piece -= dt();
    else
        {
        // BONG //
        //if !audio_is_playing(sn_cc_chesspiece) then audio_play_sound_at_xy(sn_cc_chesspiece, false, 10, 0, 0);
        if !audio_is_playing(sn_cc_chesspiece) then audio_play_sound(sn_cc_chesspiece, 10, false);
        if piece_x &gt; piece_x_goal then piece_x -= 0.05;
        if piece_x &lt; piece_x_goal then piece_x += 0.05;
        if piece_y &gt; piece_y_goal then piece_y -= 0.05;
        if piece_y &lt; piece_y_goal then piece_y += 0.05;
        
        // End //
        if piece_x = piece_x_goal and piece_y = piece_y_goal then
            {
            audio_stop_sound(sn_cc_chesspiece);
            // BONG if scr_input_check_pressed(KEYID_ANYKEY, PLAYER1) then
            if mouse_check_button_pressed(mb_left) then    
                {
                phase[1] = 6;
                phase[0] = 0.25;
                }
            }
        else move_piece = 0.1;
        }
    }
    
// Question //
if question = true then
    {
    // Hovers //
    for (i=0; i&lt;5; i+=1;) option_hover[i] = scr_cc_button_xy(68, 338, 133 + i * 16, 145 + i * 16);
    
    // Click //
    // BONG if scr_input_check_pressed(KEYID_ACTION, PLAYER1) then
    if mouse_check_button_pressed(mb_left) then
        {
        // Answer 1 //
        if option_hover[0] = true then
            {
            // Sound //
            // BONG audio_play_sound_at_xy(sn_cc_generic_button1, false, 10, 0, 0);
            audio_play_sound(sn_cc_generic_button1, 10, false);
            
            // Death //
            if question_id = 12 then 
                {
                instance_create(x, y, o_cc_death);
                phase[3] = 5;
                }
            else
                {                
                phase[1] = 7;
                phase[0] = 3.3;
                question = false;
                
                // Move X //
                if piece_x = 4.5 then piece_x_goal += answer_x[question_id, 0] + 0.5;
                else piece_x_goal += answer_x[question_id, 0];
                
                // Move Y //
                if piece_y = 4.5 then piece_y_goal += answer_y[question_id, 0] + 0.5;
                else piece_y_goal += answer_y[question_id, 0];
                }
            }
        
        // Answer 2 //
        if option_hover[1] = true then 
            {
            // Sound //
            // BONG audio_play_sound_at_xy(sn_cc_generic_button1, false, 10, 0, 0);
            audio_play_sound(sn_cc_generic_button1, 10, false);
            
            // Moving sequence //
            phase[1] = 7;
            phase[0] = 3.33;
            question = false;
            
            // Move X //
            if piece_x = 4.5 then piece_x_goal += answer_x[question_id, 1] + 0.5
            else piece_x_goal += answer_x[question_id, 1];
            
            // Move Y //
            if piece_y = 4.5 then piece_y_goal += answer_y[question_id, 1] + 0.5
            else piece_y_goal += answer_y[question_id, 1];
            }
            
        // Answer 3 //
        if option_hover[2] = true then 
            {
            // Sound //
            // BONG audio_play_sound_at_xy(sn_cc_generic_button1, false, 10, 0, 0);
            audio_play_sound(sn_cc_generic_button1, 10, false);
            
            // Moving sequence //
            phase[1] = 7;
            phase[0] = 3.33;
            question = false;
            
            // Move X //
            if piece_x = 4.5 then piece_x_goal += answer_x[question_id, 2] + 0.5
            else piece_x_goal += answer_x[question_id, 2];
            
            // Move Y //
            if piece_y = 4.5 then piece_y_goal += answer_y[question_id, 2] + 0.5
            else piece_y_goal += answer_y[question_id, 2];
            }
            
        // Answer 4 //
        if option_hover[3] = true then 
            {
            // Sound //
            // BONG // audio_play_sound_at_xy(sn_cc_generic_button1, false, 10, 0, 0);
            audio_play_sound(sn_cc_generic_button1, 10, false);
            
            // Moving sequence //
            phase[1] = 7;
            phase[0] = 3.33;
            question = false;
            
            // Move X //
            if piece_x = 4.5 then piece_x_goal += answer_x[question_id, 3] + 0.5
            else piece_x_goal += answer_x[question_id, 3];
            
            // Move Y //
            if piece_y = 4.5 then piece_y_goal += answer_y[question_id, 3] + 0.5
            else piece_y_goal += answer_y[question_id, 3];
            }
            
        // Answer 5 //
        if option_hover[4] = true then 
            {
            // Sound //
            // BONG audio_play_sound_at_xy(sn_cc_generic_button1, false, 10, 0, 0);
            audio_play_sound(sn_cc_generic_button1, 10, false);

            // Moving sequence //
            phase[1] = 7;
            phase[0] = 3.33;
            question = false;
            
            // Move X //
            if piece_x = 4.5 then piece_x_goal += answer_x[question_id, 4] + 0.5
            else piece_x_goal += answer_x[question_id, 4];
            
            // Move Y //
            if piece_y = 4.5 then piece_y_goal += answer_y[question_id, 4] + 0.5
            else piece_y_goal += answer_y[question_id, 4];
            }
            
        // Don't go over boundaries //
        if piece_x_goal &lt; 0 then piece_x_goal = 0;
        if piece_x_goal &gt; 9 then piece_x_goal = 9;
        if piece_y_goal &lt; 0 then piece_y_goal = 0;
        if piece_y_goal &gt; 9 then piece_y_goal = 9;
        }
    }

// Grid alpha trail //
if alpha_event_goal != 0 then
    {
    for (o=0; o&lt;10; o+=1;)
        {
        for (i=0; i&lt;10; i+=1;) alpha_piece_goal[i, o] = 0.15;
        }
    if piece_x != 4.5 and piece_y != 4.5 then alpha_piece_goal[round(piece_x), round(piece_y)] = 0.5;
    }
else
    {
    for (o=0; o&lt;10; o+=1;)
        {
        for (i=0; i&lt;10; i+=1;) alpha_piece_goal[i, o] = 0;
        }
    }
    
// Grid /
if grid_y &gt; grid_y_goal then grid_y -= 10;
if grid_y &lt; grid_y_goal then grid_y += 10;
    
// Transition //
if timer_transition &gt; 0 then
    {
    // Tick down //
    timer_transition -= dt();
    
     // Event //
     if timer_transition &lt;= 0 then instance_create(0, 0, o_cc_transition);
     } 

// End of this event //
if phase[2] &gt; 0 then
    {
    // Tick down //
    phase[2] -= dt();
    
    // End //
    if phase[2] &lt;= 0 then
        {
        //instance_create(x, y, o_cc_placenta);
        // PAX TEMP //
        instance_create(x, y, o_cc_hand_scanner);
        instance_destroy();
        }
    }
    
// End of this event //
if phase[3] &gt; 0 then
    {
    // Tick down //
    phase[3] -= dt();
    
    // Alphas //
    alpha_textbox = 0;
    alpha_event_goal = 0;
    alpha_board_goal = 0;
    
    // End //
    if phase[3] &lt;= 0 then instance_destroy();
    }

// Skip text with button //
scr_cc_textbox_skip();

// Type it //
scr_cc_textbox_type();

// Move to a next phase //
scr_cc_phase_skip_process();
    
// Alpha goals //
if alpha_textbox_timer &gt; 0 then alpha_textbox_timer -= dt();
else
    {
    if alpha_textbox &lt; alpha_textbox_goal then alpha_textbox += 0.1;
    if alpha_textbox &gt; alpha_textbox_goal then alpha_textbox -= 0.1;
    }

if alpha_event &lt; alpha_event_goal then alpha_event += 0.05;
if alpha_event &gt; alpha_event_goal then alpha_event -= 0.05;

if alpha_board &lt; alpha_board_goal then alpha_board += 0.05;
if alpha_board &gt; alpha_board_goal then alpha_board -= 0.05;

for (o=0; o&lt;10; o+=1;)
    {
    for (i=0; i&lt;10; i+=1;)
        {
        if alpha_piece[i, o] &lt; alpha_piece_goal[i, o] then alpha_piece[i, o] += 0.1;
        if alpha_piece[i, o] &gt; alpha_piece_goal[i, o] then alpha_piece[i, o] -= 0.1;
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw textboxes //
scr_cc_draw_textbox();

// Dim the screen //
draw_set_color(c_black);
draw_set_alpha(alpha_event * 0.5);
draw_rectangle(-2, -2, 386, 242, false);

// Draw grid //
draw_sprite_ext(s_cc_alignment_grid, 0, 192, 120 + grid_y, 1, 1, 0, c_white, alpha_board);

// Grid effect //
for (o=0; o&lt;10; o+=1;)
    {
    for (i=0; i&lt;10; i+=1;) draw_sprite_ext(s_cc_alignment_trail, 0, 48 + i * 32, 48 + o * 16 + grid_y, 1, 1, 0, c_white, alpha_piece[i, o]);
    }

// Playing piece //
draw_sprite_ext(s_cc_alignment_piece, 0, 48 + piece_x * 32, 44 + piece_y * 16 + grid_y, 1, 1, 0, c_white, alpha_board);

// Quiz papaer //
draw_sprite_ext(s_cc_alignment_quiz, 0, 192, 120 + grid_y + 240, 1, 1, 0, c_white, alpha_event);

// Question //
draw_set_halign(fa_left);
draw_set_alpha(alpha_event);
draw_set_color(make_color_rgb(255, 80, 120));
draw_text(67, 36 + grid_y + 240, "Statement:")
draw_set_color(c_white);
draw_text_ext(67, 52 + grid_y + 240, question_text[question_id], 16, 270);

// Answer title //
draw_set_color(make_color_rgb(255, 80, 120));
draw_text(67, 117 + grid_y + 240, "Answer:")

// Answers //
for (i=0; i&lt;5; i+=1;)
    {
    if option_hover[i] = true then draw_set_color(c_yellow);
    else draw_set_color(make_color_rgb(255, 180, 0));
    draw_text(67, 133 + i * 16 + grid_y + 240, option[i]);
    }
   
// Click to continue // 
if phase[1] = 7 and phase[0] &lt;= 0 and piece_x = piece_x_goal and piece_y = piece_y_goal and grid_y = 0 then
   {
   draw_set_color(c_yellow);
   draw_set_alpha(1);
   draw_set_halign(fa_center);
   draw_text(192, 224, "Click the screen to continue");
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
