<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Dont run the event after this for this character //
o_cc_data.event_finished_handscanner = true;

// Phase setup //
phase[0] = 25;
phase[1] = 1;
phase[2] = 0;
phase[3] = 0;

// Phase skipping //
phase_skip_time = 0;
phase_skip_to = 0;
phase_skip = 0;

// Textbox setup //
textbox_written = "";
textbox_goal = "";
textbox_pause = 0;
textbox_position = 0;
textbox_skip = false;  

// Alpha setup //
alpha_textbox = 0;
alpha_textbox_goal = 0;
alpha_textbox_timer = 0;
alpha_event = 1;
alpha_event_goal = 1;

// Other //
instance_create(x, y, o_cc_transition_scanner);
hand_scanner_effect_x = 0;
hand_scanner_effect_y = 0;
hand_scanner_beam_y = 60;
image_speed = 0.6 * dt();
image_waiting = 0;
bg_image_index = 0;
voice_index = 0;

timer_transition = 0;
timer_transition_2 = 0;
timer_alphaout = 0;
timer_cranial_prepare = 0;
timer_cranial_wait = 0;
timer_cranial_end = 0;
timer_scanner = 0;
timer_scanner_prepare = -1;
timer_rectangle = 0;
timer_rectangle_off = 0;
timer_voice = 0;

show_stats = false;
stats_page = 0;
color_grid = c_teal;

rectangle_x = -440;
rectangle_y = 1;
rectangle_x_goal = -440;
rectangle_y_goal = 4;
hand_x = 200;
hand_x_goal = 200;

option_hover[0] = false;
option_hover[1] = false;
question = false;

sound_voice[0] = sn_cc_scanner_no_hand;
sound_voice[1] = sn_cc_scanner_hand_detected;
sound_voice[2] = sn_cc_scanner_transfer;
sound_voice[3] = sn_cc_scanner_genetic;
sound_voice[4] = sn_cc_scanner_dna;

// Defaults //
option_neurodeck = "Use ToGTech Cranial Neurodeck";
option_scanner = "Use Palm Scanner";

text[0] = "The incredible bounds that technology makes have#never ceased to astound me, " +string(o_cc_data.character_name)+".";
text[1] = "We have fully mapped and sequenced the human#genome in the past decade and our understanding#of genetics continues to grow expontentially."; 
text[2] = "Modern science is currently capable of scanning#an individual's DNA for potential medical issues,#genealogical quandaries and even posthuman#enhancement."; 
text[3] = "Although my abilities are modest, I too am able to#read your DNA and convert it into data.";
text[4] = "There are two ways I can read your DNA - through#the proprietary ToGTech Cranial Neurodeck implant#or by scanning the palm of your hand via your#computer's monitor."; 
text[5] = "Which method would you like to use?";

text[6] = "The ToGTech Cranial Neurodeck will attempt to#transfer your genetic material to your computer#hardware through the serial port located at the#back of your cranial implant."; 
text[7] = "If your cranial USB is currently connected to the#computer, disconnect it immediately. Please do not#connect the cranial USB until you have been#prompted to do so.";

text[8] = "Excellent. Please allow me to process your genetic#material via the scanner located on your computer#monitor.";

text[9] = "Please place your hand inside the outline on the#center of your screen.";
text[10] = "It is alright if your hand does not fit the exact#contours of the on-screen hand, just try to align#it as precisely as possible. The system will now#attempt to detect your hand...";

text[11] = "Greetings once again, " +string(o_cc_data.character_name)+ "!"; 
text[12] = "Your DNA results are in and have been thoroughly#analyzed. Here's a brief rundown of the most#important stats:";

text[13] = "Ahhh, though the science of genetics is still in#its infancy, it has come a long way."; 
text[14] = "To know one's past, to know the secrets of the#blood and those you've come from, is to know your#future."; 
text[15] = "I hope this brief look into your DNA has been as#illuminating to you as it has to me..."

    // Stats, AGE //
    stat[0, 0] = "1";
    stat[0, 1] = "2";
    stat[0, 2] = "3";
    stat[0, 3] = "14";
    stat[0, 4] = "15";
    stat[0, 5] = "16";
    stat[0, 6] = "17";
    stat[0, 7] = "18";
    stat[0, 8] = "19";
    stat[0, 9] = "20";
    stat[0, 10] = "21";
    stat[0, 11] = "22";
    stat[0, 12] = "23";
    stat[0, 13] = "24";
    stat[0, 14] = "25";
    stat[0, 15] = "26";
    stat[0, 16] = "27";
    stat[0, 17] = "28";
    stat[0, 18] = "33";
    stat[0, 19] = "69";
    stat[0, 20] = "666";
    
    // Stats, RACE //
    stat[1, 0] = "U.F.O.";
    stat[1, 1] = "Teen";
    stat[1, 2] = "Kitsune";
    stat[1, 3] = "Transhumanist";
    stat[1, 4] = "Cyborg";
    stat[1, 5] = "U.S.A.";
    stat[1, 6] = "Gamer";
    stat[1, 7] = "N/A.";
    stat[1, 8] = "Posthuman";
    stat[1, 9] = "Subhuman";
    stat[1, 10] = "Neanderthal";
    stat[1, 11] = "Other";
    stat[1, 12] = "Otherkin";
    stat[1, 13] = "Slime Cube"
    
    // Stats, SACRED LINEAGE //
    stat[2, 0] = "Daffy Duck";
    stat[2, 1] = "George Washington Carver";
    stat[2, 2] = "Crispus Attucks";
    stat[2, 3] = "Chang and Eng Bunker";
    stat[2, 4] = "Octoroon blood";
    stat[2, 5] = "Merlin";
    stat[2, 6] = "The Circus";
    stat[2, 7] = "Dracula";
    stat[2, 8] = "Aleister Crowley";
    stat[2, 9] = "King Tut";
    stat[2, 10] = "Genghis Khan";
    
    // Stats, BODY TYPE //
    stat[3, 0] = "Jock";
    stat[3, 1] = "Otaku";
    stat[3, 2] = "Greasy";
    stat[3, 3] = "Baller";
    stat[3, 4] = "U.F.O.";
    stat[3, 5] = "Pear shaped";
    stat[3, 6] = "Corpulent";
    stat[3, 7] = "Puerile";
    stat[3, 8] = "Pre-pubescent";
    stat[3, 9] = "Fecund";
    stat[3, 10] = "Stout";
    stat[3, 11] = "Infirm";
    stat[3, 12] = "Elderly";
    stat[3, 13] = "Delicate";
    
    // Stats, PERSONALITY //
    stat[4, 0] = "Tough &amp; Cool";
    stat[4, 1] = "Bad Boy";
    stat[4, 2] = "Gamer";
    stat[4, 3] = "Goofster";
    stat[4, 4] = "Rapster";
    stat[4, 5] = "Octoroon";
    stat[4, 6] = "Honorable";
    stat[4, 7] = "Pious";
    stat[4, 8] = "Circus Lover";
    stat[4, 9] = "Daffy";
    stat[4, 10] = "Churlish";
    stat[4, 11] = "Train Conductor";
    stat[4, 12] = "Bananas";
    stat[4, 13] = "Ethnic";
    stat[4, 14] = "Unbeugsam";
    stat[4, 15] = "Teutonic";
    
    // Stats, ELEMENTAL AFFINITY //
    stat[5, 0] = "Vidcons";
    stat[5, 1] = "Candy";
    stat[5, 2] = "Doo Wop";
    stat[5, 3] = "Cartoons";
    stat[5, 4] = "Toys";
    stat[5, 5] = "Ooze";
    stat[5, 6] = "Sewage";
    stat[5, 7] = "Corn";
    stat[5, 8] = "Muscles";
    stat[5, 9] = "B-Ball";
    stat[5, 10] = "Trains";
    
    // Stats, Weapon of Choice //
    stat[6, 0] = "Katana";
    stat[6, 1] = "Morgenstern";
    stat[6, 2] = "Flammenschwert";
    stat[6, 3] = "Ahlspeiss";
    stat[6, 4] = "Ranseur";
    stat[6, 5] = "Zweihänder";
    stat[6, 6] = "Voulge";
    stat[6, 7] = "Guisarme";
    stat[6, 8] = "Weapons? Heh, I don't need#weapons... only my Jeet Kune Do. ";
    stat[6, 9] = "Baselard";
    stat[6, 10] = "Dual wielded kriegsflegels";
    stat[6, 11] = "Schweizersäbel";
    stat[6, 12] = "Braquemard";
    stat[6, 13] = "Reitschwert";
    stat[6, 14] = "Großes Messer";
    
    // Stats, POLITICAL BELIEF //
    stat[7, 0] = "Candy for the homeless";
    stat[7, 1] = "Why do the poor always cause trouble?";
    stat[7, 2] = "Dwarfs should NOT vote!";
    stat[7, 3] = "Circumcise the poor";
    stat[7, 4] = "Gamers are the ultimate life form";
    stat[7, 5] = "Afrofuturism";
    stat[7, 6] = "Exploit the poor for candy";
    stat[7, 7] = "People are just stepping stones on my#quest for more vidcons";
    stat[7, 8] = "Politics don't concern me... only web comics.";
    stat[7, 9] = "Separation of vidcons and state";
    stat[7, 10] = "Total Apocalyptic Ideals";
    
    // Stats, DISTINCTI E PHYSICAL FEATURE //
    stat[8, 0] = "Lactation";
    stat[8, 1] = "Completely hairless";
    stat[8, 2] = "No arms";
    stat[8, 3] = "Birthmark on torso that spells out#'Cirque du Soleil'";
    stat[8, 4] = "Significant applebottom";
    stat[8, 5] = "Spacious urethra";
    stat[8, 6] = "Born without a groin";
    stat[8, 7] = "Tiny head";
    stat[8, 8] = "Childbearing hips";
    stat[8, 9] = "Enormous head";
    stat[8, 10] = "Immaculate high top fade";
    stat[8, 11] = "Jean shorts grafted to body in a fire";
    stat[8, 12] = "Body odor attracts hound dogs";
    stat[8, 13] = "Corn cob genitals";
    stat[8, 14] = "100% sunburnt"
    
    // Stats, PERSONAL QUOTE //
    stat[9, 0] = "I'll grind your bones to make my bread.";
    stat[9, 1] = "Homework is last bastion of the ignorant."
    stat[9, 2] = "You don't need a reason to help people."
    stat[9, 3] = "Semper games."
    stat[9, 4] = "...fools."
    stat[9, 5] = "Your radical ideas about society, individualism,#and religion have already occurred to others.#The fact that someone thinks the absurd things#you produce make some kind of lame societal#statement doesn't mean you're an artist."
    stat[9, 6] = "I don't want to fight... but I'll do it to#protect my friends."
    stat[9, 7] = "doki doki can be in talk of love in Japan#witch it throbbing heart ##(a sound fx)"
    stat[9, 8] = "Ya'll ready to stop? No? Ya'll wanna know#why? Why? Cuz. It's. The Slam Jam."
    stat[9, 9] = "I'm a gamer psycho mercenary who will kill#you at the drop of a hat. And hats drop easy#in this fucked up world."
    stat[9, 10] = "The only thing sharper than my katana...#is my tongue."
    stat[9, 11] = "The bond I share with dragons is unbreakable."
    stat[9, 12] = "I revel in the flames of chaos. Dance, puppets,#DANCE!!!"
    stat[9, 13] = "Trust in Clispaeth and He will reward you." 
    stat[9, 14] = "Let's Plays don't make themselves." 
        
// Give random stats //
stat_given[0] = irandom(20);
stat_given[1] = irandom(13);
stat_given[2] = irandom(10);
stat_given[3] = irandom(13);
stat_given[4] = irandom(15);
stat_given[5] = irandom(10);
stat_given[6] = irandom(14);
stat_given[7] = irandom(10);
stat_given[8] = irandom(14);
stat_given[9] = irandom(14);

// Character_data //
for (i=0; i&lt;10; i+=1;) o_cc_data.character_scanner[i] = stat_given[i];

// Move the bigger things into different places //
if stat_given[8] = 3 then bonus_y_8 = 14;
else bonus_y_8 = 0;

if stat_given[7] = 7 then bonus_y_7 = 14;
else bonus_y_7 = 0;

// PAX //
for (i=0; i&lt;10; i+=1;) o_cc_data.pax[11 + i] = scr_cc_paxcode_convert(stat_given[i]); 

//if (global.paxEnable) instance_create(x, y, o_cc_placenta);
//instance_create(x, y, o_cc_placenta);
// PAX TEMP //
//instance_create(x, y, o_cc_lottery);
//instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Pause //
if paused() then exit;

// Phases //
if phase[0] &gt; 0 then
    {
    // Tick down //
    phase[0] -= dt();
    
    // Event //
    if phase[0] &lt;= 0 then
        {
        // Introduction to hand scanner //
        if phase[1] &gt;= 1 and phase[1] &lt;= 5 then scr_cc_textbox(text[phase[1] - 1]);
        
        // Question, which method do you want to use //
        if phase[1] = 6 then 
            {
            scr_cc_textbox(text[5]);
            textbox_skip = false;
            }
            
        // First option //
        if phase[1] &gt;= 7 and phase[1] &lt;= 8 then scr_cc_textbox(text[phase[1] - 1]);
            
        // Waiting for ToGtech cranial neurodeck //
        if phase[1] = 9 then 
            {
            rectangle_x_goal = 0;
            rectangle_y_goal = 32;
            timer_cranial_prepare = 20;
            }
        
        // Waiting for player to connect his usb neurodeck //
        if phase[1] = 10 then timer_cranial_wait = 42;
        if phase[1] = 11 then timer_cranial_wait = 42;
        if phase[1] = 12 then timer_cranial_wait = 42;
        if phase[1] = 13 then timer_cranial_wait = 42; 
        if phase[1] = 14 then timer_cranial_end = 2;
        
        // Palm scanner text, switch to palm scanner instead //
        if phase[1] &gt;= 15 and phase[1] &lt;= 17 then
            {
            scr_cc_textbox(text[phase[1] - 7]);
            if timer_scanner_prepare = -1 then timer_scanner_prepare = 20;
            }
        
        // Hand scanner // Voice #1: no hand //
        if phase[1] = 18 then 
            {
            timer_scanner = 70;
            timer_voice = 10;
            voice_index = 0;
            }
            
        // Hand scanner// Voice #1: no hand, repeated //
        if phase[1] = 19 then 
            {
            timer_scanner = 70;
            timer_voice = 5;
            voice_index = 0;
            }
        
        // Hand scanner // Voice #2: Hand detected //
        if phase[1] = 20 then
            {
            timer_scanner = 90;
            timer_voice = 5;
            voice_index = 1;
            }
            
        // Hand scanner // Voice #3: Transfer DNA //
        if phase[1] = 21 then
            {
            timer_scanner = 100;
            timer_voice = 5;
            voice_index = 2;
            }
        
        // Hand scanner // Voice #4: Genetic damage warning //
        if phase[1] = 22 then
            {
            timer_scanner = 80;
            timer_voice = 5;
            voice_index = 3;
            }
            
        // Hand scanner // Voice #4: Scanning DNA //
        if phase[1] = 23 then
            {
            timer_scanner = 75;
            timer_voice = 5;
            voice_index = 4;
            }
            
        // Move on to the next stuff //
        if phase[1] = 24 then
            {
            timer_rectangle = 30;
            timer_scanner = 40;
            }
           
        // Wait and send the data to all heinous organisations //
        if phase[1] &gt;= 25 and phase[1] &lt;= 30 then timer_scanner = 30;
         
        // Waiting //
        if phase[1] = 31 then timer_rectangle_off = 10;
       
        // Show wizard again //
        if phase[1] = 32 then
            {
            alpha_event = 0;
            alpha_event_goal = 0;
            o_cc_wizard.alpha_goal = 1;
            timer_scanner = 20;
            }
            
        // Tell the results //
        if phase[1] &gt;= 33 and phase[1] &lt;= 34 then scr_cc_textbox(text[phase[1] - 22]);
        
        // Show stats //
        if phase[1] = 35 then 
            {
            instance_create(x, y, o_cc_transition_scanner)
            show_stats = true;
            alpha_event = 1;
            alpha_event_goal = 1;
            o_cc_wizard.alpha = 0;
            o_cc_wizard.alpha_goal = 0;
            }
            
        // Ending //
        if phase[1] &gt;= 36 and phase[1] &lt;= 37 then 
            {
            o_cc_wizard.alpha = 1;
            o_cc_wizard.alpha_goal = 1;
            alpha_event_goal = 0;
            alpha_event = 0;
            scr_cc_textbox(text[phase[1] - 23]);
            }
        
        // Adios //
        if phase[1] = 38 then 
            {
            alpha_textbox_goal = 0;
            timer_transition = 15;
            phase[2] = 25;
            }
        }
    } 
    
// Question, prompt for which tech to use //
if phase[1] = 6 and string_length(textbox_written) = string_length(textbox_goal) and textbox_goal = text[5] then question = true;
else question = false;
    
// Question //
if question = true then
    {
    // Hovers //
    option_hover[0] = scr_cc_button_xy(26, 358, 200, 210);
    option_hover[1] = scr_cc_button_xy(26, 358, 211, 220);
    
    // Click //
    if mouse_check_button_pressed(mb_left) then // BONG if scr_input_check_pressed(KEYID_ACTION, PLAYER1) then
        {
        // Draw a new card //
        if option_hover[0] = true then
            {
            phase[0] = 10;
            phase[1] = 7;
            alpha_textbox_goal = 0;
            question = false;
            text[8] = "Please allow me to process your genetic material#via the scanner located on your computer monitor.";
            }
        
        // No, just keep it //
        if option_hover[1] = true then 
            {
            phase[0] = 10;
            phase[1] = 15;
            alpha_textbox_goal = 0;
            question = false;
            }
        }
    }
    
// Cranial USB section //
if timer_cranial_prepare &gt; 0 then
    {
    // Tick down //
    timer_cranial_prepare -= dt();
    
    // Event //
    if timer_cranial_prepare &lt;= 0 then
        {
        phase[0] = 5;
        phase[1] += 1;
        }
    }   
    
// Cranial timers //
if timer_cranial_wait &gt; 0 then
    {
    // Tick down //
    timer_cranial_wait -= dt();
    
    // Move forward //
    if timer_cranial_wait &lt;= 0 then 
        {
        phase[0] = 5;
        phase[1] += 1;
        }
    }
    
// Cranial end //
if timer_cranial_end &gt; 0 then
    {
    // Tick down //
    timer_cranial_end -= dt();
    
    // End //
    if timer_cranial_end &lt;= 0 then
        {
        if rectangle_y &gt; 4 then 
            {
            rectangle_y_goal = 4;
            timer_cranial_end = 0.5;
            }
        else if rectangle_x_goal &lt; 400 then
            {
            rectangle_x_goal = 400;
            timer_cranial_end = 0.5;
            }
        else
            {
            phase[0] = 20;
            phase[1] += 1;
            }
        }
    }
    
// Scanner appears //
if timer_scanner_prepare &gt; 0 then
    {
    // Tick down //
    timer_scanner_prepare -= dt();
    
    // Event //
    if timer_scanner_prepare &lt;= 0 then 
        {
        hand_x_goal = 0;
        
        // Sound //
        audio_play_sound(sn_cc_scanner_assemble, 0, 0); // BONG audio_play_sound_at_xy(sn_cc_scanner_assemble, false, 10, 0, 0);
        }
    }
    
// Scanner //
if timer_scanner &gt; 0 then
    {
    // Tick down //
    timer_scanner -= dt();
    
    // Event //
    if timer_scanner &lt;= 0 then
        {
        phase[0] = 5;
        phase[1] += 1;
        }
    }
    
// Rectangle returns //
if timer_rectangle &gt; 0 then
    {
    // Tick down //
    timer_rectangle -= dt();
    
    // End //
    if timer_rectangle &lt;= 0 then
        {
        rectangle_x = -400;
        rectangle_x_goal = 0;
        rectangle_y_goal = 32;
        hand_x_goal = 200;
        
        // Sound //
        audio_play_sound(sn_cc_scanner_disassemble, 0, 0); // BONG audio_play_sound_at_xy(sn_cc_scanner_disassemble, false, 10, 0, 0);
        }
    }
    
// Sounds //
if timer_voice &gt; 0 then
    {
    // Tick down //
    timer_voice -= dt();
    
    // Event //
    if timer_voice &lt;= 0 then audio_play_sound(sound_voice[voice_index], 0, 0); // BONG audio_play_sound_at_xy(sound_voice[voice_index], false, 10, 0, 0);  
    }

// Noise when you reveeal the wizard again //
if timer_rectangle_off &gt; 0 then
    {
    // Tick down //
    timer_rectangle_off -= dt();
    
    // Shit down //
    rectangle_y_goal = 4;

    // Event //
    if timer_rectangle_off &lt;= 0 then
        {
        rectangle_x_goal = 400;
        timer_transition_2 = 15;
        }
    }
    
// Transition flciker shit for end parts //
if timer_transition_2 &gt; 0 then
    {
    // Tick down //
    timer_transition_2 -= dt();
    
    // Event //
    if timer_transition_2 &lt;= 0 then 
        {
        instance_create(x, y, o_cc_transition_scanner);
        phase[0] = 8;
        phase[1] += 1;
        }
    }
    
// Show stats//
if show_stats = true and phase[1] &lt; 36 then
    {
    // Go forward a page //
    if mouse_check_button_pressed(mb_left) then  //if scr_input_check_pressed(KEYID_ACTION, PLAYER1) then 
        {
        if stats_page &lt; 2 then stats_page += 1;
        else
            {
            instance_create(x, y, o_cc_transition_scanner);
            alpha_event = 0;
            alpha_event_goal = 0;
            o_cc_wizard.alpha = 1;
            o_cc_wizard.alpha_goal = 1;
            phase[0] = 20;
            phase[1] = 36;
            }
        }
        
    // Go back a page //
    if mouse_check_button_pressed(mb_right) then  // if scr_input_check_pressed(KEYID_HOLSTER, PLAYER1) then 
        {
        if stats_page &gt; 0 then stats_page -= 1;
        }
    }
    
// Sound for scanning //
if phase[1] = 23 then
    {
    if !audio_is_playing(sn_cc_scanner_scan) then audio_play_sound(sn_cc_scanner_scan, 0, 0); // audio_play_sound_at_xy(sn_cc_scanner_scan, false, 10, 0, 0);
    }
    
// Hand scanner beam //
if hand_scanner_beam_y &lt; 206 then hand_scanner_beam_y += 8;
else hand_scanner_beam_y = 14;

// Hand //
if hand_x &gt; hand_x_goal then hand_x -= 8;
if hand_x &lt; hand_x_goal then hand_x += 8;
    
// Rectangles //
if rectangle_x &lt; rectangle_x_goal then rectangle_x += 10;
if rectangle_x &gt; rectangle_x_goal then rectangle_x -= 10;    
if rectangle_x = rectangle_x_goal then
    {
    if rectangle_y &lt; rectangle_y_goal then rectangle_y += 2;
    if rectangle_y &gt; rectangle_y_goal then rectangle_y -= 2; 
    }
    
// BG image //
if bg_image_index &lt; 7.5 then bg_image_index += 0.1;
else bg_image_index = 0;

// Transition //
if timer_transition &gt; 0 then
    {
    // Tick down //
    timer_transition -= dt();
    
     // Event //
     if timer_transition &lt;= 0 then instance_create(0, 0, o_cc_transition);
     }

// Alpha out //
if timer_alphaout &gt; 0 then
    {
    // Tick down //
    timer_alphaout -= dt();
    
    // Event //
    if timer_alphaout &lt;= 0 then
       {
       alpha_event_goal = 0;
       alpha_event = 0;
       }
    }
     
// End of this event //
if phase[2] &gt; 0 then
    {
    // Tick down //
    phase[2] -= dt();
    
    // End //
    if phase[2] &lt;= 0 then
        {
        //instance_create(x, y, o_cc_placenta);
        // PAX TEMP //
        instance_create(x, y, o_cc_lottery);
        instance_destroy();
        }
    }
    
// Skip text with button //
scr_cc_textbox_skip();

// Type it //
scr_cc_textbox_type();

// Move to a next phase //
scr_cc_phase_skip_process();
    
// Alpha goals //
if alpha_textbox_timer &gt; 0 then alpha_textbox_timer -= dt();
else
    {
    if alpha_textbox &lt; alpha_textbox_goal then alpha_textbox += 0.1;
    if alpha_textbox &gt; alpha_textbox_goal then alpha_textbox -= 0.1;
    }

if alpha_event &lt; alpha_event_goal then alpha_event += 0.05;
if alpha_event &gt; alpha_event_goal then alpha_event -= 0.05;
      
// Waiting sprite image control // //
if image_waiting &lt; 5 then image_waiting += 0.6 * dt();
else image_waiting = 0; 

// Image //
image_speed = 1.5 * dt();

// Transfer color //
if phase[1] = 21 then 
    {
    color_grid = make_color_rgb(irandom(255), irandom(255), irandom(255));
    if !audio_is_playing(sn_cc_scanner_flash) then audio_play_sound(sn_cc_scanner_flash, 0, 0); // BONG // audio_play_sound_at_xy(sn_cc_scanner_flash, false, 10, 0, 0);
    }
else color_grid = c_teal;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Dim the screen, screen dimming //
draw_set_color(c_black);
draw_set_alpha(alpha_event);
draw_rectangle(-2, -2, 386, 242, false);

// Draw backgground //
draw_sprite_tiled_ext(s_cc_hand_scanner_effect, bg_image_index, 32, 32, 1, 1, c_white, alpha_event);
draw_sprite_tiled_ext(s_cc_hand_scanner_techno_grid, 0, 8, 8, 1, 1, c_white, alpha_event);

// Draw scanner and scanning beam // //
draw_set_color(c_black);
draw_set_alpha(alpha_event);
draw_rectangle(96 - hand_x, 16, 194 - hand_x, 208, false);
draw_rectangle(193 + hand_x, 16, 287 + hand_x, 208, false);
draw_sprite_ext(s_cc_hand_scanner_machine_grid, image_index, 150 - hand_x, 116, 1, 1, 0, color_grid, alpha_event);
draw_sprite_ext(s_cc_hand_scanner_machine_grid, image_index, 238 + hand_x, 116, 1, 1, 0, color_grid, alpha_event);

if phase[1] = 23 and hand_x &lt;= 0 then draw_sprite_ext(s_cc_hand_scanner_beam, image_index, 192, hand_scanner_beam_y, 1, 1, 0, c_white, 1);
//if phase[1] = 20 then draw_sprite_ext(s_cc_hand_scanner_beam, image_index, 192, hand_scanner_beam_y, 1, 1, 0, c_white, 1);

draw_sprite_ext(s_cc_hand_scanner_machine, 0, 192 - hand_x, 120, 1, 1, 0, c_white, alpha_event);
draw_sprite_ext(s_cc_hand_scanner_machine, 1, 192 + hand_x, 120, 1, 1, 0, c_white, alpha_event);

// Draw textboxes //
scr_cc_draw_textbox();

// Draw popup //
if question = true then
    {
    // YES //
    if option_hover[0] = true then 
        {
        draw_set_color(c_white);
        draw_set_alpha(alpha_textbox * 0.2);
        draw_rectangle(24, 200, 360, 210, false);
        draw_set_color(o_cc_data.color_question_hover);
        }
    else draw_set_color(o_cc_data.color_question_nohover);
    draw_set_alpha(alpha_textbox * 2);
    draw_text(29, 201, option_neurodeck);
    
    // NO //
    if option_hover[1] = true then 
        {
        draw_set_color(c_white);
        draw_set_alpha(alpha_textbox * 0.2);
        draw_rectangle(24, 212, 360, 222, false);
        draw_set_color(o_cc_data.color_question_hover);
        }
    else draw_set_color(o_cc_data.color_question_nohover);
    draw_set_alpha(alpha_textbox * 2);
    draw_text(29, 213, option_scanner);
    }
      
// Rectangles //
draw_set_color(c_black);
draw_set_alpha(alpha_event);
draw_rectangle(rectangle_x - 2, 136 - rectangle_y, rectangle_x + 386, 136 + rectangle_y, false);
    
// Cranial USB //
if phase[1] &gt;= 10 and phase[1] &lt;= 13 then
    {
    // Waiting sprite //
    draw_sprite(s_cc_hand_scanner_wait, image_waiting, 192, 154);
    
    // Center //
    draw_set_alpha(1);
    draw_set_halign(fa_center);
    draw_set_color(c_white);
    
    // Phases //
    if phase[1] = 10 then draw_text(192, 124, "ToGTech Cranial Neurodeck service initializing...");
    else if phase[1] = 11 then draw_text(192, 114, "It is now safe to connect your cranial USB to#the computer. Detecting cranial USB...");
    else if phase[1] = 12 then draw_text(192, 124, "Detecting cranial USB...");
    else if phase[1] = 13 then draw_text(192, 114, "No ToGTech Cranial Neurodeck connection detected.#Defaulting to DNA palm scanner service...");
    }
    
// Palm scanner synch // //
if phase[1] &gt;= 25 and phase[1] &lt;= 30 then
    {
    // Waiting sprite //
    if phase[1] &lt; 30 then draw_sprite(s_cc_hand_scanner_wait, image_waiting, 192, 154);
    
    // Center //
    draw_set_alpha(1);
    draw_set_halign(fa_center);
    draw_set_color(c_white);

    // Phases //
    if rectangle_x &gt;= 0 then
        {
        if phase[1] = 25 then draw_text(192, 114, "DNA successfully scanned. Uploading DNA#to Tales of Game's Corp. Corp. database..."); 
        if phase[1] = 26 then draw_text(192, 114, "Uploading DNA to#Zyriex Pharmaceuticals database... ");
        if phase[1] = 27 then draw_text(192, 114, "Uploading DNA to#INTERPOL criminal database..."); 
        if phase[1] = 28 then draw_text(192, 114, "Synchronizing DNA to#Shumaker-Raum Dynamic Marketing System..."); 
        if phase[1] = 29 then draw_text(192, 114, "Synchronizing DNA to#Coulombe Strategic Marketing...");
        if phase[1] = 30 then draw_text(192, 124, "Data synchronized.");
        }
    }

// Show stats, on mutliple pages //
if show_stats = true then
    {
    // Dim the background //
    draw_set_color(c_black);
    draw_set_alpha(alpha_event * 0.5);
    draw_rectangle(-2, -2, 386, 242, false);
    
    // Bottom bar //
    draw_set_color(make_color_rgb(20, 70, 100));
    draw_rectangle(-2, 224, 386, 242, false);
    
    // Draw logo //
    draw_sprite_ext(s_cc_hand_scanner_logo, 0, 192, 60, 1, 1, 0, c_white, alpha_event);
    
    // Draw page text on the bottom // PAAAAXX
    draw_set_color(make_color_rgb(20, 160, 190));
    draw_set_alpha(alpha_event * 0.75);
    draw_set_halign(fa_center);
    draw_text(192, 227, "Page " +string(stats_page + 1)+ " out of 3");
    
    // Pages //
    if stats_page = 0 then
        {
        draw_set_color(c_red);
        draw_set_alpha(alpha_event);
        draw_set_halign(fa_left);
        
        draw_text(27, 100, "Age:");
        draw_text(27, 116, "Race:");
        draw_text(27, 132, "Sacred lineage:");
        draw_text(27, 148, "Body type:");
        draw_text(27, 164, "Personality type:");
        draw_text(27, 180, "Elemental affinity:");
        draw_text(27, 196, "Weapon of choice:");
        
        draw_set_color(c_white);
        for (i=0; i&lt;7; i+=1;) draw_text(163, 100 + i * 16, stat[i, stat_given[i]]);
        }
    else if stats_page = 1 then
        {
        draw_set_alpha(alpha_event);
        draw_set_color(c_yellow);
        draw_set_halign(fa_left);
        draw_text(27, 100, "Political beliefs:");
        draw_text(27, 154, "Distinctive physical features:");
        
        draw_set_color(c_white);
        draw_text(43, 118, string(stat[7, stat_given[7]]));
        draw_text(43, 172, string(stat[8, stat_given[8]]));
        draw_text(35, 118, "-");
        draw_text(35, 172, "-");
        }
    else if stats_page = 2 then
        {
        draw_set_alpha(alpha_event);
        draw_set_color(c_teal);
        draw_set_halign(fa_left);
        draw_text(27, 100, "Personal quote:");
        
        draw_set_color(c_white);
        draw_text(35, 118, '"' + string(stat[9, stat_given[9]]) + '"');
        }
    }
    
/*draw_set_color(c_white);
draw_set_alpha(1);
draw_text(32, 220, phase[1]);
draw_text(32, 230, timer_cranial_wait);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>192,120</point>
    <point>192,192</point>
  </PhysicsShapePoints>
</object>
