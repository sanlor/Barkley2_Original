<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //
alpha = 0;
alpha_goal = 1;
party_member_selected = 0;
party_member_hover = -1;
previous_selection = 0;
active = false;

// Buttons //
for (i=0; i&lt;4; i+=1;) 
    {
    button_hover_party_member[i] = false;
    party_slot_open[i] = true;
    }
button_hover_exit = false;
button_hover_character = false;

// Info //
stat_title[0] = "Guts:";
stat_title[1] = "Luck:";
stat_title[2] = "Acrobatics:";
stat_title[3] = "Might:";
stat_title[4] = "Piety:";

// Portrait, Name, Gender(s), 
party_member_portrait[0] = s_port_hoopzShock;
party_member_name[0] = "Hooprick";
party_member_race[0] = "Pseudo-Dwarf";
party_member_class[0] = "Forlorn Youngster";
party_member_genders[0, 0] = true; 
party_member_genders[0, 1] = true; 
party_member_genders[0, 2] = true; 
party_member_genders[0, 3] = true; 
party_member_genders[0, 4] = true; 
party_member_genders[0, 5] = false;
party_member_blood[0] = 0; 
party_member_zodiac[0] = 0;
for (i=0; i&lt;5; i+=1;) party_member_glamp[0, i] = irandom(20);

// DEBUG GUYS //
party_member_portrait[1] = s_port_delphine;
party_member_name[1] = "Delfinos";
party_member_race[1] = "Yeti";
party_member_class[1] = "Bounty-Hunter";
party_member_genders[1, 0] = true; 
party_member_genders[1, 1] = true; 
party_member_genders[1, 2] = false; 
party_member_genders[1, 3] = true; 
party_member_genders[1, 4] = true; 
party_member_genders[1, 5] = false;
party_member_blood[1] = 1; 
party_member_zodiac[1] = 5;
for (i=0; i&lt;5; i+=1;) party_member_glamp[1, i] = irandom(20);

party_member_portrait[2] = s_port_wilcy;
party_member_name[2] = "Wilkins";
party_member_race[2] = "Post-Human";
party_member_class[2] = "Driller";
party_member_genders[2, 0] = false; 
party_member_genders[2, 1] = true; 
party_member_genders[2, 2] = true; 
party_member_genders[2, 3] = true; 
party_member_genders[2, 4] = true; 
party_member_genders[2, 5] = false;
party_member_blood[2] = 2; 
party_member_zodiac[2] = 4;
for (i=0; i&lt;5; i+=1;) party_member_glamp[2, i] = irandom(20);

party_member_portrait[3] = s_port_suresh;
party_member_name[3] = "Sureshka";
party_member_race[3] = "Clown";
party_member_class[3] = "Unemployed";
party_member_genders[3, 0] = true; 
party_member_genders[3, 1] = true; 
party_member_genders[3, 2] = false; 
party_member_genders[3, 3] = true; 
party_member_genders[3, 4] = true; 
party_member_genders[3, 5] = false;
party_member_blood[3] = 5; 
party_member_zodiac[3] = 8;
for (i=0; i&lt;5; i+=1;) party_member_glamp[3, i] = irandom(20);

// DEBUG EMPTY ALL SLOTS //
event_user(0);
party_member_selected = 1;
event_user(0);
party_member_selected = 2;
event_user(0);
party_member_selected = 3;
event_user(0);
party_member_selected = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// While active only //
if active = true then
    {
    // Buttons for party members //
    for (i=0; i&lt;4; i+=1;)
        {
        button_hover_party_member[i] = scr_cc_button_xy(6, 171, 24 + i * 54, 73 + i * 54);
        }
        
    // Hover //
    if button_hover_party_member[0] = true then party_member_hover = 0;
    else if button_hover_party_member[1] = true then party_member_hover = 1;
    else if button_hover_party_member[2] = true then party_member_hover = 2;
    else if button_hover_party_member[3] = true then party_member_hover = 3;
    else party_member_hover = -1;
        
    // Button for leaving teh party creation //
    button_hover_exit = scr_cc_button_xy(281, 378, 189, 234);
    
    // Button for making a new character //
    button_hover_character = scr_cc_button_xy(177, 275, 189, 234);
    
    // Select / kick party member // Exit party creation? //
    for (i=0; i&lt;4; i+=1;)
        {
        if mouse_check_button_pressed(mb_left) then // BONG if scr_input_check_pressed(KEYID_ACTION, PLAYER1) then
            {
            if button_hover_party_member[i] = true then 
                {
                party_member_selected = i;
                if party_slot_open[i] = true then
                    {
                    //audio_play_sound_at_xy(sn_cc_generic_button1, false, 10, 0, 0);
                    audio_play_sound(sn_cc_generic_button1, 0, 0);
                    instance_create(x, y, o_cc_party_pool);
                    active = false;
                    alpha_goal = 0;
                    }
                }
                
            // Exit //
            if button_hover_exit = true then
                {
                i = 4;
                // audio_play_sound_at_xy(sn_cc_button_accept, false, 10, 0, 0);
                audio_play_sound(sn_cc_button_accept, 0, 0);
                instance_create(x, y, o_cc_menu);
                with o_cc_data instance_destroy();
                with o_cc_wizard instance_destroy();
                instance_destroy();
                }
            }
        if mouse_check_button_pressed(mb_right) then // BONG if scr_input_check_pressed(KEYID_HOLSTER, PLAYER1) then
            {
            if button_hover_party_member[i] = true then 
                {
                //audio_play_sound_at_xy(sn_cc_name_clear, false, 10, 0, 0);
                audio_play_sound(sn_cc_name_clear, 0, 0);
                previous_selection = party_member_selected;
                party_member_selected = i;
                event_user(0);
                party_member_selected = previous_selection;
                }
            }    
        }
    }
    
// Alpha //
if alpha &lt; alpha_goal then alpha += 0.1;
else if alpha &gt; alpha_goal then alpha -= 0.1;

// Activate //
if alpha &gt;= 0.5 and alpha_goal = 1 then active = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Kick party member //
party_member_portrait[party_member_selected] = s_port_toughDwarf;
party_member_name[party_member_selected] = "- - -";
party_member_race[party_member_selected] = "- - -";
party_member_class[party_member_selected] = "- - -";
party_member_genders[party_member_selected, 0] = true; 
party_member_genders[party_member_selected, 1] = false; 
party_member_genders[party_member_selected, 2] = false; 
party_member_genders[party_member_selected, 3] = false; 
party_member_genders[party_member_selected, 4] = false; 
party_member_genders[party_member_selected, 5] = false;
party_member_blood[party_member_selected] = 0; 
party_member_zodiac[party_member_selected] = 0;
for (i=0; i&lt;5; i+=1;) party_member_glamp[party_member_selected, i] = 0;
party_slot_open[party_member_selected] = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw backdrop //
draw_sprite_ext(s_cc_party_layout, 0, 192, 120, 1, 1, 0, c_white, alpha);
draw_set_alpha(alpha);
draw_set_halign(fa_left);

// Selected //
for (i=0; i&lt;4; i+=1;)
    {
    if party_slot_open[i] = false then
        {
        if party_member_selected = i then 
            {
            if party_member_hover = i then draw_sprite(s_cc_party_card, 3, 6, 26 + i * 52);
            else draw_sprite(s_cc_party_card, 2, 6, 26 + i * 52);
            }
        else
            {
            if party_member_hover = i then draw_sprite(s_cc_party_card, 1, 6, 26 + i * 52);
            else draw_sprite(s_cc_party_card, 0, 6, 26 + i * 52);
            }
        }
    else
        {
        if party_member_hover = i then draw_sprite(s_cc_party_card, 5, 6, 26 + i * 52);
        else draw_sprite(s_cc_party_card, 4, 6, 26 + i * 52);
        }
    }

// Exit button hover //
if button_hover_exit = true then
    {
    draw_set_alpha(alpha * 0.2);
    draw_set_color(c_white);
    draw_rectangle(281, 189, 378, 234, false);
    draw_set_alpha(alpha);
    }
    
// Character button hover //
if button_hover_character = true then
    {
    draw_set_alpha(alpha * 0.2);
    draw_set_color(c_white);
    draw_rectangle(177, 189, 275, 234, false);
    draw_set_alpha(alpha);
    }

// Party portraits //
for (i=0; i&lt;4; i+=1;) 
    {
    if party_slot_open[i] = false then draw_sprite_ext(party_member_portrait[i], 0, 6, 26 + i * 52, 1, 1, 0, c_white, alpha);
    }

// Names //
draw_set_color(make_color_rgb(120, 140, 255));
for (i=0; i&lt;4; i+=1;) 
    {
    if party_slot_open[i] = false then draw_text(44, 30 + i * 52, party_member_name[i]);
    }

// Basic infos //
draw_set_color(make_color_rgb(255, 255, 255));
for (i=0; i&lt;4; i+=1;)
    {
    if party_slot_open[i] = false then 
        {
        draw_text(44, 46 + i * 52, party_member_race[i]);
        draw_text(44, 62 + i * 52, party_member_class[i]);
        }
    else
        {
        draw_text(56, 46 + i * 52, "Empty slot");
        }
    }

// Draw GLAMP title //
draw_set_font(global.fn_1);
draw_set_color(c_red);
draw_set_halign(fa_center);
draw_text(231, 32, "G.L.A.M.P.");
draw_set_font(global.fn_2);
draw_set_halign(fa_left);
    
// Draw GLAMPs //
draw_set_color(make_color_rgb(60, 255, 20));
for (i=0; i&lt;5; i+=1;) draw_text(180, 62 + i * 16, stat_title[i]);
draw_set_color(make_color_rgb(255, 255, 255));
draw_set_halign(fa_right);
for (i=0; i&lt;5; i+=1;) draw_text(282, 62 + i * 16, party_member_glamp[party_member_selected, i]);

// Draw genders //
if party_member_genders[party_member_selected, 0] = true then
    {
    draw_sprite_ext(s_cc_gender_portraits, 0, 332, 90, 1, 1, 0, c_white, alpha);
    if party_member_genders[party_member_selected, 0] = true then draw_sprite_ext(s_cc_gender_portraits, 1, 332, 90, 1, 1, 0, c_white, alpha);
    if party_member_genders[party_member_selected, 1] = true then draw_sprite_ext(s_cc_gender_portraits, 2, 332, 90, 1, 1, 0, c_white, alpha);
    if party_member_genders[party_member_selected, 2] = true then draw_sprite_ext(s_cc_gender_portraits, 3, 332, 90, 1, 1, 0, c_white, alpha);
    if party_member_genders[party_member_selected, 3] = false then draw_sprite_ext(s_cc_gender_portraits, 4, 332, 90, 1, 1, 0, c_white, alpha);
    if party_member_genders[party_member_selected, 4] = true then draw_sprite_ext(s_cc_gender_portraits, 5, 332, 90, 1, 1, 0, c_white, alpha);
    }
else
    {
    draw_sprite_ext(s_cc_gender_portraits, 0, 332, 76, 1, 1, 0, c_white, alpha);
    if party_member_genders[party_member_selected, 0] = true then draw_sprite_ext(s_cc_gender_portraits, 1, 332, 76, 1, 1, 0, c_white, alpha);
    if party_member_genders[party_member_selected, 1] = true then draw_sprite_ext(s_cc_gender_portraits, 2, 332, 76, 1, 1, 0, c_white, alpha);
    if party_member_genders[party_member_selected, 2] = true then draw_sprite_ext(s_cc_gender_portraits, 3, 332, 76, 1, 1, 0, c_white, alpha);
    if party_member_genders[party_member_selected, 3] = false then draw_sprite_ext(s_cc_gender_portraits, 4, 332, 76, 1, 1, 0, c_white, alpha);
    if party_member_genders[party_member_selected, 4] = true then draw_sprite_ext(s_cc_gender_portraits, 5, 332, 76, 1, 1, 0, c_white, alpha);
    }

// Draw zodiac and blood //
draw_set_halign(fa_left);
draw_set_color(make_color_rgb(20, 255, 255));
draw_text(180, 154, "Zodiac:");
draw_text(180, 170, "Blood:");
draw_set_color(make_color_rgb(255, 255, 255));

// Zodiacs //
draw_set_halign(fa_right);
switch (party_member_zodiac[party_member_selected])
    {
    case 0: draw_text(372, 154, "Aries"); break;
    case 1: draw_text(372, 154, "Taurus"); break;
    case 2: draw_text(372, 154, "Gemini"); break;
    case 3: draw_text(372, 154, "Cancer"); break;
    case 4: draw_text(372, 154, "Leo"); break;
    case 5: draw_text(372, 154, "Virgo"); break;
    case 6: draw_text(372, 154, "Libra"); break;
    case 7: draw_text(372, 154, "Scorpio"); break;
    case 8: draw_text(372, 154, "Ophiucus"); break;
    case 9: draw_text(372, 154, "Sagittarius"); break;
    case 10: draw_text(372, 154, "Capricorn"); break;
    case 11: draw_text(372, 154, "Aquarius"); break;
    case 12: draw_text(372, 154, "Pisces"); break;
    }
    
// Blood //
switch (party_member_blood[party_member_selected])
    {
    case 0: draw_text(372, 170, "Blood A"); break;
    case 1: draw_text(372, 170, "Blood B"); break;
    case 2: draw_text(372, 170, "Blood AB"); break;
    case 3: draw_text(372, 170, "Blood O"); break;
    case 4: draw_text(372, 170, "10w30"); break;
    case 5: draw_text(372, 170, "Corn Syrup"); break;
    }

// Exit and NEW CHARACTER //
draw_set_font(global.fn_1);
draw_set_halign(fa_center);

// Exit //
if button_hover_exit = true then draw_set_color(c_red);
else draw_set_color(c_white);
draw_text(329, 202, "CONFIRM");

// New character //
if button_hover_character = true then draw_set_color(c_red);
else draw_set_color(c_white);
draw_text(224, 202, "NEW CHARACTER");

// Title //
draw_set_color(c_white);
draw_text(192, 2, "Assemble your party");

// Back to normal //
draw_set_halign(fa_left);
draw_set_font(global.fn_2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
