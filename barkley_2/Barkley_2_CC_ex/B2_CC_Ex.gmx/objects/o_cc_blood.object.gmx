<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Phase setup //
phase[0] = 5;
phase[1] = 1;
phase[2] = 0;

// Phase skipping //
phase_skip_time = 0;
phase_skip_to = 0;
phase_skip = 0;

// Textbox setup //
textbox_written = "";
textbox_goal = "";
textbox_pause = 0;
textbox_position = 0;
textbox_skip = false;  

// Alpha setup //
alpha_textbox = 0;
alpha_textbox_goal = 0;
alpha_textbox_timer = 0;
alpha_event = 0;
alpha_event_goal = 0;

// Button setup //
button_accept_clickable = false;
button_accept_hover = false;
button_accept_x = 192;
button_accept_y = 200;
button_accept_click_effect = 0;
button_accept_text = "Accept";

// Other //
active = false;
timer_active = 0;

for (i=0; i&lt;6; i+=1;) option_hover[i] = false;
option_checked = 0;

// Defaults //
text[0] = "And what blood runs through your veins?";
text[1] = "Yes, yes... the blood of warriors, the blood of kings.#Your heritage is one of greatness and it confers in#you much strength. Perhaps enough to save us all...";    

option[0] = "Blood A";
option[1] = "Blood B";
option[2] = "Blood AB";
option[3] = "Blood O";
option[4] = "10w-30";
option[5] = "Corn syrup";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Pause //
if paused() then exit;

// Phases //
if phase[0]  &gt; 0 then
    {
    // Tick down //
    phase[0] -= dt();
    
    // Event //
    if phase[0] &lt;= 0 then
        {
        // First greetings //
        if phase[1] = 1 then scr_cc_textbox(text[0])
            
        // End of me, begin series of questions //
        if phase[1] = 2 then timer_active = 5;
            
        // First greetings //
        if phase[1] = 3 then scr_cc_textbox(text[1])
            
        // End //
        if phase[1] = 4 then phase[2] = 5;
        }
    } 
    
// Active timer //
if timer_active &gt; 0 then   
    {
    // Tick down //
    timer_active -= dt();
    
    // Event //
    if timer_active &lt;= 0 then 
        {
        alpha_event_goal = 1;
        button_accept_clickable = true;
        active = true;
        }
    }
    
// Blood choosing phase //
if active = true then
    {
    // Hover //
    for (i=0; i&lt;6; i+=1;) option_hover[i] = scr_cc_button_xy(146, 157, 56 + i * 20, 67 + i * 20);
    
    // Check //
    // BONG //if scr_input_check_pressed(KEYID_ACTION, PLAYER1) then 
    if mouse_check_button_pressed(mb_left) then
        {
        for (i=0; i&lt;6; i+=1;)
            {
            if option_hover[i] = true then 
                {
                option_checked = i;
                // BONG //audio_play_sound_at_xy(sn_cc_generic_button1, false, 10, 0, 0);
                audio_play_sound(sn_cc_generic_button1, 10, 0);
                } 
            }
        }
    }
    
// END //
if phase[2] &gt; 0 then
    {
    // Tick down //
    phase[2] -= dt();
    
    // Event //
    if phase[2] &lt;= 0 then
        {
        instance_create(x, y, o_cc_gender);
        instance_destroy();
        }
    }
    
// Accept button //
scr_cc_button_accept();

// Type the text //
scr_cc_textbox_type();

// Skip with button //
scr_cc_textbox_skip();

// Move to a next phase //
scr_cc_phase_skip_process();
    
// Alpha for Textboxes //
if alpha_textbox_timer &gt; 0 then alpha_textbox_timer -= dt();
else
    {
    if alpha_textbox &lt; alpha_textbox_goal then alpha_textbox += 0.1;
    if alpha_textbox &gt; alpha_textbox_goal then alpha_textbox -= 0.1;
    }

// Event alpha //
if alpha_event &lt; alpha_event_goal then alpha_event += 0.1;
if alpha_event &gt; alpha_event_goal then alpha_event -= 0.05;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Accept your blood //
if active = true then
    {
    // Sound //
    // BONG //audio_play_sound_at_xy(sn_cc_button_accept, false, 10, 0, 0);
    audio_play_sound(sn_cc_button_accept, 10, 0);

    // End texts //
    button_accept_clickable = false;
    alpha_event_goal = 0;
    active = false;
    phase[0] = 15;
    phase[1] += 1;
    
    // Character data blood //
    o_cc_data.character_blood = option_checked;
    
    // PAX Code //
    o_cc_data.pax[8] = scr_cc_paxcode_convert(option_checked);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw textboxes //
scr_cc_draw_textbox();

// Dim the background //
draw_set_alpha(alpha_event * 0.5);
draw_set_color(c_black);
draw_rectangle(-2, -2, 386, 242, false);

// Draw name entry boxes //
draw_set_alpha(alpha_event * 0.5);
draw_set_color(o_cc_data.color_event);
draw_rectangle(132, 44, 251, 181, false);

// Draw the frames //
draw_sprite_ext(s_cc_blood_frames, 0, 192, 106, 1, 1, 0, c_white, alpha_event);

// Draw selected option //
for (i=0; i&lt;6; i+=1;)
    {
    draw_set_alpha(alpha_event * 0.45);
    draw_set_color(c_red);
    if option_hover[i] = true then draw_rectangle(147, 56 + i * 20, 156, 66 + i * 20, false);
    if option_checked = i then draw_sprite_ext(s_cc_gender_check, 0, 152, 62 + i * 20, 1, 1, 0, c_white, alpha_event);
    }

// Draw gender names //
draw_set_font(global.fn_1);
draw_set_alpha(alpha_event);
draw_set_color(c_white);
for (i=0; i&lt;6; i+=1;)
    {
    // Draw genders //
    draw_text(169, 52 + i * 20, option[i])
    }
    
// Draw button //
scr_cc_draw_button_accept();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
