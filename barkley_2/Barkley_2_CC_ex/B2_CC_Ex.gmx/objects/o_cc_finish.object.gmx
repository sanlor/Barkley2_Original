<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Other shite //
o_cc_wizard.alpha_goal = 0;
alpha_event = 0;
alpha_event_goal = 1;
alpha_portrait_flash = 0.5;
alpha_portrait_flash_goal = 0;
character_portrait = irandom(12);
portrait_flash = true;
timer_transition = 0;
timer_restart = 0;
timer_accept = 0;
sound_pick_me = sn_cc_pickme3

// Buttons //
button[0] = false;
button[1] = false;
button[2] = false;
button_portrait = false;

// Info //
stat_title[0] = "Guts:";
stat_title[1] = "Luck:";
stat_title[2] = "Acrobatics:";
stat_title[3] = "Might:";
stat_title[4] = "Piety:";

stat_value[0] = o_cc_data.character_stat_guts;
stat_value[1] = o_cc_data.character_stat_luck;
stat_value[2] = o_cc_data.character_stat_acrobatics;
stat_value[3] = o_cc_data.character_stat_might;
stat_value[4] = o_cc_data.character_stat_piety;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Buttons //
button[0] = scr_cc_button_xy(107, 164, 208, 227);
button[1] = scr_cc_button_xy(169, 228, 208, 227);
button[2] = scr_cc_button_xy(233, 276, 208, 227);
button_portrait = scr_cc_button_xy(65, 98, 16, 63);

// Press the buttons //
// BONG if scr_input_check_pressed(KEYID_ACTION, PLAYER1) then
if mouse_check_button_pressed(mb_left) then    
    {
    // Change portrait //
    if button_portrait = true then
        {
        // Change portrait //
        portrait_flash = false;
        if character_portrait &lt; 3 then character_portrait += 1;
        else character_portrait = 0;
        
        // PICK ME !! //
        if audio_is_playing(sound_pick_me) then audio_stop_sound(sound_pick_me);
        switch (character_portrait)
            {
            case 0: 
                sound_pick_me = sn_cc_pickme3;
                // BONG audio_play_sound_at_xy(sound_pick_me, false, 10, 0, 0);
                audio_play_sound(sound_pick_me, 0, 0);
            break;
            case 1: 
                sound_pick_me = sn_cc_pickme3;        
                // BONG audio_play_sound_at_xy(sound_pick_me, false, 10, 0, 0);
                audio_play_sound(sound_pick_me, 0, 0);
            break;
            case 2: 
                sound_pick_me = sn_cc_pickme3;
                // BONG audio_play_sound_at_xy(sound_pick_me, false, 10, 0, 0);
                audio_play_sound(sound_pick_me, 0, 0);
            break;
            case 3: 
                sound_pick_me = sn_cc_pickme3;
                // BONG audio_play_sound_at_xy(sound_pick_me, false, 10, 0, 0);
                audio_play_sound(sound_pick_me, 0, 0);
            break;
            }
        }
    
    // Accept //
    if button[0] = true then 
        {
        timer_accept = 20;
        timer_transition = 10;
        }
    
    // Restart //
    if button[1] = true then
        {
        timer_restart = 20;
        timer_transition = 10;
        alpha_event_goal = 0;
        }
        
    // Exit //
    if button[2] = true then
        {
        game_end();
        }
    }
  
// Transition //
if timer_transition &gt; 0 then
    {
    // Tick down //
    timer_transition -= dt();
    
     // Event //
     if timer_transition &lt;= 0 then instance_create(0, 0, o_cc_transition);
     } 
    
// I am fine with this character //
if timer_accept &gt; 0 then
    {
    // Tick down //
    timer_accept -= dt();
    
    // End //
    if timer_accept &lt;= 0 then
        {
        with o_cc_data instance_destroy();
        with o_cc_wizard instance_destroy();
        instance_create(x, y, o_cc_menu);
        instance_destroy();
        }
    }
     
// End of this event //
if timer_restart &gt; 0 then
    {
    // Tick down //
    timer_restart -= dt();
    
    // End //
    if timer_restart &lt;= 0 then
        {
        with o_cc_data instance_destroy();
        with o_cc_wizard instance_destroy();
        instance_create(x, y, o_cc_wizard);
        instance_destroy();
        }
    }

// Alpha for Events //
if alpha_event &lt; alpha_event_goal then alpha_event += 0.025;
if alpha_event &gt; alpha_event_goal then alpha_event -= 0.025;

// Flash the portrait to signify it is a button, until you press it //
if portrait_flash = true then
    {
    if alpha_portrait_flash &lt; alpha_portrait_flash_goal then alpha_portrait_flash += 0.05;
    if alpha_portrait_flash &gt; alpha_portrait_flash_goal then alpha_portrait_flash -= 0.05;   
    if alpha_portrait_flash = alpha_portrait_flash_goal then
        {
        if alpha_portrait_flash_goal = 0 then alpha_portrait_flash_goal = 0.75;
        else alpha_portrait_flash_goal = 0;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Backdrop //
draw_sprite_ext(s_cc_finish_backdrop, 0, 192, 120, 1, 1, 0, c_white, alpha_event);

// Portrait //
if button_portrait = false then draw_sprite_ext(s_cc_finish_portrait, character_portrait, 65, 14, 1, 1, 0, c_white, alpha_event);
else draw_sprite_ext(s_cc_finish_portrait, character_portrait, 65, 14, 1, 1, 0, c_red, alpha_event);

// Flash portrait if it has not yet been used //
if portrait_flash = true then
    {
    draw_set_alpha(alpha_portrait_flash);
    draw_set_color(c_white);
    draw_rectangle(65, 14, 98, 63, false);
    }

// Text setup //
draw_set_alpha(alpha_event);
draw_set_halign(fa_left);

// Name //
draw_set_color(make_color_rgb(120, 140, 255));
draw_text(108, 19, o_cc_data.character_name);

// Basic info //
draw_set_color(make_color_rgb(255, 255, 255));
draw_text(108, 35, o_cc_data.character_race);
draw_text(108, 51, o_cc_data.character_class);

// Draw GLAMP //
draw_set_color(make_color_rgb(60, 255, 20));
for (i=0; i&lt;5; i+=1;) draw_text(70, 75 + i * 18, stat_title[i]);
draw_set_color(make_color_rgb(255, 255, 255));
draw_set_halign(fa_right);
for (i=0; i&lt;5; i+=1;) draw_text(214, 75 + i * 18, stat_value[i]);

// Draw gender //
draw_sprite_ext(s_cc_gender_portraits, 0, 270, 135, 1, 1, 0, c_white, alpha_event);
if o_cc_data.character_gender[0] = true then draw_sprite_ext(s_cc_gender_portraits, 1, 270, 135, 1, 1, 0, c_white, alpha_event);
if o_cc_data.character_gender[1] = true then draw_sprite_ext(s_cc_gender_portraits, 2, 270, 135, 1, 1, 0, c_white, alpha_event);
if o_cc_data.character_gender[2] = true then draw_sprite_ext(s_cc_gender_portraits, 3, 270, 135, 1, 1, 0, c_white, alpha_event);
if o_cc_data.character_gender[3] = false then draw_sprite_ext(s_cc_gender_portraits, 4, 270, 135, 1, 1, 0, c_white, alpha_event);
if o_cc_data.character_gender[4] = true then draw_sprite_ext(s_cc_gender_portraits, 5, 270, 135, 1, 1, 0, c_white, alpha_event);

// Draw zodiac and blood //
draw_set_halign(fa_left);
draw_set_color(make_color_rgb(20, 255, 255));
draw_text(70, 172, "Zodiac:");
draw_text(70, 188, "Blood:");
draw_set_color(make_color_rgb(255, 255, 255));

// Zodiacs //
draw_set_halign(fa_right);
switch (o_cc_data.character_zodiac_index)
    {
    case 0: draw_text(216, 172, "Aries"); break;
    case 1: draw_text(216, 172, "Taurus"); break;
    case 2: draw_text(216, 172, "Gemini"); break;
    case 3: draw_text(216, 172, "Cancer"); break;
    case 4: draw_text(216, 172, "Leo"); break;
    case 5: draw_text(216, 172, "Virgo"); break;
    case 6: draw_text(216, 172, "Libra"); break;
    case 7: draw_text(216, 172, "Scorpio"); break;
    case 8: draw_text(216, 172, "Ophiucus"); break;
    case 9: draw_text(216, 172, "Sagittarius"); break;
    case 10: draw_text(216, 172, "Capricorn"); break;
    case 11: draw_text(216, 172, "Aquarius"); break;
    case 12: draw_text(216, 172, "Pisces"); break;
    }
    
// Blood //
switch (o_cc_data.character_blood)
    {
    case 0: draw_text(216, 188, "Blood A"); break;
    case 1: draw_text(216, 188, "Blood B"); break;
    case 2: draw_text(216, 188, "Blood AB"); break;
    case 3: draw_text(216, 188, "Blood O"); break;
    case 4: draw_text(216, 188, "10w30"); break;
    case 5: draw_text(216, 188, "Corn Syrup"); break;
    }
    
// Buttons //
draw_set_alpha(alpha_event);
draw_set_halign(fa_left);
if button[0] = true then draw_set_color(c_black);
else draw_set_color(c_white);
draw_text(107, 220, "Accept");

if button[1] = true then draw_set_color(c_black);
else draw_set_color(c_white);
draw_text(169, 220, "Restart");

if button[2] = true then draw_set_color(c_black);
else draw_set_color(c_white);
draw_text(232, 220, "Exit");

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
