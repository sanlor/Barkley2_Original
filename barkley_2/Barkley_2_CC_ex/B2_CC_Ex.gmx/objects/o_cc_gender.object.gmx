<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Phase setup //
phase[0] = 5;
phase[1] = 1;
phase[2] = 0;

// Phase skipping //
phase_skip_time = 0;
phase_skip_to = 0;
phase_skip = 0;

// Textbox setup //
textbox_written = "";
textbox_goal = "";
textbox_pause = 0;
textbox_position = 0;
textbox_skip = false;  

// Alpha setup //
alpha_textbox = 0;
alpha_textbox_goal = 0;
alpha_textbox_timer = 0;
alpha_event = 0;
alpha_event_goal = 0;
alpha_popup = 0;
alpha_popup_goal = 0;

// Button setup //
button_accept_clickable = false;
button_accept_hover = false;
button_accept_x = 192;
button_accept_y = 210;
button_accept_click_effect = 0;
button_accept_text = "Accept";

timer_active = 0;
timer_transition = 0;
new_game_plus = false;
active = false;
genders = 0;
popup = false;

for (i=0; i&lt;8; i+=1;) option_hover[i] = false;
for (i=0; i&lt;6; i+=1;) option_checked[i] = false;

// Defaults //
text[0] = "Lastly - most importantly - what gender do you see#yourself as? Not just biologically, but mentally,#spiritually? Who are you?";

popup_warning = "Warning!##Gender limit exceeded.#Continue anyway?";
popup_yes = "Yes";
popup_no = "No";

option[0] = "Male";
option[1] = "Female";
option[2] = "Dwarf";
option[3] = "Eunuch";
option[4] = "Other"
option[5] = "???"
option[6] = "Mega Eunuch"

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Pause //
if paused() then exit;

// Phases //
if phase[0] &gt; 0 then
    {
    // Tick down //
    phase[0] -= dt();
    
    // Event //
    if phase[0] &lt;= 0 then
        {
        // First greetings //
        if phase[1] = 1 then scr_cc_textbox(text[0])
            
        // End of me, begin series of questions //
        if phase[1] = 2 then timer_active = 5;
        }
    } 
    
// Active timer //
if timer_active &gt; 0 then   
    {
    // Tick down //
    timer_active -= dt();
    
    // Event //
    if timer_active &lt;= 0 then 
        {
        button_accept_clickable = true;
        alpha_event_goal = 1;
        active = true;
        }
    }
    
// Select thy gender'(s) //
if active = true then
    {
    for (i=0; i&lt;6; i+=1;) 
        {
        option_hover[i] = scr_cc_button_xy(86, 102, 65 + i * 20, 81 + i * 20);
        }
        
    // Mark gender's //         BONG
    //if scr_input_check_pressed(KEYID_ACTION, PLAYER1) or scr_input_check_pressed(KEYID_HOLSTER, PLAYER1) then
    if mouse_check_button_pressed(mb_left) or mouse_check_button_pressed(mb_right) then   
        {
        for (i=0; i&lt;6; i+=1;)
            {
            if option_hover[i] = true then 
                {
                if i = 5 then
                    {
                    if new_game_plus = false then option_checked[i] = false;
                    else
                        {
                        if option_checked[i] = true then option_checked[i] = false;
                        else option_checked[i] = true;
                        audio_play_sound(sn_cc_generic_button1, 0, false);
                        }
                    }
                else
                    {
                    if option_checked[i] = true then option_checked[i] = false;
                    else option_checked[i] = true;
                    audio_play_sound(sn_cc_generic_button1, 0, false);
                    }
                }
            }
        }
    }
    
// Popoupupup //
if popup = true then
    {
    // Alpha //
    alpha_popup_goal = 1;
    
    // Hovers //
    option_hover[6] = scr_cc_button_xy(148, 174, 143, 158);
    option_hover[7] = scr_cc_button_xy(202, 218, 143, 158);
    
    // Click //
    // BONG if scr_input_check_pressed(KEYID_ACTION, PLAYER1) then
    if mouse_check_button_pressed(mb_left) then
        {
        if option_hover[6] = true then
            {
            // Accept //
            scr_cc_wizard_emote(2);
            alpha_textbox_goal= 0;
            alpha_event_goal = 0;
            phase[2] = 20;
            timer_transition = 15;
            active = false;
            popup = false;
            audio_play_sound(sn_cc_generic_button2, 0, false);
            }
        
        // No wait, I am not this many genders //
        if option_hover[7] = true then 
            {
            popup = false;
            audio_play_sound(sn_cc_generic_button2, 0, false);
            }
        }
    }
else alpha_popup_goal = 0;
    
// Accept button //
if popup = false then scr_cc_button_accept();

// Transition //
if timer_transition &gt; 0 then
    {
    // Tick down //
    timer_transition -= dt();
    
     // Event //
     if timer_transition &lt;= 0 then instance_create(0, 0, o_cc_transition);
     }  

// Next phase, the placenta //
if phase[2] &gt; 0 then
    {
    // Tick down //
    phase[2] -= dt();
    
    // Fade //
    if phase[2] &lt;= 7.5 then alpha_event_goal = 0;
    
    // Event //
    if phase[2] &lt;= 0 then
        {
        for (i=0; i&lt;6; i+=1;)
            {
            if option_checked[i] = true then o_cc_data.character_gender[i] = true;
            }
        o_cc_wizard.emote = false;
        if (global.paxEnable) instance_create(x, y, o_cc_alignment);
        else instance_create(x, y, o_cc_placenta);
        instance_destroy();
        }
    }
    
// Type the text //
scr_cc_textbox_type();
    
// Skip with button //
scr_cc_textbox_skip();

// Move to a next phase //
scr_cc_phase_skip_process();

// Alpha for Textboxes //
if alpha_textbox_timer &gt; 0 then alpha_textbox_timer -= dt();
else
    {
    if alpha_textbox &lt; alpha_textbox_goal then alpha_textbox += 0.1;
    if alpha_textbox &gt; alpha_textbox_goal then alpha_textbox -= 0.1;
    }

if alpha_event &lt; alpha_event_goal then alpha_event += 0.1;
if alpha_event &gt; alpha_event_goal then alpha_event -= 0.05;

if alpha_popup &lt; alpha_popup_goal then alpha_popup += 0.1;
if alpha_popup &gt; alpha_popup_goal then alpha_popup -= 0.1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Gender limit exceeded? //
if active = true then
    {
    genders = 0;
    for (i=0; i&lt;6; i+=1;)
        {
        if option_checked[i] = true then genders += 1;
        }
    
    // Too many genders, sorry //
    if genders &gt;= 4 then 
        {
        // Sound //
        audio_play_sound(sn_cc_button_accept, 0, false);
        popup = true;
        }
    else if genders = 0 then audio_play_sound(sn_cc_button_cancel, 0, false);
    else
        {
        // Sound //
        audio_play_sound(sn_cc_button_accept, 0, false);
        
        // Accept //
        scr_cc_wizard_emote(1);
        alpha_event_goal = 0;
        phase[2] = 35;
        timer_transition = 25;
        active = false;
        button_accept_clickable = false;
        
        // Character data //
        for (i=0; i&lt;6; i+=1;) character_gender[i] = option_checked[i];
        }
        
    // PAX Code //
    var temp = 0;
    temp = option_checked[0] + (option_checked[1] * 2) + (option_checked[2] * 4) + (option_checked[3] * 8) + (option_checked[4] * 16);
    o_cc_data.pax[9] = scr_cc_paxcode_convert(temp);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw textboxes //
scr_cc_draw_textbox();

// Dim the background //
draw_set_alpha(alpha_event * 0.5);
draw_set_color(c_black);
draw_rectangle(-2, -2, 386, 242, false);
draw_set_halign(fa_left);

// Draw name entry boxes //
draw_set_alpha(alpha_event * 0.5);
draw_set_color(o_cc_data.color_event);
draw_rectangle(73, 54, 206, 190, false);
draw_rectangle(218, 54, 302, 190, false);
draw_set_alpha(alpha_event * 0.45);

// Draw hovers //
for (i=0; i&lt;6; i+=1;)
    {
    draw_set_color(c_blue);
    if option_hover[i] = true then draw_rectangle(88, 67 + i * 20, 100, 79 + i * 20, false);
    }

// Draw the frames //
draw_sprite_ext(s_cc_gender_frames, 0, 140, 120, 1, 1, 0, c_white, alpha_event);
draw_sprite_ext(s_cc_gender_portrait_frames, 0, 260, 120, 1, 1, 0, c_white, alpha_event);

// Draw gender names //
draw_set_font(global.fn_1);
draw_set_alpha(alpha_event);
draw_set_color(c_white);

// Gender options //
for (i=0; i&lt;6; i+=1;)
    {
    if i = 5 and new_game_plus = false then 
        {
        draw_set_color(c_gray);
        draw_text(111, 63 + i * 20, option[i]);
        }
    else if i = 5 and new_game_plus = true then
        {
        draw_set_color(make_color_rgb(120, 140, 255));
        draw_text(111, 63 + i * 20, option[6]);
        }
    else draw_text(111, 63 + i * 20, option[i]);
    
    // Draw marks //
    if option_checked[i] = true then draw_sprite_ext(s_cc_gender_checkmark, 0, 94, 73 + i * 20, 1, 1, 0, c_white, alpha_event);
    }
    
// Base gender statue //
draw_sprite_ext(s_cc_gender_portraits, 0, 260, 124, 1, 1, 0, c_white, alpha_event);
    
// Draw gender layers //
if option_checked[0] = true then draw_sprite_ext(s_cc_gender_portraits, 1, 260, 124, 1, 1, 0, c_white, alpha_event);
if option_checked[1] = true then draw_sprite_ext(s_cc_gender_portraits, 2, 260, 124, 1, 1, 0, c_white, alpha_event);
if option_checked[2] = true then draw_sprite_ext(s_cc_gender_portraits, 3, 260, 124, 1, 1, 0, c_white, alpha_event);
if option_checked[3] = false then draw_sprite_ext(s_cc_gender_portraits, 4, 260, 124, 1, 1, 0, c_white, alpha_event);
if option_checked[4] = true then draw_sprite_ext(s_cc_gender_portraits, 5, 260, 124, 1, 1, 0, c_white, alpha_event);
 
// Draw button //
scr_cc_draw_button_accept();

// Draw popup //
draw_set_font(global.fn_1);
draw_set_alpha(alpha_popup * 0.8);
draw_set_color(make_color_rgb(20, 0, 20));
draw_rectangle(-2, -2, 386, 242, false);

draw_set_alpha(alpha_popup * 1.2);
draw_set_color(c_red);
draw_set_halign(fa_center);
draw_text(187, 60, string(popup_warning))

if option_hover[6] = true then draw_set_color(c_yellow);
else draw_set_color(c_white);
draw_text(160, 142, string(popup_yes));

if option_hover[7] = true then draw_set_color(c_yellow);
else draw_set_color(c_white);
draw_text(210, 142, string(popup_no));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
