<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_cc_zodiac_check</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Phase setup //
phase[0] = 5;
phase[1] = 1;
phase[2] = 0;

// Phase skipping //
phase_skip_time = 0;
phase_skip_to = 0;
phase_skip = 0;

// Textbox setup //
textbox_written = "";
textbox_goal = "";
textbox_pause = 0;
textbox_position = 0;
textbox_skip = false;  

// Alpha setup //
alpha_textbox = 0;
alpha_textbox_goal = 0;
alpha_textbox_timer = 0;
alpha_event = 0;
alpha_event_goal = 0;

// Button setup //
button_accept_flash = false;
button_accept_timer = 20;
button_accept_clickable = false;
button_accept_hover = false;
button_accept_x = 236;
button_accept_y = 200;
button_accept_click_effect = 0;

image_speed = 0.1;

era_first = "Clispaeth Era";
era_second = "Before Clispaeth";
date_title = "Date of birth";

rings_activated = 0;

timer_transition = 0;
timer_active = 0;
timer_sparkle = 1;
timer_show_grafix = 0;
draw_grafix = false;
active = false;
speed_move_margin = 0;
zodiac_selected = false;
sound_cooldown = 0;
wheel_moved = 0;

day = 0;
day_length = 80;
day_direction = 0;
month = 0;
month_length = 60;
month_direction = 0;
year = 0;
year_length = 40;
year_direction = 0;
year_temp = 0;

era = 0;
china = 0;
selection_name = "";

option[0] = "Year";
option[1] = "Month";
option[2] = "Day";

option_selected[0] = false;
option_selected[1] = false;
option_selected[2] = false;

text_day[0] = "0";
text_day[1] = "1";
text_month[0] = "0";
text_month[1] = "1";
text_year[0] = "0";
text_year[1] = "0";
text_year[2] = "0";
text_year[3] = "0";

option_hover[0] = false;
option_hover[1] = false;
option_hover[2] = false;
option_hover[3] = false;
option_hover[4] = false;

alpha = 0;
goal_alpha = 0;

x = 192;
y = 105;

text[0] = "It is by light that the troglodyte emerged from the#cave to become man and it is by light that man#navigates the cosmos to become more."
text[1] = "The stars, the heavens, tiny specks of flame that#illuminate the night, have guided human thought#and imagination since the dawn of our race.";   
text[2] = "We find our way, draw our energy, build our#civilizations through their luminescence. And we#find ourselves through them.";
text[3] = "It is the incandescent mind of man that imprinted#its legends in the stars - the Zodiacs. Tell me your#birthday, so I may tell you your star...";     

text_zodiac[0, 0] = 2;
text_zodiac[0, 1] = "Ahh, the brash Aries, boastful to a fault, quick to#anger... but steadfastly loyal, you put your#companions before yourself.";
text_zodiac[0, 2] = "Your friends will be few and far between, but they#will be true indeed.";

text_zodiac[1, 0] = 2;
text_zodiac[1, 1] = "Ahh, the most courageous of all the star signs -#Taurus, the seeker. A warrior unparalleled, your#foes will bow to your might and majesty.";
text_zodiac[1, 2] = "But, you must be cautious to temper your power#with justice...";

text_zodiac[2, 0] = 2;
text_zodiac[2, 1] = "Ahhh, a Gemini, a true scholar. Your wisdom and#insight inspire those around you. Your curious#nature can sometimes lead you and those closest to#you in trouble.";
text_zodiac[2, 2] = "But perhaps that is not the weakness it seems..."

text_zodiac[3, 0] = 2;
text_zodiac[3, 1] = "A Cancer, I see? Yes, I could tell by your movement,#fluid, graceful, confident, that you possessed the#gift of Cancer. You must make haste in the trials#that await you...";
text_zodiac[3, 2] = "Perhaps it is speed that your journey most#requires...";

text_zodiac[4, 0] = 2;
text_zodiac[4, 1] = "A Leo! Ahh, I could sense it in your eyes, your#empathy, your warmth towards others. Your#kindness is your strength and your heart is open#to all..."
text_zodiac[4, 2] = "But, you must be wary not to let in those who would#do you harm..." 

text_zodiac[5, 0] = 2;
text_zodiac[5, 1] = "It is an honor to stand before a warrior of the#Virgo star sign! Chivalrous and valiant, your heart#burns with a sincerity unknown in our modern#times."
text_zodiac[5, 2] = "But soon... you may be forced to choose between#your idealism and reality...";
    
text_zodiac[6, 0] = 2;
text_zodiac[6, 1] = "Ah, the stern and aloof Libra. Behind your mask of#stoicism is a passion that you guard deeply. You#know the power of emotion. You choose to reveal#yours only when the time is right."
text_zodiac[6, 2] = "Perhaps the journey that awaits you is one where#passions run deep and the wellspring of emotions#you've been holding back must flow...";

text_zodiac[7, 0] = 2;
text_zodiac[7, 1] = "Scorpio, the curious wanderer... Your keen intellect#is fueled by a passion for discovery; your zest#for life is what propels you.";
text_zodiac[7, 2] = "Your inquisitiveness can get you into trouble, but#it is also your greatest asset.";

text_zodiac[8, 0] = 3;
text_zodiac[8, 1] = "You are an Ophiucus! This... this is a surprise,#indeed. The stars tell much of the enigmatic Zodiac#Ophiucus, and yet they say so little.";
text_zodiac[8, 2] = "Whispers, screams, echoes upon walls of echoes.#This galaxy, this playpen for the whims of F.A.T.E. - #its meaning can only be deduced so much.";
text_zodiac[8, 3] = "Perhaps the power of this Zodiac has yet to be#revealed. And perhaps... it will be revealed through#you.";

text_zodiac[9, 0] = 2;
text_zodiac[9, 1] = "Sagittarius the Beautiful. It is said that those#bearing the star sign of Sagittarius possess the#social graces and charisma of their namesake#Zodiac, but also the duplicity.";
text_zodiac[9, 2] = "Learn ye this: The words we speak, we must keep#and this is doubly so for the loquacious Sagittarius.";

text_zodiac[10, 0] = 2;
text_zodiac[10, 1] = "Ah... you are a Capricorn...";
text_zodiac[10, 2] = "Well, no matter. I am sure Capricorn's legendary#shortcomings do not reflect on you. After all, how#can we deduce meaning from arbitrary points of#light billions upon billions of miles away?";

text_zodiac[11, 0] = 3;
text_zodiac[11, 1] = "Aquarius the Hunter! Aquarius' keen eye made her#the greatest bowman in the cosmos; her steady arm#brought down many a beast.";
text_zodiac[11, 2] = "But it was with her sharp senses that she#discovered the infidelity of her love, rending her#heart in twain.";
text_zodiac[11, 3] = "There are those that say ignorance is bliss, and#many an Aquarius is among them.";

text_zodiac[12, 0] = 2;
text_zodiac[12, 1] = "You were born under the sign of Pisces, the#Quixotic! Your heart is free, your spirit unattached#to the mores and anchors of society. You live life#for yourself, just as Pisces did."
text_zodiac[12, 2] = "But you do not walk the path ahead of you alone.#Can you learn to fight for those beside you? Can the#shield fight without the sword?" 

text_china[0, 0] = 3;
text_china[0, 1] = "I also see swirling gasses, bodies streaming through#thick cosmic fog, the invisible fingers of gravity#hurtling comets and planets and all manner of#debris into the infinite potpourri of space."; 
text_china[0, 2] = "The untamed creative energies in your mind churn#in perpetual parallel to the chaos of the universe.";
text_china[0, 3] = "You have a deep, powerful connection to the#Whirlpool Galaxy - a galaxy of infinite chaos... and#infinite potential.";

text_china[1, 0] = 3;
text_china[1, 1] = "There is also a deep sense of dignity and grace#within you. Others view you with a sense of#eminence, even majesty.";
text_china[1, 2] = "You have always been different, perhaps elevated,#from the people around you. You are not an#outcast - no, you live by your own code, a code#of austerity and self-determination."; 
text_china[1, 3] = "You are the noble Moon that guides us in the night.";

text_china[2, 0] = 3;
text_china[2, 1] = "But there is more... there is a hunger inside of you,#an untamed voracity for all that there is to take,#be it life or pleasure or some earthly commodity." 
text_china[2, 2] = "But it is neither emptiness nor gluttony that #compels you - it is your base, unchangeable nature,#just as it is the nature of Black Holes to consume#all in their wake."; 
text_china[2, 3] = "You will continue to devour all before you until#you gutter out, leaving no trace of your existence#- only swathes of emptiness in the places you have#been.";

text_china[3, 0] = 4;
text_china[3, 1] = "I also see a stirring deep within you, a dormant#violence with a force far beyond your own#reckoning.";
text_china[3, 2] = "Beneath your calm surface lies a raging core, a#bellicose ember waiting to be stoked by the winds#of destruction.";
text_china[3, 3] = "Like countless Asteroids and Comets, you glide#serenely through the cosmos, but F.A.T.E. dictates#that eventually... you must collide."; 
text_china[3, 4] = "The annihilation you unleash when this happens#will change you... and the galaxy... forever.";

text_china[4, 0] = 2;
text_china[4, 1] = "I also sense an innate calmness within you, a#mildness and compassion for others. Your actions#are guided by your empathy and you share a deep#bond with the life giving Red Dwarf;" 
text_china[4, 2] = "Your presence nurtures the people around you and#your gentle temperament, though subdued, is a#magnet for those in need.";

text_china[5, 0] = 3;
text_china[5, 1] = "There is also an incredible sense of mystery about#you, an enigmatic aura that obfuscates your true#nature. You are quiet but not idle, the Rube#Goldberg machine in your head in constant motion." 
text_china[5, 2] = "Scientists, oracles, philosophers, psychologists -#from all angles they prod, but none can unravel#this Gordian Knot.";
text_china[5, 3] = "Like the Jovian planet Jupiter, the more we learn,#the more we know we have yet to learn."

text_china[6, 0] = 4;
text_china[6, 1] = "The ancient Zoroastrians were the greatest#astronomers and cosmologists of antiquity."; 
text_china[6, 2] = "Their skill in stargazing was unparalleled by any#other civilization for centuries, perhaps millennia,#to come.";
text_china[6, 3] = "Through their cosmic exploration, they came to#appreciate the life-giving and nurturing power#of the Sun, as well as humanity's dependence on it#and indeed, came to worship its flames.";
text_china[6, 4] = "You bear a deep connection with the Sun, just as#the ancient Zoroastrians did. And perhaps...#you are their greatest legacy...";

text_china[7, 0] = 3;
text_china[7, 1] = "But wait... I also see massive rocks - asteroids -#hurtling through the void. Individually, these#rocks crash and collide, slamming into one another,#a cacophonous symphony of perpetual carnage.";
text_china[7, 2] = "But they also form a unified entity, an Asteroid#Belt drifting in a perfect ellipse around the#sun. It is an ordered chaos." 
text_china[7, 3] = "Each asteroid is an atom in the grand molecule of#the Asteroid Belt - the law needs chaos to exist#and vice versa. The duality of the Asteroid Belt#is something I see deep within you."

text_china[8, 0] = 4;
text_china[8, 1] = "In 1731, John Bevis made a discovery that would#change the course of human history, a discovery#that is often referred to as Bevis' Gambit." 
text_china[8, 2] = "Through his primitive telescope, Bevis saw a cloud#of prismatic gasses, forever shifting in color and#shape in psychedelic metamorphosis." 
text_china[8, 3] = "Bevis had discovered the Crab Nebula, a cosmic#body that has come to represent the wonder of the#universe and the possibilities of what remains#undiscovered." 
text_china[8, 4] = "I see in you both a deep connection to the Crab#Nebula... and to Bevis."

text_china[9, 0] = 3;
text_china[9, 1] = "Know thou that every fixed star hath its own#planets, and every planet its own creatures,#whose numbers no man can compute." 
text_china[9, 2] = "I also see in you a wild energy, a bond that ties#you to every living thing in the cosmos no matter#its origin or form."
text_china[9, 3] = "The empathic kinship with all Life within you is#perhaps the most powerful force that can exist,#more than 1,000 atomic bombs, and for this reason#it is your greatest strength"
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Pause //
if paused() then exit;

// Phases //
if phase[0] &gt; 0 then
    {
    // Tick down //
    phase[0] -= dt();
    
    // Event //
    if phase[0] &lt;= 0 then
        {
        // Zodiac intro texts //
        if phase[1] &gt;= 1 and phase[1] &lt;= 4 then scr_cc_textbox(text[phase[1] - 1]);
            
        // Go to zodiac entry //
        if phase[1] = 5 then 
            {
            instance_create(x, y, o_cc_transition);
            timer_show_grafix = 10;
            }
            
        // Zodiac //
        if phase[1] &gt;= 6 and phase[1] &lt;= 9 then
            {
            if text_zodiac[zodiac, 0] &gt;= phase[1] - 5 then scr_cc_textbox(text_zodiac[zodiac, phase[1] - 5]);
            else phase[1] = 10;
            }
            
        // End //
        if phase[1] &gt;= 10 and phase[1] &lt;= 14 then
            {
            if text_china[china, 0] &gt;= phase[1] - 9 then scr_cc_textbox(text_china[china, phase[1] - 9]);
            else
                {
                phase[2] = 5;
                alpha_textbox_goal = 0;
                alpha_event_goal = 0;
                }
            }
        }
    } 
    
// Active //
if !instance_exists(o_cc_transition) and zodiac_selected = false and phase[1] &gt;= 5 and active = false and timer_active = 0 then timer_active = 5;
    
// Active timer //
if timer_active &gt; 0 then   
    {
    // Tick down //
    timer_active -= dt();
    
    // Event //
    if timer_active &lt;= 0 then active = true; 
    }

// Name entry phase[1] //
if active = true then
    {
    // Accept all selections, if not busy with orgbs //
    if button_accept_clickable = true then
        {
        if option_selected[0] = false and option_selected[1] = false and option_selected[2] = false then
            {
            // Hover //
            if o_pointer.x &gt;= x - 18 and o_pointer.x &lt;= x + 18 and o_pointer.y &gt;= y - 18 and o_pointer.y &lt;= y + 18 then 
                {
                // BONG if button_accept_hover = false then audio_play_sound_at_xy(sn_cc_hover_jewel2, false, 10, 0, 0);
                if button_accept_hover = false then audio_play_sound(sn_cc_hover_jewel2, 10, 0);
                button_accept_hover = true;
                }
            else button_accept_hover = false;
        
            // Accepted //
            //if button_accept_hover = true and scr_input_check_pressed(KEYID_ACTION, PLAYER1) then event_user(0);
            if button_accept_hover = true and mouse_check_button_pressed(mb_left) then event_user(0);
            }
        }
        
    // De-select //
    //if scr_input_check_released(KEYID_ACTION, PLAYER1) then
    if mouse_check_button_released(mb_left) then    
        {        
        // Activation of rings //
        if option_selected[2] = true and rings_activated &lt; 2 then rings_activated = 2;    
        else if option_selected[1] = true and rings_activated &lt; 3 then rings_activated = 3;    
        else if option_selected[0] = true and rings_activated &lt; 4 then rings_activated = 4;     
            
        // Activate accept button //
        if rings_activated = 4 then button_accept_clickable = true;
        
        // De-select all //    
        option_selected[0] = false;
        option_selected[1] = false;
        option_selected[2] = false;
        }
    
    // Select //
    if mouse_check_button_pressed(mb_left) then
    //if scr_input_check_pressed(KEYID_ACTION, PLAYER1) then
        {
        // De-select all previous orbs, IF they were selected //
        if option_selected[0] = true or option_selected[1] = true or option_selected[2] = true then
            {
            option_selected[0] = false;
            option_selected[1] = false;
            option_selected[2] = false;
            }
            
        // Otherwise, check for the era buttons //
        else if option_hover[3] = true or option_hover[4] = true then
            {
            if option_hover[3] = true then 
                {
                era = 0;
                //audio_play_sound_at_xy(sn_cc_generic_button1, false, 10, 0, 0);
                audio_play_sound(sn_cc_generic_button1, 10, 0);
                }
            else if option_hover[4] = true then 
                {
                era = 1;
                //audio_play_sound_at_xy(sn_cc_generic_button1, false, 10, 0, 0);
                audio_play_sound(sn_cc_generic_button1, 10, 0);
                }
            }
            
        // If that is not the case either, then its the most basic solution, player is trying to move the orbs //
        else
            {
            // Activate orbs //
            if option_hover[0] = true then
                {
                //audio_play_sound_at_xy(sn_cc_click_jewel1, false, 10, 0, 0);
                audio_play_sound(sn_cc_click_jewel1, 10, 0);
                option_selected[0] = true;
                wheel_moved = year_direction;
                sound_cooldown = 1;
                }
            else if option_hover[1] = true then
                {
                //audio_play_sound_at_xy(sn_cc_click_jewel1, false, 10, 0, 0);
                audio_play_sound(sn_cc_click_jewel1, 10, 0);
                option_selected[1] = true;
                wheel_moved = month_direction;
                sound_cooldown = 1;
                }
            else if option_hover[2] = true then
                {
                //audio_play_sound_at_xy(sn_cc_click_jewel1, false, 10, 0, 0);
                audio_play_sound(sn_cc_click_jewel1, 10, 0);
                option_selected[2] = true;
                wheel_moved = day_direction;
                sound_cooldown = 1;
                }
            }
        }
    
    // Moving sounds //
    if option_selected[0] = true then
        {
        // Play sound when cooldown is off //
        if sound_cooldown &gt; 0 then
            {
            // Tick down //
            sound_cooldown -= 1;
            
            // Event //
            if sound_cooldown = 0 then
                {
                sound_cooldown = 5;
                if year_direction &lt; wheel_moved - 2 or year_direction &gt; wheel_moved + 2 then
                    {
                    //if !audio_is_playing(sn_cc_stonewheel3) then audio_play_sound_at_xy(sn_cc_stonewheel3, false, 10, 0, 0);
                    if !audio_is_playing(sn_cc_stonewheel3) then audio_play_sound(sn_cc_stonewheel3, 10, 0);
                    }
                else if audio_is_playing(sn_cc_stonewheel3) then audio_stop_sound(sn_cc_stonewheel3);
                wheel_moved = year_direction;
                }
            }
        }
    else if option_selected[1] = true then
        {
        // Play sound when cooldown is off //
        if sound_cooldown &gt; 0 then
            {
            // Tick down //
            sound_cooldown -= 1;
            
            // Event //
            if sound_cooldown = 0 then
                {
                sound_cooldown = 5;
                if month_direction &lt; wheel_moved - 2 or month_direction &gt; wheel_moved + 2 then
                    {
                    //if !audio_is_playing(sn_cc_stonewheel2) then audio_play_sound_at_xy(sn_cc_stonewheel2, false, 10, 0, 0);
                    if !audio_is_playing(sn_cc_stonewheel2) then audio_play_sound(sn_cc_stonewheel2, 10, 0);
                    }
                else if audio_is_playing(sn_cc_stonewheel2) then audio_stop_sound(sn_cc_stonewheel2);
                wheel_moved = month_direction;
                }
            }
        }
    else if option_selected[2] = true then
        {
        // Play sound when cooldown is off //
        if sound_cooldown &gt; 0 then
            {
            // Tick down //
            sound_cooldown -= 1;
            
            // Event //
            if sound_cooldown = 0 then
                {
                sound_cooldown = 5;
                if day_direction &lt; wheel_moved - 2 or day_direction &gt; wheel_moved + 2 then
                    {
                    // BONG if !audio_is_playing(sn_cc_stonewheel1) then audio_play_sound_at_xy(sn_cc_stonewheel1, false, 10, 0, 0);
                    if !audio_is_playing(sn_cc_stonewheel1) then audio_play_sound(sn_cc_stonewheel1, 10, 0);
                    }
                else if audio_is_playing(sn_cc_stonewheel1) then audio_stop_sound(sn_cc_stonewheel1);
                wheel_moved = day_direction;
                }
            }
        }
        
    // Stop wheel sounds when not used //
    if option_selected[0] = false and audio_is_playing(sn_cc_stonewheel3) then audio_stop_sound(sn_cc_stonewheel3);
    if option_selected[1] = false and audio_is_playing(sn_cc_stonewheel2) then audio_stop_sound(sn_cc_stonewheel2);
    if option_selected[2] = false and audio_is_playing(sn_cc_stonewheel1) then audio_stop_sound(sn_cc_stonewheel1);
 
    // Hover over the time orbs //
    if o_pointer.x &gt;= 186 + lengthdir_x(80, day_direction) and o_pointer.x &lt;= 198 + lengthdir_x(80, day_direction) and o_pointer.y &gt;= 99 + lengthdir_y(80, day_direction) and o_pointer.y &lt;= 111 + lengthdir_y(80, day_direction) then 
        {
        // if option_hover[2] = false and option_selected[2] = false and rings_activated &gt;= 1 then audio_play_sound_at_xy(sn_cc_hover_jewel1, false, 10, 0, 0); 
        if option_hover[2] = false and option_selected[2] = false and rings_activated &gt;= 1 then audio_play_sound(sn_cc_hover_jewel1, 0, 0);
        option_hover[2] = true;
        }
    else option_hover[2] = false;
    
    // Hover over the time orbs //
    if o_pointer.x &gt;= 186 + lengthdir_x(60, month_direction) and o_pointer.x &lt;= 198 + lengthdir_x(60, month_direction) and o_pointer.y &gt;= 99 + lengthdir_y(60, month_direction) and o_pointer.y &lt;= 111 + lengthdir_y(60, month_direction) then
        {
        //if option_hover[1] = false and option_selected[1] = false and rings_activated &gt;= 2 then audio_play_sound_at_xy(sn_cc_hover_jewel1, false, 10, 0, 0);
        if option_hover[1] = false and option_selected[1] = false and rings_activated &gt;= 2 then audio_play_sound(sn_cc_hover_jewel1, 0, 0);
        option_hover[1] = true;
        }
    else option_hover[1] = false;
    
    // Hover over the time orbs //
    if o_pointer.x &gt;= 186 + lengthdir_x(40, year_direction) and o_pointer.x &lt;= 198 + lengthdir_x(40, year_direction) and o_pointer.y &gt;= 99 + lengthdir_y(40, year_direction) and o_pointer.y &lt;= 111 + lengthdir_y(40, year_direction) then 
        {
        // BONG if option_hover[0] = false and option_selected[0] = false and rings_activated &gt;= 3 then audio_play_sound_at_xy(sn_cc_hover_jewel1, false, 10, 0, 0);
        if option_hover[0] = false and option_selected[0] = false and rings_activated &gt;= 3 then audio_play_sound(sn_cc_hover_jewel1, 0, 0);
        option_hover[0] = true;
        }
    else option_hover[0] = false;        
   
    // Assign a floating tooltip when hovering over them //
    for (i=0; i&lt;3; i+=1;)
        {
        if option_selected[i] = true or option_hover[i] = true then selection_name = option[i];
        }
    
    // No hover //
    if option_selected[0] = false and option_selected[1] = false and option_selected[2] = false and option_hover[0] = false and option_hover[1] = false and option_hover[2] = false then selection_name = "";
        
    // Set direction of the orbs //
    if option_selected[2] = true then
        {
        day_direction = point_direction(192, 105, o_pointer.x, o_pointer.y);
        }
    else if option_selected[1] = true then
        {
        month_direction = point_direction(192, 105, o_pointer.x, o_pointer.y);
        }
    else if option_selected[0] = true then
        {
        year_direction = point_direction(192, 105, o_pointer.x, o_pointer.y);
        }

    // Realign direction values //
    year = floor(year_direction / 360 * 9999);
    month = floor(month_direction / 360 * 12);
    day = floor(day_direction / 360 * 31);
    
    // Hover ERA buttons //
    if option_selected[0] = false and option_selected[1] = false and option_selected[2] = false then
        {
        option_hover[3] = scr_cc_button_xy(192, 288, 204, 219);
        option_hover[4] = scr_cc_button_xy(192, 288, 220, 234);
        }
    }

// Day text //
if day+1 &lt; 10 then 
    {
    text_day[0] = 0;
    text_day[1] = day+1;
    }
else 
    {
    text_day[0] = floor((day+1) / 10);
    if day+1 &gt;= 10 and day+1 &lt; 20 then text_day[1] = day-9; 
    else if day+1 &gt;= 20 and day+1 &lt; 30 then text_day[1] = day-19; 
    else if day+1 &gt;= 30 then text_day[1] = day-29;
    }
    
// Month text //
if month+1 &lt; 10 then 
    {
    text_month[0] = 0;
    text_month[1] = month+1;
    }
else 
    {
    text_month[0] = floor((month+1) / 10);
    if month+1 &gt;= 10 and month+1 &lt; 20 then text_month[1] = month-9; 
    else text_month[1] = month+1;
    }
    
// Year text //
if year &lt; 10 then year_temp = "000" + string(year);
else if year &lt; 100 then year_temp = "00" + string(year);
else if year &lt; 1000 then year_temp = "0" + string(year);
else year_temp = string(year);

text_year[0] = string_char_at(string(year_temp), 1);
text_year[1] = string_char_at(string(year_temp), 2);
text_year[2] = string_char_at(string(year_temp), 3);
text_year[3] = string_char_at(string(year_temp), 4);
    
// Accept button timer //
if button_accept_timer &gt; 0 and phase[1] &gt;= 5 then 
    {
    // Tick down //
    button_accept_timer -= dt();
    
    // Activate first ring //
    if button_accept_timer &lt;= 0 then rings_activated = 1;
    }

// Grafix //
if timer_show_grafix &gt; 0 then 
    {
    // Tick down //
    timer_show_grafix -= dt();
    
    // Event //
    if timer_show_grafix &lt;= 0 then
        {
        if draw_grafix = false then draw_grafix = true;
        else draw_grafix = false;
        }
    }
    
// Sparkles //
if timer_sparkle &gt; 0 then
    {
    // Tick down //
    timer_sparkle -= dt();
    
    // Event //
    if timer_sparkle &lt;= 0 then
        {
        timer_sparkle = random(1) + 0.5;
        switch (rings_activated)
            {
            case 1:
                irandom(7) instance_create(view_xview + 192 + lengthdir_x(80, day_direction) - irandom(8) + irandom(8), view_yview + 105 + lengthdir_y(80, day_direction) - irandom(8) + irandom(8), o_cc_zodiac_sparkle);
            break;
            case 2:
                irandom(7) instance_create(view_xview + 192 + lengthdir_x(60, month_direction) - irandom(8) + irandom(8), view_yview + 105 + lengthdir_y(60, month_direction) - irandom(8) + irandom(8), o_cc_zodiac_sparkle);
            break;
            case 3:
                irandom(7) instance_create(view_xview + 192 + lengthdir_x(40, year_direction) - irandom(8) + irandom(8), view_yview + 105 + lengthdir_y(40, year_direction) - irandom(8) + irandom(8), o_cc_zodiac_sparkle);
            break;
            case 4:
                irandom(10) instance_create(view_xview + 192 - irandom(20) + irandom(20), view_yview + 105 - irandom(20) + irandom(20), o_cc_zodiac_sparkle);
            break;
            }
        }
    }
    
// Transition //
if timer_transition &gt; 0 then
    {
    // Tick down //
    timer_transition -= dt();
    
     // Event //
     if timer_transition &lt;= 0 then instance_create(0, 0, o_cc_transition);
     }     
    
// Move on with CC //
if phase[2] &gt; 0 then
    {
    // Tick down //
    phase[2] -= dt();
    
    // Event //
    if phase[2] &lt;= 0 then
        {
        o_cc_data.character_year = year;
        o_cc_data.character_month = month;
        o_cc_data.character_day = day;
        instance_create(x, y, o_cc_blood);
        instance_destroy();
        }
    }
    
// Skip with button //
scr_cc_textbox_skip();

// Type it //
scr_cc_textbox_type();

// Move to a next phase //
scr_cc_phase_skip_process();
    
// Alpha for Textboxes //
if alpha_textbox_timer &gt; 0 then alpha_textbox_timer -= dt();
else
    {
    if alpha_textbox &lt; alpha_textbox_goal then alpha_textbox += 0.1;
    if alpha_textbox &gt; alpha_textbox_goal then alpha_textbox -= 0.1;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Accept //
timer_show_grafix = 10;
timer_transition = 5;
timer_sparkle = 0;
phase[0] = 35;
phase[1] += 1;
active = false;

// Zodiac decipher //
zodiac = month;
china = floor(year mod 10);
o_cc_data.character_zodiac = zodiac;
o_cc_data.character_zodiac_year = year;
o_cc_data.character_zodiac_month = month;
o_cc_data.character_zodiac_day = day;
o_cc_data.character_zodiac_era = era;

// PAX //
o_cc_data.pax[0] = scr_cc_paxcode_convert(day);
o_cc_data.pax[1] = scr_cc_paxcode_convert(month);
o_cc_data.pax[2] = scr_cc_paxcode_convert(string_char_at(string(year), 1)); 
o_cc_data.pax[3] = scr_cc_paxcode_convert(string_char_at(string(year), 2)); 
o_cc_data.pax[4] = scr_cc_paxcode_convert(string_char_at(string(year), 3));
o_cc_data.pax[5] = scr_cc_paxcode_convert(string_char_at(string(year), 4));
o_cc_data.pax[6] = scr_cc_paxcode_convert(zodiac);
o_cc_data.pax[7] = scr_cc_paxcode_convert(era);

// THOUSANDS //
if year &gt;= 1000 then o_cc_data.pax[2] = string_char_at(string(year), 1);
else o_cc_data.pax[2] = "0";

// HUNDREDS //
if year &gt;= 100 then 
   {
   if year &gt;= 1000 then o_cc_data.pax[3] = string_char_at(string(year), 2);
   else o_cc_data.pax[3] = string_char_at(string(year), 1);
   }
else o_cc_data.pax[3] = "0";

// TENS //
if year &gt;= 10 then 
   {
   if year &gt;= 1000 then o_cc_data.pax[4] = string_char_at(string(year), 3);
   else if year &gt;= 100 then o_cc_data.pax[4] = string_char_at(string(year), 2);
   else o_cc_data.pax[4] = string_char_at(string(year), 1);
   }
else o_cc_data.pax[4] = "0";

// ONES //
if year &gt; 0 then
    {
    if year &gt;= 1000 then o_cc_data.pax[5] = string_char_at(string(year), 4);
    else if year &gt;= 100 then o_cc_data.pax[5] = string_char_at(string(year), 3);
    else if year &gt;= 10 then o_cc_data.pax[5] = string_char_at(string(year), 2);
    else o_cc_data.pax[5] = string_char_at(string(year), 1);
    }
else o_cc_data.pax[5] = "0";

// Flash //
button_accept_flash = true; 
zodiac_selected = true;

// Sound //
// BONG audio_play_sound_at_xy(sn_cc_click_jewel2, false, 10, 0, 0);
audio_play_sound(sn_cc_click_jewel2, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw textboxes //
scr_cc_draw_textbox();

// Draw grafix //
if draw_grafix = true then
    {
    // Backdrop //
    draw_sprite_ext(s_cc_zodiac_backdrop, 0, 192, 120, 1, 1, 0, c_white, 1);
    
    // Stone circle //
    if rings_activated = 0 then draw_sprite_ext(s_cc_zodiac_rings, 3, 192, 105, 1, 1, day_direction, c_white, 1);
    else if option_selected[2] = true then draw_sprite_ext(s_cc_zodiac_rings, 2, 192, 105, 1, 1, day_direction, c_white, 1);
    else draw_sprite_ext(s_cc_zodiac_rings, 0 + option_hover[2], 192, 105, 1, 1, day_direction, c_white, 1);
    
    if rings_activated &lt;= 1 then draw_sprite_ext(s_cc_zodiac_rings, 7, 192, 105, 1, 1, month_direction, c_white, 1);
    else if option_selected[1] = true then draw_sprite_ext(s_cc_zodiac_rings, 6, 192, 105, 1, 1, month_direction, c_white, 1);
    else draw_sprite_ext(s_cc_zodiac_rings, 4 + option_hover[1], 192, 105, 1, 1, month_direction, c_white, 1);
    
    if rings_activated &lt;= 2 then draw_sprite_ext(s_cc_zodiac_rings, 11, 192, 105, 1, 1, year_direction, c_white, 1);
    else if option_selected[0] = true then draw_sprite_ext(s_cc_zodiac_rings, 10, 192, 105, 1, 1, year_direction, c_white, 1);
    else draw_sprite_ext(s_cc_zodiac_rings, 8 + option_hover[0], 192, 105, 1, 1, year_direction, c_white, 1);
    
    // Accept button //
    if rings_activated &lt;= 3 then
        {
        draw_sprite_ext(s_cc_zodiac_rings, 15, 192, 105, 1, 1, 0, c_white, 1);
        }
    else
        {
        if button_accept_flash = false then
            {
            if button_accept_hover = true then draw_sprite_ext(s_cc_zodiac_rings, 13, 192, 105, 1, 1, 0, c_white, 1);
            else draw_sprite_ext(s_cc_zodiac_rings, 12, 192, 105, 1, 1, 0, c_white, 1);
            }
        else draw_sprite_ext(s_cc_zodiac_rings, 14, 192, 105, 1, 1, 0, c_white, 1);
        }
        
    // Draw date //
    draw_set_halign(fa_center);
    draw_set_alpha(1)
    draw_set_color(c_white);
    draw_text(119, 206, string(date_title));
    
    draw_set_halign(fa_right);
    draw_set_color(c_red);
    
    for (i=0; i&lt;2; i+=1;)
        {
        draw_text(82 + 10 * i, 225, string(text_day[i]));
        draw_text(109 + 10 * i, 225, string(text_month[i]));
        }
    for (i=0; i&lt;4; i+=1;) draw_text(137 + 10 * i, 225, string(text_year[i]));
    
    // What era is selected //
    if era = 0 then draw_sprite_ext(s_cc_zodiac_check, image_index, 184, 210, 1, 1, 0, c_white, 1);
    else draw_sprite_ext(s_cc_zodiac_check, image_index, 184, 228, 1, 1, 0, c_white, 1);
    
    // Hover era buttons //
    draw_set_halign(fa_left);
    draw_set_alpha(1);
    
    if option_hover[3] = true then draw_set_color(c_red);
    else draw_set_color(c_white);
    draw_text(197, 206, string(era_first));
    
    if option_hover[4] = true then draw_set_color(c_red);
    else draw_set_color(c_white);
    draw_text(197, 225, string(era_second));
    
    // Draw selection name = DAY, MONTH or YEAR //
    draw_text(o_pointer.x + 18, o_pointer.y + 6, selection_name);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
