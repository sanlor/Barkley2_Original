<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create - Parameters
scr_hud_gun_init();
gunWid = global.gunWidth;
gunHei = global.gunHeight;
gunMat = global.gunMaterials; //Total number of materials
gunTyp = global.gunTypes; //Maximum amount of gun types
gunPerCut = global.gunPerSheet; //20 guns per sheet stacked vertical makes a sheet of 624x980
gunSht = global.gunSheets;

cutXOrg = 98; //X position to start cropping
cutYOrg = 24; //Y position to start cropping

//20 is max, but having 9 means there's 9 sheets of 9
//buttonX[0] = 5; buttonY[0] = 5; buttonW[0] = 128; buttonH[0] = 32;
//show_debug_message("@@@@@ Load?");

_tim = get_timer();
gunSpr = sprite_add("Arsenal.png", 1, 0, 0, 0, 0);
show_debug_message("@@@@@ Time to load: " + string(_tim / 1000000) + "");

//Make sheets
//6 handguns, 1 blank, 6 rifles, 1 blank, 5 automatics, 1 blank, 4 explosive guns
for (i = 0; i &lt; 50; i += 1) skip[i] = 0;
skip[6] = 1;
skip[13] = 1;
skip[19] = 1;
skip[24] = 1;

matAcc = 0;
sur = surface_create(gunWid * gunPerCut, gunHei * gunTyp);
for (sht = 0; sht &lt; gunSht; sht += 1)
{
    surface_set_target(sur);
    draw_clear(c_fuchsia);
    for (mat = 0; mat &lt; gunPerCut; mat += 1)
    {
        typ = 0;
        for (t = 0; typ &lt; gunTyp; t += 1)
        {
            if (skip[t] == 0)
            {
                DrawGridXY(t, matAcc + mat, mat * gunWid, typ * gunHei);
                typ += 1;
            }
        }
        //break;
    }
    surface_reset_target();
    surface_save(sur, "Guns/FrankieGuns" + string(sht) + ".png");
    show_debug_message("Saved FrankieGuns" + string(sht) + ".png");
    
    matAcc += gunPerCut;
}

event_user(0);

exit;
//Time to load those files we generate
_tim = get_timer();
for (sht = 0; sht &lt; gunSht; sht += 1)
{
    sprite_add("FrankieGuns" + string(sht) + ".png", 1, 1, 0, 0, 0);
}
_tim = get_timer() - _tim;
show_debug_message("Took " + string(_tim / 1000000) + " seconds to load all of the FrankieGun images at once.");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step - Load file
exit;
if (mouse_check_button(mb_left))
{
    mouse_clear(mb_left);
    if (mouse_x &gt; dx &amp;&amp; mouse_x &lt; dx + dw &amp;&amp; mouse_y &gt; dy &amp;&amp; mouse_y &lt; dy + dh)
    {
        fil = get_open_filename("PNG file|*.png","");
        _tim = get_timer();
        sprite_add(fil, 1, 0, 0, 0, 0);
        show_debug_message("Time to load: " + string(_tim) + "");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///New gun
gunCurMat = floor(random(global.gunMaterials));
gunCurTyp = choose(s_hud_pistols,
s_hud_flintlock,
s_hud_machinepistol,
s_hud_revolvers,
s_hud_magnum,
s_hud_flaregun,
s_hud_rifle,
s_hud_musket,
s_hud_huntingrifle,
s_hud_tranqrifle,
s_hud_sniper,
s_hud_assaultrifle);

if (random(100) &lt; 50) gunCurMat = choose(s_hud_smg,
s_hud_heavymachinegun,
s_hud_gatlinggun,
s_hud_minigun,
s_hud_mitrailleuse,
s_hud_shotgun,
s_hud_doubleshotgun,
s_hud_revshotgun,
s_hud_elephantgun);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw - Button
scr_hud_gun_draw(gunCurTyp, gunCurMat, 0, 0);

draw_set_halign(1);
draw_set_valign(1);
draw_text_transformed(room_width / 2, room_height / 2, "Check AppData folder Guns for the sprites.", 2, 2, 0);
draw_set_halign(0);
draw_set_valign(0);




exit;


dx = buttonX[0]; dy = buttonY[0]; dw = buttonW[0]; dh = buttonH[0];

draw_set_color(c_white);
draw_rectangle(dx, dy, dw, dh, 0);
draw_set_color(c_black);
draw_rectangle(dx, dy, dw, dh, 1);

draw_set_halign(1);
draw_set_valign(1);
draw_text(dx + floor(dw / 2), dy + floor(dh / 2), "Load Gun");
draw_set_halign(0);
draw_set_valign(0);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
