<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
typ = "banner";

width = o_dnet_control.dnet_width - 30; // was 320
height = 64;

// Add in height to overall thread height // 10 = gap between posts //
o_dnet_control.scrolling_position += height + 3;
o_dnet_control.scrolling_max = o_dnet_control.scrolling_position;

// Data //
image_name = "";
image_show = false;
image_file = 0;
button_hover = false;
button_pressed = 0;

// Overall content tone //
tone = global.dnet_color_variation; 
color = make_color_rgb(155 + tone * 100, 45 + tone * 15, 105 - tone * 35);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
exit;
dry = y;
dry -= (o_dnet_control.totHei / o_dnet_control.use_height) * o_dnet_control.slider_y;

button_hover = Dnet("pointer", x, dry, x + width, dry + height);

// Hide the image //
if o_dnet_app.dnet_app == -1 then
    {
    if (image_show)
        {
        if MiniKeyPress("action") || MiniKeyPress("cancel")
            {
            // Hide the image //
            if MiniKeyPress("action") then o_dnet_app.gumpus = false;
            image_show = false;
            depth = -5;
            }
        }
    else
        {        
        // Click it //
        if MiniKeyPress("action")
            {
            // Show the image //
            if button_hover = true then
                {
                o_dnet_app.gumpus = true;
                image_show = true;
                button_pressed = 3;
                depth = -15;
                } 
            }
        }
    }
    
// Reset //
if button_pressed &gt; 0 then button_pressed -= 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
dry = y;
dry -= (o_dnet_control.totHei / o_dnet_control.use_height) * o_dnet_control.slider_y;

if (typ == "banner")
{
    MiniSprite9(sDNETBorder0, sub, x, dry, width, height, 1, color, 1);
    draw_sprite(sprite_index, sub, x + 5, dry + 5);
}


exit;
// Show image //
if (image_show)
{
    // Dim backdrop //
    draw_set_alpha(1);
    draw_set_color(c_black);
    draw_rectangle(view_xview, view_yview + o_dnet_control.top_height, view_xview + o_dnet_control.dnet_width, view_yview + o_dnet_control.dnet_height, false);
    
    // Image //
    vrx = view_xview + floor((o_dnet_control.dnet_width) / 2);
    draw_sprite_ext(sprite_index, image_index, vrx - 75, view_yview + 40, 150 / sprite_width, 150 / sprite_height, image_angle, image_blend, 1);
    
    // Caption //
    DnetText(vrx, view_yview + 200, string(image_name), 300, c_red, 1, fa_center, fa_top);
    draw_set_halign(fa_left);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
