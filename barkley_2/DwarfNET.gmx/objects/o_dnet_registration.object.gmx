<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //
//font = font_add_sprite(s_dnet_font, ord('!'), true, 1);
wid = SCREEN_WIDTH;
hei = SCREEN_HEIGHT;
draw_set_font(global.fn_dnet);

// Timers //
timer_begin = 1.0; // Seconds
timer_load_1 = 0;
timer_load_2 = 0;
timer_goto_exit = 0;
timer_goto_verify = 0;
timer_verify = 0;
timer_box_receding = 0;
timer_end = 0;
timer_music_check = 20;

// Effects //
effect_c64 = false;
effect_box = false;
effect_box_receding = false;
effect_box_row_current = 0;
effect_verify = 10;
timer_effect_box = 1;

// Other //
allow_skip = false;
allow_input = false;
registration_process = 0;
effect_flicker = 10;
transition = false;
row = 0;
select = 0;
complete_name = false;
complete_password = false;

enter_name = false;
enter_password = false;
position_name = 0;
position_password = 0;
typed_name = "";
typed_password = "";
typing_cooldown = 0;
global.dnet_account_name = "xXBasketBall69Xx";
goal_name = global.dnet_account_name;
goal_password = "Bball4ever";
verify_animation = 0;
verify_phase = 0;

button_name = false;
button_password = false;
button_exit = false;
button_verify = false;

// Rows of darkness //
for (i=0; i&lt;22; i+=1;) effect_box_row[i] = 0;

// DEBUG //

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Begin //
if (timer_begin &gt; 0)
{
    timer_begin -= dt_sec();
    if (timer_begin &lt;= 0) { timer_load_1 = 2.0; effect_box = 1; }
}
    
// Timer 1 //
if (timer_load_1 &gt; 0)
{
    timer_load_1 -= dt_sec();
    if (timer_load_1 &lt;= 0) { timer_load_2 = 2.0; effect_c64 = 1; }
}
    
// Timer 2 //
if (timer_load_2 &gt; 0)
{
    timer_load_2 -= dt_sec();
    if (timer_load_2 &lt;= 0)
    {
        effect_box_receding = 1;
        timer_box_receding = 1;
        allow_skip = true;
        allow_input = true;
    }
}
    
// Timer exit //
if (timer_goto_exit &gt; 0)
{
    timer_goto_exit -= dt();
    if (timer_goto_exit &lt;= 0)
    {
        audio_set_bgm_instant(global.music_return);
        instance_destroy();
    }
}
        
// Timer goto verify //
if (timer_goto_verify &gt; 0)
{
    // Tick down //
    timer_goto_verify -= dt_sec();
    
    // Event //
    if timer_goto_verify &lt;= 0 then
    {
        audio_play_sound_ext("sn_dnet_modem", 0, false);
        timer_verify = 30.0;
        registration_process = 2;
        transition = false;
    }
}
    
// Timer verify
if timer_verify &gt; 0 then
    {
    // Tick down //
    timer_verify -= dt_sec();

    // Phase change //
    if timer_verify &lt;= 40 then verify_phase = 1;
    
    // Event //
    if timer_verify &lt;= 0 then 
        {
        timer_end = 25;
        registration_process = 3;
        } 
    } 
   
// Timer end //
if timer_end &gt; 0 then
    {
    // Tick down //
    timer_end -= dt();
    
    // Event //
    if timer_end &lt;= 0 then
        {
        allow_input = false;
        // timer_goto_exit = 10;
        transition = true;
        scr_quest_set_state("dwarfnetAccount", 1);
        instance_create(0, 0, o_dnet_control);
        instance_destroy();
        }
    }
    
// Skip the c64 intro //
if (allow_skip &amp;&amp; scr_input_check_pressed(KEYID_ANYKEY, PLAYER1) &amp;&amp; registration_process == 0)
{
    audio_set_bgm_instant("mus_blankTEMP")
    timer_music_check = -1;
    timer_box_receding = 0;
    effect_c64 = false;
    effect_box = false;
    allow_skip = false;
    registration_process = 1;
}
    
////////// Recede the boxes //////////
if (effect_box_receding)
{
    if (timer_effect_box &gt; 0)
    {
        timer_effect_box -= dt() * 5;
        if (timer_effect_box &lt;= 0)
        {
            timer_effect_box = irandom(3) + 1;
            if (effect_box_row[effect_box_row_current] &lt; 22)
            {
                effect_box_row[effect_box_row_current] += 1;
            }
            else
            {
                if (effect_box_row_current &lt; 13) effect_box_row_current += 1;
                else timer_effect_box = 0;
            } 
        }
    }
}
    
// Buttons //
if (registration_process == 1)
    {
    // Button hover name //
    button_name = false
    button_password = false;
    button_exit = false;
    button_verify = false;
    if enter_name = false and enter_password = false then
        {
        // Move selection //
        if scr_input_check_pressed(KEYID_DOWN, PLAYER1) then select += 1;
        else if scr_input_check_pressed(KEYID_UP, PLAYER1) and select = 1 then select -= 1;
        else if scr_input_check_pressed(KEYID_UP, PLAYER1) and select &gt;= 2 then select = 1;
        else if scr_input_check_pressed(KEYID_LEFT, PLAYER1) and select &gt;= 2 then select = 2;
        else if scr_input_check_pressed(KEYID_RIGHT, PLAYER1) and select &gt;= 2 then select = 3;
        else 
            {
            if keyboard_check_pressed(vk_tab) then 
                {
                if select &lt; 3 then select += 1;
                else select = 0;
                }
            }
            
        // What selections do //
        if select &lt; 0 then select = 3;
        else if select &gt; 3 then select = 0;
        if select = 0 then button_name = true;
        if select = 1 then button_password = true;
        if select = 2 then button_exit = true;
        if select = 3 then button_verify = true;
        }
    
    // Button hover name //
    /*if o_curs.x &gt;= 32 and o_curs.x &lt;= 352 and o_curs.y &gt;= 152 and o_curs.y &lt;= 162 then button_name = true;
    else button_name = false;

    // Button hover password //
    if o_curs.x &gt;= 32 and o_curs.x &lt;= 352 and o_curs.y &gt;= 180 and o_curs.y &lt;= 190 then button_password = true;
    else button_password = false;

    // Button hover exit //
    if o_curs.x &gt;= 32 and o_curs.x &lt;= 96 and o_curs.y &gt;= 204 and o_curs.y &lt;= 216 then button_exit = true;
    else button_exit = false;

    // Button hover verify //
    if o_curs.x &gt;= 100 and o_curs.x &lt;= 164 and o_curs.y &gt;= 204 and o_curs.y &lt;= 216 then button_verify = true;
    else button_verify = false;  */
    
    // Typing cooldown //
    if typing_cooldown &gt; 0 then typing_cooldown -= dt();
    
    // Click em //
    if ((scr_input_getInputType() == KEYINPUT_KEYBOARD_MOUSE and scr_input_check_pressed(KEYID_ACTION, PLAYER1)) or
        (scr_input_getInputType() != KEYINPUT_KEYBOARD_MOUSE and scr_input_check_pressed(KEYID_CONFIRM, PLAYER1))) and
         allow_input = true then
        {
        // Name //
        if button_name = true then
            {
            typing_cooldown = 0.5;
            enter_name = true;
            enter_password = false;
            }

        // Password //
        if button_password = true then
            {
            typing_cooldown = 0.5;
            enter_name = false;
            enter_password = true;
            }

        // Exit //
        if button_exit = true then
            {
            if audio_is_playing_ext("sn_dnet_keyboard_clack") then audio_stop_sound_ext("sn_dnet_keyboard_clack");
            allow_input = false;
            timer_goto_exit = 10;
            transition = true;
            }
            
        // Verify //
        if button_verify = true then
            {
            if audio_is_playing_ext("sn_dnet_keyboard_clack") then audio_stop_sound_ext("sn_dnet_keyboard_clack");
            allow_input = false;
            timer_goto_verify = 1.5;
            transition = true;
            }
        }
        
    // Type password and name //
    if scr_input_check_pressed(KEYID_ANYKEY, PLAYER1) and !scr_input_check_pressed(KEYID_ACTION, PLAYER1) and !scr_input_check_pressed(KEYID_HOLSTER, PLAYER1) then
        {
        // Cooldown check //
        if typing_cooldown &lt;= 0 then
            {
            if enter_name = true or enter_password = true then
                {
                // Clickety clack //
                if !audio_is_playing_ext("sn_dnet_keyboard_clack") then audio_play_sound_ext("sn_dnet_keyboard_clack", 0, false);
                
                // Add position //
                if enter_name = true then
                    {
                    if position_name &lt; string_length(goal_name) then position_name += 1;
                    else 
                        {
                        complete_name = true;
                        enter_name = false;
                        if position_password &lt; string_length(goal_password) then enter_password = true;
                        } 
                    typing_cooldown = 0.5; 
                    }
                else if enter_password = true then
                    {
                    if position_password &lt; 10 then position_password += 1;
                    else 
                        {
                        complete_password = true;
                        enter_password = false;
                        }
                    typing_cooldown = 0.5;
                    }                                 
                    
                // Check the names //
                typed_name = string_copy(goal_name, 0, position_name);
                typed_password = string_copy(goal_password, 0, position_password);
                }
            }
        }
    }
    
// Flicker //
if effect_flicker &gt; 0 then effect_flicker -= 1;
else effect_flicker = 15;

// Animation //
if effect_verify &gt; 0 then 
    {
    // Tick down //
    effect_verify -= 1;
    
    // Event //
    if effect_verify &lt;= 0 then 
        {
        if verify_animation &lt; 3 then verify_animation += 1;
        else verify_animation = 0;
        effect_verify = 10;
        }
    }
    
// Music check //
if timer_music_check &gt; 0 then
    {
    // Tick down //
    timer_music_check -= dt();
    
    // Event //
    if timer_music_check &lt;= 0 then
        {
        // Music //
        switch (irandom(9))
            {
            case 0: audio_set_bgm_instant("mus_dnet_track1"); break;
            case 1: audio_set_bgm_instant("mus_dnet_track2"); break;
            case 2: audio_set_bgm_instant("mus_dnet_track3"); break;
            case 3: audio_set_bgm_instant("mus_dnet_track4"); break;
            case 4: audio_set_bgm_instant("mus_dnet_track5"); break;
            case 5: audio_set_bgm_instant("mus_dnet_track6"); break;
            case 6: audio_set_bgm_instant("mus_dnet_track7"); break;
            case 7: audio_set_bgm_instant("mus_dnet_track8"); break;
            case 8: audio_set_bgm_instant("mus_dnet_track9"); break;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Backdrop
draw_sprite_ext(s1x1, 0, 0, 0, wid, hei, 0, c_gray, 1);
draw_set_font(global.fn_dnet);

// Transitions //
if (transition == 0)
{
    if (registration_process == 0) // Loading
    {
        if (effect_c64)
        {
            for (i = 0; i &lt; wid; i += 4 + irandom(6))
                draw_sprite_ext(s1x1, 0, 0, i, wid, i + 10, 0, make_color_rgb(150 + irandom(105), irandom(10), irandom(30)), 1);
        }
        
        if (effect_box)
        {
            draw_sprite_ext(s_dnet_loading, 0, wid / 2, hei / 2, 1, 1, 0, c_white, 1);
            for (i = 0; i &lt; 13; i += 1)
            {
                if (effect_box_row[i] &lt; 22) 
                    draw_sprite_ext(s1x1, 0, 16 + (effect_box_row[i] * 16), 16 + (i * 16), abs(effect_box_row[i] - 22) * 16, 16, 0, c_black, 1);
            }
        }
    }
    
    dx = 48; dy = 16;
    if (registration_process == 1) // Fill in info
    {
        // Shadow //
        draw_set_color(c_black);
        draw_rectangle(dx + 32, dy + 16, dx + 274, dy + 208, false);
        
        // Box backdrop //
        draw_set_color(make_color_rgb(20, 30, 125));
        draw_rectangle(dx + 24, dy + 8, dx + 266, dy + 200, false);
        
        // Box button name //
        if (enter_name)
        {
            if (effect_flicker &lt; 8) then draw_set_color(make_color_rgb(90, 110, 150));
            else draw_set_color(make_color_rgb(110, 130, 190));
        }
        else draw_set_color(make_color_rgb(90, 110, 150));
        draw_rectangle(dx + 32, dy + 126, dx + 260, dy + 136, false);
        
        // Box button password //
        if (enter_password)
        {
            if (effect_flicker &lt; 8) then draw_set_color(make_color_rgb(90, 110, 150));
            else draw_set_color(make_color_rgb(110, 130, 190));
        }
        else draw_set_color(make_color_rgb(90, 110, 150));
        draw_rectangle(dx + 32, dy + 154, dx + 260, dy + 164, false);
        
        // Button name hover //
        if (button_name &amp;&amp; enter_name == false)
        {
            draw_set_color(make_color_rgb(210, 30, 10));
            draw_rectangle(dx + 32, dy + 126, dx + 260, dy + 136, false);
        }
            
        // Button password hover //
        if (button_password &amp;&amp; enter_password == false) 
        {
            draw_set_color(make_color_rgb(210, 30, 10));
            draw_rectangle(dx + 32, dy + 154, dx + 260, dy + 164, false);
        }
            
        // Box Button exit //
        if (button_exit) then draw_set_color(make_color_rgb(210, 30, 10));
        else draw_set_color(make_color_rgb(90, 110, 150));
        draw_rectangle(dx + 32, dy + 174, dx + 96, dy + 186, false);
           
        // Box button verify // 
        if (button_verify) then draw_set_color(make_color_rgb(210, 30, 10));
        else draw_set_color(make_color_rgb(90, 110, 150));
        draw_rectangle(dx + 100, dy + 174, dx + 164, dy + 186, false);
        
        // Lines //
        draw_set_color(c_white);
        draw_line(dx + 28, dy + 16, dx + 100, dy + 16);
        draw_line(dx + 28, dy + 19, dx + 100, dy + 19);
        draw_line(dx + 190, dy + 16, dx + 262, dy + 16);
        draw_line(dx + 190, dy + 19, dx + 262, dy + 19);
        
        // Text //
        draw_set_halign(fa_center);
        draw_set_color(c_yellow);
        draw_text(dx + 145, dy + 14, "WELCOME");
        draw_set_halign(fa_left);
        draw_set_color(c_white);
        draw_text_ext(dx + 32, dy + 28, "You are only a few steps away from your very own DwarfNet account. Don't give up now!!!! ##Fill in your information below and register today!!", 11, 230);
        draw_text(dx + 32, dy + 114, "Username");
        draw_text(dx + 32, dy + 142, "Password");
        draw_text(dx + 36, dy + 174, "Exit");
        draw_text(dx + 104, dy + 174, "Register");
        draw_text(dx + 35, dy + 126, typed_name);
        draw_text(dx + 35, dy + 154, typed_password);
    } 
    
    dx = 48; dy = 16;
    if (registration_process == 2) // 56k verification
    {
        // Shadow //
        draw_set_color(c_black);
        draw_rectangle(dx + 48, dy + 104, dx + 258, dy + 136, false);
        
        // Box backdrop //
        draw_set_color(make_color_rgb(20, 30, 125));
        draw_rectangle(dx + 40, dy + 96, dx + 250, dy + 128, false);
    
        // Text //
        draw_set_halign(fa_center);
        draw_set_color(c_white);
        if verify_phase = 0 then draw_text(dx + 145, dy + 100, "Connecting to server");
        else draw_text(dx + 145, dy + 100, "Processing request");
        
        // Load animation //
        draw_set_halign(fa_left);
        if verify_animation = 0 then draw_text(dx + 55, dy + 116, ".   .   .   .   .   .");
        if verify_animation = 1 then draw_text(dx + 55, dy + 116, " .   .   .   .   .   .");
        if verify_animation = 2 then draw_text(dx + 55, dy + 116, "  .   .   .   .   .   .");
        if verify_animation = 3 then draw_text(dx + 55, dy + 116, "   .   .   .   .   .   .");
    }
        
    if (registration_process == 3) // Confirm succession
    {
        // Shadow //
        draw_set_color(c_black);
        draw_rectangle(dx + 48, dy + 104, dx + 258, dy + 136, false);
        
        // Box backdrop //
        draw_set_color(make_color_rgb(20, 30, 125));
        draw_rectangle(dx + 40, dy + 96, dx + 250, dy + 128, false);
    
        // Text //
        draw_set_halign(fa_center);
        draw_set_color(c_white);
        draw_text(dx + 144, dy + 108, "Account registered");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
