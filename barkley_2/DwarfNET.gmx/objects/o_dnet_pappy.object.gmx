<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_dnet_pappy_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-15</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup Pappy //
image_speed = 0;
sprite_index = s_dnet_pappy_idle;
if audio_is_playing_ext("sn_dnet_pappy") then audio_stop_sound_ext("sn_dnet_pappy");
alpha = -1;
alpha_goal = 1;

// Pappy //
pappy_talk = false;
pappy_dance = false;
pappy_intro = o_dnet_control.pappy_intro;
o_dnet_control.pappy_intro = false;
timer_pappy_intro_begin = 5;

// Pappy timers //
timer_pappy_intro_begin = 0;
timer_pappy_intro = 0;

// Buttons for pappy //
button_hover_play = false;
button_hover_stop = false;
button_hover_next = false;
button_hover_previous = false;
button_pressed_play = 0;
button_pressed_stop = 0;
button_pressed_next = 0;
button_pressed_previous = 0;
button_sprite = s_dnet_button_pappy_controls03;

// Play some music //
current_track = o_dnet_control.current_track;

// Tracks //
track[0] = "mus_dnet_track1";
track[1] = "mus_dnet_track2";
track[2] = "mus_dnet_track3";
track[3] = "mus_dnet_track4";
track[4] = "mus_dnet_track5";
track[5] = "mus_dnet_track6";
track[6] = "mus_dnet_track7";
track[7] = "mus_dnet_track8";
track[8] = "mus_dnet_track9";

// Track names //
track_name[0] = "1 - apecrescendo";
track_name[1] = "2 - cute";
track_name[2] = "3 - doomwop";
track_name[3] = "4 - dw_2";
track_name[4] = "5 - hweru3";
track_name[5] = "6 - killers2";
track_name[6] = "7 - town_2";
track_name[7] = "8 - wapbap_2";
track_name[8] = "9 - weez_2";

// New title //
global.dwarfnet_title_app = "Pappy's Midishack";


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Reset app title //
global.dwarfnet_title_app = "";

// Shut down Pappy //
audio_stop_sound_ext("sn_dnet_pappy");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pappys midi shack  
if alpha &gt;= 1 and !instance_exists(o_dnet_exit) then    
    {
    // Quit with right click //
    if scr_input_check_pressed(KEYID_HOLSTER, PLAYER1) then
        {
        audio_stop_sound_ext("sn_dnet_pappy");
        alpha_goal = 0;
        }
        
    // Hover //
    button_hover_play = scr_dnet_button(112, 126, 160, 176);
    button_hover_stop = scr_dnet_button(128, 144, 160, 176);
    button_hover_previous = scr_dnet_button(146, 160, 160, 176); 
    button_hover_next = scr_dnet_button(162, 176, 160, 176);
        
    // Click em //
    if scr_input_check_pressed(KEYID_ACTION, PLAYER1) then
        {
        // Play //
        if button_hover_play = true then
            {
            // Play selected music //
            audio_stop_sound_ext(track[current_track]);
            audio_stop_sound_ext(global.dwarfnet_music);
            global.dwarfnet_music = track[current_track];
            audio_play_sound_at_xy(global.dwarfnet_music, false, 10, x, y);
            o_dnet_control.timer_music_check = 10;
            
            // Shut down Pappy //
            audio_stop_sound_ext("sn_dnet_pappy");
            
            // Other //
            button_pressed_play = 2;
            sprite_index = s_dnet_pappy_dance;
            image_speed = 0.1;
            }
            
        // Stop //
        else if button_hover_stop = true then
            {
            // Stop current track //
            audio_stop_sound_ext(track[current_track]);
            audio_stop_sound_ext(global.dwarfnet_music);
            o_dnet_control.timer_music_check = -1;
    
            // Shut down Pappy //
            audio_stop_sound_ext("sn_dnet_pappy");
            
            // Other //
            button_pressed_stop = 2;
            sprite_index = s_dnet_pappy_idle;
            image_speed = 0;
            }
            
        // Previous //
        else if button_hover_previous = true then
            {
            // Move to previous track //
            audio_stop_sound_ext(track[current_track]);
            if current_track &gt; 0 then current_track -= 1;
            else current_track = 8;
            audio_stop_sound_ext(global.dwarfnet_music);
            global.dwarfnet_music = track[current_track];
            audio_play_sound_at_xy(global.dwarfnet_music, false, 10, x, y);
            o_dnet_control.timer_music_check = 10;
    
            // Shut down Pappy //
            audio_stop_sound_ext("sn_dnet_pappy");
            
            // Other //
            button_pressed_previous = 2;
            sprite_index = s_dnet_pappy_dance;
            image_speed = 0.1;
            }
    
        // Next //
        else if button_hover_next = true then
            {
            // Move to previous track //
            audio_stop_sound_ext(track[current_track]);
            if current_track &lt; 8 then current_track += 1;
            else current_track = 0;
            audio_stop_sound_ext(global.dwarfnet_music);
            global.dwarfnet_music = track[current_track];
            audio_play_sound_at_xy(global.dwarfnet_music, false, 10, x, y);
            o_dnet_control.timer_music_check = 10;
    
            // Shut down Pappy //
            audio_stop_sound_ext("sn_dnet_pappy");
            
            // Other //
            button_pressed_next = 2;
            sprite_index = s_dnet_pappy_dance;
            image_speed = 0.1;
            }    
        }
        
    // Effects timers //
    if button_pressed_play &gt; 0 then button_pressed_play -= dt();
    if button_pressed_stop &gt; 0 then button_pressed_stop -= dt();
    if button_pressed_previous &gt; 0 then button_pressed_previous -= dt();
    if button_pressed_next &gt; 0 then button_pressed_next -= dt();
        
    // Pappy intro //
    if timer_pappy_intro_begin &gt; 0 then
        {
        // Tick down //
        timer_pappy_intro_begin -= dt();
        
        // Event //
        if timer_pappy_intro_begin &lt;= 0 then
            {
            if pappy_intro = true then
                {
                sprite_index = s_dnet_pappy_talk;
                image_speed = 0.15;
                timer_pappy_intro = 80;
                audio_play_sound_at_xy("sn_dnet_pappy", false, 10, x, y);
                }
            }
        }
        
    // Pappy talk intro //
    if timer_pappy_intro &gt; 0 then
        {
        // Tick down //
        timer_pappy_intro -= dt();
        
        // Event //
        if timer_pappy_intro &lt;= 0 then sprite_index = s_dnet_pappy_idle;  
        }
    }
    
// Skin //
switch (scr_quest_get_state("dwarfnet_skin_system"))
    {
    case 0: button_sprite = s_dnet_button_pappy_controls01; break;
    case 1: button_sprite = s_dnet_button_pappy_controls02; break;
    case 2: button_sprite = s_dnet_button_pappy_controls03; break;
    case 3: button_sprite = s_dnet_button_pappy_controls04; break;
    }
    
// Alphas //
if alpha &lt; alpha_goal and instance_number(o_dnet_pappy) = 1 then alpha += 0.1;
else if alpha &gt; alpha_goal then alpha -= 0.1;
if alpha &lt;= 0 and alpha_goal = 0 then instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Darken background //
draw_set_color(c_black);
draw_set_alpha(0.95 * alpha);
draw_rectangle(-2, 35, 386, 242, false);

// Track name //
draw_set_color(c_white);
draw_set_alpha(alpha);
draw_set_halign(fa_center);
draw_text(x + 145, y + 144, track_name[current_track]);
draw_set_halign(fa_left);

// Pappy himself //
draw_sprite_ext(sprite_index, image_index, 145, 90, 1, 1, 0, c_white, alpha);

// Buttons // PLAY //
if button_pressed_play &gt; 0 then draw_sprite_ext(button_sprite, 2, x + 113, y + 160, 1, 1, 0, c_white, alpha);
else
    {
    if button_hover_play = true then draw_sprite_ext(button_sprite, 1, x + 113, y + 160, 1, 1, 0, c_white, alpha);
    else draw_sprite_ext(button_sprite, 0, x + 113, y + 160, 1, 1, 0, c_white, alpha);
    }
    
// Buttons // STOP //
if button_pressed_stop &gt; 0 then draw_sprite_ext(button_sprite, 5, x + 129, y + 160, 1, 1, 0, c_white, alpha);
else
    {
    if button_hover_stop = true then draw_sprite_ext(button_sprite, 4, x + 129, y + 160, 1, 1, 0, c_white, alpha);
    else draw_sprite_ext(button_sprite, 3, x + 129, y + 160, 1, 1, 0, c_white, alpha);
    }
    
// Buttons // PREVIOUS //
if button_pressed_previous &gt; 0 then draw_sprite_ext(button_sprite, 8, x + 145, y + 160, 1, 1, 0, c_white, alpha);
else
    {
    if button_hover_previous = true then draw_sprite_ext(button_sprite, 7, x + 145, y + 160, 1, 1, 0, c_white, alpha);
    else draw_sprite_ext(button_sprite, 6, x + 145, y + 160, 1, 1, 0, c_white, alpha);
    }
    
// Buttons // NEXT //
if button_pressed_next &gt; 0 then draw_sprite_ext(button_sprite, 11, x + 161, y + 160, 1, 1, 0, c_white, alpha);
else
    {
    if button_hover_next = true then draw_sprite_ext(button_sprite, 10, x + 161, y + 160, 1, 1, 0, c_white, alpha);
    else draw_sprite_ext(button_sprite, 9, x + 161, y + 160, 1, 1, 0, c_white, alpha);
    }

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
