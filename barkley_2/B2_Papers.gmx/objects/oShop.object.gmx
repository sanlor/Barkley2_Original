<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
x = view_xview[0];
y = view_yview[0];
success = Shop("create", global.shopOpenName);
if (success == false) { instance_destroy(); exit; }


// MAKE TWO CORNERS OF SHOP NEVER USE WIRES
// CENTER SHOP MENU
stt = "browse";
typ = shopType; // gun, candy
kepFac = shopFace;
hopFac = sHoopzFace;

clkSkp = 0; // For when you action on item -&gt; buy
menFoc = "main"; // CONTROLLER - main / side

bought = 0;

jerAct = 0;
jerVis = 0;

gunAct = 0;
gunVis = 0;

////////// CONFIG
rnt = 0.5; //cost to rent
extWid = 8 + 16 + 24; // Extra width to give more shop name space
itmSpd = 192 * 1.5; // speed at which items open / close, higher is faster
sldSpd = 16 * 1.5;
//titAct = 0; titWid = 160 + extWid; titHei = 32; titX = (384 - titWid) / 2; titY = 7; titTxt = "Mortimer's Candy Shop"; // Title???
titAct = 1; titWid = 110; titHei = 48; titX = 6; titY = 6; titTxt = shopName;
hopX = 6; hopY = 7 + 48; //125; // Position of Hoopz face - was 4
monX = 7 + 12; monY = hopY + 73;
//kepX = 384 - 51 - 6; kepY = 4; // Shopkeeper face
kepX = hopX + 60; kepY = hopY; // Shopkeeper face
shpWid = 160 + extWid; shpX = ((384 - shpWid) / 2) - ((8 + 16 + 10) * -1); shpY = 7 + (36 * 0) - 1; // Shop menu
// shop height set later

colBgnHil = make_color_rgb(43, 46, 40);
colTxtHil = make_color_rgb(255, 202, 19);
colTxtNor = c_ltgray; // Color of text when not selected
colTxtDis = c_dkgray;
colTxtRed = c_red; // Color of item price if you don't have enough

alpBgn = 0.75;
butSpd = 0.15; // Speed at which buttons hilight in seconds
butHilCol = make_color_rgb(48, 52, 45);// Hilight color
butTxtCol = make_color_rgb(255, 202, 19);// Hilight color



// JERKINS
attNam[0] = "EvS";
attNam[1] = "WGT";
attNam[2] = "PKT";
attNam[3] = "RES";
attNam[4] = "";
attVal[0] = "res_normal";
attVal[1] = "weight";
attVal[2] = "pockets";
attVal[3] = "res"; // grabs jerkin only
attVal[4] = "";
attSpc = 38;
attCol = c_gray;

// GUNS
if (shopType == "gun")
{
    attNam[0] = "DMG";
    attNam[1] = "RTE";
    attNam[2] = "CAP";
    attNam[3] = "AFX";
    attNam[4] = "WGT";
    attVal[0] = "24";
    attVal[1] = "2.4";
    attVal[2] = "43";
    attVal[3] = "Q"; // grabs jerkin only
    attVal[4] = "7~";
    attSpc = 38;
    attCol = c_gray;
}


// Money trickle
moneyPrior = scr_money_count();
moneySpeed = 0;
moneyDisplay = moneyPrior;

// extra
sldHov = -1;
sldHovTry = -1;
sldSur = -999; // For drawing slider
sldY = shpY;// + 8;
sldDesY = sldY;
sldDesSpd = 0;
sldWid = 64; sldHei = 16 + (24 * sldOptAmt);

// EXTRA SPACE
kepX -= 8;
titWid -= 8;
shpX -= 12;
shpWid += 16;

hopX -= 1;
kepX -= 1;
titX -= 1;
sldWid = 60;
monX -= 6;

ext = 0;
extSpd = 0.33;
sld = 0; // Overall slide for everything!!!
ald = 1;
butMid = SCREEN_WIDTH * 0.5;
curOvr = -1;
curHov = 0;

// Items
itmHil = 0;
itmSel = 0;
itmWid = shpWid - 16; //144
itmHeiDes = 3 * 8;
itmHeiExpDes = (itmHeiExp) * 8; // expanded height
for (i = 0; i &lt; itmAmt; i += 1) 
{
    if (i == itmSel) itmHei[i] = itmHeiExpDes; else itmHei[i] = itmHeiDes;
    //itmNam[i] = "Item " + string(i);
    itmSur[i] = -999;
}
shpHei = (8 * (23));
// BELOW IS DYNAMIC SHOP
//shpHei = (itmHeiDes * (itmAmt - 1)) + itmHeiExpDes + 16; //144 is for 5, 168 for 6

// Exit
i = 0;
butWid[i] = 81;
butHei[i] = 17;
butX[i] = butMid - round(butWid[i] / 2) + 1;
butY[i] = (SCREEN_HEIGHT - 48) + 24 + 2;
butSpr[i] = sButtonPapers; butSub[i] = 3;

butAmt = 1;
for (i = 0; i &lt; butAmt; i += 1) { butHov[i] = 0; }

// Border generate
Border("generate", 0, 83, 40); // breakout
Border("generate", 1, 51, 66); // face
Border("generate", 2, shpWid, shpHei); // shop
Border("generate", 3, 108, 50); // exit
Border("generate", 4, 51, 66); // face 2
Border("generate", 5, titWid, titHei); // title
Border("generate", 6, sldWid + 8 + 6, sldHei); // Slide border
Border("generate", 7, sldWid - 8, sldHei); // Slide BG
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// View X and Y
x = view_xview[0];
y = view_yview[0];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug
var xsp = 0, ysp = 0;
if (keyboard_check(ord('D'))) xsp += 1;
if (keyboard_check(ord('A'))) xsp -= 1;
if (keyboard_check(ord('W'))) ysp -= 1;
if (keyboard_check(ord('S'))) ysp += 1;
if (keyboard_check(vk_space))
{
    view_xview[0] = 0;
    view_yview[0] = 0;
}
view_xview[0] += xsp;
view_yview[0] += ysp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
if (ext == 0) sld += dt_sec() / extSpd; else sld -= dt_sec() / extSpd;
sld = clamp(sld, 0, 1);
ald = abs(sld - 1);
clkSkp = 0;

// Exiting shop
if (sld == 0) 
{
    global.shopResult = "exit";
    if (bought) global.shopResult = "bought";
    show_debug_message("oShop(Step) - Shop result = " + global.shopResult);
    instance_destroy(); 
    exit; 
}

if (stt == "browse")
{
    curOvr = -1;
    dx = x + shpX + 8;
    dy = y + shpY + 8;
    if (global.keyinput_type != KEYINPUT_GAMEPAD) { menFoc = "main"; itmHil = -1; }
    else if (menFoc == "main")
    {
        if (itmHil == -1) { sldHovTry = -1; sldHov = -1; itmSel = 0; itmHil = 0; }
        if (MiniKeyPress("up")) itmHil = clamp(itmHil - 1, 0, itmAmt - 1);
        if (MiniKeyPress("down")) itmHil = clamp(itmHil + 1, 0, itmAmt);
        if (MiniKeyPress("right") || MiniKeyPress("action")) 
        {
            if (MiniKeyPress("action")) clkSkp = 1;
            sldHovTry = 0;
            event_user(2);
            if (canSld == 0) { sldHovTry += 1; event_user(2); }
            if (canSld == 0) { sldHovTry += 1; event_user(2); }
            if (canSld == 1)
            {
                menFoc = "side"; 
                sldHov = sldHovTry; 
                itmHil = itmSel;
            }
        }
        if (MiniKeyPress("cancel")) { itmHil = itmAmt; }
        if (itmHil == itmAmt) { menFoc = "exit"; itmHil = itmAmt - 1; }
        itmSel = itmHil;
    }
    for (i = 0; i &lt; itmAmt; i += 1)
    {
        if (global.keyinput_type != KEYINPUT_GAMEPAD &amp;&amp;
            scr_mouse_rect(dx, dy, dx + itmWid, dy + itmHei[i] - 1)) itmHil = i;
        if (itmHil == i)
        {
            draw_sprite_ext(s1x1, 0, dx - 2, dy, itmWid + 4, itmHei[i], 0, colBgnHil, 0.5);
            curOvr = 1;
            if (MiniKeyPress("action")) { curHov = 1; itmSel = i; }
        }
        dy += itmHei[i];
    }
    iy = shpY + 8;
    for (i = 0; i &lt; itmAmt; i += 1)
    {
        if (itmSel == i) { sldDesY = iy - 8; sldDesSpd = abs(sldY - sldDesY); }
        if (itmSel == i) iy += itmHeiExpDes; else iy += itmHeiDes;
    }
    sldY = Goto(sldY, sldDesY, sldDesSpd * (dt_sec() * sldSpd));
    
    //////////////////////////////// Get sidebar input
    psx = x + shpX + shpWid - 4; psy = y + sldY + 8;
    optNum = sldOptAmt;
    if (global.keyinput_type != KEYINPUT_GAMEPAD) { sldHov = -1; sldHovTry = -1; }
    else if (menFoc == "side")
    {
        if (MiniKeyPress("up")) sldHovTry = clamp(sldHovTry - 1, 0, sldOptAmt - 1);
        if (MiniKeyPress("down")) sldHovTry = clamp(sldHovTry + 1, 0, sldOptAmt - 1);
        if (MiniKeyPress("left") || MiniKeyPress("cancel")) { menFoc = "main"; sldHovTry = -1; sldHov = -1; }
    }
    for (i = 0; i &lt; sldOptAmt; i += 1)
    {
        if (global.keyinput_type != KEYINPUT_GAMEPAD &amp;&amp;
                scr_mouse_rect(psx, psy, psx + (sldWid - 16), psy + 24)) sldHovTry = i;
        if (sldHovTry == i)
        {
            if (sldOpt[i] == "Buy" &amp;&amp; itmPrc[itmSel] &gt; scr_money_count()) x = x;
            else if (sldOpt[i] == "Rent" &amp;&amp; floor(itmPrc[itmSel] * rnt) &gt; scr_money_count()) x = x;
            else { curOvr = 1; sldHov = i; }
        }
        psy += 24;
    }
    
    // Slide actions
    if (MiniKeyPress("action") &amp;&amp; clkSkp == 0)
    {
        curHov = 1;
        if (sldHov &gt;= 0)
        {
            if (sldOpt[sldHov] == "Buy" &amp;&amp; itmPrc[itmSel] &lt;= scr_money_count()) 
            { 
                stt = "buy"; 
                kid = instance_create(0, 0, oConfirm);
                kid.dad = id;
                kid.givTxt = "Buy " + itmNam[itmSel] + " for {" + string(itmPrc[itmSel]) + "?";
                kid.curHov = 1;
            }
            if (sldOpt[sldHov] == "Rent" &amp;&amp; floor(itmPrc[itmSel] * rnt) &lt;= scr_money_count()) 
            { 
                stt = "rent"; 
                kid = instance_create(0, 0, oConfirm);
                kid.dad = id;
                kid.givTxt = "Rent " + itmNam[itmSel] + " for {" + string(floor(itmPrc[itmSel] * rnt)) + "?";
                kid.curHov = 1;
            }
            if (sldOpt[sldHov] == "Info") 
            {
                stt = "info"; 
                if (shopType == "jerkin") jerAct = 1;
                if (shopType == "gun") gunAct = 1;
            }
        }
    }
    
    // Exit button    
    if (global.keyinput_type == KEYINPUT_GAMEPAD &amp;&amp; menFoc == "exit")
    {
        if (MiniKeyPress("up")) 
        {
            itmHil = itmAmt - 1;
            itmSel = itmHil;
            menFoc = "main";
        }
    }
    for (i = 0; i &lt; butAmt; i += 1)
    {
        var hil = 0;
        if (global.keyinput_type != KEYINPUT_GAMEPAD)
            hil = scr_mouse_rect(x + butX[i], y + butY[i], x + butX[i] + butWid[i], y + butY[i] + butHei[i]);
        if (global.keyinput_type == KEYINPUT_GAMEPAD &amp;&amp; menFoc == "exit") hil = 1;
        if (hil || curOvr == i)
        {
            butHov[i] += dt_sec() / butSpd;
            curOvr = i;
            if (hil &amp;&amp; MiniKeyPress("action"))
            {
                curHov = 1;
                ext = 1;
            }
        }
        else butHov[i] -= dt_sec() / butSpd;
        butHov[i] = clamp(butHov[i], 0, 1);
    }
}
else if (stt == "info")
{
    if (shopType == "jerkin")
    {
        if (jerVis == 1)
        {
            if (MiniKeyPress("action") || MiniKeyPress("cancel")) { curHov = 1; jerAct = 0; }
        }
        if (jerVis == 0) stt = "browse";
    }
    else
    {
        if (gunVis == 1)
        {
            if (MiniKeyPress("action") || MiniKeyPress("cancel")) { curHov = 1; gunAct = 0; }
        }
        if (gunVis == 0) stt = "browse";
    }
}
else if (stt == "buy" || stt == "rent")
{
    if (instance_exists(oConfirm) == 0)
    {
        stt = "browse";
        if (global.confirm == "yes")
        {
            moneyPrior = scr_money_count();
            Shop("buy", shopName, itmNam[itmSel]);
            bought = 1;
            moneyDisplay = scr_money_count();
            moneyDiff = (moneyDisplay - moneyPrior);
            menFoc = "main";
            itmSel = 0;
            itmHil = 0;
            sldHovTry = -1;
            sldHov = -1;
            if (Shop("stocks", shopName) == 0)
            {
                ext = 1;
                curHov = 1;
            }
        }
    }
}

// Money trickle
if (moneyDisplay != moneyPrior)
{
    moneySpeed += dt_sec();
    if (moneySpeed &gt;= 1)
    {
        moneyPrior = moneyDisplay;
        moneySpeed = 0;
    }
    moneyDisplay = round(moneyPrior + (moneyDiff * moneySpeed));
}
else moneySpeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Slide Hov Try
if (sldHovTry &gt; sldOptAmt - 1) canSld = 0;
else if (sldOpt[sldHovTry] == "Buy" &amp;&amp; itmPrc[itmSel] &gt; scr_money_count()) canSld = 0;
else if (sldOpt[sldHovTry] == "Rent" &amp;&amp; floor(itmPrc[itmSel] * rnt) &gt; scr_money_count()) canSld = 0;
else canSld = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Gun Info
if (gunAct) gunVis += dt_sec() * 3; else gunVis -= dt_sec() * 3;
gunVis = clamp(gunVis, 0, 1);
gunVii = clamp(gunVis * 2, 0, 1);
gunVss = clamp((gunVis - 0.5) * 2, 0, 1);
if (gunVis == 0) exit;

gunPr1 = "Afterburning";
gunPr2 = "Disintegrating";
gunMat = "Frankincense";
gunTyp = "Hunting Rifle";
gunSuf = "practicing the Triangle Defense";
gunInf[0] = "Shot's inexplicably shoot out from BEHIND the player instead of from the front";
gunInf[1] = "I don't know what this does but here's a description anyway.";
gunInf[2] = "WRONG INFO: Bullets spawn around shooter, instead of from the barrel of the gun";

draw_set_font(global.fn_2);
draw_set_alpha(gunVss);
draw_sprite_ext(s1x1, 0, vex, vey, SCREEN_WIDTH, SCREEN_HEIGHT, 0, c_black, alpBgn * gunVis);
gunWid = (108.5 + 64) * gunVii;
gunHei = (88.5 + 16) * gunVii;
gunDrx = floor(vex + (SCREEN_WIDTH / 2) - gunWid);
gunDry = floor(vey + (SCREEN_HEIGHT / 2) - gunHei);
draw_spr_tiled(gunDrx, gunDry, vex + (SCREEN_WIDTH / 2) + gunWid, vey + (SCREEN_HEIGHT / 2) + gunHei, sBorderBG, 1, alpBgn * gunVii);


drx = gunDrx + 2;
dry = gunDry + 2;
draw_set_color(colTxtHil);
DrawGunName(drx, dry, "type", gunMat, gunTyp);
draw_sprite_ext(sTempGun, 0, drx, dry + 20, 2, 2, 0, c_white, gunVss);
drx += 102;
draw_set_color(colTxtHil);
DrawGunName(drx, dry, "prefix", gunPr1);
scr_font(global.fn_7ocs, colTxtNor, 0, 0);
draw_text_ext(drx + 65, dry, gunInf[0], -1, 170);
dry += 26;
draw_set_color(colTxtHil);
DrawGunName(drx, dry, "prefix", gunPr2);
scr_font(global.fn_7ocs, colTxtNor, 0, 0);
draw_text_ext(drx + 65, dry, gunInf[1], -1, 170);
dry += 26;
draw_set_color(colTxtHil);
DrawGunName(drx, dry, "suffix", gunSuf);
scr_font(global.fn_7ocs, colTxtNor, 0, 0);
draw_text_ext(drx + 65, dry, gunInf[2], -1, 170);

gunAtt[0] = "DMG";
gunAtt[1] = "RTE";
gunAtt[2] = "CAP";
gunAtt[3] = "AFX";
gunAtt[4] = "WGT";
gunVal[0] = "20";
gunVal[1] = "3.5";
gunVal[2] = "54";
gunVal[3] = "Q";
gunVal[4] = "7~";
drx = gunDrx + 2 + 2;
dry = gunDry + 74 + 5;
for (h = 0; h &lt; 5; h += 1)
{
    draw_set_font(global.fn_small);
    draw_set_color(attCol);
    draw_text(drx, dry, gunAtt[h]);
    draw_set_font(global.fn_1);
    draw_set_color(colLst);
    draw_text(drx + 8, dry + 4, gunVal[h]); 
    drx += 38;
}

// Gun parents
drx = gunDrx + 230;
dry = gunDry + 110;
scr_font(global.fn_2, colTxtNor, 1);
draw_text(drx, dry, "Lineage"); dry += 24;
//draw_set_color(colTxtHil);
DrawGunName(drx, dry, "ADHD", "Mortal", "Tin", "Uzi", "from Heck", 1); dry += 24;
DrawGunName(drx, dry, "Afterburning", "Disintegrating", "Frankincense", "Hunting Rifle", "practicing the Triangle Defense", 1); dry += 24;

draw_sprite_ext(sTempGunmap, 0, gunDrx + 9, gunDry + 105, 1, 1, 0, c_white, gunVss);

draw_set_alpha(1);

exit;

jerNam[0] = "Monofilament Jerkin";
jerNam[1] = "Eggcrate Jerkin";

comNam[0] = "Ballistics";
comNam[1] = "Weight";
comNam[2] = "Pocket";
comNam[3] = "BIO";
comNam[4] = "Cyber";
comNam[5] = "Mental";
comNam[6] = "Kosmic";
comNam[7] = "Zauber";

comVal[0, 0] = 35; comVal[0, 1] = 40;
comVal[1, 0] = 7; comVal[1, 1] = 7;
comVal[2, 0] = 35; comVal[2, 1] = 30;
comVal[3, 0] = 90; comVal[3, 1] = 100;
comVal[4, 0] = 35; comVal[4, 1] = 40;
comVal[5, 0] = 120; comVal[5, 1] = 125;
comVal[6, 0] = 35; comVal[6, 1] = 40;
comVal[7, 0] = 35; comVal[7, 1] = 40;

draw_set_font(global.fn_2);
draw_set_alpha(jerVss);
draw_sprite_ext(s1x1, 0, vex, vey, SCREEN_WIDTH, SCREEN_HEIGHT, 0, c_black, alpBgn * jerVis);
jerWid = 108.5 * jerVii;
jerHei = 88.5 * jerVii;
draw_spr_tiled(vex + (SCREEN_WIDTH / 2) - jerWid, vey + (SCREEN_HEIGHT / 2) - jerHei, vex + (SCREEN_WIDTH / 2) + jerWid, vey + (SCREEN_HEIGHT / 2) + jerHei, sBorderBG, 1, alpBgn * jerVii);

drx = vex + (SCREEN_WIDTH / 2) + 32; 
dry = vey + (SCREEN_HEIGHT / 2) - (12 * 4) + 39;
draw_set_halign(2);
for (i = 0; i &lt; 8; i += 1)
{
    
    draw_set_halign(2);
    draw_set_color(c_gray);
    draw_text(drx - 40, dry, comNam[i]);
    draw_set_color(c_white);
    draw_text(drx - 5, dry, comVal[i, 0]);
    draw_set_halign(0);
    draw_set_color(colTxtHil);
    draw_text(drx + 5, dry, comVal[i, 1]);
    draw_set_halign(1);
    if (comVal[i, 0] == comVal[i, 1]) { draw_set_color(c_gray); draw_text(drx, dry, "="); }
    else if (comVal[i, 0] &lt; comVal[i, 1]) { draw_set_color(c_lime); draw_text(drx, dry, "&gt;"); }
    else if (comVal[i, 0] &gt; comVal[i, 1]) { draw_set_color(c_red); draw_text(drx, dry, "&gt;"); }
    dry += 12;
}

draw_set_color(c_white);
drx = vex + (SCREEN_WIDTH / 2);
dry = vey + (SCREEN_HEIGHT / 2) - 62;
Jerkin("draw", "current", drx - (108 / 2), dry, 2, 2, 0, c_white, jerVss);
draw_set_color(c_white);
draw_text_ext(drx - (108 / 2), dry + 24, jerNam[0], -1, 90);
Jerkin("draw", "current", drx + (108 / 2), dry, 2, 2, 0, c_white, jerVss);
draw_set_color(colTxtHil);
draw_text_ext(drx + (108 / 2), dry + 24, jerNam[1], -1, 90);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Jerkin Compare
if (jerAct) jerVis += dt_sec() * 3; else jerVis -= dt_sec() * 3;
jerVis = clamp(jerVis, 0, 1);
jerVii = clamp(jerVis * 2, 0, 1);
jerVss = clamp((jerVis - 0.5) * 2, 0, 1);
if (jerVis == 0) exit;

jd0 = Jerkin("current");
jd1 = itmNam[itmSel];

comNam[0] = "Ballistics";
comNam[1] = "Weight";
comNam[2] = "Pocket";
comNam[3] = "BIO";
comNam[4] = "Cyber";
comNam[5] = "Mental";
comNam[6] = "Kosmic";
comNam[7] = "Zauber";

comVal[0, 0] = Jerkin("res_normal", jd0); comVal[0, 1] = Jerkin("res_normal", jd1);
comVal[1, 0] = Jerkin("weight", jd0); comVal[1, 1] = Jerkin("weight", jd1);
comVal[2, 0] = Jerkin("pockets", jd0); comVal[2, 1] = Jerkin("pockets", jd1);
comVal[3, 0] = Jerkin("res_bio", jd0); comVal[3, 1] = Jerkin("res_bio", jd1);
comVal[4, 0] = Jerkin("res_cyber", jd0); comVal[4, 1] = Jerkin("res_cyber", jd1);
comVal[5, 0] = Jerkin("res_mental", jd0); comVal[5, 1] = Jerkin("res_mental", jd1);
comVal[6, 0] = Jerkin("res_cosmic", jd0); comVal[6, 1] = Jerkin("res_cosmic", jd1);
comVal[7, 0] = Jerkin("res_zauber", jd0); comVal[7, 1] = Jerkin("res_zauber", jd1);

draw_set_font(global.fn_2);
draw_set_alpha(jerVss);
draw_sprite_ext(s1x1, 0, vex, vey, SCREEN_WIDTH, SCREEN_HEIGHT, 0, c_black, alpBgn * jerVis);
jerWid = 108.5 * jerVii;
jerHei = 88.5 * jerVii;
draw_spr_tiled(vex + (SCREEN_WIDTH / 2) - jerWid, vey + (SCREEN_HEIGHT / 2) - jerHei, vex + (SCREEN_WIDTH / 2) + jerWid, vey + (SCREEN_HEIGHT / 2) + jerHei, sBorderBG, 1, alpBgn * jerVii);

drx = vex + (SCREEN_WIDTH / 2) + 32; 
dry = vey + (SCREEN_HEIGHT / 2) - (12 * 4) + 39;
draw_set_halign(2);
for (i = 0; i &lt; 8; i += 1)
{
    
    draw_set_halign(2);
    draw_set_color(c_gray);
    draw_text(drx - 40, dry, comNam[i]);
    draw_set_color(c_white);
    draw_text(drx - 5, dry, comVal[i, 0]);
    draw_set_halign(0);
    draw_set_color(colTxtHil);
    draw_text(drx + 5, dry, comVal[i, 1]);
    draw_set_halign(1);
    if (comVal[i, 0] == comVal[i, 1]) { draw_set_color(c_gray); draw_text(drx, dry, "="); }
    if (i == 1)
    {
        if (comVal[i, 0] &gt; comVal[i, 1]) { draw_set_color(c_lime); draw_text(drx, dry, "&gt;"); }
        else if (comVal[i, 0] &lt; comVal[i, 1]) { draw_set_color(c_red); draw_text(drx, dry, "&lt;"); }
    }
    else
    {
        if (comVal[i, 0] &lt; comVal[i, 1]) { draw_set_color(c_lime); draw_text(drx, dry, "&gt;"); }
        else if (comVal[i, 0] &gt; comVal[i, 1]) { draw_set_color(c_red); draw_text(drx, dry, "&lt;"); }
    }
    dry += 12;
}

draw_set_color(c_white);
drx = vex + (SCREEN_WIDTH / 2);
dry = vey + (SCREEN_HEIGHT / 2) - 62;
Jerkin("draw", jd0, drx - (108 / 2), dry, 2, 2, 0, c_white, jerVss);
draw_set_color(c_white);
draw_text_ext(drx - (108 / 2), dry + 24, jd0, -1, 90);
Jerkin("draw", jd1, drx + (108 / 2), dry, 2, 2, 0, c_white, jerVss);
draw_set_color(colTxtHil);
draw_text_ext(drx + (108 / 2), dry + 24, jd1, -1, 90);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
vex = view_xview[0];
vey = view_yview[0];

draw_sprite_ext(s1x1, 0, x, y, 384, 240, 0, c_black, alpBgn * sld);


nm0 = SCREEN_WIDTH * 0.3;
// Hoopz Face
drx = x + hopX - (nm0 * ald); dry = y + hopY;
draw_sprite(s_diag_frame, 0, drx, dry);
draw_sprite(hopFac, 0, drx + 8, dry + 10);

// Money Breakout
drx = x + monX - (nm0 * ald); dry = y + monY;
Border("draw", 0, drx, dry);
draw_sprite(s_breakout_icon, 0, drx + 12, dry + 12);
draw_set_font(global.fn_2);
draw_set_color(c_white);
draw_set_halign(1);
str = string(scr_money_count());
var opt = "";
if (sldHov != -1) opt = sldOpt[sldHov];
if (opt == "Buy") { if (itmPrc[itmSel] &lt;= scr_money_count()) { draw_set_color(colTxtRed); str = string(scr_money_count() - itmPrc[itmSel]); } }
if (opt == "Rent") { if (itmPrc[itmSel] * rnt &lt;= scr_money_count()) { draw_set_color(colTxtRed); str = string(scr_money_count() - (itmPrc[itmSel] * rnt)); } }
if (moneyDisplay != moneyPrior) str = string(moneyDisplay);
draw_text(drx + 31 + 19, dry + 16, str);
draw_set_halign(0);
draw_set_color(c_white);

// Owner Face
drx = x + kepX - (nm0 * ald); dry = y + kepY;
draw_sprite(s_diag_frame, 0, drx, dry);
draw_sprite(kepFac, 0, drx + 8, dry + 10);

// Shop Title
if (titAct)
{
    drx = x + titX - (nm0 * ald); dry = y + titY;
    Border("draw", 5, drx, dry);
    draw_set_font(global.fn_2);
    draw_set_halign(1);
    draw_text_ext(drx + floor(titWid / 2), dry + 12 + 2, titTxt, -1, titWid - 14);
    draw_set_halign(0);
}

// Shop Slider
drx = x + shpX + (280 * ald); dry = y + shpY;
if (surface_exists(sldSur) == 0) sldSur = surface_create(sldWid + 14, sldHei);
surface_set_target(sldSur);
draw_clear_alpha(c_black, 0);
dy = y + sldY;
draw_set_color(c_white);
Border("draw border", 6, -24, 0);
draw_set_font(global.fn_1);
draw_set_halign(1);
for (i = 0; i &lt; sldOptAmt; i += 1)
{
    sldCol = colTxtNor;
    if (sldOpt[i] == "Buy" &amp;&amp; itmPrc[itmSel] &gt; scr_money_count()) sldCol = colTxtDis;
    if (sldOpt[i] == "Rent" &amp;&amp; floor(itmPrc[itmSel] * rnt) &gt; scr_money_count()) sldCol = colTxtDis;
    if (sldHov == i) 
    {
        var alp = 0.5;
        if (global.keyinput_type == KEYINPUT_GAMEPAD) alp = 1;
        draw_set_color(merge_color(sldCol, colTxtHil, alp));
    }
    else draw_set_color(sldCol);
    draw_text((sldWid - 16) / 2, 10 + (i * 24), sldOpt[i]);
}
draw_set_halign(0);
for (i = 0; i &lt; 5; i += 1) draw_sprite_ext(s1x1, 0, i, 0, 1, 100, 0, c_black, abs(i - 6) * 0.15);
surface_reset_target();
Border("draw back", 7, drx + shpWid - 8, dy);
if (sldHov != -1) 
{
    var alp = 0.5;
    if (global.keyinput_type == KEYINPUT_GAMEPAD) alp = 1;
    draw_sprite_ext(s1x1, 0, drx + shpWid - 4, dy + (sldHov * 24) + 7, sldWid - 16, 24, 0, colBgnHil, alp);
}
draw_surface_part(sldSur, 0, 0, sldWid + 14, sldHei, drx + shpWid - 4, dy);

// Shop
Border("draw back", 2, drx, dry);
dx = drx + 8;
dy = dry + 8;
draw_set_font(global.fn_1);
for (i = 0; i &lt; itmAmt; i += 1)
{
    draw_set_font(global.fn_1);
    if (i == itmSel) 
    { 
        itmHei[i] = Goto(itmHei[i], itmHeiExpDes, dt_sec() * itmSpd);
        if (menFoc != "exit") draw_sprite_ext(s1x1, 0, dx - 2, dy, itmWid + 4, itmHei[i], 0, colBgnHil, 1);
        if (menFoc != "exit") draw_set_color(colTxtHil); else draw_set_color(colTxtNor);
    }
    else 
    {
        itmHei[i] = Goto(itmHei[i], itmHeiDes, dt_sec() * itmSpd);
        draw_set_color(colTxtNor);
        if (itmHil == i &amp;&amp; menFoc != "exit") 
        {
            draw_sprite_ext(s1x1, 0, dx - 2, dy, itmWid + 4, itmHei[i], 0, colBgnHil, 0.5);
            draw_set_color(merge_color(colTxtNor, colTxtHil, 0.5));
        }
    }
    plu = 0;
    var disNam = itmNam[i];
    var des = "none";
    plx = 0; // Description x
    if (typ == "jerkin") { Jerkin("draw", itmNam[i], dx + 7 + 12, dy + 0 + 12); plu = 31; }
    if (typ == "recipe") { disNam += " Recipe"; }
    if (typ == "vidcon")
    {
        if (string_count("VIDCON_", disNam) &gt; 0)
        {
            des = Vidcon("name", real(string_delete(disNam, 1, 7)));
            disNam = Vidcon("name", real(string_delete(disNam, 1, 7)));
            disNamOld = disNam;
            while (string_width(disNam) &gt; 120) disNam = string_copy(disNam, 1, string_length(disNam) - 1);
            if (disNamOld != disNam) disNam += "...";
            draw_sprite(sMenuUtilityVidcon, 1, dx + 12, dy);
            plu = 31;
        }
        else
        {
            draw_sprite(sMenuGunIcon, 4, dx + 12, dy);
            des = Item("description", disNam);
            plu = 31;
        }
    }
    if (typ == "gun")
    {
        draw_sprite(spr_samplegunsprites, i, dx + 3, dy);
        plu = 31 + 24;
        draw_set_font(global.fn_12ocs);
        des = "";
        disNam = "Frankincense Hunting Rifle";
    }
    draw_text(dx + 4 + plu, dy + 2, disNam);
    draw_set_font(global.fn_2);
    
    
    if (itmHei[i] != itmHeiDes) // Item selected or WAS selected, draw description text
    {
        if (surface_exists(itmSur[i]) == 0) itmSur[i] = surface_create(itmWid, itmHeiExpDes);
        surface_set_target(itmSur[i]);
        draw_clear_alpha(c_black, 0);
        
        colLst = draw_get_color();
        
        hx = 0;
        for (h = 0; h &lt; attCou; h += 1)
        {
            draw_set_font(global.fn_small);
            draw_set_color(attCol);
            draw_text(4 + hx, 1, attNam[h]); //floor(itmWid / 2)
            draw_set_font(global.fn_1);
            draw_set_color(colLst);
            if (attVal[h] == "res") 
            {
                var jrk = itmNam[i];
                DrawResistance(4 + hx, 14, Jerkin("res_bio", jrk), Jerkin("res_cyber", jrk), Jerkin("res_mental", jrk), 
                    Jerkin("res_cosmic", jrk), Jerkin("res_zauber", jrk), 0, 1);
            }
            else 
            {
                var val = "";
                if (shopType == "jerkin") 
                {
                    val = Jerkin(attVal[h], itmNam[i]);
                    if (h == 1) val = string(val) + "~";
                }
                if (shopType == "gun")
                {
                    val = attVal[h];
                }
                draw_text(4 + hx, 5, string(val));
            }
            hx += 38;
        }
        draw_set_color(colTxtNor); //colLst);
        // Description
        draw_set_halign(0);
        draw_set_font(global.fn_2);
        
        plu = 0;
        if (shopType == "jerkin") { plu = 24; des = Jerkin("description", itmNam[i]); }
        if (shopType == "recipe") { plu = -1; des = Candy("utility", Candy("name to map", itmNam[i])); }
        draw_text_ext(4 + plx, plu + 2, des, -1, itmWid - 4); // floor(itmWid / 2)
        
        surface_reset_target();
        draw_surface_part(itmSur[i], 0, 0, itmWid, abs(itmHeiDes - itmHei[i]), dx, dy + itmHeiDes);
        draw_set_halign(0);
        draw_set_color(colLst);
    }
    
    // Item price
    draw_set_font(global.fn_2);
    if (itmPrc[i] &gt; scr_money_count())
    {
        if (i == itmSel) draw_set_color(colTxtRed);
        else if (i == itmHil) draw_set_color(merge_color(colTxtNor, colTxtRed, 0.75));
        else draw_set_color(merge_color(colTxtNor, colTxtRed, 0.5));
    }
    draw_set_halign(2);
    draw_text(dx + itmWid - 8 - 29 + 32, dy + 6, "£" + string(itmPrc[i]));
    draw_set_halign(0);
    
    dy += itmHei[i];
}
Border("draw border", 2, drx, dry);

/////////////////////////////////// EXIT
// EXIT BORDER
if (butAmt &gt; 0)
{
    mix = x + (384 / 2);
    miw = 54;
    wid = (miw + 8);
    hei = 50;
    Border("draw", 3, mix - miw + 2, y + 240 - 30 - 3 + (ald * 33));
    draw_set_color(c_white);
}
// EXIT BUTTON
for (i = 0; i &lt; butAmt; i += 1)
{
    dy = y + butY[i] + (ald * 33);
    dx = x + butX[i];
    draw_sprite_ext(butSpr[i], 1, dx, dy, 1, 1, 0, butHilCol, butHov[i]);
    draw_sprite_ext(butSpr[i], butSub[i], dx, dy, 1, 1, 0, merge_color(c_ltgray, butTxtCol, butHov[i]), 1);
}
/////////////////////////////////// EXIT

// Draw compare
event_user(0); // Jerkin Compare
event_user(1); // Gun Info

// Cursor
if (stt == "buy") exit;
if (curOvr == -1) curSub = 0; else curSub = 1;
curCol = merge_color(c_white, butTxtCol, curHov);
curHov -= dt_sec() / butSpd;
curHov = clamp(curHov, 0, 1);
if (global.keyinput_type != KEYINPUT_GAMEPAD) draw_sprite_ext(s_curs2, curSub, mouse_x, mouse_y, 1, 1, 0, curCol, sld);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
