<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
gumNam[0] = "Butterscotch";
gumNam[1] = "Foul";
gumNam[2] = "Transparent";
gumNam[3] = "Winner";
gumNam[4] = "Steel";
gumNam[5] = "Red";
gumNam[6] = "Yellow";
gumNam[7] = "Blue";
gumNam[8] = "White";
gumNam[9] = "Green";
gumNam[10] = "Orange";
gumNam[11] = "Black";
gumNam[12] = "Grape";
gumExt[0] = "Foul - Destroy";
gumExt[1] = "Foul - Keep";
gumExt[2] = "Red - Strawberry";
gumExt[3] = "Red - Cherry";
gumExt[4] = "Yellow - Banana";
gumExt[5] = "Yellow - Lemon";
gumExt[6] = "Blue - Blueberries";
gumExt[7] = "Blue - Raspberries";
gumExt[8] = "White - Flavorless";
gumExt[9] = "White - Flavorful";
gumExt[10] = "Green - Apple";
gumExt[11] = "Green - Watermelon";
gumExt[12] = "Orange - Fruit";
gumExt[13] = "Orange - Color";
gumExt[14] = "Black - Liquorice";
gumExt[15] = "Black - Coffee";

o_cc_data.event_finished_gumball = true;

// GZ Gumball //
x = -999;
o_cc_wizard.alpha_goal = 0; // NEW
event_user(0); // Populate machine
machineX = (SCREEN_WIDTH / 2);
machineY = (SCREEN_HEIGHT / 2) + 52;
machineVisible = 0;
gumballShake = 0;
gumballActive = 0;
gumballLayer = 0;
gumballTween = 0;

// Phase setup //
phase[0] = 18;
phase[1] = 1;
phase[2] = 0;

// Phase skipping //
phase_skip_time = 0;
phase_skip_to = 0;
phase_skip = 0;

// Textbox setup //
textbox_written = "";
textbox_goal = "";
textbox_pause = 0;
textbox_position = 0;
textbox_skip = false;  

// Alpha setup //
alpha_textbox = 0;
alpha_textbox_goal = 0;
alpha_textbox_timer = 0;
alpha_event = 0;
alpha_event_goal = 0;
alpha_choice = 0;
alpha_choice_goal = 0;
alpha_popup = 0;
alpha_popup_goal = 0;

// Other //
//o_cc_wizard.alpha_goal = 1;
quarter_choice = false;
quarter_scale = 0;
gumball_coin = 0; // If 1 you took coin
gumball_abstain = 0; // If 1 you abstained
gumball_animation = 0;
gumball = 0;
gumball_choice = -1; // was 0;
timer_transition = 0;
timer_coin = 0;
timer_coin_shrink = 0;
timer_coin_grow = 0;

option_hover[0] = false;
option_hover[1] = false;
button[0] = false;
button[1] = false;

question = false;
question_2 = false;
option_yes = "Yes";
option_no = "No";

popup_warning = "WARNING!##Only one quarter remaining.#Continue anyway?";
popup = false;
popup_yes = "Yes";
popup_no = "No";

option[0, 0] = "EMPTY";
option[0, 1] = "EMPTY";
option[2, 0] = "EMPTY";
option[2, 1] = "EMPTY";
option[3, 0] = "EMPTY";
option[3, 1] = "EMPTY";
option[4, 0] = "EMPTY";
option[4, 1] = "EMPTY";

option[1, 0] = "Destroy the gumball immediately!";
option[1, 1] = "I want to keep this gumball";
option[5, 0] = "Strawberry";
option[5, 1] = "Cherry";
option[6, 0] = "Banana";
option[6, 1] = "Lemon";
option[7, 0] = "Blueberry";
option[7, 1] = "Raspberry";
option[8, 0] = "There is no flavor left";
option[8, 1] = "There is still flavor left";
option[9, 0] = "Apple";
option[9, 1] = "Watermelon";
option[10, 0] = "Orange, the fruit";
option[10, 1] = "Orange, the color";
option[11, 0] = "Liquorice";
option[11, 1] = "Coffee";

// Defaults //
text[0] = "You are a candy enthusiast - am I correct? Ah,#yes... a gumball lover! Surely you'd like a gumball,#wouldn't you?";
text[1] = "What do you say, do you want a gumball?";
text[2] = "Ah, I thought so! I also enjoy the occasional#gumball. Here, take this quarter. It will aid your#endeavor to acquire a gumball."; 
text[3] = "Oh... excuse me. I thought you were a candy#well-wisher, but it seems I was mistaken. I#apologize for the error...";
text[4] = "Oh... you have changed your mind? That is very#interesting... By denying yourself this delicious#treat, you have shown me what incredible restraint#you possess.";
text[5] = "Here is where I will talk about your gumball.";

// Gumballs //
// Werthers //
text_gumball[0, 0] = 2;
text_gumball[0, 1] = "How fortunate you are! This butterscotch gumball#has a delectable caramel flavor. It also shares#a color with a fabled candy: Werther's Original.#Imagine, a Werther's Original gumball...";
text_gumball[0, 2] = "If only we could be so blessed!";

// Foul //
text_gumball[1, 0] = 2;
text_gumball[1, 1] = "Disgusting... an ancient, weathered gumball,#wearing scars earned from millenia of erosion#and decay."; 
text_gumball[1, 2] = "This antediluvian gumball is surely a cursed relic#which will bring about misfortune. Shall I destroy it?"
    
// Transparent //
text_gumball[2, 0] = 2;
text_gumball[2, 1] = "How curious, a fully transparent gumball. What#magic or natural processes created this gumball#may never be known, but we've been given a rare#window into an heretofore unseen microcosm.";
text_gumball[2, 2] = "A truly priceless artifact for any gumball hobbyist#or scholar.";

// Winner //
text_gumball[3, 0] = 2;
text_gumball[3, 1] = "Congratulations, child! The recipient's ownership#and then subsequent forfeiture of this WINNER#gumball to a contest organizer entitles the#recipient to one prize."; 
text_gumball[3, 2] = "Let it be known, you're in a very enviable position#while you possess this gumball."

// Steel //
text_gumball[4, 0] = 1;
text_gumball[4, 1] = "How did that get there?... a solid steel gumball! I#don't envy your pockets, youngster! Let's hope#they're double-stitched if they're going to be#laden with this weighty gumball.";

// Red //
text_gumball[5, 0] = 2;
text_gumball[5, 1] = "Nothing makes you feel young again quite like a red#gumball. This sanguine gumball arouses slumbering#memories with its bold looks and classic fruit#flavor."; 
text_gumball[5, 2] = "What gumball from your past do you wish to#remember?";

// Yellow //
text_gumball[6, 0] = 2;
text_gumball[6, 1] = "A gleaming gumball, the color of the sun. It would#be prudent to expect a bright, perhaps illuminating#flavor from a yellow gumball. It is nearing dawn.#Take it in your hand."; 
text_gumball[6, 2] = "You should feel your hopes rising with the sun.#What flavor are your hopes set on?";

// Blue //
text_gumball[7, 0] = 2;
text_gumball[7, 1] = "What a splendid find! Your new blue gumball#glitters on the horizon like the Ishtar Gate, a#timeless monument of flavor. What fruit is depicted#in the bas-relief adorning this mighty gumball?";
text_gumball[7, 2] = "What flavor do you expect thig gumball to be?";

// White //
text_gumball[8, 0] = 2;
text_gumball[8, 1] = "A white gumball, nature's pearl. Some say this#shimmering husk is all that remains of a gumball#when its flavor has been fully drained. They're#commonly derided as 'dead gumbs'."; 
text_gumball[8, 2] = "But what say you, my child? Examine the gumball.#How much flavor still remains?";   

// Green //
text_gumball[9, 0] = 2;
text_gumball[9, 1] = "Ah, look what we have here! A deep green gumball.#The color of vegetation and nature... this gumball#must be a fruit! But I shall let you tell me what#the flavor is.";
text_gumball[9, 2] = "So youngster, which fruit flavor lies inside this#ball?";
    
// Orange //
text_gumball[10, 0] = 2;
text_gumball[10, 1] = "An orange gumball... tasty, but rather predictable.#What else could an orange gumball be but an orange#gumball? You have both a refined palate and a#refined palette, youngster.";
text_gumball[10, 2] = "Tell me, how do you suspect this gumball tastes?#Like the fruit or like the color?"
    
// Black //
text_gumball[11, 0] = 2;
text_gumball[11, 1] = "A magnificent black gumball. These gumballs are#known to plumb the depths of flavor, finally#returning to the surface with impossible bounties.";
text_gumball[11, 2] = "What bounty do you suspect lurks inside this#gumball?";

// Grape //
text_gumball[12, 0] = 1;
text_gumball[12, 1] = "Oh Lord, do I ever want that grape gumball. How#I long for that grape gumball! Looks like you know#my weakness now, youngster. Please... let's move#on.";

    // Foul destroy //
    text_choice[0, 0] = 1;
    text_choice[0, 1] = "Good. Such a foul gumball should not be permitted#to exist!";
    
    // Foul keep //
    text_choice[1, 0] = 1; // was text_gumball
    text_choice[1, 1] = "You fool! No good can come from that ball...";

    // Red - Strawberry //
    text_choice[2, 0] = 1;
    text_choice[2, 1] = "Delicious choice. But keep in mind, the delicate skin#of a strawberry gumball can bruise easily from the#slightest impact. I think you need to chew it,#pronto.";
    
    // Red - Cherry //
    text_choice[3, 0] = 2;
    text_choice[3, 1] = "So, you prefer the complex, dusky taste of a#cherry gumball, do you? I can tell you made that#choice after much deliberation, my child. Your#wrinkled brow betrays your consternation.";
    text_choice[3, 2] = "Thankfully, the act of making any decision at all#usually lightens the burden.";

    // Yellow - banana //
    text_choice[4, 0] = 1;
    text_choice[4, 1] = "Then I trust that's what you'll find, youngster.#Banana is a common flavor in the gumball canon.#It's banana, undoubtedly.";
    
    // Yellow - Lemon //
    text_choice[5, 0] = 1;
    text_choice[5, 1] = "Interesting. Even... quite interesting. A lemon#gumball... by Clispaeth...";
    
    // Blue - Blueberries //
    text_choice[6, 0] = 2;
    text_choice[6, 1] = "Right you are. The chaotic war scenes on the south#side of the gumball transition through detailed#scenes of manufacturing and eventually tranquil#depictions of domestic life in antiquity."; 
    text_choice[6, 2] = "That each of these scenes revolves around#blueberries is a testament to their vast economic#clout, and this sculpture's hidden truth.";
    
    // Blue - Raspberries //
    text_choice[7, 0] = 2;
    text_choice[7, 1] = "Indeed, indeed. The pastoral scenes that grace#this indigo treat clearly depict blue raspberries."; 
    text_choice[7, 2] = "In particular, the sculptures of villagers casting#lots demonstrates the ritual and legal importance#of the blue raspberry to early civilization.";

    // White - No flavor //
    text_choice[8, 0] = 1;
    text_choice[8, 1] = "Your supposition is almost certainly correct,#youngster. It's doubtful there's even a single#flavor to be found in this, the palest gumball.";
    
    // White - Flavor //
    text_choice[9, 0] = 1;
    text_choice[9, 1] = "I trust your keen senses. If you suspect the#presence of a flavor locked within this alabastrine#gumball, I'll take your word for it.";

    // Green - Apple //
    text_choice[10, 0] = 1;
    text_choice[10, 1] = "Yes, chomping into this sour apple gumball will#deliver an extremely satisfying noise and an#equally satisfying crunch, but its tartness will#surely pucker your lips. Be wary, little one.";
    
    // Green - Watermelon //
    text_choice[11, 0] = 1;
    text_choice[11, 1] = "Yes, yes of course! The green carapace of this#gumball belies a juicy red interior. Perhaps there#are even seeds in a watermelon gumball. You could#be the first one to find out."

    // Orange - fruit //
    text_choice[12, 0] = 1;
    text_choice[12, 1] = "Bergamot, blood, Valencia! mandarin, navel,#satsuma!... unfortunately none of these fruits#carry the smoky bouquet or fresh herbal notes of#orange, the color. All in all, a poor choice."
    
    // Orange- Color //
    text_choice[13, 0] = 2;
    text_choice[13, 1] = "You're quite right, this gumball burns with radiant#orange color! The flavor in this gumball is#unmistakeable. Its the crisp bite and inimitable#vibrancy of the color orange.";
    text_choice[13, 2] = "I'm extremely pleased with this outcome.";
    
    // Black - Liquorice //
    text_choice[14, 0] = 1;
    text_choice[14, 1] = "Hmm, you've picked a very heady flavor, licorice.#Few in the world have the intelligence and will to#fully 'grok' its intricacies. I hope you know what#you're getting yourself into, youngster.";
    
    // Black - Coffee //
    text_choice[15, 0] = 1;
    text_choice[15, 1] = "I could tell you were a coffee lover, just like#myself. I surmise this jack'd gumball is just the#pick-me-up you'll need for the travails that await#you.";


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
if (gumballActive == 1)
{
    if (gumballShake &lt; 2)
    {
        for (i = 0; i &lt; gumballAmount; i += 1)
        {
            if (gumballSway[i] != 0)
            {
                gumballX[i] = lerp(gumballXO[i], 0, (gumballShake / 25) * gumballSway[i]);
                gumballY[i] = lerp(gumballYO[i], 0, (gumballShake / 50) * gumballSway[i]);
            }
        }
    }
    gumballShake = Goto(gumballShake, 2, dt_sec());
    if (gumballShake &gt;= 2) path_speed = 45 * dt_sec();
    if (x &gt; machineX + 14) gumballLayer = 1;
}
if (gumballActive == 2) 
{
    gumball_animation = 0.01;
    gumballActive = 3;
}
if (gumballActive == 3)
{
    gumballTween = Goto(gumballTween, 1, dt_sec());
}

// Phases //
if phase[0] &gt; 0 then
    {
    // Tick down //
    phase[0] -= dt();
    
    // Event //
    if phase[0] &lt;= 0 then
        {
        // Introduction to gumball //
        if phase[1] = 1 then scr_cc_textbox(text[0]);
            
         // Question //
        if phase[1] = 2 then 
            {
            scr_cc_textbox(text[1]);
            textbox_skip = false;
            question = true;
            }
            
        // Say no to gumballs, kids //
        if phase[1] = 3 then scr_cc_textbox(text[3]);
        
        // End //
        if phase[1] = 4 then 
            {
            gumball_abstain = 1;
            timer_transition = 15;
            phase[2] = 25;
            }

        // Say yes to gumballs, candy well-wishers //
        if phase[1] = 5 then scr_cc_textbox(text[2]);
        
        // Obtained a quarter //
        if phase[1] = 6 then 
            {
            alpha_event_goal = 1;
            timer_coin = 40;
            timer_coin_grow = 30;
            audio_play_sound_at_xy(sn_cc_gumball_coin_jingle, false, 10, 0, 0);            
            }
            
        // Changed your mind //
        if phase[1] = 7 then scr_cc_textbox(text[4]);
        
        // End because you changed your mind //
        if phase[1] = 8 then 
            {
            gumball_coin = 1;
            timer_transition = 5;
            phase[2] = 15;
            }
        
        // Check if its a question gumball or normal one//
        if phase[1] = 9 then
            {
            if gumball = 1 or gumball &gt;= 5 then scr_cc_phase_skip(5, 10);
            else scr_cc_phase_skip(5, 17);
            }
        
        // Question ones //    
        if phase[1] &gt;= 10 and phase[1] &lt;= 13 then
            {
            if text_gumball[gumball, 0] &gt;= phase[1] - 9 then scr_cc_textbox(text_gumball[gumball, phase[1] - 9]);
            }
            
        // Question answers //
        if phase[1] &gt;= 14 and phase[1] &lt;= 16 then
            {
            if text_choice[gumball_choice, 0] &gt;= phase[1] - 13 then scr_cc_textbox(text_choice[gumball_choice, phase[1] - 13]);
            else 
                {
                timer_transition = 15;
                phase[2] = 25;
                }
            }
            
        // Normal ones //
        if phase[1] &gt;= 17 and phase[1] &lt;= 20 then
            {
            if text_gumball[gumball, 0] &gt;= phase[1] - 16 then scr_cc_textbox(text_gumball[gumball, phase[1] - 16]);
            else 
                {
                timer_transition = 15;
                phase[2] = 25;
                }
            }
        }
    } 

// Prompt a question //
if phase[1] &gt;= 10 and phase[1] &lt;= 15 then
    {
    if string_length(textbox_written) = string_length(textbox_goal) and textbox_goal = text_gumball[1, 2] then question = true;
    else if string_length(textbox_written) = string_length(textbox_goal) and textbox_goal = text_gumball[5, 2] then question = true;
    else if string_length(textbox_written) = string_length(textbox_goal) and textbox_goal = text_gumball[6, 2] then question = true;
    else if string_length(textbox_written) = string_length(textbox_goal) and textbox_goal = text_gumball[7, 2] then question = true;
    else if string_length(textbox_written) = string_length(textbox_goal) and textbox_goal = text_gumball[8, 2] then question = true;
    else if string_length(textbox_written) = string_length(textbox_goal) and textbox_goal = text_gumball[9, 2] then question = true;
    else if string_length(textbox_written) = string_length(textbox_goal) and textbox_goal = text_gumball[10, 2] then question = true;
    else if string_length(textbox_written) = string_length(textbox_goal) and textbox_goal = text_gumball[11, 2] then question = true;
    else question = false;
    }
else question = false;

// Question //
if question = true then
    {
    // Hovers //
    option_hover[0] = scr_cc_button_xy(26, 358, 200, 210);
    option_hover[1] = scr_cc_button_xy(26, 358, 211, 220);
    
    // Click //
    if MiniKeyPress("action") then    
        {
        // Answer 1 //
        if option_hover[0] = true then
            {
            switch (gumball)
                {
                case 1: gumball_choice = 0; break;
                case 5: gumball_choice = 2; break;
                case 6: gumball_choice = 4; break;
                case 7: gumball_choice = 6; break;
                case 8: gumball_choice = 8; break;
                case 9: gumball_choice = 10; break;
                case 10: gumball_choice = 12; break;
                case 11: gumball_choice = 14; break;
                }
            scr_cc_phase_skip(5, 14);
            alpha_textbox_goal = 0;
            question = false;
            }
        
        // Answer 2 //
        if option_hover[1] = true then 
            {
            switch (gumball)
                {
                case 1: gumball_choice = 1; break;
                case 5: gumball_choice = 3; break;
                case 6: gumball_choice = 5; break;
                case 7: gumball_choice = 7; break;
                case 8: gumball_choice = 9; break;
                case 9: gumball_choice = 11; break;
                case 10: gumball_choice = 13; break;
                case 11: gumball_choice = 15; break;
                }
            scr_cc_phase_skip(5, 14);
            alpha_textbox_goal = 0;
            question = false;
            }
        }
    }
    
// You got a quarter //
if timer_coin &gt; 0 then
    {
    // Tick down //
    timer_coin -= dt();
    
    // End //
    if timer_coin &lt;= 0 then popup = true;
    }
    
// Coin effects //
if timer_coin_grow &gt; 0 then
    {
    // Tick down //
    timer_coin_grow -= dt();
    
    // Grow //
    if quarter_scale &lt; 1 then quarter_scale += 0.1;
    
    // End //
    if timer_coin_grow &lt;= 0 then
        {
        quarter_scale = 1;
        timer_coin_shrink = 10;
        }
    }
    
// Coin effects //
if timer_coin_shrink &gt; 0 then
    {
    // Tick down //
    timer_coin_shrink -= dt();
    
    // Grow //
    if quarter_scale &gt; 0 then quarter_scale -= 0.1;
    
    // End //
    if timer_coin_shrink &lt;= 0 then quarter_scale = 0;
    }
    
// Gumball //
if gumball_animation &gt; 0 then
    {
    // Tick down //
    gumball_animation -= dt();
    
    // End //
    if gumball_animation &lt;= 0 then 
        {
        
        scr_cc_phase_skip(10, 9);
        
        // Character data //
        o_cc_data.character_gumball = gumball;
        
        // PAX //
        o_cc_data.pax[30] = scr_cc_paxcode_convert(gumball);
        }
    }
    
// Popoupupup //
if popup = true then
    {
    // Alpha //
    alpha_popup_goal = 1;
    alpha_event_goal = 0;
    
    // Hovers //
    option_hover[0] = scr_cc_button_xy(148, 174, 143, 158);
    option_hover[1] = scr_cc_button_xy(202, 218, 143, 158);
    
    // Click //
    //if scr_input_check_pressed(KEYID_ACTION, PLAYER1) then
    if MiniKeyPress("action") then     
        {
        // Take the coin, you greedy asshole //
        if option_hover[0] = true then
            {
            // Accept //
            // gumball_animation = 20;
            event_user(10); // Start deal
            popup = false;
            audio_play_sound_at_xy(sn_cc_generic_button2, false, 1, x, y);
            }
        
        // No wait, I shall keep my coin //
        if option_hover[1] = true then 
            {
            // Decline //
            phase[1] = 7;
            phase[0] = 10;
            popup = false;
            audio_play_sound_at_xy(sn_cc_generic_button2, false, 1, x, y);
            }
        }
    }
else alpha_popup_goal = 0;
    
// Question //
if phase[1] = 2 and string_length(textbox_written) = string_length(textbox_goal) and textbox_goal = text[1] then question_2 = true;
else question_2 = false;

// Question //
if question_2 = true then
    {
    // Hovers //
    option_hover[0] = scr_cc_button_xy(26, 358, 200, 210);
    option_hover[1] = scr_cc_button_xy(26, 358, 211, 220);
    
    // Click //
    if MiniKeyPress("action") then 
        {
        // Yes //
        if option_hover[0] = true then
            {
            scr_cc_phase_skip(10, 5);
            alpha_textbox_goal = 0;
            question_2 = false;
            }
        
        // No //
        if option_hover[1] = true then 
            {
            scr_cc_phase_skip(10, 3);
            alpha_textbox_goal = 0;
            question_2 = false;
            }
        }
    }
    
// Transition //
if timer_transition &gt; 0 then
    {
    // Tick down //
    timer_transition -= dt();
    
     // Event //
     if timer_transition &lt;= 0 then instance_create(0, 0, o_cc_transition);
     }
    
// End of this event //
if phase[2] &gt; 0 then
    {
    // Tick down //
    phase[2] -= dt();
    
    // End //
    if phase[2] &lt;= 0 then
        {
        if (gumball_abstain) Quest("playerCCGumball", "Abstain");
        else if (gumball_coin) Quest("playerCCGumball", "Special Coin");
        else if (gumball_choice != -1) Quest("playerCCGumball", gumExt[gumball_choice]);
        else Quest("playerCCGumball", gumNam[gumball]);
        with (o_cc_wizard) event_user(0);
        instance_destroy();
        }
    }
    
// Skip text with button //
scr_cc_textbox_skip();

// Type it //
scr_cc_textbox_type();

// Move to a next phase //
scr_cc_phase_skip_process();

// Alpha for Textboxes //
if alpha_textbox_timer &gt; 0 then alpha_textbox_timer -= dt();
else
    {
    if alpha_textbox &lt; alpha_textbox_goal then alpha_textbox += 0.1;
    if alpha_textbox &gt; alpha_textbox_goal then alpha_textbox -= 0.1;
    }

// Alpha for Events //
if alpha_event &lt; alpha_event_goal then alpha_event += 0.025;
if alpha_event &gt; alpha_event_goal then alpha_event -= 0.025;

if alpha_choice &lt; alpha_choice_goal then alpha_choice += 0.1;
if alpha_choice &gt; alpha_choice_goal then alpha_choice -= 0.1;

if alpha_popup &lt; alpha_popup_goal then alpha_popup += 0.1;
if alpha_popup &gt; alpha_popup_goal then alpha_popup -= 0.1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start gumball animation
gumball = floor(random(13));
gumballActive = 1;
x = machineX + 2;
y = machineY - 72 - 2;
path_start(pGumball, 0, path_action_stop, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gumball single
//gumInd = floor(random(gumAmt));
gumInd = choose(0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12);

gumballX[gumballAmount] = lengthdir_x(len, dir);
gumballY[gumballAmount] = gumballHeight + lengthdir_y(len, dir);
gumballXO[gumballAmount] = gumballX[gumballAmount];
gumballYO[gumballAmount] = gumballY[gumballAmount];

gumballSub[gumballAmount] = gumSub[gumInd];

gumballColor[gumballAmount] = gumCol[gumInd];
gumballColor[gumballAmount] = merge_color(gumballColor[gumballAmount], c_black, gumballBlack[gumballAmount]);

gumballSway[gumballAmount] = choose(0.1, 0.2, random(0.5));

gumballAmount += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gumball populate
i = 0;
dsmGum = ds_map_create();
// 0 = Butterscotch
ds_map_add(dsmGum, "Butterscotch", i);
gumSub[i] = 0;
gumCol[i] = make_color_rgb(196, 128, 0);
i += 1;
// 1 = Foul
ds_map_add(dsmGum, "Foul", i);
gumSub[i] = 1;
gumCol[i] = c_white;
i += 1;
// 2 = Transparent
ds_map_add(dsmGum, "Transparent", i);
gumSub[i] = 2;
gumCol[i] = c_white;
i += 1;
// 3 = Winner
ds_map_add(dsmGum, "Winner", i);
gumSub[i] = 3;
gumCol[i] = c_white;
i += 1;
// 4 = Steel
ds_map_add(dsmGum, "Steel", i);
gumSub[i] = 4;
gumCol[i] = c_white;
i += 1;
// 5 = Red
ds_map_add(dsmGum, "Red", i);
gumSub[i] = 0;
gumCol[i] = make_color_rgb(255, 0, 0);
i += 1;
// 6 = Yellow
ds_map_add(dsmGum, "Yellow", i);
gumSub[i] = 0;
gumCol[i] = make_color_rgb(255, 255, 0);
i += 1;
// 7 = Blue
ds_map_add(dsmGum, "Blue", i);
gumSub[i] = 0;
gumCol[i] = make_color_rgb(0, 0, 255);
i += 1;
// 8 = White
ds_map_add(dsmGum, "White", i);
gumSub[i] = 0;
gumCol[i] = make_color_rgb(255, 255, 255);
i += 1;
// 9 = Green
ds_map_add(dsmGum, "Green", i);
gumSub[i] = 0;
gumCol[i] = make_color_rgb(0, 224, 0);
i += 1;
// 10 = Orange
ds_map_add(dsmGum, "Orange", i);
gumSub[i] = 0;
gumCol[i] = make_color_rgb(255, 128, 0);
i += 1;
// 11 = Black
ds_map_add(dsmGum, "Black", i);
gumSub[i] = 0;
gumCol[i] = make_color_rgb(32, 32, 32);
i += 1;
// 12 = Grape
ds_map_add(dsmGum, "Grape", i);
gumSub[i] = 0;
gumCol[i] = make_color_rgb(128, 0, 255);
i += 1;
gumAmt = i;

gumballAmount = 0;
gumballHeight = -120;
// Make "back" gumballs
for (i = 0; i &lt; 40; i += 1)
{
    dir = random(360);
    len = random(25);
    gumballBlack[gumballAmount] = 0.8;
    gumballScale[gumballAmount] = 0.25 + random(0.1);
    event_user(1);
    
}
// 125 - 98, 98
for (i = 0; i &lt; 80; i += 1)
{
    dir = random(360);
    len = random(30);
    gumballBlack[gumballAmount] = 0.6;
    gumballScale[gumballAmount] = 0.3 + random(0.1);
    event_user(1);
}
// 125 - 98, 98
for (i = 0; i &lt; 120; i += 1)
{
    dir = random(360);
    len = 12 + random(30);
    gumballBlack[gumballAmount] = 0.2;
    gumballScale[gumballAmount] = 0.4 + random(0.05);
    event_user(1);
}
for (i = 0; i &lt; 20; i += 1) // Circle
{
    dir = (i * 18) + random(4);
    len = 38 + random(4);
    gumballBlack[gumballAmount] = 0.4;
    gumballScale[gumballAmount] = 0.4 + random(0.05);
    event_user(1);
}
// 125 - 98, 98
for (i = 0; i &lt; 40; i += 1)
{
    dir = random(360);
    len = random(35);
    gumballBlack[gumballAmount] = 0;
    gumballScale[gumballAmount] = 0.5 + random(0.05);
    event_user(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gumball
gumballActive = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
// Dime //
draw_set_alpha(alpha_event * 0.5);
draw_set_color(c_black);
draw_rectangle(-2, -2, 386, 242, false);

machineVisible = Goto(machineVisible, 1, dt_sec());
// Table
alpha_candles = 1;
dry = 30 + (240 * abs(1 - machineVisible));
draw_sprite_ext(s_cc_tarot_table, 0, (SCREEN_WIDTH / 2), dry + 120, 1, 1, 0, c_white, 1);
draw_sprite_ext(s_cc_tarot_candle, 2, 60, dry + 105, 0.75, 0.75, 0, c_white, alpha_candles);
draw_sprite_ext(s_cc_tarot_candle, 3, 324, dry + 105, 0.75, 0.75, 0, c_white, alpha_candles);
draw_sprite_ext(s_cc_tarot_candle, 0, 40, dry + 120, 1, 1, 0, c_white, alpha_candles);
draw_sprite_ext(s_cc_tarot_candle, 1, 344, dry + 120, 1, 1, 0, c_white, alpha_candles);

// Machine
drx = machineX;
dry = machineY + (240 * abs(1 - machineVisible));
draw_sprite_ext(s_cc_gumball_machine, 1, drx, dry, 1, 1, 0, c_white, 0.5);
// Draw gumballs
for (i = 0; i &lt; gumballAmount; i += 1)
{
    var scl = gumballScale[i];
    var gmx = drx + gumballX[i];
    var gmy = dry + gumballY[i];
    var gms = gumballSub[i];
    draw_sprite_ext(s_cc_gumball_small, gms, gmx - 1, gmy, scl, scl, 0, c_black, 1);
    draw_sprite_ext(s_cc_gumball_small, gms, gmx + 1, gmy, scl, scl, 0, c_black, 1);
    draw_sprite_ext(s_cc_gumball_small, gms, gmx, gmy - 1, scl, scl, 0, c_black, 1);
    draw_sprite_ext(s_cc_gumball_small, gms, gmx, gmy + 1, scl, scl, 0, c_black, 1);
    draw_sprite_ext(s_cc_gumball_small, gms, gmx, gmy, scl, scl, 0, gumballColor[i], 1);
}
draw_sprite_ext(s_cc_gumball_machine, 2, drx, dry, 1, 1, 0, c_white, 0.5);
draw_sprite_ext(s_cc_gumball_machine, 0, drx, dry, 1, 1, 0, c_white, 1);

// Dynamic ball - 60 from base
if (gumballActive &lt;= 2) draw_sprite_ext(s_cc_gumball_small, gumSub[gumball], x, y, 0.33, 0.33, 0, gumCol[gumball], 1);

// When over 14 x with GUMBALL draw the overlay
if (gumballLayer == 1) draw_sprite_ext(s_cc_gumball_machine, 3, drx, dry, 1, 1, 0, c_white, 1); // Over part
draw_sprite_ext(s_cc_gumball_machine, 4, drx, dry, 1, 1, 0, c_white, 0.5); // Bottom glass
draw_sprite_ext(s_cc_gumball_machine, 5, drx, dry, 1, 1, 0, c_white, 1); // Top red
// Very bottom has big gumball

// Quarter //
if timer_coin &gt; 0 then 
    {
    draw_sprite_ext(s_cc_gumball_quarter, 0, 192, 100, quarter_scale, quarter_scale, 0, c_white, 1);
    draw_set_font(global.fn_1);
    draw_set_alpha(alpha_event);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_text_transformed(192, 140, "Acquired Quarter", quarter_scale, quarter_scale, 0);
    draw_set_font(global.fn_2);
    }
    
// Draw textboxes //
scr_cc_draw_textbox();

// Draw popup //
if question_2 = true then
    {
    // YES //
    if option_hover[0] = true then 
        {
        draw_set_color(c_white);
        draw_set_alpha(alpha_textbox * 0.2);
        draw_rectangle(24, 200, 360, 210, false);
        draw_set_color(o_cc_data.color_question_hover);
        }
    else draw_set_color(o_cc_data.color_question_nohover);
    draw_set_alpha(alpha_textbox * 2);
    draw_text(29, 201, option_yes);
    
    // NO //
    if option_hover[1] = true then 
        {
        draw_set_color(c_white);
        draw_set_alpha(alpha_textbox * 0.2);
        draw_rectangle(24, 212, 360, 222, false);
        draw_set_color(o_cc_data.color_question_hover);
        }
    else draw_set_color(o_cc_data.color_question_nohover);
    draw_set_alpha(alpha_textbox * 2);
    draw_text(29, 213, option_no);
    }
    
// Draw popup //
if question = true then
    {
    // YES //
    if option_hover[0] = true then 
        {
        draw_set_color(c_white);
        draw_set_alpha(alpha_textbox * 0.2);
        draw_rectangle(24, 200, 360, 210, false);
        draw_set_color(o_cc_data.color_question_hover);
        }
    else draw_set_color(o_cc_data.color_question_nohover);
    draw_set_alpha(alpha_textbox * 2);
    draw_text(29, 201, option[gumball, 0]);
    
    // NO //
    if option_hover[1] = true then 
        {
        draw_set_color(c_white);
        draw_set_alpha(alpha_textbox * 0.2);
        draw_rectangle(24, 212, 360, 222, false);
        draw_set_color(o_cc_data.color_question_hover);
        }
    else draw_set_color(o_cc_data.color_question_nohover);
    draw_set_alpha(alpha_textbox * 2);
    draw_text(29, 213, option[gumball, 1]);
    }
    
// Wanna spend the quarter? /
draw_set_font(global.fn_1);
draw_set_alpha(alpha_popup * 0.8);
draw_set_color(make_color_rgb(20, 0, 20));
draw_rectangle(-2, -2, 386, 242, false);

draw_set_alpha(alpha_popup * 1.2);
draw_set_color(c_red);
draw_set_halign(fa_center);
draw_text(187, 60, string(popup_warning))

if option_hover[0] = true then draw_set_color(c_yellow);
else draw_set_color(c_white);
draw_text(160, 142, string(popup_yes));

if option_hover[1] = true then draw_set_color(c_yellow);
else draw_set_color(c_white);
draw_text(210, 142, string(popup_no));     
draw_set_font(global.fn_2);

// Darken when gumball get
draw_sprite_ext(s1x1, 0, 0, (SCREEN_HEIGHT / 10), SCREEN_WIDTH, SCREEN_HEIGHT / 2, 0, c_black, gumballTween / 3);

// Gumball Big
if (gumballActive == 3)
{
    var gmx = lerp(x, SCREEN_WIDTH / 2, gumballTween);
    var gmy = lerp(y, (SCREEN_HEIGHT / 2) - 48, gumballTween);
    var gms = lerp(0.33 / 2, 1, gumballTween);
    draw_sprite_ext(s_cc_gumball_large, gumSub[gumball], gmx, gmy, gms, gms, 0, gumCol[gumball], 1);
    draw_set_font(global.fn_1);
    draw_set_alpha(gumballTween);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_text_transformed(gmx, gmy + (40 * gms), "Acquired Gumball", gms, gms, 0);
    draw_set_font(global.fn_2);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
