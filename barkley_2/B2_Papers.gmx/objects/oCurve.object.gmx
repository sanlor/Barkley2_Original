<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
scl = 3;
wid = room_width * scl;
hei = room_height * scl;
window_set_size(wid, hei);
surface_resize(application_surface, wid, hei);
window_set_position((display_get_width() / 2) - (wid / 2), (display_get_height() / 2) - (hei / 2));


for (i = 0; i &lt; 4; i += 1)
{
    pntX[i] = 0;
    pntY[i] = 0;
}
pntX[1] = 0.00; pntY[1] = -1.25;
pntX[2] = 0.5; pntY[2] = -0.8;
pntX[3] = 1; pntY[3] = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
drx = 500; //room_width / 2;
dry = 500; //room_height / 2;
scl = 300;
for (i = 0; i &lt; 4; i += 1)
{
    draw_circle(drx + (pntX[i] * scl), dry + (pntY[i] * scl), 6, 0);
    if (scr_mouse_rect(drx + (pntX[i] * scl) - 3, dry + (pntY[i] * scl) - 3, drx + (pntX[i] * scl) + 3, dry + (pntY[i] * scl) + 3))
    {
        if (MiniKeyPress("action", 1))
        {
            pntX[i] = (mouse_x - drx) / scl;
            pntY[i] = (mouse_y - dry) / scl;
        }
    }
}
// Draw curve
for (i = 0; i &lt; 300; i += 1)
{
    var bzx = BezierCubic(i / 300, pntX[0], pntX[1], pntX[2], pntX[3]);
    var bzy = BezierCubic(i / 300, pntY[0], pntY[1], pntY[2], pntY[3]);
    draw_sprite_ext(s1x1, 0, drx + (bzx * scl), dry + (bzy * scl), 3, 3, 0, c_red, 1);
}
// Get math
var agl = (mouse_x / room_width);
aglOrg = agl;
for (i = 0; i &lt; 100; i += 1) if (agl &lt;= abs(BezierCubic(i / 100, pntX[0], pntX[1], pntX[2], pntX[3]))) break;
agl = i / 100;
agl *= 100;
var bzx = BezierCubic(agl / 100, pntX[0], pntX[1], pntX[2], pntX[3]);
var bzy = BezierCubic(agl / 100, pntY[0], pntY[1], pntY[2], pntY[3]);
draw_sprite_ext(s1x1, 0, drx + (bzx * scl), dry + (bzy * scl), 9, 9, 0, c_lime, 1);
scr_font(global.fn_1, c_white, 0, 0);
agl = abs(agl);
aglMin = 4;
aglMax = 20;
//ln0 = point_distance(pntX[0], pntY[0], pntX[3], pntY[3]);
//ln1 = 
aglMth = aglMin + (abs(BezierCubic(agl / 100, pntY[0], pntY[1], pntY[2], pntY[3])) * (aglMax - aglMin));
draw_text_transformed(5, 5, "Agility at#" + string(aglOrg * 100) + "#=#" + string(aglMth), 2, 2, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
