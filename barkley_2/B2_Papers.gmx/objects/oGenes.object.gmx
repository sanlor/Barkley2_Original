<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
//Konix12o = global.fn_1;
//Konix7o = global.fn_2c;
//Konix5o = global.fn_3;

if (false)
{
    wid = room_width * 1;
    hei = room_height * 1;
    scl = 1;
    window_set_size(wid * scl, hei * scl);
    surface_resize(application_surface, wid, hei);
    window_set_position((display_get_width() / 2) - ((wid * scl) / 2), (display_get_height() / 2) - ((hei * scl) / 2));
}
else
{
    wid = 384 * 3;
    hei = 240 * 3;
    scl = 1;
    window_set_size(wid * scl, hei * scl);
    surface_resize(application_surface, wid, hei);
    window_set_position((display_get_width() / 2) - ((wid * scl) / 2), (display_get_height() / 2) - ((hei * scl) / 2));
}
genDef = 49; //46
genRan = 3; //8
preCalc = 60; // put to higher than 9 when testing

dsTemp = ds_list_create();

//
ButtonVirtual("init");
scr_combat_weapons_fusion_affixhood("init");

affixCategoryIndex = 0;
affixIndex = 0;
affixList[0] = "prefix1";
affixList[1] = "prefix2";
affixList[2] = "suffix";

for (i = 0; i &lt; 10; i += 1) gunMessage[i] = "";
scl = 3;
spcButton = 61 * scl; //128 + 32 + 32;
spcAffix = spcButton + (3 * scl);
yspMinus = 10 * scl; // Big Gun Minus
yspAffix = 11 * scl; // Big Gun Y
yspAffix2 = 10 * scl; // Big Gun Y
butHei = 9 * scl;
clickActive = -1;
gunX[0] = scl;
gunY[0] = yspAffix;
gunX[1] = scl + (192 * scl);//512 + 96;
gunY[1] = yspAffix;
gunX[2] = gunX[1]; //2 + (96 * scl);
gunY[2] = yspAffix + (120 * scl); //32 + 32 + 128 + 32;
gunAffix[0] = 1; gunAffixType[0] = "prefix1";
gunAffix[1] = 1; gunAffixType[1] = "prefix2";
gunAffix[2] = 1; gunAffixType[2] = "suffix";
gunAffix[3] = 2; gunAffixType[3] = "prefix1";
gunAffix[4] = 2; gunAffixType[4] = "prefix2";
gunAffix[5] = 2; gunAffixType[5] = "suffix";
gunAffix[6] = 0; gunAffixType[6] = "prefix1";
gunAffix[7] = 0; gunAffixType[7] = "prefix2";
gunAffix[8] = 0; gunAffixType[8] = "suffix";


// Gun 1
ButtonVirtual("add", "pre1", gunX[0] + (spcAffix * 0), gunY[0], spcButton, butHei);
gunAffixX[0] = gunX[0] + (spcAffix * 0); gunAffixY[0] = gunY[0] + yspAffix2;
ButtonVirtual("add", "pre2", gunX[0] + (spcAffix * 1), gunY[0], spcButton, butHei);
gunAffixX[1] = gunX[0] + (spcAffix * 1); gunAffixY[1] = gunY[0] + yspAffix2;
ButtonVirtual("add", "suf", gunX[0] + (spcAffix * 2), gunY[0], spcButton, butHei);
gunAffixX[2] = gunX[0] + (spcAffix * 2); gunAffixY[2] = gunY[0] + yspAffix2;
// Gun 2
ButtonVirtual("add", "pre1", gunX[1] + (spcAffix * 0), gunY[1], spcButton, butHei);
gunAffixX[3] = gunX[1] + (spcAffix * 0); gunAffixY[3] = gunY[1] + yspAffix2;
ButtonVirtual("add", "pre2", gunX[1] + (spcAffix * 1), gunY[1], spcButton, butHei);
gunAffixX[4] = gunX[1] + (spcAffix * 1); gunAffixY[4] = gunY[1] + yspAffix2;
ButtonVirtual("add", "suf", gunX[1] + (spcAffix * 2), gunY[1], spcButton, butHei);
gunAffixX[5] = gunX[1] + (spcAffix * 2); gunAffixY[5] = gunY[1] + yspAffix2;
// Gun 3
ButtonVirtual("add", "pre1", gunX[2] + (spcAffix * 0), gunY[2], spcButton, butHei);
gunAffixX[6] = gunX[2] + (spcAffix * 0); gunAffixY[6] = gunY[2] + yspAffix2;
ButtonVirtual("add", "pre2", gunX[2] + (spcAffix * 1), gunY[2], spcButton, butHei);
gunAffixX[7] = gunX[2] + (spcAffix * 1); gunAffixY[7] = gunY[2] + yspAffix2;
ButtonVirtual("add", "suf", gunX[2] + (spcAffix * 2), gunY[2], spcButton, butHei);
gunAffixX[8] = gunX[2] + (spcAffix * 2); gunAffixY[8] = gunY[2] + yspAffix2;
// Big Guns
buttonGun[0] = ButtonVirtual("add", "GUN 1", gunX[0], gunY[0] - yspMinus, (spcAffix * 3) - (3 * scl), butHei);
buttonGun[1] = ButtonVirtual("add", "GUN 2", gunX[1], gunY[1] - yspMinus, (spcAffix * 3) - (3 * scl), butHei);
buttonGun[2] = ButtonVirtual("add", "GUN 3", gunX[2], gunY[2] - yspMinus, (spcAffix * 3) - (3 * scl), butHei);

// Generate guns
gunDat[0] = scr_combat_weapons_generate(); // Sandbox
gunDat[1] = scr_combat_weapons_generate(); // Sandbox
gunDat[2] = scr_combat_weapons_generate(); // Sandbox
// Get gunsbag
gunBan = 5; // Guns in bando
for (i = 0; i &lt; gunBan; i += 1)
{
    gunDat[3 + i] = scr_combat_weapons_generate();
    gunLis[3 + i] = "Bando Gun " + string(i + 1);
}
// Generate gun lists
gunLis[0] = "Sandbox Gun 1";
gunLis[1] = "Sandbox Gun 2";
gunLis[2] = "Sandbox Gun 3";




//all three guns generate affix data on startup
gunObj[0] = gunDat[0];
gunObj[1] = gunDat[1];
gunObj[2] = gunDat[2];
gn0 = gunObj[0];
gn1 = gunObj[1];
gn2 = gunObj[2];

///
///
for (i = 0; i &lt; 3; i += 1)
{
    var gnt = gunObj[i];
    ///Generate random affix data
    //Get random affix / suffix. Empty is 0, so start at 1 and randomize to end
    gnt[? "pPrefix1"] = scr_combat_weapons_fusion_affixhood("prefix1", "name", 1 + floor(random(scr_combat_weapons_fusion_affixhood("prefix1", "size") - 1)));
    gnt[? "pPrefix2"] = scr_combat_weapons_fusion_affixhood("prefix2", "name", 1 + floor(random(scr_combat_weapons_fusion_affixhood("prefix2", "size") - 1)));
    gnt[? "pSuffix"] = scr_combat_weapons_fusion_affixhood("suffix", "name", 1 + floor(random(scr_combat_weapons_fusion_affixhood("suffix", "size") - 1)));
    //Get random values that match up with the selected affix
    scr_combat_weapons_fusion_affixhood("generate", "prefix1", gnt[? "pPrefix1"], gnt);
    scr_combat_weapons_fusion_affixhood("generate", "prefix2", gnt[? "pPrefix2"], gnt);
    scr_combat_weapons_fusion_affixhood("generate", "suffix", gnt[? "pSuffix"], gnt);
}
///
///

event_user(10); // Redo affix

drp = -1;

event_user(3); //calculates top genes
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DONE - STEP
doGen = 0;
if (keyboard_check_pressed(vk_space))
{
    event_user(1);
}
if (clickActive == -1)
{
    if (keyboard_check_pressed(vk_up))
    {
        affixCategoryIndex += 1;
        if (affixCategoryIndex &gt; 2) affixCategoryIndex = 0;
    }
    if (keyboard_check_pressed(vk_down))
    {
        affixCategoryIndex -= 1;
        if (affixCategoryIndex &lt; 0) affixCategoryIndex = 2;
    }
    
    if (keyboard_check_pressed(vk_right))
    {
        affixIndex += 1;
        
    }
    if (keyboard_check_pressed(vk_left))
    {
        affixIndex -= 1;
        
    }
}

if (affixIndex &gt;= scr_combat_weapons_fusion_affixhood(affixList[affixCategoryIndex], "size"))
{
    affixIndex = 0;
}
if (affixIndex &lt; 0)
{
    affixIndex = scr_combat_weapons_fusion_affixhood(affixList[affixCategoryIndex], "size") - 1;
}

doButton = -1;
//right click
for (i = 0; i &lt; 9; i += 1)
{
    click = ButtonVirtual("click", i, window_mouse_get_x(), window_mouse_get_y());
    if (click == 2)
    {
        mouse_clear(mb_right);
        if (i == 0) { obj = gn0; ind = 0; } else if (i == 1) { obj = gn0; ind = 1; } else if (i == 2) { obj = gn0; ind = 2; }
        else if (i == 3) { obj = gn1; ind = 0; } else if (i == 4) { obj = gn1; ind = 1; } else if (i == 5) { obj = gn1; ind = 2; }
        else if (i == 6) { obj = gn2; ind = 0; } else if (i == 7) { obj = gn2; ind = 1; } else if (i == 8) { obj = gn2; ind = 2; }
        if (ind == 0) tempAffix = obj[? "pPrefix1"];
        if (ind == 1) tempAffix = obj[? "pPrefix2"];
        if (ind == 2) tempAffix = obj[? "pSuffix"];
        
        //if (gunAffixType[i] == "prefix1") ind = 0;
        //else if (gunAffixType[i] == "prefix2") ind = 1;
        //else ind = 2;
        affixCategoryIndex = ind;
        affixIndex = scr_combat_weapons_fusion_affixhood(affixList[ind], "index", tempAffix);
        //Msg("hi");
    }
}

if (drp == -1)
{
    for (i = 0; i &lt; 6; i += 1)
    {
        ButtonVirtual("active", i, 0);
        click = ButtonVirtual("click", i, window_mouse_get_x(), window_mouse_get_y());
        if (click == 1)
        {
            mouse_clear(mb_left);
            clickActive = i;
            doButton = i;
        }
    }
    if (mouse_check_button(mb_left)) { if (doButton == -1) clickActive = -1; } //deselect
}

doChange = 0;
if (clickActive != -1)
{
    i = clickActive;
    if (i == 0) { obj = gn0; ind = 0; } else if (i == 1) { obj = gn0; ind = 1; } else if (i == 2) { obj = gn0; ind = 2; }
    else if (i == 3) { obj = gn1; ind = 0; } else if (i == 4) { obj = gn1; ind = 1; } else if (i == 5) { obj = gn1; ind = 2; }
    if (ind == 0) tempAffix = obj[? "pPrefix1"];
    if (ind == 1) tempAffix = obj[? "pPrefix2"];
    if (ind == 2) tempAffix = obj[? "pSuffix"];
    aT = affixList[ind];
    tmpIndex = scr_combat_weapons_fusion_affixhood(aT, "index", tempAffix);
    
    if (keyboard_check_pressed(vk_right)) { tmpIndex += 1; doChange = 1; }
    if (keyboard_check_pressed(vk_left)) { tmpIndex -= 1; doChange = 1; }
    if (tmpIndex &gt;= scr_combat_weapons_fusion_affixhood(aT, "size")) tmpIndex = 1;
    if (tmpIndex &lt;= 0) tmpIndex = scr_combat_weapons_fusion_affixhood(aT, "size") - 1;
    ButtonVirtual("active", i, 1);
    if (doChange)
    {
        aN = scr_combat_weapons_fusion_affixhood(aT, "name", tmpIndex);
        
        
        while (true) { if (scr_combat_weapons_fusion_affixhood("generate", aT, aN, obj) == 1) break; }//give new generated values to gunObj
        if (ind == 0) obj[? "pPrefix1"] = aN;
        if (ind == 1) obj[? "pPrefix2"] = aN;
        if (ind == 2) obj[? "pSuffix"] = aN;
        event_user(3); //calculate top genes
        event_user(10); //ButtonVirtual("name", i, aN); // CHANGED RECENT
    }
}

//Merge result
doSwap = -1;
click = ButtonVirtual("click", buttonGun[2], window_mouse_get_x(), window_mouse_get_y());
if (click)
{
    mouse_clear(mb_left);
    mouse_clear(mb_right);
    event_user(2);
    if (click == 2) doSwap = 0;
}

// Random Gun 2
if (ButtonVirtual("click", buttonGun[1], window_mouse_get_x(), window_mouse_get_y()) == 2) { event_user(12); mouse_clear(mb_right); }

//Swap gun 3 to gun 1 or 2
if (ButtonVirtual("click", buttonGun[0], window_mouse_get_x(), window_mouse_get_y()) == 2) doSwap = 0;
//if (ButtonVirtual("click", buttonGun[1], window_mouse_get_x(), window_mouse_get_y()) == 1) doSwap = 3;

if (doSwap &gt;= 0)
{
    mouse_clear(mb_left);
    if (doSwap == 0) obj = gn0; else obj = gn1;
    for (aI = 0; aI &lt; 3; aI += 1)
    {
        aT = affixList[aI];
        i = doSwap + aI;
        //old name
        if (aI == 0) aN = obj[? "pPrefix1"];
        else if (aI == 1) aN = obj[? "pPrefix2"];
        else if (aI == 2) aN = obj[? "pSuffix"];
        gunMessage[i] = aN;//scr_affix(aT, "name", gunAffix[i]); //put old affix name as message for reference
        if (aI == 0) aN = gn2[? "pPrefix1"];
        else if (aI == 1) aN = gn2[? "pPrefix2"];
        else if (aI == 2) aN = gn2[? "pSuffix"];
        gC = scr_combat_weapons_fusion_affixhood(aT, "gene amount");
        for (gI = 0; gI &lt; gC; gI += 1)
        {
            //// obj.aGene[aI, gI] = gunObj[2].aGene[aI, gI];
            gunList2D_put(obj, "aGene", aI, gI, 
                gunList2D_get(gn2, "aGene", aI, gI));
            //Recalculate values to be safe, instead of just copying
            geneName = scr_combat_weapons_fusion_affixhood(aT, "gene name", gI);
            //// obj.aGenePenchant[aI, gI] = scr_combat_weapons_fusion_affixhood(aT, "gene", aN, geneName);
            gunList2D_put(obj, "aGenePenchant", aI, gI,
                scr_combat_weapons_fusion_affixhood(aT, "gene", aN, geneName));
            //// obj.aGeneValue[aI, gI] = obj.aGene[aI, gI] * obj.aGenePenchant[aI, gI];
            gunList2D_put(obj, "aGeneValue", aI, gI,
                gunList2D_get(obj, "aGene", aI, gI) * gunList2D_get(obj, "aGenePenchant", aI, gI));
        }
        ButtonVirtual("name", i, aN);
    }
    obj[? "pPrefix1"] = gn2[? "pPrefix1"];
    obj[? "pPrefix2"] = gn2[? "pPrefix2"];
    obj[? "pSuffix"] = gn2[? "pSuffix"];
    event_user(3); //recalculate top genes
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw genes using normal sizes
scr_font(Konix12o, c_white);
vspc = 24;
spcStat = 64;
dx = 8;
dy = 8;
affixName = scr_combat_weapons_fusion_affixhood(affixList[affixCategoryIndex], "name", affixIndex);
affixDesc = scr_combat_weapons_fusion_affixhood(affixList[affixCategoryIndex], "description", affixIndex);
draw_set_color(c_white);
draw_text(dx, dy, affixList[affixCategoryIndex] + " - " + string(affixIndex + 1) + " of " + string(scr_combat_weapons_fusion_affixhood(affixList[affixCategoryIndex], "size"))); dy += vspc;
draw_set_color(c_yellow);
draw_text(dx, dy, affixName); dy += vspc;

// NOTES
draw_set_color(c_orange);
drx = 5; dry = 320; ysp = 20;
draw_text(drx, dry, "Left click on Gun1 / Gun2 affix' and use left / right arrow keys to change affix."); dry += ysp;
draw_text(drx, dry, "Right click on Gun2 = Generate random."); dry += ysp;
draw_text(drx, dry, "Right click on Gun3 = Copy Gun 3 to Gun1, then re-fuse Gun 1 and Gun 2"); dry += ysp;
// NOTES

//show genes for this
for (geneIndex = 0; geneIndex &lt; scr_combat_weapons_fusion_affixhood(affixList[affixCategoryIndex], "gene amount"); geneIndex += 1)
{
    geneName = scr_combat_weapons_fusion_affixhood(affixList[affixCategoryIndex], "gene name", geneIndex);
    geneValue = scr_combat_weapons_fusion_affixhood(affixList[affixCategoryIndex], "gene", affixName, geneName);
    if (geneValue == global.genePrimaryValue) col = merge_color(c_red, c_white, .5);
    else if (geneValue == global.geneSecondaryValue) col = merge_color(c_orange, c_white, .5);
    else col = c_white;
    draw_set_color(col);
    draw_text(dx, dy, geneName);
    dx += spcStat;
    draw_text(dx, dy, geneValue);
    dx -= spcStat;
    dy += vspc;
}
draw_set_color(merge_color(c_yellow, c_white, .5));
draw_text_ext(dx, dy, affixDesc, -1, 128 + 32);

//
ButtonVirtual("draw");

//moved to generation

//Draw all genes
scr_font(Konix7o, c_white);
for (i = 0; i &lt; 9; i += 1)
{
    if (i == 0) { obj = gn0; ind = 0; } else if (i == 1) { obj = gn0; ind = 1; } else if (i == 2) { obj = gn0; ind = 2; }
    else if (i == 3) { obj = gn1; ind = 0; } else if (i == 4) { obj = gn1; ind = 1; } else if (i == 5) { obj = gn1; ind = 2; }
    else if (i == 6) { obj = gn2; ind = 0; } else if (i == 7) { obj = gn2; ind = 1; } else if (i == 8) { obj = gn2; ind = 2; }
    dx = gunAffixX[i];
    dy = gunAffixY[i];
    aT = affixList[ind];
    gC = scr_combat_weapons_fusion_affixhood(aT, "gene amount");
    for (h = 0; h &lt; gC; h += 1) 
    {
        var ohl = gunList2D_get(obj, "aHilight", ind, h);
        if (ohl == 2) col = merge_color(c_red, c_white, .5);
        else if (ohl == 1) col = merge_color(c_orange, c_white, .5);
        else col = c_white;
        draw_set_color(col);
        var gnm = gunList2D_get(obj, "aGeneName", ind, h);
        var gnn = gunList2D_get(obj, "aGene", ind, h);
        var gnp = gunList2D_get(obj, "aGenePenchant", ind, h);
        var gnv = gunList2D_get(obj, "aGeneValue", ind, h);
        draw_text(dx, dy, gnm); //dy += 10;
        draw_text(dx + 64, dy, gnn); 
        draw_text(dx + 64 + 32 + 4, dy, "*"); 
        draw_text(dx + 64 + 32 + 8 + 4 + 4, dy, gnp); 
        draw_text(dx + 64 + 32 + 8 + 26 + 4 + 4 + 4, dy, "="); 
        draw_text(dx + 64 + 32 + 8 + 26 + 8 + 16, dy, gnv); 
        dy += 10; 
    }
    //Draw message at bottom
    draw_set_color(c_white);
    dy += 10;
    draw_text(dx, dy, gunMessage[i]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw genes using TINY sizes
scl = display_get_gui_width() / 384;

// Get gun top names
for (i = 0; i &lt; 3; i += 1)
{
    for (h = 0; h &lt; 8; h += 1)
    {
        if (gunObj[i] == gunDat[h]) { nam = gunLis[h]; break; }
    }
    ButtonVirtual("name", buttonGun[i], nam);
}

/*if (0)
{
scr_font(Konix12o, c_white);
vspc = 24;
spcStat = 64;
dx = 8;
dy = 8;
affixName = scr_combat_weapons_fusion_affixhood(affixList[affixCategoryIndex], "name", affixIndex);
affixDesc = scr_combat_weapons_fusion_affixhood(affixList[affixCategoryIndex], "description", affixIndex);
draw_set_color(c_white);
draw_text(dx, dy, affixList[affixCategoryIndex] + " - " + string(affixIndex + 1) + " of " + string(scr_combat_weapons_fusion_affixhood(affixList[affixCategoryIndex], "size"))); dy += vspc;
draw_set_color(c_yellow);
draw_text(dx, dy, affixName); dy += vspc;

//show genes for this
for (geneIndex = 0; geneIndex &lt; scr_combat_weapons_fusion_affixhood(affixList[affixCategoryIndex], "gene amount"); geneIndex += 1)
{
    geneName = scr_combat_weapons_fusion_affixhood(affixList[affixCategoryIndex], "gene name", geneIndex);
    geneValue = scr_combat_weapons_fusion_affixhood(affixList[affixCategoryIndex], "gene", affixName, geneName);
    if (geneValue == global.genePrimaryValue) col = merge_color(c_red, c_white, .5);
    else if (geneValue == global.geneSecondaryValue) col = merge_color(c_orange, c_white, .5);
    else col = c_white;
    draw_set_color(col);
    draw_text(dx, dy, geneName);
    dx += spcStat;
    draw_text(dx, dy, geneValue);
    dx -= spcStat;
    dy += vspc;
}
draw_set_color(merge_color(c_yellow, c_white, .5));
draw_text_ext(dx, dy, affixDesc, -1, 128 + 32);
}*/

//
ButtonVirtual("draw");



// NOTES
scr_font(global.fn_debug, c_purple);
drx = scl; dry = 140 * scl; ysp = 20;
draw_text_ext_transformed(drx, dry, "Left click + hold Gun1 / Gun2 to select gun for that slot.", -1, 190, scl, scl, 0); dry += ysp * scl;
draw_text_ext_transformed(drx, dry, "Left click on Gun1 / Gun2 affix' and use left / right arrow keys to change affix.", -1, 190, scl, scl, 0); dry += ysp * scl;
draw_text_ext_transformed(drx, dry, "Right click on Gun2 = Generate random.", -1, 190, scl, scl, 0); dry += ysp * scl;
draw_text_ext_transformed(drx, dry, "Right click on Gun3 = Copy Gun 3 to Gun1, then re-fuse Gun 1 and Gun 2", -1, 190, scl, scl, 0); dry += ysp * scl;
// NOTES

//moved to generation

//Draw all genes
buf = scl;
sp0 = (26 + 2) * scl; // 64;
sp1 = (7) * scl; // 32;
sp2 = 3 * scl; // *
sp3 = (5 + 2) * scl;
scr_font(global.fn_debug, c_white);
for (i = 0; i &lt; 9; i += 1)
{
    if (i == 0) { obj = gn0; ind = 0; } else if (i == 1) { obj = gn0; ind = 1; } else if (i == 2) { obj = gn0; ind = 2; }
    else if (i == 3) { obj = gn1; ind = 0; } else if (i == 4) { obj = gn1; ind = 1; } else if (i == 5) { obj = gn1; ind = 2; }
    else if (i == 6) { obj = gn2; ind = 0; } else if (i == 7) { obj = gn2; ind = 1; } else if (i == 8) { obj = gn2; ind = 2; }
    dx = gunAffixX[i];
    dy = gunAffixY[i];
    aT = affixList[ind];
    gC = scr_combat_weapons_fusion_affixhood(aT, "gene amount");
    if (i == 0 || i == 3 || i == 6) gnq = 6; else gnq = 5;
    gnw = 0;
    if (i == 2 || i == 5 || i == 8) gnw = 3;
    if (gnw == 0 &amp;&amp; gnq == 5) gnw = 4;
    draw_sprite_ext(s1x1, 0, dx, dy - scl, sp0 + sp1 + sp2 + sp3 + sp2 + (buf * 12) + scl, (8 * 3) * scl, 0, c_red, 1);
    draw_sprite_ext(s1x1, 0, dx, dy - scl + ((8 * 3) * scl), sp0 + sp1 + sp2 + sp3 + sp2 + (buf * 12) + scl, (8 * gnq) * scl, 0, c_green, 1);
    if (gnw != 0) draw_sprite_ext(s1x1, 0, dx, dy - scl + ((8 * 3) * scl) + ((8 * gnq) * scl), sp0 + sp1 + sp2 + sp3 + sp2 + (buf * 12) + scl, (8 * gnw) * scl, 0, c_orange, 1);
    for (h = 0; h &lt; gC; h += 1) 
    {
        var ohl = gunList2D_get(obj, "aHilight", ind, h);
        if (ohl == 2) col = merge_color(c_yellow, c_white, .1);
        else if (ohl == 1) col = merge_color(c_yellow, c_white, .1);
        else col = c_white;
        draw_set_color(col);
        var gnm = gunList2D_get(obj, "aGeneName", ind, h);
        var gnn = round(gunList2D_get(obj, "aGene", ind, h));
        var gnp = string_format(gunList2D_get(obj, "aGenePenchant", ind, h), 0, 2);
        gnp = string_delete(gnp, 1, 2);
        var gnv = round(gunList2D_get(obj, "aGeneValue", ind, h));
        
        while (string_width(gnm) &gt; 26) gnm = string_delete(gnm, string_length(gnm), 1);
        dx += scl;
        draw_text_transformed(dx, dy, gnm, scl, scl, 0); //dy += 10;
        draw_text_transformed(dx + sp0, dy, gnn, scl, scl, 0); 
        draw_text_transformed(dx + sp0 + sp1 + (buf * 1), dy, "*", scl, scl, 0); 
        draw_text_transformed(dx + sp0 + sp1 + sp2 + (buf * 2), dy, gnp, scl, scl, 0); 
        draw_text_transformed(dx + sp0 + sp1 + sp2 + sp3 + (buf * 3), dy, "=", scl, scl, 0); 
        draw_text_transformed(dx + sp0 + sp1 + sp2 + sp3 + sp2 + (buf * 4), dy, gnv, scl, scl, 0); 
        dx -= scl;
        dy += 8 * scl; 
    }
    //Draw message at bottom
    draw_set_color(c_white);
    dy += 10 * scl;
    //draw_text(dx, dy, gunMessage[i]);
}

// Do dropdown here
if (drp != -1)
{
    gbx = ButtonVirtual("x", buttonGun[drp]);
    gby = ButtonVirtual("y", buttonGun[drp]);
    gbw = ButtonVirtual("width", buttonGun[drp]);
    gbh = ButtonVirtual("height", buttonGun[drp]);
    gby += gbh;
    hil = -1;
    for (i = 0; i &lt; 3 + gunBan; i += 1)
    {
        if (scr_inside_rectangle(window_mouse_get_x(), window_mouse_get_y(), gbx, gby, gbx + gbw, gby + gbh)) hil = i;
        if (hil == i) col = c_red; else col = c_ltgray;
        draw_sprite_ext(s1x1, 0, gbx, gby, gbw, gbh, 0, col, 1);
        scr_font(global.fn_debug, c_white, 1, 1);
        draw_text_ext_transformed(gbx + round(gbw / 2), gby + 0 + round(gbh / 2), gunLis[i], -1, gbw / 2, scl, scl, 0);
        gby += gbh;
    }
    scr_font(global.fn_debug, c_white, 0, 0);
}
if (drp == -1)
{
    if (ButtonVirtual("click", buttonGun[0], window_mouse_get_x(), window_mouse_get_y()) == 1) drp = 0;
    if (ButtonVirtual("click", buttonGun[1], window_mouse_get_x(), window_mouse_get_y()) == 1) drp = 1;
}
else if (mouse_check_button(mb_left) == 0)
{
    if (drp != -1 &amp;&amp; hil != -1)
    {
        gunObj[drp] = gunDat[hil];
        gn0 = gunObj[0];
        gn1 = gunObj[1];
        event_user(10);
    }
    drp = -1;
}
// Cursor
draw_set_color(c_dkgray);
draw_circle(window_mouse_get_x(), window_mouse_get_y(), 3, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Random gun SLOT 2 ONLY
ds_map_destroy(gn1);
gn1 = scr_combat_weapons_generate();
event_user(10); //Redo names FOR ALL BUTTONS
event_user(3); // Recalc stats

exit;
//Get random affix / suffix
gn1[? "pPrefix1"] = scr_combat_weapons_fusion_affixhood("prefix1", "name", floor(random(scr_combat_weapons_fusion_affixhood("prefix1", "size"))));
gn1[? "pPrefix2"] = scr_combat_weapons_fusion_affixhood("prefix2", "name", floor(random(scr_combat_weapons_fusion_affixhood("prefix2", "size"))));
gn1[? "pSuffix"] = scr_combat_weapons_fusion_affixhood("suffix", "name", floor(random(scr_combat_weapons_fusion_affixhood("suffix", "size"))));
//Get random values that match up with the selected affix
scr_combat_weapons_fusion_affixhood("generate", "prefix1", gn1[? "pPrefix1"], gn1);
scr_combat_weapons_fusion_affixhood("generate", "prefix2", gn1[? "pPrefix2"], gn1);
scr_combat_weapons_fusion_affixhood("generate", "suffix", gn1[? "pSuffix"], gn1);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Redo names FOR ALL BUTTONS
for (i = 0; i &lt; 3; i += 1)
{
    var gnt = gunObj[i];
    ButtonVirtual("name", (i * 3) + 0, gnt[? "pPrefix1"]);
    ButtonVirtual("name", (i * 3) + 1, gnt[? "pPrefix2"]);
    ButtonVirtual("name", (i * 3) + 2, gnt[? "pSuffix"]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DONE - Recalc top 5 or whatever
for (oI = 0; oI &lt; 3; oI += 1) //Object index
{
    obj = gunObj[oI];
    for (aI = 0; aI &lt; 3; aI += 1) //Affix index
    {
        ds_list_clear(dsTemp);
        aT = affixList[aI];
        gC = scr_combat_weapons_fusion_affixhood(aT, "gene amount"); //gene count
        for (gI = 0; gI &lt; gC; gI += 1) //gene index &lt; gene count
        {
            var gnm = gunList2D_get(obj, "aGeneName", aI, gI);
            var gnv = gunList2D_get(obj, "aGeneValue", aI, gI);
            var gnn = gunList2D_get(obj, "aGene", aI, gI);
            geneFamily = scr_combat_weapons_fusion_affixhood(aT, "find gene family", gnm); //was gunaffgennam
            if (gI &lt; preCalc) ds_list_add(dsTemp, string(gnv) + "|" + string(gI) + "|" + string(geneFamily));
            else ds_list_add(dsTemp, string(gnn) + "|" + string(gI) + "|" + string(geneFamily));
        }
        ds_list_sort(dsTemp, 0);
        for (q = 0; q &lt; 10; q += 1) familyDid[q] = 0; //pools
        sigs = scr_combat_weapons_fusion_affixhood("signifiers", aT);
        added = 0;
        for (h = 0; h &lt; gC; h += 1)
        {
            Delimit(ds_list_find_value(dsTemp, h), "|");
            fam = real(art[2]); //Family of gene
            hh = real(art[1]); //Index of gene
            
            if (added &lt; sigs &amp;&amp; familyDid[fam] == 0)
            {
                //var ohl = gunList2D_get(obj, "aHilight", aI, hh);
                if (added == 0) gunList2D_put(obj, "aHilight", aI, hh, 2);
                else gunList2D_put(obj, "aHilight", aI, hh, 1);
                familyDid[fam] = 1;
                gunList2D_put(obj, "geneOrder", aI, added, hh); //this is not inialized, be careful with this!
                added += 1;
            }
            else
            {
                gunList2D_put(obj, "aHilight", aI, hh, 0)
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DONE - Merge all genes
//fuseResult = gn2;
scr_combat_weapons_fusion_affix(gn0, gn1, gn2);

ButtonVirtual("name", 6, gn2[? "pPrefix1"]);
ButtonVirtual("name", 7, gn2[? "pPrefix2"]);
ButtonVirtual("name", 8, gn2[? "pSuffix"]);

gunMessage[6] = _msg[0];
gunMessage[7] = _msg[1];
gunMessage[8] = _msg[2];

event_user(3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DONE - Get 2 random guns and merge

for (j = 0; j &lt; 2; j += 1)
{
    var gnt = gunObj[j];
    //Get random affix / suffix
    gnt[? "pPrefix1"] = scr_combat_weapons_fusion_affixhood("prefix1", "name", floor(random(scr_combat_weapons_fusion_affixhood("prefix1", "size"))));
    gnt[? "pPrefix2"] = scr_combat_weapons_fusion_affixhood("prefix2", "name", floor(random(scr_combat_weapons_fusion_affixhood("prefix2", "size"))));
    gnt[? "pSuffix"] = scr_combat_weapons_fusion_affixhood("suffix", "name", floor(random(scr_combat_weapons_fusion_affixhood("suffix", "size"))));
    //Get random values that match up with the selected affix
    scr_combat_weapons_fusion_affixhood("generate", "prefix1", gnt[? "pPrefix1"], gnt);
    scr_combat_weapons_fusion_affixhood("generate", "prefix2", gnt[? "pPrefix2"], gnt);
    scr_combat_weapons_fusion_affixhood("generate", "suffix", gnt[? "pSuffix"], gnt);
}

event_user(10); // Redo Names

event_user(2); //Merge guns using new
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(14);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//event_user(14);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
