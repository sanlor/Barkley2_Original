<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
txtWid = 300;
TextSpecial("load", global.fn_1, txtWid, "Hello there. I'm a `mq``w2`fucker`w0``rt` that is `w1``mq`testing`rt``w0` something `sq`important`rt` and I want to mention `mq`the fire temple`rt`. They call me the `sq`Beachmaster`rt`. 1a 1b 1c 2a 2b 3 4 5 6 7 8 9 `sq`10`rt` `s1`Yipe!`s0`");









exit;
str = txtRaw;
drx = 0;
dry = 0;
// Color markers
fnd[0] = "`mq`"; fndCol[0] = c_red;
fnd[1] = "`sq`"; fndCol[1] = c_lime;
fnd[2] = "`rt`"; fndCol[2] = c_white;
fnd[3] = "`s0`";
fnd[4] = "`s1`";
fnd[5] = "`s2`";
fnd[6] = "`w0`";
fnd[7] = "`w1`";
fndAmt = 8;
// Get colors from shaky text
col = c_white;
shk = 0;
wav = 0;
for (var i = 1; i &lt; string_length(str); i += 1)
{
    ltr = string_char_at(str, i);
    if (ltr == "`")
    {
        cut = string_copy(str, i, 4);  show_debug_message(cut);
        for (f = 0; f &lt; fndAmt; f += 1)
        {
            if (cut == fnd[f]) 
            {
                if (cut == "`s0`") shk = 0;
                else if (cut == "`s1`") shk = 1;
                else if (cut == "`s2`") shk = 2;
                else if (cut == "`w0`") wav = 0;
                else if (cut == "`w1`") wav = 1;
                else col = fndCol[f]; 
                break; 
            }
            //if (pos != 0) { if (pos &lt; son) { son = pos; sonInd = s; } }
        }
        str = string_delete(str, i, 4);
    }
    ltrCol[i - 1] = col;
    ltrShk[i - 1] = shk;
    ltrWav[i - 1] = wav;
    ltrWavCou[i - 1] = random(1);
    ltrWavInt[i - 1] = 20 + random(5);
    ltrWavY[i - 1] = -1 + irandom(2);
    if (ltr == "`") i -= 1;
}
// Full string
show_debug_message("FULL = " + str);
// Get text characters
for (var i = 1; i &lt;= string_length(str); i += 1)
{
    ltr = string_char_at(str, i);
    txtLtr[i - 1] = ltr;
    txtLtrX[i - 1] = drx;
    txtLtrY[i - 1] = dry;
    drx += string_width(ltr);
    
    // Check to see if next word is over limit
    ext = 0;
    if (ltr == " ")
    {
        for (var u = 1; u + i &lt; string_length(str); u += 1)
        {
            if (string_char_at(str, i + u) == " ") break;
            ext += string_width(string_char_at(str, i + u));
        }
    }
    if (drx + ext &gt; txtWid)
    {
        drx = 0;
        dry += string_height("g");
    }
}
txtLtrAmt = i;









exit;
draw_set_font(global.fn_1);
wid = 6000;
txtRaw = "Hello there. I'm a /mq/fucker/mq/ that is /mq/testing/mq/ something /sq/important/sq/ and I want to tell you about /mq/the fire temple/mq/. They call me the /sq/Beachmaster/sq/. 1 2 3 4 5 6 7 8 9 /sq/10/sq/";

// FUNC - is taking mq's into account
str = txtRaw;

var str = txtRaw;
len = 300; // line limit
var prv = 0;
for (var i = 0; i &lt; string_length(str); i += 1)
{
    //strTmp = str;
    //strTmp = string_replace_all(strTmp, "/mq/", "");
    //strTmp = string_replace_all(strTmp, "/sq/", "");
    if (string_width(string_copy(str, prv, i - prv)) &gt;= len)
    {
        var replace = i;
        for (var u = i; u &gt; i - 99; u -= 1)
        {
            if (string_char_at(str, u) == ' ')
            {
                replace = u;
                break;
            }
        }
        str = string_set_byte_at(str, replace, ord('|'));
        prv = replace + 1;
    }
}
txt = string_split_fast(str);
txtLin = array_length_1d(txt);
//txt[0] = str; txtLin = 1;
// FUNC


//txt[0] = "Hello there. I'm a /mq/fucker/mq/ that is /mq/testing/mq/ something";
//txt[1] = "/sq/important/sq/ and I want to tell you about /mq/the fire temple/mq/.";
//txt[2] = "They call me the /sq/Beachmaster/sq/. 1 2 3 4 5 6 7 8 9 /sq/10/sq/";
//txtLin = 3;
fnd[0] = "/mq/"; fndCol[0] = c_red;
fnd[1] = "/sq/"; fndCol[1] = c_lime;
fndAmt = 2;
// Width

// Get first one
//txt = string_replace_all(txt, "/mq/", "");

h = 0;
for (l = 0; l &lt;= txtLin - 1; l += 1)
{
    // Find soonest replacer
    while (true)
    {
        son = 9999;
        for (s = 0; s &lt; fndAmt; s += 1)
        {
            pos = string_pos(fnd[s], txt[l]);
            if (pos != 0) { if (pos &lt; son) { son = pos; sonInd = s; } }
        }
        // Replace
        if (son != 9999)
        {
            f = sonInd;
            show_debug_message("&gt;" + string(l) + "&lt;");
            txtPos[h] = string_pos(fnd[f], txt[l]);
            if (txtPos[h] != 0)
            {
                txt[l] = string_replace(txt[l], fnd[f], "");
                txtTxt[h] = string_copy(txt[l], 1, txtPos[h] - 1);
                show_debug_message(fnd[f] + " &gt;" + txtTxt[h] + "&lt; LINE = " + string (l));
                txtDatX[h] = string_width_ext(txtTxt[h], -1, wid) ;
                if (txtPos[h] != 1) txtDatX[h] += string_width(" ");
                //txtDatY[h] = max(string_height_ext(txtTxt[h], -1, wid) - string_height("h");
                //txtLin[h] = l;
                txtDatY[h] = l * string_height("g");
                txtTxt[h] = string_copy(txt[l], txtPos[h], string_pos(fnd[f], txt[l]) - txtPos[h]);
                txtCol[h] = fndCol[f];
                txt[l] = string_replace(txt[l], fnd[f], "");
                h += 1;
                f = -1;
            }
        }
        else break;
    }
}
txtAmt = h;











exit;
txt = "Hello. I'm a /mq/fucker/mq/ that is /sq/important/sq/ and I want to tell you about /mq/the fire temple/mq/.";
txtNor = txt;
txtNor = string_replace_all(txtNor, "/sq/", "");
txtNor = string_replace_all(txtNor, "/mq/", "");
// Width
wid = 200;
// Get first one
//txt = string_replace_all(txt, "/mq/", "");
fnd = "/mq/";
draw_set_font(global.fn_1);
txtPos[0] = string_pos(fnd, txt);
txt = string_replace(txt, fnd, "");
txtTxt[0] = string_copy(txt, 1, txtPos[0] - 1);
show_debug_message("&gt;" + txtTxt[0] + "&lt;");
txtDatX[0] = string_width_ext(txtTxt[0], -1, wid) + string_width(" ");
txtDatY[0] = string_height_ext(txtTxt[0], -1, wid) - string_height("h");
txtTxt[0] = string_copy(txt, txtPos[0], string_pos(fnd, txt) - txtPos[0]);
txtCol[0] = c_red;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw highlighted text
draw_sprite_ext(s1x1, 0, x, y, txtWid, 400, 0, c_blue, 0.25);
draw_set_font(global.fn_1);
draw_set_color(c_white);
txtLtrDrw = (global.txtLtrAmt - 1);
if (mouse_check_button(mb_left)) txtLtrDrw = (global.txtLtrAmt - 1) * clamp((mouse_x / room_width), 0, 1);

TextSpecial("draw", x, y, txtLtrDrw);






exit;

for (i = 0; i &lt; txtLtrDrw; i += 1)
{
    draw_set_color(ltrCol[i]);
    drx = x + txtLtrX[i];
    dry = y + txtLtrY[i];
    if (ltrShk[i] != 0)
    {
        dry += lengthdir_y(1, ((((current_time / 2) * ltrShk[i]) mod 360) + (i * 30))); // * ltrShk[i]
        //dry += -1 + irandom(2);
    }
    if (ltrWav[i] != 0)
    {
        ltrWavCou[i] += dt_sec() * ltrWavInt[i];
        if (ltrWavCou[i] &gt;= 1)
        {
            ltrWavCou[i] = 0;
            if (ltrWavY[i] == -1) ltrWavY[i] = 0;
            else if (ltrWavY[i] == 1) ltrWavY[i] = 0;
            else ltrWavY[i] = -1 + irandom(2);
        }
        dry += ltrWavY[i];
    }
    draw_text(drx, round(dry), txtLtr[i]);
}





exit;
draw_sprite_ext(s1x1, 0, x, y, len, 400, 0, c_blue, 0.25);
draw_set_font(global.fn_1);
draw_set_color(c_white);
drx = x;
dry = y;
for (i = 0; i &lt;= txtLin - 1; i += 1)
{
    draw_text_ext(drx, dry, txt[i], -1, wid);
    dry += string_height("g");
}

// Draw extras
for (i = 0; i &lt; txtAmt; i += 1)
{
    drx = x + txtDatX[i];
    dry = y + txtDatY[i];
    draw_set_color(txtCol[i]);
    draw_text_ext(drx, dry, txtTxt[i], -1, wid);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
