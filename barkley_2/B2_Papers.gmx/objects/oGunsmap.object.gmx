<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
Gun("init");
gunTop = "Pistol";
gunTopSel = 0;
gunBot = "Uzi";
gunBotSel = 0;
gunPow = 50;

scl = 1;
wid = room_width * scl;
hei = room_height * scl;
window_set_size(wid, hei);
surface_resize(application_surface, wid, hei);
window_set_position((display_get_width() / 2) - (wid / 2), (display_get_height() / 2) - (hei / 2));

Gunsmap("init");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug mode
if (keyboard_check(vk_space)) 
{
    Gunsmap("generate");
    gunBotSel = Gunsmap("get dot", Gunsmap("type to index", gunBot));
    gunTopSel = Gunsmap("get dot", Gunsmap("type to index", gunTop));
}
o_curs.x = window_mouse_get_x();
o_curs.y = window_mouse_get_y();
drx = 16;
dry = 0;
wid = 256 - 32;
hei = 32;
mvl = 50;
for (i = 1; i &lt; ds_list_size(global.gunsmapType); i += 1)
{
    var nam = global.gunsmapType[| i];
    var rar = global.gunsmapTypeRarity[| i];
    var col = global.gunsmapTypeColor[| i];
    draw_sprite_ext(s1x1, 0, drx, dry, wid, hei, 0, c_black, 1);
    draw_sprite_ext(s1x1, 0, drx + 1, dry + 1, wid - 2, hei - 2, 0, c_white, 1);
    if (scr_mouse_rect(drx + 1, dry + 1, drx + 1 + (wid - 2), dry + 1 + (hei - 2)))
    {
        if (MiniKeyPress("action", 1)) 
        {
            old = global.gunsmapTypeRarity[| i];
            rar = clamp(round(((window_mouse_get_x() - (drx + 1)) / (wid - 2)) * mvl), 1, mvl);
            global.gunsmapTypeRarity[| i] = rar;
            if (old != global.gunsmapTypeRarity[| i]) 
            {
                Gunsmap("prevelence");
                Gunsmap("save");
                Gunsmap("generate", Gunsmap("seed"));
                gunBotSel = Gunsmap("get dot", Gunsmap("type to index", gunBot));
                gunTopSel = Gunsmap("get dot", Gunsmap("type to index", gunTop));
            }
        }
    }
    draw_sprite_ext(s1x1, 0, drx + 1, dry + 1, ((wid - 2) / mvl) * rar, hei - 2, 0, col, 1);
    scr_font(global.fn_2c, c_white, 1, 1);
    draw_text(drx + (wid / 2), dry + 8, nam);
    
    // BOTTOM - RIGHT SIDE
    if (scr_mouse_rect(drx + wid, dry + 1, drx + wid + 16, dry + 1 + (hei - 2)))
    {
        if (MiniKeyPress("action", 1)) 
        {
            gunBot = Gunsmap("index to type", i);
            gunBotSel = Gunsmap("get dot", Gunsmap("type to index", gunBot));
        }
    }
    if (gunBot == nam) col = c_yellow; else col = c_white;
    draw_sprite_ext(s1x1, 0, drx + wid, dry, 16, hei, 0, c_black, 1);
    draw_sprite_ext(s1x1, 0, drx + 1 + wid, dry + 1, 16 - 2, hei - 2, 0, col, 1);
    draw_sprite_ext(sMenuUtilityBlip, ds_list_find_index(global.gunTypeSub, nam) + 1, drx + 16 + wid - 16, dry + 0, 2, 2, 0, c_black, 1);
    
    // TOP - LEFT SIDE
    if (scr_mouse_rect(drx - 16, dry + 1, drx, dry + 1 + (hei - 2)))
    {
        if (MiniKeyPress("action", 1)) 
        {
            gunTop = Gunsmap("index to type", i);
            gunTopSel = Gunsmap("get dot", Gunsmap("type to index", gunTop));
        }
    }
    if (gunTop == nam) col = c_yellow; else col = c_white;
    draw_sprite_ext(s1x1, 0, drx - 16, dry, 16, hei, 0, c_black, 1);
    draw_sprite_ext(s1x1, 0, drx + 1 - 16, dry + 1, 16 - 2, hei - 2, 0, col, 1);
    draw_sprite_ext(sMenuUtilityBlip, Gun("sub from name", nam) + 1, drx - 16 + 0, dry + 0, 2, 2, 0, c_black, 1);
    //show_debug_message(nam);
    draw_text(drx + (wid / 2), dry + 20, string(rar));
    dry += hei;
}

/// Resolution
res[0] = 64;
res[1] = 72;
res[2] = 80;
res[3] = 88;
res[4] = 96;
wid = 32;
hei = 32;
drx = room_width - (wid * 5);
wid = 32 + 8;
dry = 0;
draw_sprite_ext(s1x1, 0, drx, dry, wid * 5, hei, 0, c_black, 1);
draw_sprite_ext(s1x1, 0, drx + 1, dry + 1, wid * 5 - 2, hei - 2, 0, c_dkgray, 1);
scr_font(global.fn_1, c_white, 1, 1);
draw_text(drx + (wid * 5 / 2), dry + (hei / 2), "RESOLUTION");
dry = 32;
for (i = 0; i &lt; 4; i += 1)
{
    if (scr_mouse_rect(drx + 1, dry + 1, drx + 1 + (wid - 2), dry + 1 + (hei - 2)))
    {
        if (MiniKeyPress("action")) 
        {
            global.gunsmapWidth = res[i];
            global.gunsmapHeight = res[i];
            Gunsmap("save");
            Gunsmap("generate", Gunsmap("seed"));
            gunBotSel = Gunsmap("get dot", Gunsmap("type to index", gunBot));
            gunTopSel = Gunsmap("get dot", Gunsmap("type to index", gunTop));
        }
    }
    if (res[i] == global.gunsmapWidth) col = c_yellow; else col = c_white;
    draw_sprite_ext(s1x1, 0, drx, dry, wid, hei, 0, c_black, 1);
    draw_sprite_ext(s1x1, 0, drx + 1, dry + 1, wid - 2, hei - 2, 0, col, 1);
    scr_font(global.fn_2c, c_white, 1, 1);
    draw_text(drx + (wid / 2), dry + (hei / 2), string(res[i])); // + "x" + string(res[i]));
    drx += wid;
}
// Permutations
wid = 32 * 5;
hei = 32;
drx = room_width - wid;
dry = 64;
draw_sprite_ext(s1x1, 0, drx, dry, wid, hei, 0, c_black, 1);
draw_sprite_ext(s1x1, 0, drx + 1, dry + 1, wid - 2, hei - 2, 0, c_dkgray, 1);
scr_font(global.fn_1, c_white, 1, 1);
draw_text(drx + (wid / 2), dry + (hei / 2), "PERMUTATIONS");
dry = 96;
mvl = 50;
draw_sprite_ext(s1x1, 0, drx, dry, wid, hei, 0, c_black, 1);
draw_sprite_ext(s1x1, 0, drx + 1, dry + 1, wid - 2, hei - 2, 0, c_white, 1);
scr_font(global.fn_1, c_white, 1, 1);

if (scr_mouse_rect(drx + 1, dry + 1, drx + 1 + (wid - 2), dry + 1 + (hei - 2)))
{
    if (MiniKeyPress("action", 1)) 
    {
        old = global.gunsmapPermutations;
        rar = clamp(round(((window_mouse_get_x() - (drx + 1)) / (wid - 2)) * mvl), 1, mvl);
        global.gunsmapPermutations = rar;
        if (old != global.gunsmapPermutations) 
        {
            Gunsmap("generate", Gunsmap("seed"));
            gunBotSel = Gunsmap("get dot", Gunsmap("type to index", gunBot));
            gunTopSel = Gunsmap("get dot", Gunsmap("type to index", gunTop));
        }
        Gunsmap("save");
    }
}
draw_sprite_ext(s1x1, 0, drx + 1, dry + 1, ((wid - 2) / mvl) * global.gunsmapPermutations, hei - 2, 0, c_red, 1);
draw_text(drx + (wid / 2), dry + (hei / 2), string(global.gunsmapPermutations));

// GENERATE
wid = 32 * 5;
hei = 32;
drx = room_width - wid;
dry = 128;
draw_sprite_ext(s1x1, 0, drx, dry, wid, hei, 0, c_black, 1);
draw_sprite_ext(s1x1, 0, drx + 1, dry + 1, wid - 2, hei - 2, 0, c_dkgray, 1);
scr_font(global.fn_1, c_white, 1, 1);
draw_text(drx + (wid / 2), dry + (hei / 2), "GENERATE RANDOM");
dry = 160;
draw_sprite_ext(s1x1, 0, drx, dry, wid, hei, 0, c_black, 1);
draw_sprite_ext(s1x1, 0, drx + 1, dry + 1, wid - 2, hei - 2, 0, c_white, 1);
scr_font(global.fn_1, c_white, 1, 1);
if (scr_mouse_rect(drx + 1, dry + 1, drx + 1 + (wid - 2), dry + 1 + (hei - 2)))
{
    if (MiniKeyPress("action")) 
    {
        Gunsmap("generate");
        gunBotSel = Gunsmap("get dot", Gunsmap("type to index", gunBot));
        gunTopSel = Gunsmap("get dot", Gunsmap("type to index", gunTop));
    }
}
draw_text(drx + (wid / 2), dry + (hei / 2), "CLICK OR SPACEBAR");

dry += 32;
draw_sprite_ext(s1x1, 0, drx, dry, wid, hei, 0, c_black, 1);
draw_sprite_ext(s1x1, 0, drx + 1, dry + 1, wid - 2, hei - 2, 0, c_dkgray, 1);
scr_font(global.fn_1, c_white, 1, 1);
draw_text(drx + (wid / 2), dry + (hei / 2), "SEED");

dry += 32;
draw_sprite_ext(s1x1, 0, drx, dry, wid, hei, 0, c_black, 1);
draw_sprite_ext(s1x1, 0, drx + 1, dry + 1, wid - 2, hei - 2, 0, c_white, 1);
// MINUS
draw_sprite_ext(s1x1, 0, drx, dry, 32, hei, 0, c_black, 1);
draw_sprite_ext(s1x1, 0, drx + 1, dry + 1, 32 - 2, hei - 2, 0, c_white, 1);
draw_sprite_ext(s1x1, 0, drx + wid - 32, dry, 32, hei, 0, c_black, 1);
draw_sprite_ext(s1x1, 0, drx + 1 + wid - 32, dry + 1, 32 - 2, hei - 2, 0, c_white, 1);
scr_font(global.fn_1, c_white, 1, 1);
draw_text(drx + 16, dry + (hei / 2), "-");
draw_text(drx + wid - 16, dry + (hei / 2), "+");
if (scr_mouse_rect(drx + 1, dry + 1, drx + 1 + 32, dry + 1 + (hei - 2)))
{
    if (MiniKeyPress("action")) 
    {
        Gunsmap("seed", Gunsmap("seed") - 1);
        Gunsmap("generate", Gunsmap("seed"));
        gunBotSel = Gunsmap("get dot", Gunsmap("type to index", gunBot));
        gunTopSel = Gunsmap("get dot", Gunsmap("type to index", gunTop));
    }
}
if (scr_mouse_rect(drx + wid - 32 + 1, dry + 1, drx + 1 + wid, dry + 1 + (hei - 2)))
{
    if (MiniKeyPress("action")) 
    {
        Gunsmap("seed", Gunsmap("seed") + 1);
        Gunsmap("generate", Gunsmap("seed"));
        gunBotSel = Gunsmap("get dot", Gunsmap("type to index", gunBot));
        gunTopSel = Gunsmap("get dot", Gunsmap("type to index", gunTop));
    }
}

draw_text(drx + (wid / 2), dry + (hei / 2), string(Gunsmap("seed")));
if (scr_mouse_rect(drx + 1 + 32, dry + 1, drx + 1 + (wid - 2) - 32, dry + 1 + (hei - 2)))
{
    if (MiniKeyPress("action")) 
    {
        str = get_string("Enter seed number:", string(Gunsmap("seed")));
        if (str != "" &amp;&amp; string_digits(str) == str)
        {
            Gunsmap("seed", real(str));
            Gunsmap("generate", Gunsmap("seed"));
            gunBotSel = Gunsmap("get dot", Gunsmap("type to index", gunBot));
            gunTopSel = Gunsmap("get dot", Gunsmap("type to index", gunTop));
        }
    }
}

// GUNSPOWER
dry += 32;
draw_sprite_ext(s1x1, 0, drx, dry, wid, hei, 0, c_black, 1);
draw_sprite_ext(s1x1, 0, drx + 1, dry + 1, wid - 2, hei - 2, 0, c_dkgray, 1);
scr_font(global.fn_1, c_white, 1, 1);
draw_text(drx + (wid / 2), dry + (hei / 2), "GUNSPOWER");

dry += 32;
mvl = 100;
wid = 32 * 5;
draw_sprite_ext(s1x1, 0, drx, dry, wid, hei, 0, c_black, 1);
draw_sprite_ext(s1x1, 0, drx + 1, dry + 1, wid - 2, hei - 2, 0, c_white, 1);
if (scr_mouse_rect(drx + 1, dry + 1, drx + 1 + (wid - 2), dry + 1 + (hei - 2)))
{
    if (MiniKeyPress("action", 1)) 
    {
        gunPow = clamp(round(((window_mouse_get_x() - (drx + 1)) / (wid - 2)) * mvl), 1, mvl);
    }
}
draw_sprite_ext(s1x1, 0, drx + 1, dry + 1, ((wid - 2) / mvl) * gunPow, hei - 2, 0, c_yellow, 1);
draw_text(drx + (wid / 2), dry + (hei / 2), string(gunPow));

Gunsmap("draw", 256 + 6, 4, 9, Gunsmap("type to index", gunTop), gunTopSel, Gunsmap("type to index", gunBot), gunBotSel);

//Gunsmap("draw64", 256 + 6, 600, Gunsmap("type to index", gunTop), gunTopSel);
// sMenuUtilityGunMapMarker
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
//draw_text(5, 5, "FPS: " + string(fps));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Gunsmap("permute");
Gunsmap("mean");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
