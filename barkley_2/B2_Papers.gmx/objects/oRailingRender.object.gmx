<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (view_enabled)
{
    wid = 384 * 3;
    hei = 240 * 3;
    window_set_size(wid, hei);
    surface_resize(application_surface, wid, hei);
    window_set_position((display_get_width() / 2) - (wid / 2), (display_get_height() / 2) - (hei / 2));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render rails
global.dsgRail = ds_grid_create(floor(room_width / 8), floor(room_height / 8));
global.dsgRailDid = ds_grid_create(floor(room_width / 8), floor(room_height / 8));
global.dslRailX = ds_list_create();
global.dslRailY = ds_list_create();
global.dslRailO = ds_list_create();
global.dslRailNextX = ds_list_create();
global.dslRailNextY = ds_list_create();
global.dslRailNextO = ds_list_create();
global.totRail = 0;
global.didRail = 0;

// Mark everything
with (oRailing0Placer) event_user(0);

// Find out how many links and add corners to queue
for (i = 0; i &lt; ds_list_size(global.dslRailX); i += 1)
{
    grx = global.dslRailX[| i];
    gry = global.dslRailY[| i];
    lnk = 0; upp = 0; dow = 0; lef = 0; rig = 0;
    if (ds_grid_get(global.dsgRail, grx, gry - 1)) { lnk += 1; upp = 1; }
    if (ds_grid_get(global.dsgRail, grx, gry + 1)) { lnk += 1; dow = 1; }
    if (ds_grid_get(global.dsgRail, grx - 1, gry)) { lnk += 1; lef = 1; }
    if (ds_grid_get(global.dsgRail, grx + 1, gry)) { lnk += 1; rig = 1; }
    if (lnk == 1)
    {
        if (lef)
        {
            Railing("place", grx, gry, 7);
            //Railing("queue", grx - 1, gry, 0);
        }
        if (rig)
        {
            Railing("place", grx, gry, 9);
            //Railing("queue", grx + 1, gry, 0);
        }
        if (upp)
        {
            Railing("place", grx, gry, 8);
            //Railing("queue", grx - 1, gry, 0);
        }
        if (dow)
        {
            Railing("place", grx, gry, 6);
            //Railing("queue", grx + 1, gry, 0);
        }
    }
    else if (lnk == 2)
    {
        if (upp &amp;&amp; dow) Railing("place", grx, gry, 2 + irandom(3));
        if (lef &amp;&amp; rig) Railing("place", grx, gry, (grx mod 2));
        if (upp &amp;&amp; rig)
        {
            Railing("place", grx, gry, 10);
            //Railing("queue", grx + 1, gry, 0);
            //Railing("queue", grx, gry - 1, 0);
        }
        if (upp &amp;&amp; lef)
        {
            Railing("place", grx, gry, 12);
            //Railing("queue", grx - 1, gry, 0);
            //Railing("queue", grx, gry - 1, 1);
        }
        if (dow &amp;&amp; rig)
        {
            Railing("place", grx, gry, 13);
            //Railing("queue", grx + 1, gry, 0);
            //Railing("queue", grx, gry + 1, 0);
        }
        if (dow &amp;&amp; lef)
        {
            Railing("place", grx, gry, 11);
            //Railing("queue", grx - 1, gry, 0);
            //Railing("queue", grx, gry + 1, 1);
        }
    }
}

// Free
ds_grid_destroy(global.dsgRail);
ds_grid_destroy(global.dsgRailDid);
ds_list_destroy(global.dslRailX);
ds_list_destroy(global.dslRailY);
ds_list_destroy(global.dslRailO);
ds_list_destroy(global.dslRailNextX);
ds_list_destroy(global.dslRailNextY);
ds_list_destroy(global.dslRailNextO);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
