<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (view_enabled)
{
    wid = 1536;
    hei = 960;
    window_set_size(wid, hei);
    surface_resize(application_surface, wid, hei);
    window_set_position((display_get_width() / 2) - (wid / 2), (display_get_height() / 2) - (hei / 2));
}

surGam = -999;

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(ord("1")))
{
    if (instance_exists(oShop))
    {
        oShop.ext = 1;
    }
    else instance_create(0, 0, oShop);
}
if (keyboard_check_pressed(ord("2")))
{
    indPr1 += 1; if (indPr1 &gt;= ds_list_size(dslPr1)) indPr1 = 0;
    indPr2 += 1; if (indPr2 &gt;= ds_list_size(dslPr2)) indPr2 = 0;
    indMat += 1; if (indMat &gt;= ds_list_size(dslMat)) indMat = 0;
    indTyp += 1; if (indTyp &gt;= ds_list_size(dslTyp)) indTyp = 0;
    indSuf += 1; if (indSuf &gt;= ds_list_size(dslSuf)) indSuf = 0;
}
if (keyboard_check_pressed(ord("3")))
{
    indPr1 = floor(random(ds_list_size(dslPr1)));
    indPr2 = floor(random(ds_list_size(dslPr2)));
    indMat = floor(random(ds_list_size(dslMat)));
    indTyp = floor(random(ds_list_size(dslTyp)));
    indSuf = floor(random(ds_list_size(dslSuf)));
}
exit;



if (keyboard_check_pressed(ord("2")))
{
    if (instance_exists(oNote))
    {
        with (oNote) { but = 0; event_user(0); }
    }
    else Note("select", "milagros");
}

if (keyboard_check_pressed(ord("3")))
{
    if (instance_exists(oNote))
    {
        with (oNote) { but = 0; event_user(0); }
    }
    else
    {
        creature = choose("Goofster", "Slender Man", "Drakescorned", "Sergal", "Geldrach", "Dire Juggler", "Hellmonster", "Mujahoudini");
        Note("gallery", creature);
    }
}

if (keyboard_check_pressed(ord("4")))
{
    for (i = 0; i &lt; ds_list_size(global.noteList); i += 1)
    {
        if (random(100) &lt; 50)
        {
            Note("take", ds_list_find_value(global.noteName, i));
        }
    }
}

if (keyboard_check_pressed(ord("5")))
{
    Note("clear");
}

if (keyboard_check_pressed(ord("6")))
{
    Note("take", "Completed Application");
}

if (keyboard_check_pressed(ord("7")))
{
    if (instance_exists(oNote))
    {
        with (oNote) { but = 0; event_user(0); }
    }
    else Note("identity");
}

if (keyboard_check_pressed(ord("8")))
{
    Note("include", "milagros", "Completed Application");
}

exit;

if (keyboard_check_pressed(ord("2")))
{
    obj = instance_create(0, 0, o_tnn_resume);
    obj.ansInd[0] = choose(0, 1, 2, 3);
    obj.ansInd[1] = choose(0, 1, 2, 3);
    obj.ansInd[2] = choose(0, 1, 2, 3);
    obj.ansInd[3] = choose(0, 1, 2, 3);
    obj.progress = 8;
    obj.offY = 0;
}

if (keyboard_check_pressed(ord("3")))
{
    obj = instance_create(0, 0, o_dialogue_item);
}

if (keyboard_check_pressed(ord("4")))
{
    Note("gallery", choose("Goofster", "Slender Man", "Drakescorned", "Sergal", "Geldrach", "Dire Juggler", "Hellmonster", "Mujahoudini"));
}

if (keyboard_check_pressed(ord("0")))
{
    with (oNote) { but = 0; event_user(0); }
    with (o_tnn_resume) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get all prefix infos
dslPr1 = ds_list_create();
dslPr2 = ds_list_create();
dslMat = ds_list_create();
dslTyp = ds_list_create();
dslSuf = ds_list_create();

indPr1 = 0;
indPr2 = 0;
indMat = 0;
indTyp = 0;
indSuf = 0;

// PREFIX 1
ds_list_add(dslPr1, "Afterburning");
ds_list_add(dslPr1, "Gravitating");
ds_list_add(dslPr1, "Pensioner's");
ds_list_add(dslPr1, "Ricocheting");
ds_list_add(dslPr1, "Magician's");
ds_list_add(dslPr1, "Flagellant");
ds_list_add(dslPr1, "Polarized");
ds_list_add(dslPr1, "Berzerk'd");
ds_list_add(dslPr1, "Skipping");
ds_list_add(dslPr1, "Fetching");
ds_list_add(dslPr1, "Orbiting");
ds_list_add(dslPr1, "Flooding");
ds_list_add(dslPr1, "Chaining");
ds_list_add(dslPr1, "Surfing");
ds_list_add(dslPr1, "Ghostic");
ds_list_add(dslPr1, "Guided");
ds_list_add(dslPr1, "Wonky");
ds_list_add(dslPr1, "ADHD");

// PREFIX 2
ds_list_add(dslPr2, "Disintegrating");
ds_list_add(dslPr2, "Buzzerbeating");
ds_list_add(dslPr2, "Malnourishing");
ds_list_add(dslPr2, "Spike Sending");
ds_list_add(dslPr2, "Partitioning");
ds_list_add(dslPr2, "Cartographic");
ds_list_add(dslPr2, "Cold Reading");
ds_list_add(dslPr2, "Fragmenting");
ds_list_add(dslPr2, "Compressing");
ds_list_add(dslPr2, "Emboldening");
ds_list_add(dslPr2, "Narcotizing");
ds_list_add(dslPr2, "Diminishing");
ds_list_add(dslPr2, "Firewalling");
ds_list_add(dslPr2, "Enthralling");
ds_list_add(dslPr2, "Terrorizing");
ds_list_add(dslPr2, "Navelgazing");
ds_list_add(dslPr2, "Augementing");
ds_list_add(dslPr2, "Eight Armed");
ds_list_add(dslPr2, "Vindicative");
ds_list_add(dslPr2, "Pre-Cogged");
ds_list_add(dslPr2, "Tubercular");
ds_list_add(dslPr2, "Formatting");
ds_list_add(dslPr2, "Stupefying");
ds_list_add(dslPr2, "Dispelling");
ds_list_add(dslPr2, "Decimating");
ds_list_add(dslPr2, "Vitalizing");
ds_list_add(dslPr2, "Enchanting");
ds_list_add(dslPr2, "ReVengeant");
ds_list_add(dslPr2, "Equalizing");
ds_list_add(dslPr2, "Urticating");
ds_list_add(dslPr2, "Composting");
ds_list_add(dslPr2, "Wormholing");
ds_list_add(dslPr2, "Projecting");
ds_list_add(dslPr2, "MyCleanPC");
ds_list_add(dslPr2, "Withering");
ds_list_add(dslPr2, "Nurturing");
ds_list_add(dslPr2, "Carapaced");
ds_list_add(dslPr2, "Oxidizing");
ds_list_add(dslPr2, "Repairing");
ds_list_add(dslPr2, "Banishing");
ds_list_add(dslPr2, "Scolding");
ds_list_add(dslPr2, "Bloating");
ds_list_add(dslPr2, "Scanning");
ds_list_add(dslPr2, "Slurpin'");
ds_list_add(dslPr2, "Magnetic");
ds_list_add(dslPr2, "Adhesive");
ds_list_add(dslPr2, "Ufgood's");
ds_list_add(dslPr2, "Pachinko");
ds_list_add(dslPr2, "Blinking");
ds_list_add(dslPr2, "Rebasing");
ds_list_add(dslPr2, "Busting");
ds_list_add(dslPr2, "Godless");
ds_list_add(dslPr2, "Zaubric");
ds_list_add(dslPr2, "Looping");
ds_list_add(dslPr2, "Cloning");
ds_list_add(dslPr2, "Linking");
ds_list_add(dslPr2, "Tagging");
ds_list_add(dslPr2, "Thorny");
ds_list_add(dslPr2, "Pepful");
ds_list_add(dslPr2, "Mortal");

// MATERIAL
ds_list_add(dslMat, "Frankincense");
ds_list_add(dslMat, "Anti-Matter");
ds_list_add(dslMat, "3D Printed");
ds_list_add(dslMat, "Fiberglass");
ds_list_add(dslMat, "Orichalcum");
ds_list_add(dslMat, "Adamantium");
ds_list_add(dslMat, "Untamonium");
ds_list_add(dslMat, "Taxidermy");
ds_list_add(dslMat, "Aluminium");
ds_list_add(dslMat, "Imaginary");
ds_list_add(dslMat, "Yggdrasil");
ds_list_add(dslMat, "Porcelain");
ds_list_add(dslMat, "Damascus");
ds_list_add(dslMat, "Aluminum");
ds_list_add(dslMat, "Plantain");
ds_list_add(dslMat, "Titanium");
ds_list_add(dslMat, "Obsidian");
ds_list_add(dslMat, "Nanotube");
ds_list_add(dslMat, "Tungsten");
ds_list_add(dslMat, "Platinum");
ds_list_add(dslMat, "Francium");
ds_list_add(dslMat, "Studded");
ds_list_add(dslMat, "Mythril");
ds_list_add(dslMat, "Plastic");
ds_list_add(dslMat, "Leather");
ds_list_add(dslMat, "Crystal");
ds_list_add(dslMat, "Klispin");
ds_list_add(dslMat, "Digital");
ds_list_add(dslMat, "Blaster");
ds_list_add(dslMat, "Mercury");
ds_list_add(dslMat, "Diamond");
ds_list_add(dslMat, "Polenta");
ds_list_add(dslMat, "Chobham");
ds_list_add(dslMat, "Aerogel");
ds_list_add(dslMat, "Silver");
ds_list_add(dslMat, "Soiled");
ds_list_add(dslMat, "Rotten");
ds_list_add(dslMat, "Broken");
ds_list_add(dslMat, "Carbon");
ds_list_add(dslMat, "Chrome");
ds_list_add(dslMat, "Cobalt");
ds_list_add(dslMat, "Nickel");
ds_list_add(dslMat, "Copper");
ds_list_add(dslMat, "Napalm");
ds_list_add(dslMat, "Rubber");
ds_list_add(dslMat, "Chitin");
ds_list_add(dslMat, "Fungus");
ds_list_add(dslMat, "Analog");
ds_list_add(dslMat, "Bronze");
ds_list_add(dslMat, "Pinata");
ds_list_add(dslMat, "Denim");
ds_list_add(dslMat, "Candy");
ds_list_add(dslMat, "Rusty");
ds_list_add(dslMat, "Glass");
ds_list_add(dslMat, "Grass");
ds_list_add(dslMat, "Steel");
ds_list_add(dslMat, "Brass");
ds_list_add(dslMat, "Paper");
ds_list_add(dslMat, "Offal");
ds_list_add(dslMat, "Blood");
ds_list_add(dslMat, "Sinew");
ds_list_add(dslMat, "Brain");
ds_list_add(dslMat, "Itano");
ds_list_add(dslMat, "Pearl");
ds_list_add(dslMat, "Myrrh");
ds_list_add(dslMat, "Stone");
ds_list_add(dslMat, "Junk");
ds_list_add(dslMat, "Neon");
ds_list_add(dslMat, "Salt");
ds_list_add(dslMat, "Wood");
ds_list_add(dslMat, "Dual");
ds_list_add(dslMat, "Bone");
ds_list_add(dslMat, "Iron");
ds_list_add(dslMat, "Zinc");
ds_list_add(dslMat, "Silk");
ds_list_add(dslMat, "Foil");
ds_list_add(dslMat, "Gold");
ds_list_add(dslMat, "Lead");
ds_list_add(dslMat, "Orb");
ds_list_add(dslMat, "Soy");
ds_list_add(dslMat, "Tin");

// TYPE
ds_list_add(dslTyp, "Hunting Rifle");
ds_list_add(dslTyp, "Dbl. Shotgun");
ds_list_add(dslTyp, "Elephant Gun");
ds_list_add(dslTyp, "Autoshotgun");
ds_list_add(dslTyp, "Tranq Rifle");
ds_list_add(dslTyp, "Gatling Gun");
ds_list_add(dslTyp, "Machinegun");
ds_list_add(dslTyp, "Flintlock");
ds_list_add(dslTyp, "Flare Gun");
ds_list_add(dslTyp, "Mitraille");
ds_list_add(dslTyp, "Revolver");
ds_list_add(dslTyp, "Crossbow");
ds_list_add(dslTyp, "Bazooka");
ds_list_add(dslTyp, "Assault");
ds_list_add(dslTyp, "Minigun");
ds_list_add(dslTyp, "Shotgun");
ds_list_add(dslTyp, "Magnum");
ds_list_add(dslTyp, "Pistol");
ds_list_add(dslTyp, "Rifles");
ds_list_add(dslTyp, "Musket");
ds_list_add(dslTyp, "Sniper");
ds_list_add(dslTyp, "Flame");
ds_list_add(dslTyp, "Uzi");
ds_list_add(dslTyp, "SMG");
ds_list_add(dslTyp, "BFG");

// SUFFIX
ds_list_add(dslSuf, "practicing the Triangle Defense");
ds_list_add(dslSuf, "with a Battery Charger");
ds_list_add(dslSuf, "of Reaper's Digest");
ds_list_add(dslSuf, "of Fight or Flight");
ds_list_add(dslSuf, "of Herb's Dumbell");
ds_list_add(dslSuf, "of Mice and Magic");
ds_list_add(dslSuf, "that has Sprung a Leak");
ds_list_add(dslSuf, "of the Perfectionist");
ds_list_add(dslSuf, "of Perpetual War");
ds_list_add(dslSuf, "of the Vengeantball");
ds_list_add(dslSuf, "full of Nanomachines");
ds_list_add(dslSuf, "of the Berzerkball");
ds_list_add(dslSuf, "of the Let's Plays");
ds_list_add(dslSuf, "of the Forever Man");
ds_list_add(dslSuf, "of Bailing Out");
ds_list_add(dslSuf, "with the Heart of a Machinegun");
ds_list_add(dslSuf, "pulling off a NoScope360");
ds_list_add(dslSuf, "of the Encephalon");
ds_list_add(dslSuf, "of Citronella");
ds_list_add(dslSuf, "of Anti-Swamp");
ds_list_add(dslSuf, "of Caltropics");
ds_list_add(dslSuf, "cursed by a Gypsy Hex");
ds_list_add(dslSuf, "emanating a Dank Musk");
ds_list_add(dslSuf, "of the Ps. Pocus");
ds_list_add(dslSuf, "of Unlocking");
ds_list_add(dslSuf, "of Familiars");
ds_list_add(dslSuf, "of Sacrifice");
ds_list_add(dslSuf, "of the Mycelium");
ds_list_add(dslSuf, "of Muramasa");
ds_list_add(dslSuf, "of Masamune");
ds_list_add(dslSuf, "of Murasame");
ds_list_add(dslSuf, "of Eternity");
ds_list_add(dslSuf, "with the Heart of a Minigun");
ds_list_add(dslSuf, "with the Heart of a Shotgun");
ds_list_add(dslSuf, "of the Entlord");
ds_list_add(dslSuf, "of Allergy");
ds_list_add(dslSuf, "with the Heart of a Pistol");
ds_list_add(dslSuf, "of the Gibson");
ds_list_add(dslSuf, "of the Circus");
ds_list_add(dslSuf, "of the Quasar");
ds_list_add(dslSuf, "of the Doxxer");
ds_list_add(dslSuf, "with the Heart of a Rifle");
ds_list_add(dslSuf, "replete with Chaff");
ds_list_add(dslSuf, "of Power");
ds_list_add(dslSuf, "from Heck");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_surface_ext(surGam, 0, 0, 4, 4, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if (surface_exists(surGam) == 0) surGam = surface_create(SCREEN_WIDTH, SCREEN_HEIGHT);
//surface_set_target(surGam);
draw_clear(background_color);
draw_sprite(sprite2, 0, x, y);
draw_set_font(global.fn_small);
draw_set_color(c_white);
draw_set_halign(0);
draw_set_valign(0);
ysp = 10;
dx = 5;
dy = 5;
draw_text(dx, dy, '1 = Open Jerkin Shop'); dy += ysp;
draw_text(dx, dy, '2 = Progress gun index by one'); dy += ysp;
draw_text(dx, dy, '3 = Random gun'); dy += ysp;
//Disintegrating
//Afterburning
pr1 = dslPr1[| indPr1];
pr2 = dslPr2[| indPr2];
mat = dslMat[| indMat];
typ = dslTyp[| indTyp];
suf = dslSuf[| indSuf];
scr_quickmenu_draw_gun_name(dx, dy + 10, pr1, pr2, mat, typ, suf, 0);
draw_sprite_ext(s1x1, 0, dx, dy + 30, 208, 1, 0, c_lime, 1);
draw_sprite_ext(s1x1, 0, dx, dy + 35, 200, 1, 0, c_white, 1);
draw_sprite_ext(s1x1, 0, dx, dy + 40, 192, 1, 0, c_red, 1);
//surface_reset_target();


exit;
draw_text(dx, dy, '2 = Note Giver'); dy += ysp;
draw_text(dx, dy, '3 = Art Gallery'); dy += ysp;
draw_text(dx, dy, '4 = Get random notes.'); dy += ysp;
draw_text(dx, dy, '5 = Remove all notes / exclusions.'); dy += ysp;
draw_text(dx, dy, '6 = Get Completed Application'); dy += ysp;
draw_text(dx, dy, '7 = Identity'); dy += ysp;
draw_text(dx, dy, '8 = Include Completed Application'); dy += ysp;
draw_text(dx, dy, 'Last given note: ' + Note("selected")); dy += ysp;

dx = 380;
dy = 5;
draw_set_halign(2);
draw_text(dx, dy, 'Notes in possession:'); dy += 14;
for (i = 0; i &lt; ds_list_size(global.noteList); i += 1)
{
    nam = ds_list_find_value(global.noteName, i);
    if (Note("have", nam))
    {
        draw_text(dx, dy, nam); dy += 14;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
