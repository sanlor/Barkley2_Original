<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// DNET start, this is where it all begins from //
wid = SCREEN_WIDTH;
hei = SCREEN_HEIGHT;
dwarfnet_color[0] = make_color_rgb(0, 80, 80);
dwarfnet_color[1] = make_color_rgb(0, 255, 255);

memory_check = 0;
memory_check_goal = 70656;

//font = font_add_sprite(s_dnet_font, ord('!'), true, 1);
draw_set_font(global.fn_dnet);

timer_boot = 0;
timer_memory_check = 100000;
timer_check = 5;
account_check = 0;
check = 0;

line = "";
line_index = 1;

global.music_return = global.bgm_current_music;
audio_set_bgm_instant("mus_blankTEMP");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Memory check //
if timer_memory_check &gt; 0 then timer_memory_check -= dt();
else
    {
    // Check it until all of it has been checekd //
    if memory_check &lt; memory_check_goal then 
        {
        // Exceedingly elaborate way to make the memory check at a random rate //
        temp = irandom(100);
        if temp &gt;= 80 and temp &lt;= 100 then memory_check += 8;
        if temp &gt;= 70 and temp &lt;= 79 then memory_check += 100;
        if temp &gt;= 65 and temp &lt;= 69 then memory_check += 1000;
        if temp &gt;= 30 and temp &lt;= 64 then memory_check += 10;
        if temp &gt;= 10 and temp &lt;= 29 then memory_check += 4310;
        if temp &gt;= 0 and temp &lt;= 9 then memory_check += 64;
        
        // Check complete //
        if memory_check &gt;= memory_check_goal then 
            {
            memory_check = memory_check_goal;
            timer_boot = 5;
            }
        }
    }
    
// Checks //
if timer_check &gt; 0 then
    {
    // Tick down //
    timer_check -= dt();
    
    // Event //
    if timer_check &lt;= 0 then
        {
        if check &lt; 3 then 
            {
            check += 1;
            timer_check = irandom(4) + 3;
            }
        else timer_memory_check = 5;
        }
    }
    
// Scan for account //
if timer_boot &gt; 0 then
    {
    // Tick down //
    timer_boot -= dt() * 3;
    
    // Event //
    if timer_boot &lt;= 0 then
        {
        if account_check &lt; 8 then
            {
            account_check += 1;
            timer_boot = 10;
            }
        else
            {
            // Registration loader //
            instance_create(x, y, o_dnet_registration);
            instance_destroy();
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw "stuff"
draw_set_alpha(1);
draw_set_color(dwarfnet_color[1]);
draw_rectangle(0, 0, wid, hei, false);
draw_set_color(dwarfnet_color[0]);
draw_rectangle(14, 8, wid - 14, hei - 8, false); // 2 - 16, 2 - 10, 290 - 274, 214 - 204
draw_set_color(dwarfnet_color[1]);
draw_set_font(global.fn_dnet);

// Title //
draw_text(32, 10, "Dwarf Manager, v. 3.05a");

// System checks //
if check = 0 then draw_text(32, 30, "System check");
if check &gt;= 1 then draw_text(32, 30, "System check . . . . . . . . . . ok");
if check = 2 draw_text(32, 40, "Connection check");
if check &gt;= 3  then draw_text(32, 40, "Connection check . . . . . . . . ok");
if timer_memory_check &lt;= 0 then
    {
    if memory_check = memory_check_goal then 
        {
        draw_text(32, 60, "Memory check - " + string(memory_check) + " bytes");
        draw_text(32, 70, "Check complete");
        }
    else draw_text(32, 60, "Memory check - " + string(memory_check));
    }
    
// Last wait before moving on //
if account_check = 1 then draw_text(32, 90, "Boot DNETREG.EXE");
if account_check = 2 then draw_text(32, 90, "Boot DNETREG.EXE .");
if account_check = 3 then draw_text(32, 90, "Boot DNETREG.EXE . .");
if account_check = 4 then draw_text(32, 90, "Boot DNETREG.EXE . . .");
if account_check = 5 then draw_text(32, 90, "Boot DNETREG.EXE . . . .");
if account_check = 6 then draw_text(32, 90, "Boot DNETREG.EXE . . . . .");
if account_check = 7 then draw_text(32, 90, "Boot DNETREG.EXE . . . . . .");
if account_check = 8 then draw_text(32, 90, "Boot DNETREG.EXE . . . . . . . . ok");

 


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
