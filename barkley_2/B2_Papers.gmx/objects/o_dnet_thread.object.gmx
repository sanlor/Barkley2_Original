<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //
index = 0;
button_hover = false;
button_hover_mark = false;
button_pressed = 0;
margin_left = 10;
margin_right = 20;
width = o_dnet_control.dnet_width - margin_left - margin_right;
height = ceil((o_dnet_control.dnet_height - o_dnet_control.top_height - (global.dnet_vspace * 5)) / 4);

heart_x = width - 25;
heart_y = 13;
heart_width = 10;
heart_height = 10;

// Thread data //
thread_author = "";
thread_title = ""
thread_read = false;
thread_poll = false;
thread_link = 0;

new_image = 0;
timer_thread_goto = 0;
timer_new_image = 5;
color = c_white;   
y_change = 0;

sticky = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Only works when not disabled //
if (visible == 0) exit;
drx = x + margin_left;
dry = o_dnet_control.top_height + global.dnet_vspace + (y * global.dnet_vspace) + (y * height);
dry -= (o_dnet_control.totHei / o_dnet_control.use_height) * o_dnet_control.slider_y;
if o_dnet_app.dnet_app = -1 then
    {    
    // Thread Buttons //
    if (Dnet("pointer", 0, 0, o_dnet_control.dnet_width, o_dnet_control.top_height) == 1)
    {
        button_hover = 0;
        button_hover_mark = 0;
    }
    else
    {
        button_hover = Dnet("pointer", drx, dry, drx + width, dry + height);
        button_hover_mark = Dnet("pointer", drx + heart_x, dry + heart_y, drx + heart_x + heart_width, dry + heart_y + heart_width);
    }
    
    // Click Thread Button //
    if MiniKeyPress("action") then
    {
        // Mark as interesting/uninteresting //
        if sticky == 0 &amp;&amp; locked == 0 and button_hover_mark = true and timer_thread_goto &lt;= 0 and visible = true then
        {
            if (scr_quest_get_state("dwarfnetMark" + string(index)) != 0) then scr_quest_set_state("dwarfnetMark" + string(index), 0);
            else scr_quest_set_state("dwarfnetMark" + string(index), make_color_hsv(random(255), 255, 255));
        }
        // Go to a thread //
        else if button_hover = true and timer_thread_goto &lt;= 0 and visible = true then
        {
            button_pressed = 1;
            timer_thread_goto = 1;
        }
    }
        
    // Goto thread //
    if timer_thread_goto &gt; 0 then
        {
        // Tick down //
        timer_thread_goto -= dt();
        
        // Event //
        if timer_thread_goto &lt;= 0 then
            {
            // Update the time when you last checked the thread //
            var timestamp = global.clockHours * 60 + global.clockMinutes;
            
            // Change the title to the thread title and memorize the previous one //
            Dnet("title", thread_title);
            
            // This is some Reload related thing, might be obsolete //
            global.dnet_thread_script = thread_link;
                        
            // Run the script //
            o_dnet_control.scrolling_position = global.dnet_vspace;
            o_dnet_control.slider_y = 0;
            script_execute(DnetThreads, thread_link, "post");      
            scr_quest_set_state("dwarfnetThread" + string(index), timestamp);
            thread_read = true;
            }
        }
        
    // Visible or not //
    if instance_exists(o_dnet_post) then visible = false;
    else visible = true;
    }
        
// Button effect //
if button_pressed &gt; 0 then button_pressed -= dt();

// Image //
//image_speed = dt() * 0.15;

// New replies!!! //
if timer_new_image &gt; 0 then
    {
    // Tick down //
    timer_new_image -= dt() * 6;
    
    // Event //
    if timer_new_image &lt;= 0 then
        {
        timer_new_image = 5;
        if new_image = 0 then new_image = 1;
        else new_image = 0;
        }
    }

// Position //
if y_change &gt; 0 then
    {
    y_change -= 170;
    y -= 170;
    }
else if y_change &lt; 0 then
    {
    y_change += 170;
    y += 170;
    }

    
    
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Set font //
draw_set_font(global.fn_dnet);
draw_set_alpha(1);

drx = x + margin_left;
dry = o_dnet_control.top_height + global.dnet_vspace + (y * global.dnet_vspace) + (y * height);
dry -= (o_dnet_control.totHei / o_dnet_control.use_height) * o_dnet_control.slider_y;
if (visible)
{
    
    // Thread Coloring (Mark) //
    if (scr_quest_get_state("dwarfnetMark" + string(index)) != 0) then color = scr_quest_get_state("dwarfnetMark" + string(index));
    else color = global.dentColorThreadNormal;
    if (locked) { sprite_index = sDNETThreadIcon; image_index = 6; color = global.dentColorThreadLocked; }
    if (sticky) { sprite_index = sDNETThreadIcon; image_index = 29; color = global.dentColorThreadSticky; }
    // Thread Box //
    if button_pressed &gt; 0 then MiniSprite9(sDNETBorder0, 2, drx, dry, width, height, 1, color, 1); 
    else
    {
        if button_hover = true then MiniSprite9(sDNETBorder0, 1, drx, dry, width, height, 1, color, 1);
        else MiniSprite9(sDNETBorder0, 2, drx, dry, width, height, 1, color, 1); 
    }
        
    // Thread Icon //
    draw_sprite_ext(sprite_index, image_index, drx + 4 + 2, dry + 4 + 1, 1, 1, 0, c_white, 1);
    
    // Thread Info //
    DnetText(drx + 40 - 2, dry + 4 + 2, thread_title, 300, c_white, 1, fa_left, fa_top);
    DnetText(drx + 40 - 2, dry + 18 + 2, "By:", 300, c_blue, 1, fa_left, fa_top);
    DnetText(drx + 64 - 2, dry + 18 + 2, thread_author, 300, make_color_rgb(85, 85, 253), 1, fa_left, fa_top);
    
    // Poll //
    if (thread_poll) draw_sprite_ext(sDNETMisc, 1, drx + 8, dry + 25 - 9, 1, 1, 0, c_white, 1); 
        
    // Favorited? //
    if (locked == 0 &amp;&amp; sticky == 0)
    {
        if (scr_quest_get_state("dwarfnetMark" + string(index)) != 0) then draw_sprite_ext(s_dnet_favorited, 1 + 2 * button_hover_mark, drx + heart_x, dry + heart_y, 1, 1, 0, c_white, 1);
        else draw_sprite_ext(s_dnet_favorited, 0 + 2 * button_hover_mark, drx + heart_x, dry + heart_y, 1, 1, 0, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
