<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup stuff //
interval = 0.001;
fogAlpha = 1;
fogAmt = 0;
fogCou = 0;
fgx = 160 * 2.2; // + / - on x creating
fgy = 100 * 2.2; // + / - on y creating
basCol = make_color_rgb(175, 170, 160);
basColR = color_get_red(basCol);
basColG = color_get_green(basCol);
basColB = color_get_blue(basCol);
colRng = 20;
colRn2 = colRng * 2;
// Some controlling variables // These are changed manually in the instances if need be //
fog_intensity = 3;
starting_fog = 2; //4;
snow = 0;

// Add in the dust //
if scr_area_get() = "wst" and !instance_exists(o_effect_dust) then instance_create(x, y, o_effect_dust);

/*
// Particle system //
system = part_system_create();
part_system_depth(system, -1000002);

// Particle emitter //
emitter = part_emitter_create(system);
part_emitter_region(system, emitter, 64, room_width-64, 64, room_height-64, ps_shape_rectangle, ps_distr_linear);

// Particle emitter for room starts, to fill up the room before transition ends //
emitter_start = part_emitter_create(system);
part_emitter_region(system, emitter_start, view_xview, view_xview+384, view_yview, view_yview+240, ps_shape_rectangle, ps_distr_linear);

// Particles //
particle = part_type_create();
part_type_alpha3(particle, 0.025, 0.04, 0.02);
part_type_color1(particle, make_color_rgb(175, 170, 160));
part_type_life(particle, 60, 120);
part_type_speed(particle, 0.1, 0.2, 0, 0);
part_type_direction(particle, 0, 360, 0, 0);
part_type_size(particle, 1.25, 2.2, 0, 0);
part_type_sprite(particle, s_effect_smog, false, false, false);

part_system_automatic_update(system, 0); // Added so it can be paused
// In the future, consider a different method (ie. smaller speeds with 
// updates based on FPS) to get this truly working with delta time
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delta smog
if (paused()) exit;

var fogTru = fog_intensity * 120;

// gz fog
//if (instance_exists(o_effect_rain)) { if (o_effect_rain.rain) exit; }

if (starting_fog &gt; 0)
{
    starting_fog -= 1;
    if (starting_fog &lt;= 0)
    {
        repeat (fogTru) { fogInd = fogCou; event_user(1); fogCou += 1; fogPro[fogInd] = random(1); }
    }
    exit;
}

//while (fogCou &lt; fogTru) //interval &gt; 0)
//{
    //interval -= dt();
//    event_user(0);
    //if (interval &lt;= 0)
    //{
    //    repeat (floor(fogTru / 120)) event_user(0);
    //    interval += 0.5;
    //}
//}
for (i = 0; i &lt; fogCou; i += 1)
{
    if (fogAct[i])
    {
        fogPro[i] += (1 / fogLif[i]) * dt_sec();
        if (fogPro[i] &gt;= 1) { fogAct[i] = 0; fogInd = i; event_user(1); }
    }
    //fogX[i] += lengthdir_x(fogSpd[i] * dt_sec(), fogDir[i]);
    //fogY[i] += lengthdir_x(fogSpd[i] * dt_sec(), fogDir[i]);
}
//while (fogCou &lt; fogTru) event_user(0);


/*
// part_system_update(system); //Added for pausing

// Check for rain //
if instance_exists(o_effect_rain) then
    {
    // If rain exists, don't emit fog since rain already does it's own thing for that // Otherwise, have at it hoss //
    if o_effect_rain.rain = false then part_system_update(system); 
    else 
        {
        interval = -1;
        starting_fog = -1;
        }
    }
else part_system_update(system); 

// Start fog //
if starting_fog &gt; 0 then
    {
    // Starting fog, emitted before transition finishes so it looks more organic, like it was always there to begin with //
    part_emitter_region(system, emitter_start, view_xview - 32, view_xview + 416, view_yview - 32, view_yview + 272, ps_shape_rectangle, ps_distr_linear);
    repeat (2) part_emitter_burst(system, emitter_start, particle, irandom(10) + fog_intensity * 2);
    part_emitter_burst(system, emitter, particle, fog_intensity);
    starting_fog -= 1;
    }

// Interval //
if interval &gt; 0 then
    {
    // Tick down //
    interval -= 1;
    
    // Rain area //
    part_emitter_region(system, emitter, view_xview - 128, view_xview + 384 + 128, view_yview - 128, view_yview + 240 + 128, ps_shape_rectangle, ps_distr_linear);
    
    // Event //
    if interval = 0 then
        {
        part_emitter_burst(system, emitter, particle, irandom(8) + 4 + fog_intensity);
        interval = irandom(4) + 4;
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// MAKE A SMOG
fogAct[fogInd] = 1;
fogX[fogInd] = max(0, (view_xview[0] - fgx)) + random(384 + (fgx * 2));
fogY[fogInd] = max(0, (view_yview[0] - fgy)) + random(240 + (fgy * 2));
fogAlp[fogInd] = 0.03 + random(0.01);
fogPro[fogInd] = 0;
fogLif[fogInd] = 5 + random(1);
fogDir[fogInd] = random(360);
fogXScl[fogInd] = 1.25 + random(1.25);
fogYScl[fogInd] = 1.25 + random(1.25);
fogCol[fogInd] = make_color_rgb(basColR - colRng + random(colRn2), basColG - colRng + random(colRn2), basColB - colRng + random(colRn2));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make a smog
fogInd = -1;
for (i = 0; i &lt; fogAmt; i += 1)
{
    if (fogAct[i] == 0) { fogInd = i; break; }
}
if (fogInd == -1)
{
    fogInd = fogAmt;
    fogAmt += 1;
    show_debug_message("o_effect_smog: fogs = " + string(fogInd));
}

// Create fog
fogCou += 1;
event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Adios //
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delta Smog
if (snow) draw_set_blend_mode(bm_add);
for (i = 0; i &lt; fogCou; i += 1)
{
    if (fogAct[i]) 
    {
        var alp = 0;
        if (fogPro[i] &gt; 0.5) alp = fogAlp[i] * abs(1 - ((fogPro[i] - 0.5) * 2));
        else alp = fogAlp[i] * (fogPro[i] * 2);
        draw_sprite_ext(s_effect_smog, 0, fogX[i], fogY[i], fogXScl[i], fogYScl[i], fogDir[i], fogCol[i], (alp * 3) * fogAlpha);
    }
}
if (snow) draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
