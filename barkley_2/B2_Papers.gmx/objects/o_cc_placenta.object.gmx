<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Hide wizard //
o_cc_wizard.alpha_goal = 0;

// DEUB DEBUG += 0 is debug, set this to += 1 after testing is complete //
o_cc_data.placenta_status += 1;

// Phase setup //
phase[0] = 20;
//o_cc_data.placenta_status = 4;
Quest("playerCCPlacenta", o_cc_data.placenta_status);
if o_cc_data.placenta_status = 0 then phase[1] = o_cc_data.placenta_status + 1;
else phase[1] = o_cc_data.placenta_status + 4;
phase[2] = 0;
phase[3] = 0;
image_speed = 0;

// Phase skipping //
phase_skip_time = 0;
phase_skip_to = 0;
phase_skip = 0;

// Textbox setup //
textbox_written = "";
textbox_goal = "";
textbox_pause = 0;
textbox_position = 0;
textbox_skip = false;  

// Alpha setup //
alpha_textbox = 0;
alpha_textbox_goal = 0;
alpha_textbox_timer = 0;
alpha_event = 0;
alpha_event_goal = 0;
alpha_tree = 0;
alpha_tree_goal = 1;

// Other //
active = false;
timer_transition = 0;
event = 0;
for (i=0; i&lt;15; i+=1;) option_hover[i] = false;

option_test[0] = "Alignment";
option_test[1] = "Cookie";
option_test[2] = "Crest";
option_test[3] = "Dropdown";
option_test[4] = "Gumball";
option_test[5] = "Scanner";
option_test[6] = "Inkblots";
option_test[7] = "Lottery";
option_test[8] = "Multiple";
option_test[9] = "Palm";
option_test[10] = "Stats";
option_test[11] = "Tarot";

// Defaults //
text[0] = "Your parents planted a seed with your placenta.#You are bound to this tree and its growth mirrors#your own. It bears your experience as rings, its#fruit, only as ripe as your spirit is wise.";
text[1] = "Fertilize the tracts of your mind with knowledge,#till the folds of your brain with the plowshare of#contemplation."
text[2] = "It is Spring, little tree, and your branches stretch#toward the sun as your potential awakens from the#seed. It is time to begin growing.";
 
text_placenta[0] = "The cool days of Spring grow warmer as Summer#approaches. A gentle breeze tickles the budding#leaves of your branches."
text_placenta[1] = "The rays of the sun shine down and nourish you#with their warmth. You grow stronger every day.";
text_placenta[2] = "Your powerful branches caress the sky and provide#shade for others. A baby bird sings its first song#as it waits anxiously for its mother's return.";
//text_placenta[3] = "Autumn's crisp winds tinge your leaves red and#orange. A young girl sits at your trunk and enjoys#the sweet apple you have given her."
//text_placenta[4] = "The dry, crackly leaves at your venerable trunk#paint the ground a rusty brown. The leaves still#clinging to your branches shudder at the#impending cold of Winter."
//text_placenta[5] = "Your leaves used to dance as they fell from your#branches, but now they plunge gracelessly to the#frosted ground. The birds that made their homes#in your barren arms are gone."
text_placenta[3] = "Winter's bitter breath blows mercilessly against#your tired branches. The last of your leaves falls#silently to the cold earth."

answer_event = "Continue growing";
answer_party = "Begin living";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Phases //
if phase[0]  &gt; 0 then
    {
    // Tick down //
    phase[0] -= dt();
    
    // Event //
    if phase[0] &lt;= 0 then
        {        
        // First greetings //
        if phase[1] &gt;= 1 and phase[1] &lt;= 3 then scr_cc_textbox(text[phase[1] - 1]);

        // Go to question after intro the first time on placenta //
        if phase[1] = 4 then
            {
            alpha_event_goal = 1;
            active = true;
            }
        
        // Placenta phases //
        if phase[1] &gt;= 5 and phase[1] &lt;= 11 then
            {
            scr_cc_textbox(text_placenta[phase[1] - 5])
            phase[1] = 11;
            }
            
        // Go to the placenta event after each placenta phase or DIE if you went too far //
        if phase[1] = 12 then
            {
            if o_cc_data.placenta_status &gt;= 7 then
                {
                instance_create(x, y, o_cc_death);
                phase[3] = 30;
                }
            else
                {
                alpha_event_goal = 1;
                active = true;
                }
            }
        }
    } 
    
// Choose to grow some more or begin to live //
if active = true then
    {
    // Hover //
    option_hover[0] = scr_cc_button_xy(121, 262, 194, 206);
    option_hover[1] = scr_cc_button_xy(121, 262, 212, 224);
    
    // DEBUG SHITE //
    for (i=0; i&lt;12; i+=1;) option_hover[i + 2] = scr_cc_button_xy(12, 120, 12 + i * 16, 22 + i * 16);
      
    // Check //
    if MiniKeyPress("action") then
        {
        // Continue Growing //
        if (option_hover[0] = true)
        {
            if (o_cc_data.placenta_status &lt; 4)
            {
                active = false;
                alpha_textbox_goal = 0;
                alpha_event_goal = 0;
                phase[2] = 10;
                timer_transition = 3;
            }
        }
        // Begin Living //
        else if (option_hover[1] = true)
        {
            active = false;
            alpha_textbox_goal = 0;
            alpha_event_goal = 0;
            phase[3] = 10;
            timer_transition = 3;
        }
        }
    }
    
// Transition //
if timer_transition &gt; 0 then
    {
    // Tick down //
    timer_transition -= dt();
    
     // Event //
     if timer_transition &lt;= 0 then instance_create(0, 0, o_cc_transition);
     } 
     
// Move on to something else //
if phase[2] &gt; 0 then
    {
    // Tick down //
    phase[2] -= dt();
    
    // Event //
    if phase[2] &lt;= 0 then
        {
        with (o_cc_wizard) event_user(0);
        instance_destroy();
        }
    }
    
// End of this event - You began living (was death before) //
if phase[3] &gt; 0 then
    {
    // Tick down //
    phase[3] -= dt();
    
    // Alphas //
    alpha_textbox_goal = 0;
    goal_alpha_event = 0;
    alpha_tree_goal = 0;
    
    // End //
    if (phase[3] &lt;= 0)
    {
        instance_create(0, 0, o_cc_finish);
        instance_destroy();
    }
    }
    
// Skip with button //
scr_cc_textbox_skip();

// Type the text //
scr_cc_textbox_type();

// Move to a next phase //
scr_cc_phase_skip_process();
    
// alpha_textbox goals //
if alpha_textbox_timer &gt; 0 then alpha_textbox_timer -= dt();
else
    {
    if alpha_textbox &lt; alpha_textbox_goal then alpha_textbox += 0.1;
    if alpha_textbox &gt; alpha_textbox_goal then alpha_textbox -= 0.1;
    }

// alpha_textbox goals //
if alpha_event &lt; alpha_event_goal then alpha_event += 0.1;
if alpha_event &gt; alpha_event_goal then alpha_event -= 0.1;

// alpha_textbox goals //
if alpha_tree &lt; alpha_tree_goal then alpha_tree += 0.01;
if alpha_tree &gt; alpha_tree_goal then alpha_tree -= 0.01;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Placenta 2 //
draw_sprite_ext(s_cc_placenta_tree, o_cc_data.placenta_status, 192, 0, 1, 1, 0, c_white, alpha_tree);

// Draw textboxes //
scr_cc_draw_textbox();

// Dim the background //
draw_set_alpha(alpha_event * 0.25);
draw_set_color(c_black);
draw_rectangle(-2, -2, 386, 242, false);

// Draw bg color box //
draw_set_alpha(alpha_event * 0.5);
draw_set_color(o_cc_data.color_event);
draw_rectangle(120, 187, 263, 230, false);

// Button hovers //
draw_set_alpha(alpha_event);
draw_set_halign(fa_center);

// Continue CC //
if option_hover[0] = true then draw_set_color(c_red);
else draw_set_color(c_white);
if (o_cc_data.placenta_status == 4) draw_set_color(c_dkgray);
draw_text(189, 194, string(answer_event));

// Begin Game //
if option_hover[1] = true then draw_set_color(c_red);
else draw_set_color(c_white);
draw_text(189, 212, string(answer_party));

// Frames //
draw_sprite_ext(s_cc_placenta_frames, 0, 192, 208, 1, 1, 0, c_white, alpha_event);

// Debug //
/*draw_set_halign(fa_left);
draw_set_alpha(alpha_event);
for (i=0; i&lt;12; i+=1;)
    {
    if option_hover[i + 2] = true then draw_set_color(c_blue);
    else draw_set_color(c_white);
    draw_text(16, 16 + i * 16, option_test[i]);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
