<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Dont run the event after this for this character //
o_cc_data.event_finished_lottery = true;
Quest("playerCCLottery", 1); // Did lottery

// Phase setup //
phase[0] = 18;
phase[1] = 1;
phase[2] = 0;
phase[3] = 0;

// Phase skipping //
phase_skip_time = 0;
phase_skip_to = 0;
phase_skip = 0;

// Textbox setup //
textbox_written = "";
textbox_goal = "";
textbox_pause = 0;
textbox_position = 0;
textbox_skip = false;  

// Alpha setup //
alpha_textbox = 0;
alpha_textbox_goal = 0;
alpha_textbox_timer = 0;
alpha_event = 0;
alpha_event_goal = 0;

// Other shite //
o_cc_wizard.alpha_goal = 1;
timer_transition = 0;

option_hover[0] = false;
option_hover[1] = false;
option_hover[2] = false;
active = false;
ticket_y = 240;
goal_ticket_y = 240;

for (i=0; i&lt;10; i+=1;)
    {
    button_row[0, i] = false;
    button_row[1, i] = false;
    button_row[2, i] = false;
    mark[0, i] = false;
    mark[1, i] = false;
    mark[2, i] = false;
    mark_animation[0, i] = 0;
    mark_animation[1, i] = 0;
    mark_animation[2, i] = 0;
    }
    
text[0] = "Throughout the ages, mankind has used the art of#calculus to explore geometry, physics, astronomy,#theology, the cornerstones of modern society,#science and candy.";
text[1] = "Ever since the ancient Babylonians carved the#embryo of mathematical understanding onto the#Plimpton 322 tablet, humans have sought to divine#universal truth through numbers."; 
text[2] = "And indeed, numbers have revealed a great deal#about this existence. Let us see, " + string(o_cc_data.character_name) + ", what#the numbers will reveal about you.";
text[3] = "Uh, yes. Great numbers. I can tell you've certainly#got a lot of... vigor. Yes, the numbers you picked#display your vigor. You are an extremely vigorous#person, maybe the most vigorous."
text[4] = "That's what the numbers tell me. That's all they#say. Nothing else.";

// PAX //
o_cc_data.pax[21] = scr_cc_paxcode_convert(1);

/*
Prefix1 = 0
0 to 2  - Plus   - Minus  - Pound
3 to 8  - Random - Homing - Bounce - Curved - Firing - Linear
3 + 6 = 9 total

Prefix 2 = 1
0 to 2  - Top - Bottom     - Charm
3 to 7  - Bio - Cyber      - Mental     - Cosmic - Zauber
8 to 11 - HP  - Capability - Properties - Weight
3 + 5 + 4 = 12 total

Suffix = 2
0 to 2  - Up       - Down       - Strange
3 to 7  - Bio      - Cyber      - Mental  - Cosmic - Zauber
8 to 10 - Reactive - Aggressive - Passive
3 + 5 + 3 = 11 total

TOTAL GENES = 32 total
exclude these three:
pound
charm
strange
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Phases //
if phase[0] &gt; 0 then
    {
    // Tick down //
    phase[0] -= dt();
    
    // Event //
    if phase[0] &lt;= 0 then
        {
        // Introduction to hand scanner //
        if phase[1]&gt;= 1 and phase[1]&lt;= 3 then scr_cc_textbox(text[phase[1]- 1]);
        
        // Calculus test //
        if phase[1]= 4 then
            {
            active = true;
            goal_ticket_y = 0;
            alpha_event_goal = 1;
            }
            
        // End speech //
        if phase[1]&gt;= 5 and phase[1]&lt;= 6 then scr_cc_textbox(text[phase[1]- 2]);
        
        // End //
        if phase[1]= 7 then 
            {
            timer_transition = 15;
            phase[2] = 25;
            }
        }
    } 
    
// Active //
if active = true then
    {
    if ticket_y = goal_ticket_y then
        {
        // Accept button hover //
        option_hover[2] = scr_cc_button_xy(96, 160, 176, 192);
        
        // Hovers //
        for (i=0; i&lt;6; i+=1;)
            {
            button_row[0, i] = scr_cc_button_xy(100 + i * 32, 124 + i * 32, 80, 96);
            button_row[1, i] = scr_cc_button_xy(100 + i * 32, 124 + i * 32, 104, 120);
            button_row[2, i] = scr_cc_button_xy(100 + i * 32, 124 + i * 32, 128, 144);
            }
            
        // Pres button //
        if MiniKeyPress("action") then
            {
            // Mark numbers //
            for (i=0; i&lt;6; i+=1;)
                {
                if button_row[0, i] = true and mark[0, i] = false then 
                    {
                    mark[0, i] = true;
                    sound = choose(sn_cc_lottery_pen1, sn_cc_lottery_pen2, sn_cc_lottery_pen3);
                    Quest("playerCCLottery" + string(i), 1);
                    audio_play_sound_at_xy(sound, false, 10, 0, 0); 
                    }
                if button_row[1, i] = true and mark[1, i] = false then 
                    {
                    mark[1, i] = true; 
                    sound = choose(sn_cc_lottery_pen1, sn_cc_lottery_pen2, sn_cc_lottery_pen3);
                    Quest("playerCCLottery" + string(6 + i), 1);
                    audio_play_sound_at_xy(sound, false, 10, 0, 0); 
                    }
                if button_row[2, i] = true and mark[2, i] = false then 
                    {
                    mark[2, i] = true;
                    sound = choose(sn_cc_lottery_pen1, sn_cc_lottery_pen2, sn_cc_lottery_pen3);
                    Quest("playerCCLottery" + string(12 + i), 1);
                    audio_play_sound_at_xy(sound, false, 10, 0, 0); 
                    }
                }
                
            // Accept //
            if option_hover[2] = true then 
                {
                // Sound //
                audio_play_sound_at_xy(sn_cc_button_accept, false, 10, 0, 0);

                // Shyte //
                alpha_event_goal = 0;
                goal_ticket_y = 240;
                active = false;
                phase[0] = 15;
                phase[1] = 5;
                
                // Crest made character data //
                o_cc_data.character_lottery = true;
                }
            }
        }
    } 
    
// Ticket //
if ticket_y &lt; goal_ticket_y then ticket_y += 10;
if ticket_y &gt; goal_ticket_y then ticket_y -= 10;
    
for (i=0; i&lt;10; i+=1;)
    {
    if mark[0, i] = true and mark_animation[0, i] &lt; 3 then mark_animation[0, i] += 0.2;
    if mark[1, i] = true and mark_animation[1, i] &lt; 3 then mark_animation[1, i] += 0.2;
    if mark[2, i] = true and mark_animation[2, i] &lt; 3 then mark_animation[2, i] += 0.2;
    }

// Transition //
if timer_transition &gt; 0 then
    {
    // Tick down //
    timer_transition -= dt();
    
     // Event //
     if timer_transition &lt;= 0 then instance_create(0, 0, o_cc_transition);
     }

// End of this event //
if phase[2] &gt; 0 then
    {
    // Tick down //
    phase[2] -= dt();
    
    // End //
    if phase[2] &lt;= 0 then
        {
        with (o_cc_wizard) event_user(0);
        instance_destroy();
        }
    }
        
// Skip text with button //
scr_cc_textbox_skip();

// Type it //
scr_cc_textbox_type();

// Move to a next phase //
scr_cc_phase_skip_process();
    
// Alpha for Textboxes //
if alpha_textbox_timer &gt; 0 then alpha_textbox_timer -= dt();
else
    {
    if alpha_textbox &lt; alpha_textbox_goal then alpha_textbox += 0.1;
    if alpha_textbox &gt; alpha_textbox_goal then alpha_textbox -= 0.1;
    }

// Alpha for Events //
if alpha_event &lt; alpha_event_goal then alpha_event += 0.1;
if alpha_event &gt; alpha_event_goal then alpha_event -= 0.1;

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Dim the screen //
draw_set_color(c_black);
draw_set_alpha(alpha_event * 0.5);
draw_rectangle(-2, -2, 386, 242, false);

// Draw textboxes //
scr_cc_draw_textbox();

// Ticket //
draw_sprite_ext(s_cc_lottery_ticket, 0, 192, 120 - ticket_y, 1, 1, 0, c_white, 1);

// Marks //
for (i=0; i&lt;10; i+=1;)
    {
    if mark[0, i] = true then draw_sprite_ext(s_cc_lottery_mark, mark_animation[0, i], 112 + i * 32, 91 - ticket_y, 1, 1, 0, c_white, 1);
    if mark[1, i] = true then draw_sprite_ext(s_cc_lottery_mark, mark_animation[1, i], 112 + i * 32, 115 - ticket_y, 1, 1, 0, c_white, 1);
    if mark[2, i] = true then draw_sprite_ext(s_cc_lottery_mark, mark_animation[2, i], 112 + i * 32, 139 - ticket_y, 1, 1, 0, c_white, 1);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
