/// zauber_bio_coagulatedJello(command, caster, aim_x, aim_y, aim_z)

// ----- Zauber configurations -----

/* PIETY EFFECT: HP per wall = WALL_HP_BASE + WALL_HP_PIETY_MULT * piety */
// Jello wall HP base
var WALL_HP_BASE = 20;
// Jello wall HP piety multiplier
var WALL_HP_PIETY_MULT = 2;

// Number of walls (must be an odd number)
var WALL_COUNT = 5;
// Wall width in pixels
var WALL_WIDTH = 24;
// Wall height in pixels
var WALL_HEIGHT = 64;
// Wall duration
var WALL_DURATION = 300;

// ----- Input arguments -----
var command = argument0;
var caster = argument1;
var aim_x = argument2;
var aim_y = argument3;
var aim_z = argument4;

// ----- Commands -----
if (command == "element") return "BIO";
if (command == "name") return "COAGULATED JELLO";

if (command == "aim_decals") {
    // Place decals when aiming
    // TODO Should mark all wall positions
    scr_fx_decal_transient(s_zauberCasting_circle, 1, aim_x, aim_y, aim_z,
                           0.25, 0.25 * 0.7,
                           0, c_white, 0.5);
    scr_fx_decal_transient(s_zauberCasting_target, 1, aim_x, aim_y + 8, aim_z, 1, 1, 0, c_white, 1)
}

if (command == "cast") {
    // Cast the zauber! Do whatever you want here
    if (isCombatActor(caster)) {
        var cast_dir = point_direction(caster.x, caster.y, aim_x, aim_y);
        var cast_dist = max(point_distance(caster.x, caster.y, aim_x, aim_y), 24);
        var piety = scr_stats_getEffectiveStat(caster, STAT_BASE_PIETY);

        // TODO: Fail cast if diff between z and base_z is too great
        var cast_x = caster.x + lengthdir_x(cast_dist,cast_dir);
        var cast_y = caster.y + lengthdir_y(cast_dist,cast_dir);
        var cast_z = caster.z;
        
        var wall = instance_create(cast_x, cast_y, o_zauber_bio_coagulatedJello);
        wall.z = cast_z;
        wall.wall_dir = cast_dir;
        wall.wall_width = WALL_WIDTH;
        wall.wall_height = WALL_HEIGHT;
        wall.wall_duration = WALL_DURATION;
        scr_stats_setBaseStat(wall, STAT_BASE_HP, WALL_HP_BASE + WALL_HP_PIETY_MULT * piety);
        with wall scr_entity_setMovementCollisionShape_circle(WALL_WIDTH/2);
        
        var walls_cast = 1;
        var step = 1;
        var wall_cast_x, wall_cast_y;
        // TODO: Rework to be more arc shaped?
        while (walls_cast < WALL_COUNT) {
            wall_cast_x = cast_x + lengthdir_x(WALL_WIDTH * step, cast_dir + 90);
            wall_cast_y = cast_y + lengthdir_y(WALL_WIDTH * step, cast_dir + 90) * PERSPECTIVE_FACTOR;
            if (scr_collision_point_free(wall_cast_x, wall_cast_y, -999, COLLISION_NORMAL)) {
                wall = instance_create(wall_cast_x, wall_cast_y, o_zauber_bio_coagulatedJello);
                wall.z = cast_z;
                wall.wall_dir = cast_dir;
                wall.wall_width = WALL_WIDTH;
                wall.wall_height = WALL_HEIGHT;
                wall.wall_duration = WALL_DURATION;
                scr_stats_setBaseStat(wall, STAT_BASE_HP, WALL_HP_BASE + WALL_HP_PIETY_MULT * piety);
                with wall scr_entity_setMovementCollisionShape_circle(WALL_WIDTH/2);
            }
            
            wall_cast_x = cast_x + lengthdir_x(WALL_WIDTH * step, cast_dir - 90);
            wall_cast_y = cast_y + lengthdir_y(WALL_WIDTH * step, cast_dir - 90) * PERSPECTIVE_FACTOR;
            if (scr_collision_point_free(wall_cast_x, wall_cast_y, -999, COLLISION_NORMAL)) {
                wall = instance_create(wall_cast_x, wall_cast_y, o_zauber_bio_coagulatedJello);
                wall.z = cast_z;
                wall.wall_dir = cast_dir;
                wall.wall_width = WALL_WIDTH;
                wall.wall_height = WALL_HEIGHT;
                wall.wall_duration = WALL_DURATION;
                scr_stats_setBaseStat(wall, STAT_BASE_HP, WALL_HP_BASE + WALL_HP_PIETY_MULT * piety);
                with wall scr_entity_setMovementCollisionShape_circle(WALL_WIDTH/2);
            }
        
            walls_cast += 2;
            step++;
        }
    }
}