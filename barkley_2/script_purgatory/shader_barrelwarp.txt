//
// Simple passthrough vertex shader
//
attribute vec3 in_Position;                  // (x,y,z)
//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.
attribute vec4 in_Colour;                    // (r,g,b,a)
attribute vec2 in_TextureCoord;              // (u,v)

varying vec2 v_vTexcoord;
varying vec4 v_vColour;

void main()
{
    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);
    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;
    
    v_vColour = in_Colour;
    v_vTexcoord = in_TextureCoord;
}






//
// Simple passthrough fragment shader
//
varying vec2 v_vTexcoord;
varying vec4 v_vColour;

const float warpX = 1.0/18.0;
const float warpY = 1.0/12.0;

#define texX 512.0
#define texY 512.0

#define resX 290.0
#define resY 214.0

const vec2 scalePos = vec2(resX/texX, resY/texY);

vec2 Warp(vec2 pos) {
    pos = pos*2.0 - 1.0;    
    pos *= vec2(1.0+(pos.y*pos.y)*warpX,1.0+(pos.x*pos.x)*warpY);
    return pos * 0.5 + 0.5;
}

// TODO optimize
vec4 fetch(vec2 pos) {
    if (abs(pos.x-0.5) > 0.5 || abs(pos.y-0.5) > 0.5) {
        return vec4(0.0);
    } else {
        return texture2D( gm_BaseTexture,pos * scalePos);
    }
}

void main()
{
    gl_FragColor = v_vColour * fetch(Warp(v_vTexcoord));
}
