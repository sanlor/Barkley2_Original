<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sMenuUtility</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create
global.fn_1 = font_add_sprite(s_fn1, ord(" "), 1, -1); //was 0 spacing
global.fn_2 = font_add_sprite(s_fn2, ord(" "), 1, 0); //was 0 spacing
global.fn_2c = font_add_sprite(s_fn2, ord(" "), 1, -1);
global.fn_3 = font_add_sprite(s_fn3, ord("!"), 0, 1);
window_set_cursor(cr_none);
scr_deltatime_init();
fullscreen = 0;
global.controlType = "xbox";
scr_button_pressed("init"); //to prevent errors
alarm[0] = 30;


scr_pause_doPause();
o_curs.toggleCursor = false;
alphaBG = 0.5;

for (i = 0; i &lt; 900; i += 1)
{
    for (h = 0; h &lt; 10; h += 1) 
    {
        menuText[i, h] = "";
        menuClick[i, h] = 0; //if 1, it's only clickable
    }
    menuObject[i] = -999;
}
menuText[2000, 0] = "";
menuText[2001, 0] = "";
menuText[2220, 0] = "";

menu = 0; //active menu
menuSelect = 0;

//Menu top, appears before all
menuTopText[0] = ""; 
menuTopLink[0] = 0;
menuTopSelect[0] = 0;
menuTops = 0;

//Menu objects
menuObject[1] = o_menu_utility_status; menuState[1] = 0;
menuObject[8] = o_menu_utility_brain; menuState[8] = 0;
menuObject[80] = o_menu_utility_brain; menuState[80] = 1;
menuObject[81] = o_menu_utility_brain; menuState[81] = 2;
menuObject[9] = o_menu_utility_brain; menuState[9] = 0;

//0 MENU DEEP - First thing
menuID = 0;
menuText[menuID, 0] = "X114JAM9"; menuLink[menuID, 0] = 1; 
menuText[menuID, 1] = "L. Goose"; menuLink[menuID, 1] = 100; //Party
menuText[menuID, 2] = "Rittbomm"; menuLink[menuID, 2] = 100; //Party
menuText[menuID, 3] = "Cannibal"; menuLink[menuID, 3] = 100; //Party
menuText[menuID, 4] = "Unplug"; menuLink[menuID, 4] = 100; menuClick[menuID, 4] = 1;
menuText[menuID, 5] = "TEST"; menuLink[menuID, 5] = 100;
menuText[menuID, 6] = "TEST"; menuLink[menuID, 6] = 100;
menuText[menuID, 7] = "TEST"; menuLink[menuID, 7] = 100;
menuText[menuID, 8] = "TEST"; menuLink[menuID, 8] = 100;
menuText[menuID, 5] = ""; menuLink[menuID, 5] = 100;

//1 MENU DEEP - HOOPZ 
menuID = 1;
menuText[menuID, 0] = "Gun's"; menuLink[menuID, 0] = 2;
//menuText[menuID, 1] = "Status"; menuLink[menuID, 1] = 3;
menuText[menuID, 1] = "Items"; menuLink[menuID, 1] = 4;
menuText[menuID, 2] = "Equipment"; menuLink[menuID, 2] = 5;
menuText[menuID, 3] = "Zaubers"; menuLink[menuID, 3] = 6;
menuText[menuID, 4] = "DwarfNET"; menuLink[menuID, 4] = 7;
menuText[menuID, 5] = "Brain"; menuLink[menuID, 5] = 8; 

//1 MENU DEEP - ANY PARTY MEMBER
menuID = 100;
//menuText[menuID, 0] = "Status"; menuLink[menuID, 0] = 103;
menuText[menuID, 0] = "Items"; menuLink[menuID, 0] = 4;
menuText[menuID, 1] = "Equipment"; menuLink[menuID, 1] = 5;
menuText[menuID, 2] = "Zaubers"; menuLink[menuID, 2] = 6;
menuText[menuID, 3] = "Brain"; menuLink[menuID, 3] = 9;

//2 MENU DEEP - GUNS
menuID = 2;
menuText[menuID, 0] = "Bandolier"; menuLink[menuID, 0] = 20;
menuText[menuID, 1] = "Bag"; menuLink[menuID, 1] = 21;
menuText[menuID, 2] = "Smelt"; menuLink[menuID, 2] = 22;
menuText[menuID, 3] = "Reload"; menuLink[menuID, 3] = 23;
menuText[menuID, 4] = "Breed"; menuLink[menuID, 4] = 24;
menuText[menuID, 5] = "Print"; menuLink[menuID, 5] = 25;

//3 MENU DEEP - BANDOLIER
menuID = 20;
menuText[menuID, 0] = "Gun A"; menuLink[menuID, 0] = 200; //add var to specify
menuText[menuID, 1] = "Gun B"; menuLink[menuID, 1] = 200; //add var to specify
menuText[menuID, 2] = "Gun C"; menuLink[menuID, 2] = 200; //add var to specify
menuText[menuID, 3] = "Gun D"; menuLink[menuID, 3] = 200; //add var to specify
menuText[menuID, 4] = "Gun E"; menuLink[menuID, 4] = 200; //add var to specify

//4 MENU DEEP - GUN RENAME / SCAN
menuID = 200;
menuText[menuID, 0] = "Rename"; menuLink[menuID, 0] = 2000; menuClick[menuID, 0] = 1;
menuText[menuID, 1] = "Scan"; menuLink[menuID, 1] = 2001; menuClick[menuID, 1] = 1;

//3 MENU DEEP - BAG
menuID = 21;
//menuText[menuID, 0] = "Select"; menuLink[menuID, 0] = 210;
menuText[menuID, 0] = "Fave"; menuLink[menuID, 0] = 210; menuClick[menuID, 0] = 1;
menuText[menuID, 1] = "Scan"; menuLink[menuID, 1] = 211; menuClick[menuID, 1] = 1;
menuText[menuID, 2] = "Promote"; menuLink[menuID, 2] = 212; menuClick[menuID, 2] = 1;

//3 MENU DEEP - SMELT - LEFT TO SELECT
menuID = 22;
//menuText[menuID, 0] = "Select"; menuLink[menuID, 0] = 220;
menuText[menuID, 0] = "Current"; menuLink[menuID, 0] = 220;
menuText[menuID, 1] = "Empty"; menuLink[menuID, 1] = 222; //add var to specify
menuText[menuID, 2] = "Unfaves"; menuLink[menuID, 2] = 222; //add var to specify
menuText[menuID, 3] = "All"; menuLink[menuID, 3] = 222; //add var to specify

//4 MENU DEEP - SMELT CONFIRM
menuID = 222;
menuText[menuID, 0] = "Confirm"; menuLink[menuID, 0] = 2220; menuClick[menuID, 0] = 1;

//3 MENU DEEP - RELOAD - HOLD TO REFILL
menuID = 23;
menuText[menuID, 0] = "All"; menuLink[menuID, 0] = 230; menuClick[menuID, 0] = 1;
menuText[menuID, 1] = "Single"; menuLink[menuID, 1] = 230; menuClick[menuID, 1] = 1;

//2 MENU DEEP - STATUS
//menuID = 3;
//menuText[menuID, 0] = "HAS NONE"; menuLink[menuID, 0] = 30;

//2 MENU DEEP - ITEM
menuID = 4;
menuText[menuID, 0] = "HAS NONE"; menuLink[menuID, 0] = 40;

//2 MENU DEEP - EQUIPMENT
menuID = 5;
menuText[menuID, 0] = "Jerkins"; menuLink[menuID, 0] = 50;
menuText[menuID, 1] = "Helms"; menuLink[menuID, 1] = 51; //add var to specify
menuText[menuID, 2] = "Chips"; menuLink[menuID, 2] = 52;

//3 MENU DEEP - EQUIPMENT - EQUIP
menuText[50, 0] = "Equip"; menuLink[50, 0] = 500;
menuText[51, 0] = "Equip"; menuLink[51, 0] = 510;
menuText[52, 0] = "Equip"; menuLink[52, 0] = 520;

//2 MENU DEEP - ZAUBER
menuID = 6;
menuText[menuID, 0] = "W I P"; menuLink[menuID, 0] = 60;

//2 MENU DEEP - DWARFNET
menuID = 7;
menuText[menuID, 0] = "CONNECT"; menuLink[menuID, 0] = 70;

//2 MENU DEEP - BRAIN
menuID = 8;
menuText[menuID, 0] = "Level Up"; menuLink[menuID, 0] = 80; 
menuText[menuID, 1] = "Vidcons"; menuLink[menuID, 1] = 81;

//2 MENU DEEP - PARTY
menuID = 9;
menuText[menuID, 0] = "Vidcons"; menuLink[menuID, 0] = 81;

//3 MENU DEEP - LEVEL UP
menuID = 80;
menuText[menuID, 0] = "Guts"; menuLink[menuID, 0] = 800; menuClick[menuID, 0] = 1;
menuText[menuID, 1] = "Luck"; menuLink[menuID, 1] = 800; menuClick[menuID, 1] = 1;
menuText[menuID, 2] = "Acrobatic"; menuLink[menuID, 2] = 800; menuClick[menuID, 2] = 1;
menuText[menuID, 3] = "Might"; menuLink[menuID, 3] = 800; menuClick[menuID, 3] = 1;
menuText[menuID, 4] = "Piety"; menuLink[menuID, 4] = 800; menuClick[menuID, 4] = 1;
menuText[menuID, 5] = "Confirm"; menuLink[menuID, 5] = 800; menuClick[menuID, 5] = 1;

//3 MENU DEEP - VIDCON
//menuID = 81;
//menuText[menuID, 0] = "Page 1"; menuLink[menuID, 0] = 810; //add var to specify
//menuText[menuID, 1] = "Page 2"; menuLink[menuID, 1] = 810; //add var to specify
//menuText[menuID, 2] = "Page 3"; menuLink[menuID, 2] = 810; //add var to specify
//menuText[menuID, 3] = "Page 4"; menuLink[menuID, 3] = 810; //add var to specify

//STAT STUFF
//Specify sub image of sMenuUtilityFaces
partyFace[0] = 0;
partyFace[1] = 1;
partyFace[2] = 2;
partyFace[3] = 3;

partyName[0] = "X114JAM9";
partyName[1] = "L. Goose";
partyName[2] = "Rittbomm";
partyName[3] = "Brain Cannibal";

partyClass[0] = "Cyberpilgrim";
partyClass[1] = "Blind Swordsman";
partyClass[2] = "Warrior Poet";
partyClass[3] = "Juggler";

partyHP[0] = 50; partyHPMax[0] = 55;
partyHP[1] = 107; partyHPMax[1] = 107;
partyHP[2] = 30; partyHPMax[2] = 60;
partyHP[3] = 20; partyHPMax[3] = 30;

partyWeight[0] = 17; partyWeightMax[0] = 25;
partyWeight[1] = 33; partyWeightMax[1] = 40;
partyWeight[2] = 30; partyWeightMax[2] = 30;
partyWeight[3] = 20; partyWeightMax[3] = 30;

//COLORS
cTint = c_lime;
tint = 0.25;//0.25;
cHoopz = merge_color(c_lime, c_white, 1); //hoopz
alphaHoopz = 0.5;
alphaBG = 0.75;

tint = 0.25;
//cText = merge_color(c_white, cTint, tint);
cTextBG = merge_color(make_color_rgb(96, 96, 96), cTint, tint);
cTextActive = merge_color(make_color_rgb(252, 198, 19), cTint, tint);
cTextSelected = merge_color(make_color_rgb(252, 250, 125), cTint, tint);
cTextInactive = merge_color(make_color_rgb(32, 32, 32), cTint, tint); //42, 46, 40

//cText = merge_color(c_white, cTint, tint);
cTextBG = merge_color(make_color_rgb(96, 96, 96), cTint, tint);
cTextActive = merge_color(make_color_rgb(160, 255, 160), cTint, tint);
cTextSelected = merge_color(make_color_rgb(96, 224, 96), cTint, tint);
cTextInactive = merge_color(make_color_rgb(32, 32, 32), cTint, tint); //42, 46, 40

cText[0] = merge_color(make_color_rgb(192, 255, 192), cTint, tint);
cText[1] = merge_color(make_color_rgb(160, 192, 160), cTint, tint);
cText[2] = merge_color(make_color_rgb(128, 160, 128), cTint, tint);
cText[3] = merge_color(make_color_rgb(64, 64, 64), cTint, tint);
cText[4] = merge_color(make_color_rgb(32, 32, 32), cTint, tint);

cBG[0] = merge_color(make_color_rgb(192, 192, 192), cTint, tint); //active
cBG[1] = merge_color(make_color_rgb(128, 128, 128), cTint, tint); //can hilight
cBG[2] = merge_color(make_color_rgb(64, 64, 64), cTint, tint); //bg text
cBG[3] = merge_color(make_color_rgb(0, 0, 0), cTint, tint); //disable
//cBG[4] = merge_color(make_color_rgb(0, 0, 0), cTint, tint);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restore things
scr_pause_unPause();
o_curs.toggleCursor = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TEMP MENU
event_user(10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init button
scr_button_pressed("init");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cursor shift
if (global.controlType != "pc")
{
    o_curs.x = 384;
    o_curs.y = 240;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delta update + Controls
scr_deltatime_update();

if (menuText[menu, menuSelect] != "")
{
    if (scr_button_pressed("dpad up")) menuSelect -= 1;
    if (scr_button_pressed("dpad down")) menuSelect += 1;
}

//Wrap selection
if (menuSelect &lt; 0) 
{
    //menuSelect = 0; //Standard
    for (i = 0; i &lt; 10; i += 1) if (menuText[menu, i] == "") break;
    menuSelect = i - 1;
    if (menuSelect &lt; 0) menuSelect = 0; //For single choicers
}
if (menuText[menu, menuSelect] == "") 
{
    //menuSelect -= 1; //Standard
    menuSelect = 0;
}

//Confirm button
if (scr_button_pressed("a"))
{
    if (menu == 0 &amp;&amp; menuSelect == 4)
    {
        instance_destroy();
    }
    else if (menuText[menu, hover] != "")
    {
        if (menuClick[menu, hover] == 1)
        {
            //Button that has no subs
        }
        else
        {
            hover = menuSelect;
            menuTopText[menuTops] = menuText[menu, hover];
            menuTopLink[menuTops] = menu; //menuLink[menu, hover];
            menuTopSelect[menuTops] = hover;//menuSelect;
            menu = menuLink[menu, hover];
            menuSelect = 0;//menuTops;// + 1;
            menuTops += 1;
            event_user(10);
        }
    }
}

//Cancel button
if (scr_button_pressed("b"))
{
    if (menu == 0)
    {
        instance_destroy();
    }
    else
    {
        hover = menuTops - 1;
        menu = menuTopLink[hover];
        menuSelect = menuTopSelect[hover];
        menuTops = hover;
        //hover = menuSelect;
        event_user(10);
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create menus
with (o_menu_utility_sub) instance_destroy();
if (menuObject[menu] != -999)
{
    obj = instance_create(0, 0, menuObject[menu]);
    obj.state = menuState[menu];
    for (i = 0; i &lt; 4; i += 1)
    {
        obj.cBG[i] = cBG[i];
        obj.cText[i] = cText[i];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MENU 0 - Initial screen
scr_font(global.fn_2c, c_white, 0, 0);

dx = 15; dy = 16;
dw = 280; dh = 48;
for (i = 0; i &lt; 4 i += 1)
{
    draw_set_alpha(alphaBG);
    if (scr_mouse_pc(dx, dy, dx + dw, dy + dh)) draw_set_color(cBGHover);
    else draw_set_color(cBGInactive);
    if (menuSelect == i) draw_set_color(cBGActive);
    draw_rectangle(dx, dy, dx + dw, dy + dh, 0);
    draw_set_alpha(1);
    ddx = dx;
    ddy = dy;
    //draw_set_colour_write_enable(0, 1, 0, 1);
    draw_sprite_ext(sMenuUtilityFaces, partyFace[i], dx + 4, dy, 1, 1, 0, c_lime, 1);
    //draw_set_colour_write_enable(1, 1, 1, 1);
    ddx += 68; ddy += 2;//4;
    //draw_set_color(merge_color(c_blue, c_white, .66));
    draw_set_color(cText[1]);
    if (menuSelect == i) draw_set_color(cText[0]);
    draw_text(ddx, ddy, partyName[i]); 
    
    //CLASS
    //draw_set_color(c_white);
    draw_set_color(cText[2]);
    if (menuSelect == i) draw_set_color(cText[1]);
    draw_text(ddx + 90, ddy, partyClass[i]); 
    
    ddy += 12;
    ddy += 12;
    
    draw_set_color(cText[2]);
    if (menuSelect == i) draw_set_color(cText[1]);
    draw_text(ddx, ddy, "HP: " + string(partyHP[i]) + "/" + string(partyHPMax[i]));
    draw_set_color(cText[3]);
    if (menuSelect == i) draw_set_color(cText[2]);
    draw_text(ddx, ddy, "HP:"); ddy += 12;
    
    draw_set_color(cText[2]);
    if (menuSelect == i) draw_set_color(cText[1]);
    draw_text(ddx, ddy, "Weight: " + string(partyWeight[i]) + "/" + string(partyWeightMax[i]));
    draw_set_color(cText[3]);
    if (menuSelect == i) draw_set_color(cText[2]);
    draw_text(ddx, ddy, "Weight:"); ddy += 12;
    
    dy += dh + 4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
vx = view_xview[0];
vy = view_yview[0];

for (xx = 0; xx &lt; 384; xx += 80)
{
    for (yy = 0; yy &lt; 240; yy += 48)
    {
        draw_sprite(sMenuBG0, 0, vx + xx - 1, vy + yy);
    }
}

draw_sprite_ext(sMenuUtility, 0, vx, vy, image_xscale, image_yscale, 0, image_blend, image_alpha);

//313, 31
dx = 312; //313;
dy = 12; //31;
dw = 56 + 3;
dh = 24;
spc = 24;
hover = -1;
scr_font(global.fn_1, c_white, 1, 1);

//TOPS
for (i = 0; i &lt; menuTops; i += 1)
{
    if (scr_mouse_pc(dx, dy, dx + dw, dy + dh - 1)) hover = i;
    if (hover == i) draw_set_color(cBGActive); //Hover);
    else draw_set_color(cBGInactive);
    draw_set_alpha(alphaBG);
    draw_rectangle(dx, dy, dx + dw, dy + dh - 1, 0);
    draw_set_alpha(1);
    if (hover == i) draw_set_color(cText[2]);
    else draw_set_color(cText[3]);
    draw_text(dx + round(dw / 2), dy + (dh / 2), menuTopText[i]);
    dy += dh;
}
//doKill = 0;
if (hover != -1)
{
    if (scr_mouse(mb_left))
    {
        mouse_clear(mb_left);
        //menuTopText[menuTops] = menuText[menu, hover];
        //menuTopLink[menuTops] = menuLink[menu, hover];
        //doKill = 1;
        menu = menuTopLink[hover];
        menuSelect = menuTopSelect[hover];
        menuTops = hover;
        //hover = menuSelect;
        //alarm[1] = 1; 
        event_user(10);
    }
}

//CURRENT
hover = -1;
if (global.controlType != "pc") hover = menuSelect;
for (i = 0; menuText[menu, i] != ""; i += 1)
{
    if (scr_mouse_pc(dx, dy, dx + dw, dy + dh - 1)) hover = i;
    if (hover == i) draw_set_color(cBGActive); //Hover);
    else draw_set_color(cBGInactive);
    draw_set_alpha(alphaBG);
    draw_rectangle(dx, dy, dx + dw, dy + dh - 1, 0);
    draw_set_alpha(1);
    if (hover == i) draw_set_color(cText[1]);
    else draw_set_color(cText[2]);
    draw_text(dx + round(dw / 2), dy + (dh / 2), menuText[menu, i]);
    dy += dh;
}

if (menu == 0) event_user(menu); //Just initial menu

//debug
if (true)
{
    //scr_font(global.fn_1, c_white, 0, 0);
    //draw_text(view_xview[0] + 5, view_yview[0] + 5, "MENU = " + string(menu));
}

if (hover != -1)
{
    if (scr_mouse(mb_left))
    {
        mouse_clear(mb_left);
        if (menuText[menu, hover] != "")
        {
            if (menuClick[menu, hover] == 1)
            {
                //Button that has no subs
            }
            else
            {
                menuTopText[menuTops] = menuText[menu, hover];
                menuTopLink[menuTops] = menu; //menuLink[menu, hover];
                menuTopSelect[menuTops] = hover;//menuSelect;
                menu = menuLink[menu, hover];
                menuSelect = menuTops + 1;
                //with (o_menu_utility_sub) instance_destroy();
                menuTops += 1;
                //alarm[1] = 1; //takes over event 10
                event_user(10);
            }
        }
    }
}
//if (doKill == 1) with (o_menu_utility_sub) instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Full
fullscreen = !fullscreen;
window_set_fullscreen(fullscreen);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>192,192</point>
  </PhysicsShapePoints>
</object>
