<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oEffectDraw</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create 4
dir = 45;
dirAdd = 90;
len = 32;
for (i = 0; i &lt; 4; i += 1)
{
    hit[i] = 5;
    x0[i] = x;
    y0[i] = y;
    x1[i] = x + lengthdir_x(len, dir);
    y1[i] = y + lengthdir_y(len, dir);
    x2[i] = x + lengthdir_x(len, dir + dirAdd);
    y2[i] = y + lengthdir_y(len, dir + dirAdd);
    dir += dirAdd;
}

cou = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step
bars = 0;
barq = 0;
for (i = 0; i &lt; 4; i += 1)
{
    if (hit[i] &gt; 0)
    {
        bars += 1;
        barq += hit[i];
        global.tx0 = x0[i];
        global.ty0 = y0[i];
        global.tx1 = x1[i];
        global.ty1 = y1[i];
        global.tx2 = x2[i];
        global.ty2 = y2[i];
        global.tObj = id;
        global.tInd = i;
        with (o_bullet_test)
        {
            if (global.tObj.hit[global.tInd] == 0) break;
            if (scr_collision_tri(x, y, global.tx0, global.ty0, global.tx1, global.ty1, global.tx2, global.ty2))
            {
                global.tObj.hit[global.tInd] -= 1;
                instance_create(x, y, o_bullet_spark);
                instance_destroy();
            }
        }
    }
}

o_hoopz_hilight.image_blend = c_aqua;
if (bars == 0) o_hoopz_hilight.image_alpha = 0; else o_hoopz_hilight.image_alpha = 0.1;
o_hoopz_hilight.image_alpha += (0.3 / 16) * barq; //4 / 10
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw
cou += 1;
if (cou &gt; 120)
{
    for (i = 0; i &lt; 4; i += 1) hit[i] = max(hit[i] - 1, 0);
    bars = 0;
    for (i = 0; i &lt; 4; i += 1) if (hit[i] &gt; 0) bars += 1;
    if (bars == 0) instance_destroy();
    cou = 0;
}// * 8) instance_destroy();

draw_set_blend_mode(bm_add);


for (i = 0; i &lt; 4; i += 1)
{
    //draw_triangle(x0[i], y0[i], x1[i], y1[i], x2[i], y2[i]
    col = merge_color(c_aqua, c_black, 0.5); //was 0.8
    alp = (0.6 + random(0.1)) * (hit[i] / 5);
    draw_primitive_begin(pr_trianglefan);
    draw_vertex_colour(x0[i], y0[i], col, 0);
    draw_vertex_colour(x1[i], y1[i], col, alp);
    draw_vertex_colour(x2[i], y2[i], col, alp);
    draw_primitive_end();
    
    col = merge_color(c_aqua, c_black, 0.8 - (hit[i] / 50));
    alp = (0.8 + random(0.1)) * (hit[i] / 5);
    draw_set_alpha(alp);
    draw_set_color(col);
    draw_line_width(x1[i], y1[i], x2[i], y2[i], 5);
    draw_line_width(x1[i], y1[i], x2[i], y2[i], 3);
    draw_line_width(x1[i], y1[i], x2[i], y2[i], 1);
}
draw_set_blend_mode(bm_normal);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
