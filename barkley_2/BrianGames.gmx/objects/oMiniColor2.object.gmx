<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//TEXT
textTitle = choose("MAKE A COPY OF THE SINE WAVE");
textRight = choose("GOOD EYE!");
textWrong = choose("NOT EVEN CLOSE!");
textTop = textTitle;

//Window size
window_set_size(global.miniWidthS, global.miniHeightS);
window_center();

cRed = make_color_rgb(255 - 16, 16, 16);
cGreen = make_color_rgb(16, 255 - 16, 16);
cBlue = make_color_rgb(16, 16, 255 - 16);

cYellow = make_color_rgb(255 - 16, 255 - 16, 16); //orange
cFuchsia = make_color_rgb(255 - 16, 16, 255 - 16);
cAqua = make_color_rgb(16, 255 - 16, 255 - 16);

col[0] = cRed;
col[1] = cGreen;
col[2] = cBlue;
col[3] = cYellow;
col[4] = cFuchsia;
col[5] = cAqua;

c0 = floor(random(6));
color[0] = col[c0];
c1 = c0;
while (c1 == c0) c1 = floor(random(6));
color[1] = col[c1];

select = 0;
selectMax = 2;
confirm = 0;
state = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select a shape
if (state == 0)
{
    if (keyboard_check(vk_left))
    {
        markerX -= dt() * 3;
    }
    if (keyboard_check(vk_right))
    {
        markerX += dt() * 3;
    }
    if (keyboard_check(vk_up))
    {
        markerY -= dt() * 3;
    }
    if (keyboard_check(vk_down))
    {
        markerY += dt() * 3;
    }
    //markerX = clamp(markerX, global.miniWidth * .2, global.miniWidth * .8);
    //markerY = clamp(markerY, global.miniHeight * .2, global.miniHeight * .8);
    if (keyboard_check(vk_enter))
    {
        keyboard_clear(vk_enter);
        chomp = 1;
        
        while (false) //old thing not used 
        {
            i = floor(random(hays));
            if (point_distance(hayX[i], hayY[i], markerX * global.miniScale, markerY * global.miniScale) &gt; (75 * global.miniScale)) 
            { 
                needle = i; 
                break; 
            }
        }
    }
}

if (state == 1)
{
    for (i = 0; i &lt; hays; i += 1)
    {
        hayX[i] += lengthdir_x(haySpd[i] * dt(), hayDir[i]) * global.miniScale;
        hayY[i] += lengthdir_y(haySpd[i] * dt(), hayDir[i]) * global.miniScale;
    }
    //room_goto(rMiniSelect);
    needleCou+= dt();
    if (needleCou &gt; 20) 
    {
        //textTop = textWrong; audio_play_sound(mMiniWrong, 10, 0);
        if (position_meeting(markerX * global.miniScale, markerY * global.miniScale, id)) { textTop = textRight; audio_play_sound(mMiniRight, 10, 0); }
        else { textTop = textWrong; audio_play_sound(mMiniWrong, 10, 0); }
        chomp = 2;
    }
}

if (state == 2)
{
    if (keyboard_check(vk_enter))
    {
        keyboard_clear(vk_enter);
        room_goto(rMiniSelect);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
dx = global.miniWidthS / 2; 
dy = global.miniHeightS / 2;
ds = global.miniScale;

//Border and text
draw_set_color(cBlue);
draw_rectangle(0, 0, global.miniWidthS, 17 * global.miniScale, 0);

draw_set_color(c_white);
draw_set_font(CourierNew12);
draw_set_halign(1);
draw_text_transformed(global.miniWidthS / 2, (0 * global.miniScale), textTop, global.miniScale, global.miniScale, 0);
draw_set_halign(0);

//DRAW WAVE
dx2 = mouse_x;
dy2 = mouse_y;
draw_sprite_ext(sMiniColor, 0, dx2, dy2, 16 * global.miniScale, 16 * global.miniScale, 0, color[1], 1);
draw_sprite_ext(sMiniColor, 0, dx, dy, 16 * global.miniScale, 16 * global.miniScale, 0, color[0], 1);
draw_sprite_ext(sMiniColor, 0, dx2, dy2, 16 * global.miniScale, 16 * global.miniScale, 0, color[1], .5);



exit;

if (needle != -1) draw_sprite_ext(sMiniNeedleHay, 4, hayXO[needle], hayYO[needle], global.miniScale, global.miniScale, hayRot[needle], c_white, 1);
for (i = 0; i &lt; hays; i += 1)
{
    draw_sprite_ext(sMiniNeedleHay, haySub[i], hayX[i], hayY[i], global.miniScale, global.miniScale, hayRot[i], c_white, 1);
}

draw_sprite_ext(sMiniNeedleMarker, 0, markerX * global.miniScale, markerY * global.miniScale, global.miniScale, global.miniScale, 0, c_white, 1);
draw_sprite_ext(sMiniNeedleMarker, 1, markerX * global.miniScale, markerY * global.miniScale, global.miniScale, global.miniScale, 0, cRed, 1);

//if (keyboard_check(vk_shift)) draw_sprite_ext(sMiniNeedleHay, 4, hayXO[needle], hayYO[needle], global.miniScale, global.miniScale, hayRot[needle], c_white, 1);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///restart
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>3,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
