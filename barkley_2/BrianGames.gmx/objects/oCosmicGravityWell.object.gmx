<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oEffectDraw</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
depth = -(y + 48);
orbs = 32; //8;
cou0 = 0;
cou1 = 60 * 7.5;//10;
//alarm[0] = 60 * 10;
kill = 0;
decay = 1;

audio_play_sound(sn_zauber_gravitywell, 100, 1);
audio_sound_gain(sn_zauber_gravitywell, 1, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step
oEffectCosmic.flashCol = merge_color(c_black, global.cosmicColor, scl / 24);

cou0 += 1 * dts();
cou1 -= 1 * dts();
if (cou1 &lt;= 0) 
{
    if (kill == 0) audio_sound_gain(sn_zauber_gravitywell, 0, 1000);
    kill = 1;
}
while (cou0 &gt; 2 &amp;&amp; kill == 0)
{
    cou0 -= 3;
    var obj;
    obj = instance_create(x, y, oCosmicGravityWell1);
    obj.dad = id;
    obj.depth = depth + 1;
    obj.master = id;
}

if (kill == 1) decay = max(0, decay - ((1.0 / 60) * dts()));

if (decay == 0)
{
    audio_stop_sound(sn_zauber_gravitywell);
    instance_destroy();
}

//suck in enemies based on size
global.tx = x;
global.ty = y;
global.tradius = mean(6, scl) * 16;
with (o_enemy_test)
{
    pushDis = point_distance(global.tx, global.ty, x, y)
    pushDir = point_direction(x, y, global.tx, global.ty);
    if (pushDis &lt; global.tradius)
    {
        pushDis = (abs(pushDis - global.tradius) / global.tradius) * 0.2;
        xstart += lengthdir_x(pushDis, pushDir);
        ystart += lengthdir_y(pushDis, pushDir);
        x = xstart;
        y = ystart;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw
px = (1.0 / 128);
prt = ceil(orbs / 32);


if (global.cosmicMode == 0) { spr = sCosmicBlack128; sub = 0; alp = 0.0001; col2 = c_white; }
else { spr = s_skylight_1; sub = 1; alp = .5; col2 = c_black; }

if (global.cosmicMode == 0) draw_set_blend_mode(bm_subtract);
global.tObj = id;
with (oCosmicGravityWell1) { if (dad == global.tObj) event_user(1); }
draw_set_blend_mode(bm_normal);
if (global.cosmicMode == 1) draw_set_colour_write_enable(1, 1, 1, 0);

scl = (orbs * .33) * decay;// + random(orbs * 16);

//Draw 100% black bg
//if (global.cosmicMode == 0) draw_set_blend_mode(bm_subtract);
if (true)
{
//col = c_white;//black;
//xs = scl / 3 + random(scl / 6);
//ys = scl / 3 + random(scl / 6);
//draw_sprite_ext(sprite62, 1, x, y, px * xs, px * ys, random(360), col, 1);
//draw_set_color(c_dkgray);
//draw_circle(x, y, scl / 5, 0);
draw_set_color(c_black);
draw_circle(x, y, scl / 6, 0);
//draw_set_alpha(0.2); draw_circle(x, y, scl, 0);
//draw_set_alpha(0.4); draw_circle(x, y, scl / 2, 0);
//draw_set_alpha(0.6); draw_circle(x, y, scl / 3, 0);
//draw_set_alpha(0.8); draw_circle(x, y, scl / 4, 0);
draw_set_alpha(1);

}
//Draws 100% black bg

if (global.cosmicMode == 0) draw_set_blend_mode(bm_subtract);
for (i = 0; i &lt; prt; i += 1)
{
    col = merge_color(global.cosmicColor, col2, 0.25 + random(0.25));
    col = global.cosmicColor;
    xs = scl + random(scl / 1);
    ys = scl + random(scl / 1);
    dx = x + lengthdir_x(random(scl / 6), random(360));
    dy = y + lengthdir_y(random(scl / 6), random(360));
    draw_sprite_ext(spr, sub, dx, dy, px * xs, px * ys, random(360), col, alp);
}
scl = scl * .66;
for (i = 0; i &lt; prt; i += 1)
{
    col = merge_color(global.cosmicColor, col2, 0.5 + random(0.25));
    xs = scl + random(scl / 1);
    ys = scl + random(scl / 1);
    dx = x + lengthdir_x(random(scl / 4), random(360));
    dy = y + lengthdir_y(random(scl / 4), random(360));
    draw_sprite_ext(spr, sub, dx, dy, px * xs, px * ys, random(360), col, alp);
}
scl = scl * .33;
//draw_set_blend_mode(bm_subtract);
for (i = 0; i &lt; prt; i += 1)
{
    //col = merge_color(global.cosmicColor, col2, 0.75 + random(0.25));
    col = merge_color(global.cosmicColor, col2, 0.9 + random(0.1));
    //col = c_white;
    xs = scl + random(scl / 1);
    ys = scl + random(scl / 1);
    dx = x + lengthdir_x(random(scl / 2), random(360));
    dy = y + lengthdir_y(random(scl / 2), random(360));
    draw_sprite_ext(spr, sub, dx, dy, px * xs, px * ys, random(360), col, alp);
}



//Draw 100% black bg
draw_set_colour_write_enable(1, 1, 1, 1);
draw_set_blend_mode(bm_normal);
if (false)
{
//col = c_black; //c_white;//black;
//xs = scl / 1 + random(scl / 4);
//ys = scl / 1 + random(scl / 4);
//draw_sprite_ext(sprite64, 0, x, y, px * xs, px * ys, random(360), col, 1);
draw_set_color(c_black);
draw_set_alpha(1);
draw_circle(x, y, scl, 0);
draw_set_alpha(1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
