<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sMiniNeedleHay</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2600000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Needle is sprite for collision check
//TEXT
textTitle = choose("FIND THE NEEDLE");
textRight = choose("GOOD EYE!");
textWrong = choose("NOT EVEN CLOSE!");
textTop = textTitle;

cRed = make_color_rgb(255 - 16, 16, 16);
cYellow = make_color_rgb(255 - 16, 255 - 16, 16);
cBlue = make_color_rgb(16, 16, 255 - 16);

select = 0;
selectMax = 2;
confirm = 0;
chomp = 0;

hays = 250;
needle = -1;
needleCou = 0;
for (i = 0; i &lt; hays; i += 1)
{
    hayX[i] = ((global.miniWidth / 2) - 70 + floor(random(140))) * global.miniScale;
    hayY[i] = ((global.miniHeight / 2) - 50 + floor(random(100))) * global.miniScale;
    hayXO[i] = hayX[i];
    hayYO[i] = hayY[i];
    hayRot[i] = random(360);
    haySub[i] = floor(random(4));
    haySpd[i] = 10 + random(5);
    hayDir[i] = point_direction(global.miniWidthS / 2, global.miniHeightS / 2, hayX[i], hayY[i]);
}
needle = floor(random(hays)); image_single = 4; x = hayX[needle]; y = hayY[needle]; image_angle = hayRot[needle];
image_xscale = global.miniScale; image_yscale = global.miniScale;

markerX = global.miniWidth / 2;
markerY = floor(global.miniHeight / 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select a shape
if (MiniKeyPress("cancel")) { Minigame("stop"); instance_destroy(); }

if (chomp == 0)
{
    if (MiniKeyHeld("left"))
    {
        markerX -= dt() * 3;
    }
    if (MiniKeyHeld("right"))
    {
        markerX += dt() * 3;
    }
    if (MiniKeyHeld("up"))
    {
        markerY -= dt() * 3;
    }
    if (MiniKeyHeld("down"))
    {
        markerY += dt() * 3;
    }
    markerX = clamp(markerX, global.miniWidth * .2, global.miniWidth * .8);
    markerY = clamp(markerY, global.miniHeight * .2, global.miniHeight * .8);
    if (MiniKeyPress("action"))
    {
        chomp = 1;
        
        while (false) //old thing not used 
        {
            i = floor(random(hays));
            if (point_distance(hayX[i], hayY[i], markerX * global.miniScale, markerY * global.miniScale) &gt; (75 * global.miniScale)) 
            { 
                needle = i; 
                break; 
            }
        }
    }
}

if (chomp == 1)
{
    for (i = 0; i &lt; hays; i += 1)
    {
        hayX[i] += lengthdir_x(haySpd[i] * dt(), hayDir[i]) * global.miniScale;
        hayY[i] += lengthdir_y(haySpd[i] * dt(), hayDir[i]) * global.miniScale;
    }
    //room_goto(rMiniSelect);
    needleCou+= dt();
    if (needleCou &gt; 20) 
    {
        //textTop = textWrong; audio_play_sound(mMiniWrong, 10, 0);
        if (position_meeting(markerX * global.miniScale, markerY * global.miniScale, id)) { textTop = textRight; audio_play_sound(mMiniRight, 10, 0); }
        else { textTop = textWrong; audio_play_sound(mMiniWrong, 10, 0); }
        chomp = 2;
    }
}

if (chomp == 2)
{
    if (MiniKeyPress("action"))
    {
        //room_goto(rMiniSelect);
        instance_destroy();
        instance_create(0, 0, oMini10Select);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
ds = global.miniScale;

if (needle != -1) draw_sprite_ext(sMiniNeedleHay, 4, global.miniX + hayXO[needle], global.miniY + hayYO[needle], global.miniScale, global.miniScale, hayRot[needle], c_white, 1);
for (i = 0; i &lt; hays; i += 1)
{
    draw_sprite_ext(sMiniNeedleHay, haySub[i], global.miniX + hayX[i], global.miniY + hayY[i], global.miniScale, global.miniScale, hayRot[i], c_white, 1);
}

draw_sprite_ext(sMiniNeedleMarker, 0, global.miniX + (markerX * global.miniScale), global.miniY + (markerY * global.miniScale), global.miniScale, global.miniScale, 0, c_white, 1);
draw_sprite_ext(sMiniNeedleMarker, 1, global.miniX + (markerX * global.miniScale), global.miniY + (markerY * global.miniScale), global.miniScale, global.miniScale, 0, cRed, 1);

//if (keyboard_check(vk_shift)) draw_sprite_ext(sMiniNeedleHay, 4, hayXO[needle], hayYO[needle], global.miniScale, global.miniScale, hayRot[needle], c_white, 1);

//Border and text
draw_set_color(cBlue);
draw_rectangle(global.miniX, global.miniY, global.miniX + global.miniWidthS, global.miniY + (17 * global.miniScale), 0);

draw_set_color(c_white);
draw_set_font(CourierNew12);
draw_set_halign(1);
draw_text_transformed(global.miniX + (global.miniWidthS / 2), global.miniY + (0 * global.miniScale), textTop, global.miniScale, global.miniScale, 0);
draw_set_halign(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>3,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
