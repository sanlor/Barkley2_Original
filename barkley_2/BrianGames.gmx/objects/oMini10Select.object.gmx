<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2600000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Text
textCopyright = " --- WELCOME TO THE ULTIMATE VIDCON COLLECTION --- COMING SOON... SHAPE ESCAPE --- SPECIAL THANKS TO THE 'GOOD BREW BOYS' --- COPYRIGHT P'TONY DATAWORKS";
textCopyrightLength = string_length(textCopyright);
textCopyright = string_repeat(textCopyright, 2);
textCopyrightPos = 1;
textCopyrightPosLast = 1;
games = 0;
for (i = 0; i &lt; 10; i += 1) games += global.miniPlayed[i];
if (games &lt; 10) textTitle = "P'TONY'S 10-IN-1";
else textTitle = "P'TONY'S 11-IN-1";
textHalve = "";
for (i = 0; i &lt; string_length(textTitle); i += 1)
{
    if (random(100) &lt; 50) textHalve += string_copy(textTitle, 1 + i, 1);
    else textHalve += " ";
}

audio_master_gain(1);
audio_stop_all();
audio_play_sound(mus_10in1, 10, 1);

///Populate games
ballXMin = global.miniWidth / 2;
ballXMax = global.miniWidth;
ballYMin = 40;
ballYMax = global.miniHeight - 17;
ballLines = 5;
ballBlurs = (ballLines * 2) * 5;
ballBlurIndex = 0;
for (i = 0; i &lt; ballBlurs; i += 1) { ballBlurX[i] = -999; ballBlurY[i] = -999; }
for (i = 0; i &lt; ballLines * 2; i += 1)
{
    ballX[i] = ballXMin + random(ballXMax - ballXMin);
    ballY[i] = ballYMin + random(ballYMax - ballYMin);
    ballDir[i] = random(360);
    ballSpd[i] = 2 + random(1);
}

cRed = make_color_rgb(255 - 16, 16, 16);
cYellow = make_color_rgb(255 - 16, 255 - 16, 16);
cBlue = make_color_rgb(16, 16, 255 - 16);

//Ball colors
col[0] = cRed;
col[1] = cBlue;
col[2] = cYellow;
for (i = 0; i &lt; ballLines; i += 1) col[i] = cYellow;

listX = 1 * global.miniScale;
listY = 42 * global.miniScale; //was 40
listWidth = global.miniWidthS / 2;
i = 0;
gameName[i] = "Shape P. I.";
gameObject[i] = oMini10Shape;
i += 1;
gameName[i] = "Magic Mystic";
gameObject[i] = oMini10Magic;
i += 1;
gameName[i] = "Guess The Scoop";
gameObject[i] = oMini10Scoop;
i += 1;
gameName[i] = "Number Roulette"; //"Pick 1-to-10";
gameObject[i] = oMini10Number;
i += 1;
gameName[i] = "Razor Fruit";
gameObject[i] = oMini10Fruit;
i += 1;
gameName[i] = "Flim Flam Scam";
gameObject[i] = oMini10Flim;
i += 1;
gameName[i] = "Lotto Bonus";
gameObject[i] = oMini10Lotto;
i += 1;
gameName[i] = "Egg Or Rock";
gameObject[i] = oMini10Egg;
i += 1;
gameName[i] = "Needle Hunter";
gameObject[i] = oMini10Needle;
i += 1;
gameName[i] = "War On Color";
gameObject[i] = oMini10Color;
i += 1;
if (games &gt;= 10)
{
    gameName[i] = "Tip Calculator";
    gameObject[i] = oMini10Tip;
    i += 1;
}
gameTotal = i;
for (i = 0; i &lt; gameTotal; i += 1) gameName[i] = string_upper(gameName[i]);
gameSelect = global.miniLast;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select game
if (MiniKeyPress("cancel")) { audio_stop_sound(mus_10in1); Minigame("stop"); instance_destroy(); }

textCopyrightPos += dt() / 2;
if (floor(textCopyrightPos) != textCopyrightPosLast)
{
    textCopyrightPosLast = floor(textCopyrightPos);
    textHalve = "";
    for (i = 0; i &lt; string_length(textTitle); i += 1)
    {
        if (random(100) &lt; 50) textHalve += string_copy(textTitle, 1 + i, 1);
        else textHalve += " ";
    }
}
//if (keyboard_check(vk_space)) { keyboard_clear(vk_space); textCopyrightPos += 1; }
if (textCopyrightPos &gt; textCopyrightLength) 
{
    textCopyrightPos -= textCopyrightLength - 1;
}

if (MiniKeyPress("up"))
{
    gameSelect -= 1;
    if (gameSelect &lt; 0) gameSelect = gameTotal - 1;
}
if (MiniKeyPress("down"))
{
    gameSelect += 1;
    if (gameSelect &gt;= gameTotal) gameSelect = 0;
}
if (MiniKeyPress("action"))
{
    global.miniLast = gameSelect;
    global.miniPlayed[gameSelect] = 1;
    //room_goto(gameRoom[gameSelect]);
    audio_stop_sound(mus_10in1);
    instance_destroy();
    instance_create(0, 0, gameObject[gameSelect]);
}

for (i = 0; i &lt; ballLines * 2; i += 1)
{
    ballX[i] += lengthdir_x(((ballSpd[i] * 60) / 10) * dt(), ballDir[i]);
    ballY[i] += lengthdir_y(((ballSpd[i] * 60) / 10) * dt(), ballDir[i]);
    //X PLANE
    xx = lengthdir_x(1, ballDir[i]); yy = lengthdir_y(1, ballDir[i]);
    if (ballX[i] &gt; ballXMax) { ballX[i] = ballXMax; ballDir[i] = point_direction(0, 0, -xx, yy); }
    xx = lengthdir_x(1, ballDir[i]); yy = lengthdir_y(1, ballDir[i]);
    if (ballX[i] &lt; ballXMin) { ballX[i] = ballXMin; ballDir[i] = point_direction(0, 0, -xx, yy); }
    //Y PLANE
    xx = lengthdir_x(1, ballDir[i]); yy = lengthdir_y(1, ballDir[i]);
    if (ballY[i] &gt; ballYMax) { ballY[i] = ballYMax; ballDir[i] = point_direction(0, 0, xx, -yy); }
    xx = lengthdir_x(1, ballDir[i]); yy = lengthdir_y(1, ballDir[i]);
    if (ballY[i] &lt; ballYMin) { ballY[i] = ballYMin; ballDir[i] = point_direction(0, 0, xx, -yy); }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw games
ds = global.miniScale;

//Balls
for (i = 0; i &lt; ballBlurs; i += 2) 
{ 
    if (ballBlurX[i] != -999)
    {
        draw_set_color(ballBlurColor[i]);
        draw_line_width(global.miniX + ballBlurX[i], global.miniY + ballBlurY[i], global.miniX + ballBlurX[i + 1], global.miniY + ballBlurY[i + 1], ds);
    }
}
for (i = 0; i &lt; ballLines * 2; i += 2)
{
    //draw_sprite(sMiniDanmakuShip, 0, ballX[0], ballY[0]);
    draw_set_color(col[i / 2]);
    dx0 = floor(ballX[i]) * ds; dy0 = floor(ballY[i]) * ds;
    dx1 = floor(ballX[i + 1]) * ds; dy1 = floor(ballY[i + 1]) * ds;
    draw_line_width(global.miniX + dx0, global.miniY + dy0, global.miniX + dx1, global.miniY + dy1, ds);
    
    ballBlurColor[ballBlurIndex] = col[i / 2];
    ballBlurX[ballBlurIndex] = dx0;
    ballBlurY[ballBlurIndex] = dy0;
    ballBlurX[ballBlurIndex + 1] = dx1;
    ballBlurY[ballBlurIndex + 1] = dy1;
    
    ballBlurIndex += 2;
    if (ballBlurIndex + 1 &gt;= ballBlurs) ballBlurIndex -= ballBlurs;
}

//Top title
draw_set_color(cBlue);
draw_rectangle(global.miniX, global.miniY, global.miniX + global.miniWidthS, global.miniY + (40 * ds), 0);
scr_font(CourierNew24b, c_white, 1, 1);
draw_text_transformed(global.miniX + (global.miniWidthS / 2), global.miniY + (20 + 2) * ds, textTitle, ds, ds, 0);
draw_set_color(cRed);
draw_text_transformed(global.miniX + (global.miniWidthS / 2), global.miniY + (20 + 2) * ds, textHalve, ds, ds, 0);
scr_font(CourierNew12, c_white, 0, 0);

//Game list
dx = listX;
dy = listY;
draw_set_font(CourierNew12);
for (i = 0; i &lt; gameTotal; i += 1)
{
    draw_set_color(c_white);
    if (gameSelect == i) 
    {
        draw_set_color(cRed);
        //draw_rectangle(dx, dy, dx + listWidth, dy + (16 * global.miniScale), 0);
    }
    
    draw_text_transformed(global.miniX + dx, global.miniY + dy, NumberFormat(i + 1) + "= " + gameName[i], ds, ds, 0);
    dy += 16 * global.miniScale;
}

//Copyright scroller
draw_set_color(cBlue);
draw_rectangle(global.miniX, global.miniY + (global.miniHeightS - (17 * ds)), global.miniX + global.miniWidthS, global.miniY + global.miniHeightS, 0);
scr_font(CourierNew12, c_white, 1);
draw_text_transformed(global.miniX + (global.miniWidthS / 2), global.miniY + (global.miniHeightS - (18 * ds)), string_copy(textCopyright, floor(textCopyrightPos), 38), ds, ds, 0);
scr_font(CourierNew12, c_white, 0);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
