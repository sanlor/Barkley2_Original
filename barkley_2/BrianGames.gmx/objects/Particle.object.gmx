<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize all particle variables

// Movement vector
move_x = 0;
move_y = 0;
move_z = 0;

// Also, XY movement is represented with these vectors,
// can be used for e.g. rendering.
move_dir = 0;
move_dist = 0;

// Other movement properties
move_friction = 0; // Friction applied to x and y movement
gravity_z = .6; // Z gravity

// Delta-movement (contains movement from last step)
delta_x = 0;
delta_y = 0;
delta_z = 0;

// Start at ground
z = 0;

// Depth Negative-Y
dny = 0;

// Storage for variables during pause
paused_image_speed = 0;

// Flag to indicate if object supports paths - Particle does not
path_support = false;

// Animation initialization
//@ scr_entity_animation_init();
//@ scr_entity_animation_new(ANIMATION_DEFAULT);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy animation properties.

//@ scr_entity_animation_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle pausing
if (paused()) {

    // Store built-in behaviour-affecting variables during pause
    if (image_speed != 0) {
        paused_image_speed = image_speed;
        image_speed = 0;
    }
}
else {
    // Restore built-in behaviour-affecting variables during pause
    if (paused_image_speed != 0) {
        image_speed = paused_image_speed;
        paused_image_speed = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Perform all movement code
if paused() exit;

// Copied movement vector
var mx, my, mz;
mx = move_x * dt();
my = move_y * dt();
mz = move_z * dt();

// Perform movement
x += mx;
y += my;
delta_x = mx;
delta_y = my;

// Perform Z movement
var _zprev;
_zprev = z;
if (z &lt;= 0 &amp;&amp; move_z &lt;= 0 ) {
    move_z = 0;
    z = 0;
}
else {
    z += mz;
}
delta_z = z - _zprev;
    
// Apply gravity
move_z -= gravity_z * dt();

// Apply friction
if (move_friction &gt; 0 &amp;&amp; (move_x != 0 || move_y != 0)) {
    var dir, dist;
    dist = point_distance(0, 0, move_x, move_y);
    dir = point_direction(0, 0, move_x, move_y);
    dist = max(0, dist - (move_friction * dt()));
    move_x =  cos(degtorad(dir)) * dist;
    move_y = -sin(degtorad(dir)) * dist;
}

// Convert movement vector to dir/dist for easy use in scripts/code
move_dir = point_direction(0, 0, move_x, move_y)
move_dist = point_distance(0, 0, move_x, move_y)

// Rendering depth
depth = -y + dny;
//scr_dny(dny)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle animations
if paused() exit;

//@ scr_entity_animation_step_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw event, exports (dx,dy)

// Calculate and export draw coordinates
dx = x;
dy = y - z;

// Leave draw script here - particle can now use dx,dy to render in correct position
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw event, exports (dx,dy)

// Calculate and export draw coordinates
dx = x;
dy = y - z;

// Leave draw script here - particle can now use dx,dy to render in correct position
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
