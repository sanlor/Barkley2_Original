<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>oEffectDraw</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inactive
active = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Detect
if (active == 0) exit;
if (dad != -999 || kill == 1) exit;

global.tx = x;
global.ty = y;
global.tradius = wid / 2;
global.tObj = id;
with (o_enemy_test)
{
    if (point_distance(global.tx, global.ty, x, y) &lt; global.tradius)
    {
        global.tObj.dad = id;
        with (global.tObj) event_user(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create jelly
dad = -999;
wid = 48;
dir = 360;
jellyPoints = 14;
dv = 360 / jellyPoints; //(jellyPoints - 1);
topMost = 0;
jellyMid[1] = 3;
jellyMid[0] = 7 + 3;

scaleY = 1;//0.1;
scaleYSpd = 1 / 30;

alpha = 1;
scale = 1;
kill = 0;
cou = 0;
cou2 = 0;
spring = 0;

for (i = 0; i &lt;= jellyPoints + 1; i += 1)
{
    //if (i == jellyPoints - 1) dir = 180;
    
    jellyX0[i] = round(lengthdir_x(wid / 2, dir));
    jellyY0[i] = round(lengthdir_y(wid / 3, dir));
    
    jellyDX0[i] = jellyX0[i];
    jellyDY0[i] = jellyY0[i];
    
    jellySX0[i] = jellyDX0[i] * .5;
    jellySY0[i] = jellyDY0[i] * .5;
    
    jellyX0[i] *= .5;
    jellyY0[i] *= .5;
    
    //Set to trap size
    jellyDX0[i] = round(lengthdir_x(wid / 4, dir));
    jellyDY0[i] = round(lengthdir_y(wid / 6, dir));
    
    
    jellyH[i] = 40;//(40 + random(6));
    
    jellyX1[i] = round(lengthdir_x(wid / 2, dir));
    jellyY1[i] = round(lengthdir_y(wid / 3, dir));
    
    jellyX1[i] = jellyX0[i] + lengthdir_x(jellyH[i], 90);
    jellyY1[i] = jellyY0[i] + lengthdir_y(jellyH[i], 90);
    
    jellyX1[i] += -2 + random(4);
    jellyY1[i] += -2 + random(4);
    
    
    
    jellyDX1[i] = jellyX1[i];
    jellyDY1[i] = jellyY1[i];
    
    jellySX1[i] = jellyDX1[i] * .5;
    jellySY1[i] = jellyDY1[i] * .5;
    
    //Set to trap size
    jellyX1[i] = 0; jellyY1[i] = 0;
    jellyDX1[i] = (jellyDX0[i] * .5) + lengthdir_x(jellyH[i] / 4, 90);
    jellyDY1[i] = (jellyDY0[i] * .5) + lengthdir_y(jellyH[i] / 4, 90);
    
    
    //jellyX1[i] = jellyX0[i];
    //jellyY1[i] = jellyY0[i];
    
    //top
    jellyH[i] = 0; //reset
    jellyX0[i] = 0; jellyY0[i] = 0;
    jellyX0[i] = jellyDX0[i] * 0.33; jellyY0[i] = jellyDY0[i] * 0.33;
    
    dir -= dv;// - 5 + random(10);
}

//have a desired x so i can tween

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spring trap
if (active == 0) exit;
spring = 1;
for (i = 0; i &lt;= jellyPoints + 1; i += 1)
{
    jellyDX0[i] += jellySX0[i];
    jellyDY0[i] += jellySY0[i];
    
    jellyDX1[i] += jellySX1[i];
    jellyDY1[i] += jellySY1[i];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
if (active == 0) exit;
dx = x;
dy = y;

draw_set_colour_write_enable(1, 1, 1, 0);

sy = scaleY;

if (spring == 1)
{
    cou += 1;
    if (cou &gt; 60 * 5) kill = 1;
}
else
{
    cou2 += 1;
    if (cou2 &gt; 60 * 5) kill = 1;
}
if (kill == 1) alpha -= (1 / 30);
if (alpha &lt;= 0) instance_destroy();
scale = 1 + abs(alpha - 1);

//wiggle jelly
jellyBMX = 0; jellyBMY = 0;
jellyTMX = 0; jellyTMY = 0;
for (i = 0; i &lt;= jellyPoints; i += 1)
{
    jellyBMX += jellyX0[i];
    jellyBMY += jellyY0[i];
    jellyTMX += jellyX1[i];
    jellyTMY += jellyY1[i];
}
jellyBMX = jellyBMX / jellyPoints; jellyBMY = jellyBMY / jellyPoints;
jellyTMX = jellyTMX / jellyPoints; jellyTMY = jellyTMY / jellyPoints;

if (dad != -999)
{
    dad.x -= (dad.x - (dx + jellyBMX)) / 20;
    dad.y -= (dad.y - (dy + jellyBMY)) / 20;
    dad.shake = 3 * abs(alpha - 1);
}

for (i = 0; i &lt;= jellyPoints + 1; i += 1)
{
    jellyX0[i] += (jellyDX0[i] - jellyX0[i]) / 20;
    jellyY0[i] += (jellyDY0[i] - jellyY0[i]) / 20;
    
    jellyX1[i] += (jellyDX1[i] - jellyX1[i]) / 20;
    jellyY1[i] += (jellyDY1[i] - jellyY1[i]) / 20;
}
jellyX0[jellyPoints] = jellyX0[0]; jellyX1[jellyPoints] = jellyX1[0];
jellyY0[jellyPoints] = jellyY0[0]; jellyY1[jellyPoints] = jellyY1[0];

//DRAW BACK OF JELLY
fst[0] = jellyPoints / 2; lst[0] = jellyPoints + 1;
fst[1] = 0; lst[1] = (jellyPoints / 2) + 1;
for (q = 0; q &lt; 2; q += 1)
{

    draw_set_color(c_green);
    draw_set_alpha(0.33 * alpha);
    //Draw bottom
    draw_primitive_begin(pr_trianglefan);
    //draw_vertex(dx + jellyX0[jellyMid[q]], dy + mean(jellyY0[0], jellyY0[lst[q] - 1]));
    draw_vertex(dx + jellyBMX, dy + jellyBMY);
    for (i = fst[q]; i &lt; lst[q]; i += 1)
    {
        draw_vertex(dx + jellyX0[i], dy + jellyY0[i]);
    }
    draw_primitive_end();
    
    if (q == 1)
    {
        if (dad != -999)
        {
            with (dad) event_user(0);
        }
    }
    
    //Draw top
    draw_primitive_begin(pr_trianglefan);
    //draw_vertex(dx + jellyX1[jellyMid[q]], dy + mean((jellyH[0] * sy) + jellyY1[0], (jellyH[lst[q] - 1] * sy) + jellyY1[lst[q] - 1]));
    draw_vertex(dx + jellyTMX, dy + jellyTMY);
    for (i = fst[q]; i &lt; lst[q]; i += 1)
    {
        draw_vertex(dx + jellyX1[i], dy + (jellyH[i] * sy) + jellyY1[i]);
    }
    draw_primitive_end();
    
    //Draw sides
    for (i = fst[q]; i &lt; lst[q]; i += 1)
    {
        if (i != lst[q] - 1)
        {
            draw_primitive_begin(pr_trianglefan);
            draw_vertex(dx + jellyX1[i], dy + (jellyH[i] * sy) + jellyY1[i]);
            draw_vertex(dx + jellyX1[i + 1], dy + (jellyH[i] * sy) + jellyY1[i + 1]);
            draw_vertex(dx + jellyX0[i + 1], dy + jellyY0[i + 1]);
            draw_vertex(dx + jellyX0[i], dy + jellyY0[i]);
            draw_primitive_end();
        }
    }
    
    //Draw all lines
    draw_set_alpha(0.66 * alpha);
    for (i = fst[q]; i &lt; lst[q]; i += 1)
    {
        //Draw top to bot lines
        if (i == 0 || i == jellyMid[q] || i == lst[q] - 1)
            draw_line(dx + jellyX0[i] - 1, dy + jellyY0[i] - 1, dx + jellyX1[i], dy + (jellyH[i] * sy) + jellyY1[i]);
        //Horizontal lines
        if (i != jellyPoints) //lst[q] - 1)
        {
            draw_line(dx + jellyX0[i] - 1, dy + jellyY0[i] - 1, dx + jellyX0[i + 1] - 1, dy + jellyY0[i + 1] - 1);
            draw_line(dx + jellyX1[i], dy + (jellyH[i] * sy) + jellyY1[i], dx + jellyX1[i + 1], dy + (jellyH[i] * sy) + jellyY1[i + 1]);
        }
    }
    draw_set_alpha(1);

}

draw_set_colour_write_enable(1, 1, 1, 1);

scaleY += scaleYSpd;
scaleY = min(scaleY, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
