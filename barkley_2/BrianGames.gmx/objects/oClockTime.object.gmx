<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create
ClockTime("init");
global.DELTA_TIME = 10 / 60;


exit;
global.clockSpeed = 0;
global.clockTime = 60 * 60 * 24; //Current clock time
//global.clockTime -= 57;
event_user(0); //update hours, minutes, seconds
//timerDays = global.clockHours div 24;
global.clockGate = 0;
global.clockGateDestination = 1;
global.clockSpeedMax = 2;
pre = 0;
//We can do a reverse look-up of the gate by checking the hours of the clock
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step
ClockTime("step");



exit;
event_user(2);
//global.clockSpeed = (2 * rd); //will be event user 1
global.clockTime -= global.clockSpeed;
event_user(0); //update hours, minutes, seconds
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get clock speed
//gateDiff = floor(global.clockGateDestination) - floor(global.clockGate);
gateDiff = global.clockGateDestination + max(0, floor(global.clockGateDestination - global.clockGate) - 1);
gateDiff *= 4;
if (keyboard_check(vk_control)) gateDiff *= 100;
//gateDiff += 1;
if (gateDiff == 0) spdMax = 0;
else spdMax = dt() / (10 / gateDiff); //determines max seconds based on gates
//Get percentage of gate to gate dest
pre = abs(((((global.clockTime / 60) / 60))) - 24);
pct = abs(1 - (pre / global.clockGateDestination));
global.clockSpeed = spdMax * pct; //2 a second
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NOT USED: Find gate based on clock time
gateReverse = global.clockTime / 24;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update key clock stuff
global.clockSeconds = floor(global.clockTime mod 60);
global.clockMinutes = global.clockTime div 60;
global.clockHours = global.clockMinutes div 60;

global.clockMinutes = global.clockMinutes mod 60;

global.clockGate = abs(ceil(global.clockHours + 1) - 24);//global.clockTime / 60 / 60 / 24;// / 24;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw
ClockTime("draw");



exit;
dx = view_xview[0] + 5; 
dy = view_yview[0] + 5;
draw_set_font(CourierNew24);
draw_set_color(c_white);
draw_text(dx, dy, NumberFormat(global.clockHours) + "h " + NumberFormat(global.clockMinutes) + "m " + NumberFormat(global.clockSeconds) + "s");
dy += 24;
//
draw_set_font(CourierNew12b);
draw_text(dx, dy, "Current clock speed (seconds): " + string(global.clockSpeed * 60));
dy += 16;
draw_text(dx, dy, "Current clock gate: " + string(global.clockGate) + " (" + string(pre) + ")");
dy += 16;
draw_text(dx, dy, "Current clock gate destination: " + string(global.clockGateDestination));
dy += 16;
draw_text(dx, dy, "Clock gate percent: " + string(pct));
dy += 16;
dy += 16;
draw_text(dx, dy, "SPACE adds one to clock gate.");
dy += 16;
draw_text(dx, dy, "CONTROL speeds up (for testing times).");
dy += 16;
draw_text(dx, dy, "SHIFT restarts.");
dy += 16;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add one to gate
global.clockGateDestination += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
