<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x += 2;
y += 4;
grasp = 0.1;
for (i = 0; i &lt; 20; i += 1)
{
    ampDir[i] = random(360);
    ampDirSpd[i] = (8 + random(8)) * choose(-1, 1);
    ampDis[i] = 8 + random(4);
    
    frqDir[i] = random(360);
    frqDirSpd[i] = (10 + random(10)) * choose(-1, 1);
    frqDirSpd[i] *= 0.5;
    frqDis[i] = 1 + random(.5);
    
    repeats[i] = 3 + random(6);
    
    amp[i] = lengthdir_x(ampDis[i], ampDir[i]);
    ampDir[i] += ampDirSpd[i];
    
    frq[i] = lengthdir_x(frqDis[i], frqDir[i]);
    frqDir[i] += frqDirSpd[i];
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.tx = x;
global.ty = y;
with (o_enemy_test)
{
    yy = y - 16;
    if (point_distance(global.tx, global.ty, x, yy) &gt; 110) continue;
    //if (o_sine_test.grasp == 1) o_hoopz_hilight.image_alpha += 0.15;
    o_hoopz_hilight.image_alpha += 0.15 * o_sine_test.grasp;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw sine
global.tx = x;
global.ty = y;
scl = 0.5;
draw_sprite_ext(s_sine64, 0, global.tx, global.ty, scl, scl, 0, c_fuchsia, 0.4 + random(0.2));

with (o_enemy_test)
{
yy = y - 16;
if (point_distance(global.tx, global.ty, x, yy) &gt; 110) continue;

//dir = point_direction(x, y, mouse_x, mouse_y);
//dis = point_distance(x, y, mouse_x, mouse_y);
dir = point_direction(global.tx, global.ty, x, yy);
dis = point_distance(global.tx, global.ty, x, yy) * o_sine_test.grasp;

for (ii = 0; ii &lt; 3; ii += 1)
{
    alp = 1 - (ii * .25);
    ind = unq + ii;
    draw_set_alpha(alp - random(0.33));
    amp = o_sine_test.amp[ind];// * o_sine_test.frq[ind];
    rep = o_sine_test.repeats[ind] + o_sine_test.frq[ind];
    draw_sine_gradual(global.tx, global.ty, dir, dis, amp + ((amp * .66) * (ii / 2)), (rep / 96) * dis);
}
draw_set_alpha(1.00);

//for every 16 points do an orb
scl = 0.5;
if (o_sine_test.grasp == 1) 
{
    draw_sprite_ext(s_sine64, 0, x, y - 16, scl, scl, 0, c_fuchsia, 0.4 + random(0.2));
    shake = 2;
}

dv = dis / 12;
dv = max(1, dv);
pr = dis / floor(dv);
for (i = 1; i &lt; dv - 1; i += 1)
{
    scl = .33 + ((.25 / dv) * i);
    dx = global.tx + lengthdir_x(i * pr, dir);
    dy = global.ty + lengthdir_y(i * pr, dir);
    draw_sprite_ext(s_sine64, 0, dx, dy, scl, scl, 0, c_fuchsia, 0.4 + random(0.2));
}

//draw_sine(x, y, dir, dis, -amp, 3);



}

grasp = clamp(grasp + 0.1, 0, 1);
for (i = 0; i &lt; 20; i += 1)
{
    amp[i] = lengthdir_x(ampDis[i], ampDir[i]);
    ampDir[i] += ampDirSpd[i];
    
    frq[i] = lengthdir_x(frqDis[i], frqDir[i]);
    frqDir[i] += frqDirSpd[i];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
