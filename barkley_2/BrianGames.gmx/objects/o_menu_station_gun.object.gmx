<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-285000000</depth>
  <persistent>0</persistent>
  <parentName>menu_station</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hoopz_head=s_port_hoopz;
hoopz_frame=0;

fuck_laz=0;

selection = 0; //Selection used for things

bandbag=0;


smelttype ="SMELT ALL";

gun_selection=0; //Gunselection
current_gun=scr_getGunFromIndex(gun_selection)

bando_select = 0; //Sets the selected Bando gun, so when you swap back it goes back to it
bag_select = 5; //Sets bag select for when you swap back
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//GZ NOTE: Below was "capacity", should be "size" which returns reserve guns + empty guns;
//"capacity" returns total slots the gunbag can carry, not the amount of guns held
var gunbag_total = scr_gunbag("size"); //"capacity"); 

for(i=0; i&lt;gunbag_total; i++)
         {
         var current_gun=scr_getGunFromIndex(i);
          current_gun.pCurAmmo=floor( current_gun.pCurAmmo);
         
         }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Actual gun selection code and whatnot
var band_total = scr_pouch("size");  
var gunbag_total = scr_gunbag("size");
var allguns_total = band_total + gunbag_total;
current_gun = scr_getGunFromIndex(gun_selection);


// Move selection   
if scr_key_global_checkPressed(KEYID_UP)
    {
    selection-=1;
    }
else if scr_key_global_checkPressed(KEYID_DOWN)
    {
    selection+=1;
    }

// Switch Bandolier/Bag
if selection ==0
    {
    if scr_key_global_checkPressed(KEYID_CONFIRM)
        {
        if bandbag ==1 {bandbag=0; gun_selection = bando_select;}
        else {bandbag=1; gun_selection = bag_select;}
        }
    }
   
// Switch guns (Bandolier)
if (selection !=5 &amp;&amp; bandbag==0)       
    {
    if scr_key_global_checkPressed(KEYID_LEFT)
       {
       gun_selection-=1;
       }
    else if scr_key_global_checkPressed(KEYID_RIGHT)
       {
       gun_selection+=1;
       }
    }

// Switch guns (Bag)
else if (selection !=5 &amp;&amp; bandbag==1)       
    {
    if scr_key_global_checkPressed(KEYID_LEFT)
       {
       gun_selection-=1;
       }
    else if scr_key_global_checkPressed(KEYID_RIGHT)
       {
       gun_selection+=1;
       }
    }

// ...capping values?
if bandbag==1
    {
    // Cap at BAG minmax
    if gun_selection &lt; band_total { gun_selection = allguns_total-1;}
    if gun_selection &gt; allguns_total-1 { gun_selection = band_total; }
    bag_select = gun_selection;
    }
else
    {
    // Cap at BANDOLIER minmax
    if gun_selection &lt; 0 { gun_selection = band_total-1; }
    if gun_selection &gt; band_total-1 { gun_selection=0; }
    bando_select = gun_selection;
    }
   
// SMELT
if (selection == 2 &amp;&amp; bandbag==1)
   {
   var res=scr_gunbag("gun", gun_selection -band_total)
   if scr_key_global_checkPressed(KEYID_CONFIRM)
       {
       if res &gt;0
           {
           scr_gunbag("remove", current_gun);
           //gun_selection+=1;
           current_gun=scr_getGunFromIndex(gun_selection);
           o_utilitystation.smelt_target+=25;
           }
       }
   }
   
// RELOAD
if (selection == 1 &amp;&amp; bandbag==0 &amp;&amp;
        scr_key_global_checkHeld(KEYID_CONFIRM) &amp;&amp;
        o_utilitystation.smelt_target &gt;0 &amp;&amp; current_gun.pCurAmmo &lt; current_gun.pMaxAmmo)
    {
    current_gun.pCurAmmo += (current_gun.pMaxAmmo/100) * dt() * 5;
    o_utilitystation.smelt_target -= 5 * dt();
    }
else
    {
    // If not reloading, round off values!!
    var newval = floor(min(current_gun.pCurAmmo, current_gun.pMaxAmmo))
    var diff = current_gun.pCurAmmo - newval
    if (diff != 0)
        {
        // Reinstate excess smelt points
        o_utilitystation.smelt_target += diff / (current_gun.pMaxAmmo/100);
        }
    current_gun.pCurAmmo = newval
    }
    

// BATCH SMELT
if (selection ==5 &amp;&amp; bandbag==1)       
    {
       if scr_key_global_checkPressed(KEYID_LEFT)
       {
       if smelttype =="SMELT ALL" {smelttype ="SMELT EMPTY"}
       else if smelttype =="SMELT EMPTY" {smelttype ="SMELT UNFAVOURITED"}
       else if smelttype =="SMELT UNFAVOURITED" {smelttype ="SMELT ALL"}
       }
    else if scr_key_global_checkPressed(KEYID_RIGHT)
       {
       if smelttype =="SMELT ALL" {smelttype ="SMELT UNFAVOURITED"}
       else if smelttype =="SMELT UNFAVOURITED" {smelttype ="SMELT EMPTY"}
       else if smelttype =="SMELT EMPTY" {smelttype ="SMELT ALL"}
       }
    }

   
   


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var offset_x, offset_y;
offset_x=o_menu_station_imenu.x-192+16;
offset_y=o_menu_station_imenu.y-120+16;


draw_set_font(global.fn_2)


//Band/Bag swap
    if bandbag==0 {draw_text_colour(offset_x+80,offset_y,"GUN'S BANDOLIER",c_yellow,c_yellow,c_yellow,c_yellow,1);}
    else if bandbag==1 {draw_text_colour(offset_x+80,offset_y,"GUN'S BAG",c_yellow,c_yellow,c_yellow,c_yellow,1);}


if selection ==0
    {
    if bandbag==0 {draw_text_colour(offset_x,offset_y+16,"BAND/Bag",c_yellow,c_yellow,c_yellow,c_yellow,1);}
    else if bandbag==1 {draw_text_colour(offset_x,offset_y+16,"Band/BAG",c_yellow,c_yellow,c_yellow,c_yellow,1);}
    }
else
    {
    if bandbag==0 {draw_text_colour(offset_x,offset_y+16,"BAND/Bag",c_white,c_white,c_white,c_white,1);}
    else if bandbag==1 {draw_text_colour(offset_x,offset_y+16,"Band/BAG",c_white,c_white,c_white,c_white,1);}
    }
    
    
//Reload

if bandbag !=1
{
    if selection ==1
        {
        draw_text_colour(offset_x,offset_y+16+16,"Reload",c_yellow,c_yellow,c_yellow,c_yellow,1);
        }
    else
        {
        draw_text_colour(offset_x,offset_y+16+16,"Reload",c_white,c_white,c_white,c_white,1);
        }
}
else
    {
        if selection ==1
            {
            draw_text_colour(offset_x,offset_y+16+16,"Reload",c_gray,c_gray,c_gray,c_gray,1);
            }
        else
            {
            draw_text_colour(offset_x,offset_y+16+16,"Reload",c_dkgray,c_dkgray,c_dkgray,c_dkgray,1);
            }
    }
    
//Smelt

if bandbag !=0
{
    if selection ==2
        {
        draw_text_colour(offset_x,offset_y+16+32,"Smelt",c_yellow,c_yellow,c_yellow,c_yellow,1);
        }
    else
        {
        draw_text_colour(offset_x,offset_y+16+32,"Smelt",c_white,c_white,c_white,c_white,1);
        }
}
else
    {
    if selection ==2
        {
        draw_text_colour(offset_x,offset_y+16+32,"Smelt",c_gray,c_gray,c_gray,c_gray,1);
        }
    else
        {
        draw_text_colour(offset_x,offset_y+16+32,"Smelt",c_dkgray,c_dkgray,c_dkgray,c_dkgray,1);
        }
    }

    
//Scan

if selection ==3
    {
    draw_text_colour(offset_x,offset_y+16+48,"Scan",c_yellow,c_yellow,c_yellow,c_yellow,1);
    }
else
    {
    draw_text_colour(offset_x,offset_y+16+48,"Scan",c_white,c_white,c_white,c_white,1);
    }

    
//Favourite

if selection ==4
    {
    draw_text_colour(offset_x,offset_y+16+64,"Favourite",c_yellow,c_yellow,c_yellow,c_yellow,1);
    }
else
    {
    draw_text_colour(offset_x,offset_y+16+64,"Favourite",c_white,c_white,c_white,c_white,1);
    }

    
//Smelt All

if bandbag==0
{
if selection ==5
    {
    draw_text_colour(offset_x,offset_y+16+80+80,"RELOAD ALL",c_yellow,c_yellow,c_yellow,c_yellow,1);
    }
else
    {
    draw_text_colour(offset_x,offset_y+16+80+80,"RELOAD ALL",c_white,c_white,c_white,c_white,1);
    }
}



else if bandbag==1
{

if selection ==5
    {
    draw_text_colour(offset_x,offset_y+16+80+80,string(smelttype),c_yellow,c_yellow,c_yellow,c_yellow,1);
    }
else
    {
    draw_text_colour(offset_x,offset_y+16+80+80,string(smelttype),c_white,c_white,c_white,c_white,1);
    }
}
    

var smelt_height;
smelt_height =((o_utilitystation.smelt_max - o_utilitystation.smelt_current)/o_utilitystation.smelt_max)*100;


draw_text_colour(offset_x+128,offset_y+16+121,smelt_height,c_white,c_white,c_white,c_white,1);
draw_rectangle_colour(offset_x,offset_y+16+160,offset_x+32,(offset_y+16+160)-(50-(smelt_height*0.5)),c_yellow,c_yellow,c_red,c_red,false);
draw_text_colour(offset_x+48,offset_y+16+144,string(o_utilitystation.smelt_current)+"/"+string(o_utilitystation.smelt_max),c_white,c_white,c_white,c_white,1);


//Drawing Guns and Guns Info
if instance_exists(current_gun)
{
draw_sprite_ext(current_gun.hudIconSprite,current_gun.hudIconFrame,offset_x+128,offset_y+32,2,2,0,current_gun.col,1);

draw_text_colour(offset_x+128,offset_y+64,string(current_gun.pCurAmmo) + "/" + string(current_gun.pMaxAmmo),c_white,c_white,c_white,c_white,1);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
