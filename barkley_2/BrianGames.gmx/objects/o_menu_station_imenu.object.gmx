<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_m_frame</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-280000000</depth>
  <persistent>0</persistent>
  <parentName>o_menus</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause game during HUD
global.fn_1 = font_add_sprite(s_fn1, ord(" "), 1, -1); //was 0 spacing
global.fn_2 = font_add_sprite(s_fn2, ord(" "), 1, 0); //was 0 spacing
global.fn_2c = font_add_sprite(s_fn2, ord(" "), 1, -1);
global.fn_3 = font_add_sprite(s_fn3, ord("!"), 0, 1);
global.cursor_fx = 0;
global.cursor_fy = 0;
window_set_cursor(cr_none);
scr_deltatime_init();
fullscreen = 0;


instance_create(0, 0, o_menu_station_overlay);
scr_pause_doPause();
////////

//Destroys previous o_ui (Is this really needed? It's an empty object)
with o_ui {
    instance_destroy();
}
kc_i=0;

///////////////////////////
//START OF MENU BACKGROUND ANIMATION STUFF//
///////////////////////////

// Create the background layers behind the menu.
//GZ NOTE: Removed, in my UPL under Offal Menu BGs
/*
menu_background[0] = b_layer0; // All green with green boxes.
menu_background[1] = b_layer1; // Matrix 01s.
menu_background[2] = b_layer2; // Matrix 01s.
menu_background[3] = b_layer3; // Outlines of green boxes.
menu_background[4] = b_layer4; // Green crosshair.
menu_background[5] = b_layer5; // 6469617065720(upsidedown9)0(backwards6).
menu_background[6] = b_layer6; // Outlines of green boxes.
menu_background[7] = b_layer7; // 6469617065720(upsidedown9)0(backwards6).
*/


// Set some initial values for the backgrounds.
for(i=0;i&lt;8;i+=1) {
    menu_background[i] = backdrop_cc_1;
    menu_background_alpha[i] = 0; //GZ NOTE: IS SET TO ALWAYS BE 0 IN DRAW
    menu_background_x[i] = irandom(room_height);
    menu_background_y[i] = irandom(room_width);
    menu_background_horizontal_speed[i] = 0;
    menu_background_vertical_speed[i] = 0;
}


// Set horizontal and vertical speeds for the backgrounds.
// The green background with boxes moves to the upper left or lower right.
menu_background_horizontal_speed[0] = scr_rand_sign();
menu_background_vertical_speed[0] = menu_background_horizontal_speed[0];
// The first matrix 01s moves horizontally either left or right.
menu_background_horizontal_speed[1] = scr_rand_sign();
// The second matrix 01s moves vertically either up or down.
menu_background_vertical_speed[2] = scr_rand_sign();
// The second boxes move to the upper left or the lower right.
menu_background_vertical_speed[3] = scr_rand_sign();
menu_background_horizontal_speed[3] = menu_background_vertical_speed[3];
// The weird number combo moves horizontally either left or right.
menu_background_horizontal_speed[5] = scr_rand_sign();
// The third boxes move to the upper left or the lower right.
menu_background_vertical_speed[6] = scr_rand_sign();
menu_background_horizontal_speed[6] = menu_background_vertical_speed[6];
// The weird number combo moves horizontally the opposite of the other one.
menu_background_horizontal_speed[7] = menu_background_horizontal_speed[5]*-1;

// Backgrounds 4 and 7 are special when it comes to their x and y.
// The crosshair is dependant on the cursor.
menu_background_x[4] = (o_curs.x div 12);
menu_background_y[4] = (o_curs.y div 12);
// The weird number combos start at the same position.
menu_background_x[7] = menu_background_x[5];
menu_background_y[7] = menu_background_y[5];
///////////////////////////
//END OF MENU BACKGROUND ANIMATION STUFF//
///////////////////////////




//Start of Menu and Button Initiation

side = 1; //Set the Side for the Utility Menu. 0 is Left, 1 is Right
image_xscale = 0.125; //Set initial scale of the window
image_yscale = 0.125; //Ditto
image_speed = 0; //Make sure this isn't animating
image_index = side; //Sets the image index of the menu to the side
on = 0;
unfocus = 0;
active = 0;


x = view_xview[0]+(view_wview[0]/2); //Set the X of the object to the centre of the screen for pan out
y = view_yview[0]+(view_hview[0]/2); //Ditto


// Update the backgrounds based on which side the menu tab is on (left or right).
for(i=0;i&lt;8;i+=1) {
    menu_background_x[i] += scr_math_nsign(side) * 76;
}


//cursor
o_curs.sprite_index = s_wincurs;
dfx = global.cursor_fx;
global.cursor_fx = 0;
dclr = o_curs.image_blend;
o_curs.image_blend = c_white;


scr_menu_options();


for(i=0;i&lt;8;i+=1) {
    var bx, by, ox, oy;
    ox = view_xview[0];
    oy = view_yview[0];
    if side ==1 {bx = ox+314}
    else if side ==0 {bx = ox+13}
    by = oy+30 + ((8+15)*i)
    button_list[i]=instance_create(bx,by,o_menu_station_ibutton);
    button_list[i].bx = bx;
    button_list[i].by = by;
    button_list[i].menu_number = i;
    if i ==0
       {
       button_list[i].select=1;
       }
    
}

state =0; //Sets the state of the menu to Main

selection = 0; //Just a value to reaffirm what things are selected from this object

event_user(0); //Calls event to rename buttons





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_pause_unPause();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delta
scr_deltatime_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Entering or exiting functionality (growing or shrinking).


if on and kc_i {
   image_xscale -= 1/6;
      if instance_exists(menu_station) {with(menu_station)
                         {
                         instance_destroy();                  
                         }
                     }
         if instance_exists(o_menu_station_ibutton) {with(o_menu_station_ibutton)
                         {
                         instance_destroy();                  
                         }
                     }
}
if abs(image_xscale) != 1 {
    // Shrink if the menu is on, grow if it is off.
    if on {
        with o_slider {
            instance_destroy();
        }
        image_xscale -= 1/12;
        if image_xscale &lt; 0 {
            image_xscale = 0;
        }
        // If the menu is no longer visible, destroy it.
        if image_xscale == 0 {
            instance_destroy();
        }
    } else {
        image_xscale += 1/12;
        if image_xscale &gt;= 1 {
            image_xscale = 1;
            on = 1;
            visible = 1;
            o_curs.visible = 1;
            o_slider.visible = 1;
        }
    }
    // Scale the y the same as the x.
    image_yscale = image_xscale;
} else {
        for(i=0;i&lt;8;i+=1) {
            menu_background_x[i] += menu_background_horizontal_speed[i];
            menu_background_y[i] += menu_background_vertical_speed[i];
            menu_background_alpha[i] = min(1,menu_background_alpha[i]+(irandom(2)*0.05));
        }
    }
    
// Set the crosshair background to be dependant on the cursor.
menu_background_x[4] = (o_curs.x div 12);
menu_background_y[4] = (o_curs.y div 12);

if (!instance_exists(menu_station))
{
    if scr_key_global_checkPressed(KEYID_UP)
       {
       if selection &gt;0 {selection -=1;}
       else selection =7;
       button_list[selection].select = 1;
       }
    else if scr_key_global_checkPressed(KEYID_DOWN)
       {
       if selection &lt;7 {selection +=1;}
       else selection =0;
       button_list[selection].select = 1;
       }
}


    if scr_key_global_checkPressed(KEYID_PAUSE)
       {
       if (instance_exists(menu_station))
          {
           selection=0;
           }
       else {on=1; kc_i=1;}
       }

for(i=0; i &lt; 8; i+=1)
    {
        if i != selection
        {
        button_list[i].select = 0;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>   if instance_exists(menu_station) {with(menu_station)
                         {
                         instance_destroy();                  
                         }
                     }


if state ==0 { //If in Status mode

    //Set selection and general buttons for this menu state
   selection =0;
   button_list[0].button_name="STATUS";
   button_list[0].select=1;
   button_list[1].button_name="EQUIP";
   button_list[2].button_name="ITEM";
   button_list[3].button_name="GUN'S";
   button_list[4].button_name="CRAFT";
   button_list[5].button_name="ZAUBER";
   button_list[6].button_name="D-NET";
   button_list[7].button_name="UNPLUG";
   
   //Create the display for this menu here, destroying other instances of the menu
   

   
   }
else if state ==1 {
    //Set selection and general buttons for this menu state
   selection =0;
   button_list[0].button_name="STATUS";
   button_list[0].select=1;
   button_list[1].button_name="EQUIP";
   button_list[2].button_name="ITEM";
   button_list[3].button_name="GUN'S";
   button_list[4].button_name="CRAFT";
   button_list[5].button_name="ZAUBER";
   button_list[6].button_name="D-NET";
   button_list[7].button_name="UNPLUG";
   
   instance_create(x,y,o_menu_station_stats);
   }
else if state ==2 {
    //Set selection and general buttons for this menu state
   selection =1;
   button_list[0].button_name="STATUS";
   button_list[1].button_name="EQUIP";
   button_list[1].select=1;
   button_list[2].button_name="ITEM";
   button_list[3].button_name="GUN'S";
   button_list[4].button_name="CRAFT";
   button_list[5].button_name="ZAUBER";
   button_list[6].button_name="D-NET";
   button_list[7].button_name="UNPLUG";
   
   instance_create(x,y,o_menu_station_equip);
   }
else if state ==3 {
    //Set selection and general buttons for this menu state
   selection =2;
   button_list[0].button_name="STATUS";
   button_list[1].button_name="EQUIP";
   button_list[2].button_name="ITEM";
   button_list[2].select=1;
   button_list[3].button_name="GUN'S";
   button_list[4].button_name="CRAFT";
   button_list[5].button_name="ZAUBER";
   button_list[6].button_name="D-NET";
   button_list[7].button_name="UNPLUG";
   
   }
else if state ==4 {
    //Set selection and general buttons for this menu state
   selection =3;
   button_list[0].button_name="STATUS";
   button_list[1].button_name="EQUIP";
   button_list[2].button_name="ITEM";
   button_list[3].button_name="GUN'S";
   button_list[3].select=1;
   button_list[4].button_name="CRAFT";
   button_list[5].button_name="ZAUBER";
   button_list[6].button_name="D-NET";
   button_list[7].button_name="UNPLUG";
   instance_create(x,y,o_menu_station_gun);
   }
else if state ==5 {
    //Set selection and general buttons for this menu state
   selection =4;
   button_list[0].button_name="STATUS";
   button_list[1].button_name="EQUIP";
   button_list[2].button_name="ITEM";
   button_list[3].button_name="GUN'S";
   button_list[4].button_name="CRAFT";
   button_list[4].select=1;
   button_list[5].button_name="ZAUBER";
   button_list[6].button_name="D-NET";
   button_list[7].button_name="UNPLUG";
   instance_create(x,y,o_menu_station_brain);
   }
else if state ==6 {
    //Set selection and general buttons for this menu state
   selection =5;
   button_list[0].button_name="STATUS";
   button_list[1].button_name="EQUIP";
   button_list[2].button_name="ITEM";
   button_list[3].button_name="GUN'S";
   button_list[4].button_name="CRAFT";
   button_list[5].button_name="ZAUBER";
   button_list[5].select=1;
   button_list[6].button_name="D-NET";
   button_list[7].button_name="UNPLUG";
   }
else if state ==7 {
    //Set selection and general buttons for this menu state
   selection =6;
   button_list[0].button_name="STATUS";
   button_list[1].button_name="EQUIP";
   button_list[2].button_name="ITEM";
   button_list[3].button_name="GUN'S";
   button_list[4].button_name="CRAFT";
   button_list[5].button_name="ZAUBER";
   button_list[6].button_name="D-NET";
   button_list[6].select=1;
   button_list[7].button_name="UNPLUG"
   }
else if state ==8 {
    //Set selection and general buttons for this menu state
   selection =7;
   button_list[0].button_name="STATUS";
   button_list[1].button_name="EQUIP";
   button_list[2].button_name="ITEM";
   button_list[3].button_name="GUN'S";
   button_list[4].button_name="CRAFT";
   button_list[5].button_name="ZAUBER";
   button_list[6].button_name="D-NET";
   button_list[7].button_name="UNPLUG";
   button_list[7].select=1;
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Begin by drawing the backgrounds.
for (i=0; i&lt;8; i++) {
    draw_background_tiled_ext(menu_background[i],
                              menu_background_x[i] div 1 + view_xview,
                              menu_background_y[i] div 1 + view_yview,
                              1,
                              1,
                              c_white,
                              0); //menu_background_alpha[i]);
}
draw_clear(c_green); //GZ ADDED Since BGs are removed

x = view_xview+view_wview/2;
y = view_yview+view_hview/2;

for (xx = 0; xx &lt; 384; xx += 80)
{
    for (yy = 0; yy &lt; 240; yy += 48)
    {
        draw_sprite(sMenuBG0, 0, view_xview[0] + xx - 1, view_yview[0] + yy);
    }
}

draw_sprite_ext(s_m_frame,image_index,x,y,image_xscale,image_yscale,0,image_blend,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Full
fullscreen = !fullscreen;
window_set_fullscreen(fullscreen);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>192,120</point>
    <point>192,192</point>
  </PhysicsShapePoints>
</object>
