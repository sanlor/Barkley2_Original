<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2610000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create
scl = global.miniScale * 2;
spectator = 0;
spectatorCou = 0;
breathCou = 0;

dsHeart = ds_list_create();
event_user(3);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step
if (MiniKeyPress("cancel") &amp;&amp; spectator == 0) { Minigame("stop"); instance_destroy(); }
if (spectator == 1)
{
    spectator = 2;
    state = "countdown";
    countdown = 0;
}
if (spectator != 0) buttonState = "inactive";

if (state == "start")
{
    if (MiniKeyPress("action"))
    {
        buttonState = "inactive";
        state = "countdown";
        countdown = 0;
        audio_play_sound_fresh(mMiniHorseCount, 10, 0);
    }
}
else if (state == "countdown")
{
    cod = countdown;
    countdown += dt_60();
    if (countdown &gt;= 60 &amp;&amp; cod &lt; 60) audio_play_sound_fresh(mMiniHorseCount, 10, 0);
    if (countdown &gt;= 60 * 2 &amp;&amp; cod &lt; 60 * 2) audio_play_sound_fresh(mMiniHorseCount, 10, 0);
    if (countdown &gt;= 60 * 3 &amp;&amp; cod &lt; 60 * 3) audio_play_sound_fresh(mMiniHorseShot, 10, 0);
    //if (countdown &gt;= 60 * 4 &amp;&amp; cod &lt; 60 * 4) audio_play_sound_fresh(mMiniHorseShot, 10, 0);
    if (countdown &gt;= 60 * 4)
    {
        state = "race";
        if (spectator == 0) buttonState = "active";
    }
}
else if (state == "race")
{
    if (buttonState == "active")
    {
        if (MiniKeyPress("action") &amp;&amp; spectator == 0)
        {
            buttonState = "inactive";
            buttonCou = 60 * 3;
        }
    }
    else if (spectator == 0)
    {
        buttonCou -= dt_60();
        if (buttonCou &lt;= 0) buttonState = "active";
    }
    for (i = 0; i &lt; 4; i += 1)
    {
        val = horseBar[i];
        if (val &lt;= 10) 
        {
            horseSub[i] = 4;
        }
        else
        {
            horseSub[i] += (val / 100) / 5;
            if (horseSub[i] &gt;= 4) horseSub[i] -= 4;
            horseX[i] += (val / 100) / 5;
            if (horseX[i] &gt;= 173)
            {
                for (b = 0; b &lt; 4; b += 1) horseSub[b] = 4;
                horseSub[i] = 5;
                state = "end";
                audio_play_sound_fresh(mMiniHorseWin, 10, 0);
                break;
            }
        }
    }
}
else if (state == "end")
{
    if (MiniKeyPress("action") &amp;&amp; spectator == 0)
    {
        event_user(3);
    }
    if (spectator != 0)
    {
        spectatorCou += dt_60();
        if (spectatorCou &gt; 60 * 5)
        {
            Minigame("stop"); 
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset game
state = "start";
buttonState = "blink";
buttonCou = 0;
countdown = -1; //0 = 3, 1 = 2, 2 = 1, 3 = go
cou = 0;

//at start blinking button, then start up counter
//on end press button resets?

horseCol[0] = make_color_rgb(0, 128, 255);
horseCol[1] = make_color_rgb(255, 0, 255);
horseCol[2] = make_color_rgb(0, 255, 0);
horseCol[3] = make_color_rgb(255, 0, 0);

//horse states are slow, medium, fast, freeze, stand
for (i = 0; i &lt; 4; i += 1) 
{
    horseSub[i] = 0;
    horseState[i] = "stand";
    horseX[i] = 1;
    horseY[i] = 22 + (i * 19);
    horseBar[i] = 50;
    barState[i] = "medium";
    barCou[i] = 0;
}

//164 is finish, minus 18 for horse width - 173 winners circle

//horse bar - 71, 99 - 6, 19 - 8

//horse heart - 106, 108 - 83 - 9 up and down
ds_list_clear(dsHeart);
heartState = "stable";
heartCou = 10 + random(10);
heartGap = 5;
heartCur = 0;
for (i = 0; i &lt; 84; i += 1) //84
{
    ds_list_add(dsHeart, 0);
    //event_user(1); //Add one heart pixel
}
//event user to populate deal
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change bars
for (q = 0; q &lt; 4; q += 1)
{
    barCou[q] = max(0, barCou[q] - dt_60());
    
    barCur = 0;
    ran = random(100);
    if (barState[q] == "slow")
    {
        if (ran &lt; 50) barCur -= 1;
        else if (ran &lt; 60) barCur -= 0;
        else barCur += 1;
    }
    else if (barState[q] == "medium")
    {
        if (ran &lt; 25) barCur -= 1;
        else if (ran &lt; 75) barCur -= 0;
        else barCur += 1;
    }
    else if (barState[q] == "fast")
    {
        if (ran &lt; 50) barCur += 1;
        else if (ran &lt; 60) barCur -= 0;
        else barCur -= 1;
    }
    else if (barState[q] == "dying")
    {
        if (ran &lt; 60) barCur -= 1;
        else if (ran &lt; 70) barCur -= 0;
        else barCur += 1;
    }
    else if (barState[q] == "hyper")
    {
        if (ran &lt; 60) barCur += 1;
        else if (ran &lt; 70) barCur -= 0;
        else barCur -= 1;
    }
    ohb = horseBar[q];
    horseBar[q] += barCur;
    horseBar[q] = clamp(horseBar[q], 0, 100);
    
    if (ohb &gt; 10 &amp;&amp; horseBar[q] &lt;= 10) 
    {
        if (breathCou &lt;= 0)
        {
            audio_play_sound_fresh(mMiniHorseBreath, 10, 0);
            breathCou = 10;
        }
    }
    breathCou -= dt();
    breathCou = clamp(breathCou, 0, 100);
    
    if (barCou[q] &lt;= 0)
    {
        barState[q] = choose("slow", "medium", "fast", "dying", "hyper");
        barCou[q] = 10 + random(10);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change heart bar

heartGap = max(0, heartGap - dt_60());
if (heartGap &gt; 0) { exit; }
heartGap = 5;
heartCou = max(0, heartCou - dt_60());

{
    ran = random(100);
    if (heartState == "slow")
    {
        if (ran &lt; 50) heartCur -= 1;
        else if (ran &lt; 60) heartCur -= 0;
        else heartCur += 1;
    }
    else if (heartState == "medium")
    {
        if (ran &lt; 25) heartCur -= 1;
        else if (ran &lt; 75) heartCur -= 0;
        else heartCur += 1;
    }
    else if (heartState == "fast")
    {
        if (ran &lt; 50) heartCur += 1;
        else if (ran &lt; 60) heartCur -= 0;
        else heartCur -= 1;
    }
    else if (heartState == "dying")
    {
        if (ran &lt; 60) heartCur -= 1;
        else if (ran &lt; 70) heartCur -= 0;
        else heartCur += 1;
    }
    else if (heartState == "hyper")
    {
        if (ran &lt; 60) heartCur += 1;
        else if (ran &lt; 70) heartCur -= 0;
        else heartCur -= 1;
    }
}

heartCur = clamp(heartCur, -9, +9);

if (heartCou &lt;= 0)
{
    heartState = choose("slow", "medium", "fast", "dying", "hyper");
    if (heartState == "slow" || heartState == "medium" || heartState == "fast") audio_play_sound_fresh(mMiniHorseClop, 10, 0);
    heartCou = 9 + random(5);
}

if (ds_list_size(dsHeart) &gt; 83) ds_list_delete(dsHeart, 0);
ds_list_add(dsHeart, heartCur);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
dx = global.miniX;
dy = global.miniY;

draw_sprite_ext(sMiniHorseBG, 0, dx, dy, scl, scl, 0, c_white, 1);

//Draw button - 3, 100
if (buttonState == "blink")
{
    buttonCou += dt_60();
    buttonSub = 0;
    if (buttonCou &lt; 30) buttonSub = 0;
    else if (buttonCou &lt; 60) buttonSub = 1;
    else buttonCou = 0;
    draw_sprite_ext(sMiniHorseButton, buttonSub, dx + (3 * scl), dy + (100 * scl), scl, scl, 0, c_white, 1);
}
else if (buttonState == "inactive")
{
    draw_sprite_ext(sMiniHorseButton, 1, dx + (3 * scl), dy + (100 * scl), scl, scl, 0, c_white, 1);
}
else if (buttonState == "active")
{
    draw_sprite_ext(sMiniHorseButton, 0, dx + (3 * scl), dy + (100 * scl), scl, scl, 0, c_white, 1);
}

//Horses
for (i = 0; i &lt; 4; i += 1)
{
    draw_sprite_ext(sMiniHorse, horseSub[i], dx + (horseX[i] * scl), dy + (horseY[i] * scl), scl, scl, 0, horseCol[i], 1);
}

//Countdown
dx = global.miniX + ((384 / 4) * scl);
dy = global.miniY + ((240 / 4) * scl);
if (state == "countdown")
{
    draw_sprite_ext(sMiniHorseStart, floor(countdown / 60), dx, dy, scl, scl, 0, c_white, 1);
}

//Bars - 71, 99 - 6, 19 - 8
if (state == "race") event_user(2); //change bars
dx = global.miniX + (71 * scl);
dy = global.miniY + (99 * scl);
for (i = 0; i &lt; 4; i += 1)
{
    //draw_sprite_ext(s1x1, 0, dx, dy, 6 * scl, 19 * scl, 0, horseCol[i], 1);
    px = ((19 / 100) * horseBar[i]);
    rx = abs(px - 19);
    draw_sprite_ext(s1x1, 0, dx, dy + (rx * scl), 6 * scl, px * scl, 0, horseCol[i], 1);
    dx += 8 * scl;
}

//Heart
//horse heart - 106, 108 - 83 - 9 up and down
if (state == "race") event_user(1);
dx = global.miniX;
dy = global.miniY;
for (i = 0; i &lt; 84; i += 1)
{
    draw_sprite_ext(s1x1, 0, dx + (106 * scl), dy + ((108 + ds_list_find_value(dsHeart, i)) * scl), scl, scl, 0, horseCol[0], 1);
    dx += scl;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
