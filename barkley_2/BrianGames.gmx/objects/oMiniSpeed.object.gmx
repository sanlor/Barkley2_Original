<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Limbs
background_xscale[0] = 2;
background_yscale[0] = 2;
state = 0;

bodyRot = 0;
x = room_width / 4;

bushCou = 30;

//Define positions then add angkles from script
//INDEX, upper body, head, lower body, l arm, l hand, r arm, r hand, r leg, r calf, r foot, l leg, l calf, l foot
MiniSpeedJoints(0, 90, 10, 270, 240, 80, 240, 80, 10, -20, 110, 10, -20, 110); //stand
MiniSpeedJoints(1, 80, -30, 270, -40, 20, 130, 90, -60, -80, 110, 70, -30, 110); //walk 0
MiniSpeedJoints(2, 80, -30, 270, 130, 90, -40, 20, 70, -30, 110, -60, -80, 110); //walk 1
MiniSpeedJoints(3, 190, -120, 2170, 1330, 290, -470, 840, 720, -710, 1120, -630, -840, 1150); //crumple fall
MiniSpeedJoints(4, 70, -80, 260, 190, 100, 280 + 30, 100, 120, -110, 90, -10, -80, 90); //duck
poses = 5;
MiniSpeedJointsDeform(-1, -1);

//0 = upper body, 1 = head, 2 = lower body
//3 = l arm, 4 = l hand, 5 = r arm, 6 = r hand
//7 = l leg, 8 = l calf, 9 = l foot, 10 = r leg, 11 = r calf, 12 = r foot
dor[0] = 3;
dor[1] = 4;
dor[2] = 7;
dor[3] = 8;
dor[4] = 9;

dor[5] = 0;
dor[6] = 1;
dor[7] = 2;

dor[8] = 5;
dor[9] = 6;
dor[10] = 10;
dor[11] = 11;
dor[12] = 12;

limbs = 13;

for (i = 0; i &lt; limbs; i += 1) { limbSpr[i] = -1; }

limbLok[0] = -1; //upper body
limbDis[0] = 10;
limbSpr[0] = sMiniSpeedUpper;
limbLok[1] = 0; //head
limbDis[1] = 15;
limbSpr[1] = sMiniSpeedHead;
limbLok[2] = -1; //lower body
limbDis[2] = 30;
limbSpr[2] = sMiniSpeedLower;

limbLok[3] = -1; //l arm
limbDis[3] = 15;
limbSpr[3] = sMiniSpeedArm;
limbLok[4] = 3; //l hand
limbDis[4] = 15;
limbSpr[4] = sMiniSpeedHand;

limbLok[5] = -1; //r arm
limbDis[5] = 15;
limbSpr[5] = sMiniSpeedArm;
limbLok[6] = 5; //r hand
limbDis[6] = 15;
limbSpr[6] = sMiniSpeedHand;

limbLok[7] = 2; //l leg
limbDis[7] = 20;
limbSpr[7] = sMiniSpeedLeg;
limbLok[8] = 7; //l calf
limbDis[8] = 20;
limbSpr[8] = sMiniSpeedCalf;
limbLok[9] = 8; //l foot
limbDis[9] = 10;
limbSpr[9] = sMiniSpeedFoot;

limbLok[10] = 2; //r leg
limbDis[10] = 20;
limbSpr[10] = sMiniSpeedLeg;
limbLok[11] = 10; //r calf
limbDis[11] = 20;
limbSpr[11] = sMiniSpeedCalf;
limbLok[12] = 11; //r foot
limbDis[12] = 10;
limbSpr[12] = sMiniSpeedFoot;

for (i = 0; i &lt; limbs; i += 1) { limbDis[i] *= 2; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///body rot
if (keyboard_check(vk_anykey)) state = 1;
if (keyboard_check(vk_right)) { bodyRot += 5; y -= 0; }
if (keyboard_check(vk_left)) { bodyRot -= 5; y += 0; }

bushCou -= 1;
if (bushCou &lt; 0)
{
    bushCou = 120 + random(60);
    instance_create(room_width, 380 + random(40), oMiniSpeedBush);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw character
global.miniScale = 2;
if (state == 0)
{
    ds = global.miniScale;
    draw_sprite_ext(sMiniSpeedTitle, 0, (384 / 2) * global.miniScale, (240 / 6) * global.miniScale, ds, ds, 0, c_white, 1);
}

if (mouse_x &lt; room_width * .33) { pose0 = 1; pose1 = 0; }
else if (mouse_x &lt; room_width * .66) { pose0 = 0; pose1 = 2; }
else { pose0 = 2; pose1 = 3; }
MiniSpeedJointsDeform(pose0, pose1);

//Get first position
pose = pose0;
for (i = 0; i &lt; limbs; i += 1)
{
    if (limbLok[i] == -1) 
    { 
        limbX0[0, i] = x; 
        limbY0[0, i] = y; 
        limbD = 0; 
    }
    else 
    { 
        limbX0[0, i] = limbX1[0, limbLok[i]]; 
        limbY0[0, i] = limbY1[0, limbLok[i]]; 
        limbD = point_direction(limbX0[0, limbLok[i]], limbY0[0, limbLok[i]], limbX1[0, limbLok[i]], limbY1[0, limbLok[i]]);
    }
    limbX1[0, i] = limbX0[0, i] + lengthdir_x(limbDis[i], limbD + limbDirD[pose, i]);
    limbY1[0, i] = limbY0[0, i] + lengthdir_y(limbDis[i], limbD + limbDirD[pose, i]);
}

//Get second position
pose = pose1;
for (i = 0; i &lt; limbs; i += 1)
{
    if (limbLok[i] == -1) 
    { 
        limbX0[1, i] = x; 
        limbY0[1, i] = y; 
        limbD = 0; 
    }
    else 
    { 
        limbX0[1, i] = limbX1[1, limbLok[i]]; 
        limbY0[1, i] = limbY1[1, limbLok[i]]; 
        limbD = point_direction(limbX0[1, limbLok[i]], limbY0[1, limbLok[i]], limbX1[1, limbLok[i]], limbY1[1, limbLok[i]]);
    }
    limbX1[1, i] = limbX0[1, i] + lengthdir_x(limbDis[i], limbD + limbDirD[pose, i]);
    limbY1[1, i] = limbY0[1, i] + lengthdir_y(limbDis[i], limbD + limbDirD[pose, i]);
}

//Draw all limbs
//if (mouse_x &lt; room_width / 2) { tween0 = (2 / room_width) * mouse_x; }
//else { tween0 = (2 / room_width) * (mouse_x - (room_width / 2)); }

background_hspeed[0] = -2;
ypl = 0;
brt = 0;
if (mouse_x &lt; room_width * .33) { tween0 = (3 / room_width) * mouse_x; }
else if (mouse_x &lt; room_width * .66) { tween0 = (3 / room_width) * (mouse_x - (room_width * .33)); }
else 
{ 
    tween0 = (3 / room_width) * (mouse_x - (room_width * .66)); 
    tween0 = clamp(tween0, 0, 1);
    
    if (pose1 == 3)
    {
        brt = -180 * tween0; 
        ypl = (180 / 5) * 3;
        ypl *= tween0;
        background_hspeed[0] += tween0 * 2; 
    }
    else
    {
        //bodyRot = 360 * tween0;
        ypl = 50;
        ypl *= tween0;
    }
}

tween0 = clamp(tween0, 0, 1);
tween1 = abs(tween0 - 1);
for (i = 0; i &lt; limbs; i += 1)
{
    tx0[i] = (limbX0[0, i] * tween1) + (limbX0[1, i] * tween0);
    tx1[i] = (limbX1[0, i] * tween1) + (limbX1[1, i] * tween0);
    ty0[i] = (limbY0[0, i] * tween1) + (limbY0[1, i] * tween0);
    ty1[i] = (limbY1[0, i] * tween1) + (limbY1[1, i] * tween0);
}

for (i = 0; i &lt; limbs; i += 1)
{
    if (limbLok[i] == -1) 
    {
        lx0[i] = x;
        ly0[i] = y;
    }
    else
    {
        lx0[i] = lx1[limbLok[i]]; //(limbX0[0, i] * tween1) + (limbX0[1, i] * tween0);
        ly0[i] = ly1[limbLok[i]]; //(limbY0[0, i] * tween1) + (limbY0[1, i] * tween0);
    }
    lx1[i] = lx0[i] + lengthdir_x(limbDis[i], point_direction(tx0[i], ty0[i], tx1[i], ty1[i]));
    ly1[i] = ly0[i] + lengthdir_y(limbDis[i], point_direction(tx0[i], ty0[i], tx1[i], ty1[i]));
}

//Angle
for (i = 0; i &lt; limbs; i += 1) 
{
    ig = dor[i];
    if (ig == 9 || ig == 12) rt = -90; else rt = 0;
    ldr[ig] =  point_direction(lx0[ig], ly0[ig], lx1[ig], ly1[ig]) + rt;
}

//Rotate
for (i = 0; i &lt; limbs; i += 1) 
{
    dir = point_direction(x, y, lx0[i], ly0[i]);
    dis = point_distance(x, y, lx0[i], ly0[i]);
    lx0[i] = x + lengthdir_x(dis, dir + bodyRot + brt);
    ly0[i] = y + lengthdir_y(dis, dir + bodyRot + brt);
    ldr[i] += bodyRot + brt;
}

//Draw deal
for (i = 0; i &lt; limbs; i += 1)
{
    ig = dor[i];
    //lx0[i] = (limbX0[0, i] * tween1) + (limbX0[1, i] * tween0);
    //lx1[i] = (limbX1[0, i] * tween1) + (limbX1[1, i] * tween0);
    //ly0[i] = (limbY0[0, i] * tween1) + (limbY0[1, i] * tween0);
    //ly1[i] = (limbY1[0, i] * tween1) + (limbY1[1, i] * tween0);
    if (i &lt; 5) col = c_ltgray;
    else col = c_white;
    if (ig == 9 || ig == 12) rt = -90; else rt = 0;
    if (limbSpr[ig] == -1) draw_line_width(lx0[ig], ly0[ig], lx1[ig], ly1[ig], 5);
    else draw_sprite_ext(limbSpr[ig], 0, lx0[ig], ly0[ig] + ypl, 2, 2, ldr[ig], col, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
