<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2600000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create
//window_center();

//96x60
scl = 4 * global.miniScale;
bcl = scl; //blue guy scale
bSub = 0;
blocks = ds_list_create();
blockCou = 0;
blockFor = 2;
blockRev = 0;
for (i = 0; i &lt; 48 * 30; i += 1) //1440 or something
{
    ds_list_add(blocks, i);
}
ds_list_shuffle(blocks);

state = 0;
cou = 0;

mainX = 0;
mainY = 0;
mainSpr = sMiniSwordbaneArchibald;
mainSub = 0;
select = 0;

shineX = 0;
cloudX = 0;
textSub = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
if (state == 1) shineX += dt();
if (shineX &gt; 96) shineX = 0;

cloudX += dt();
if (cloudX &gt; 96) cloudX = 0;

if (state &lt;= 1)
{
    //Can't exit
    //if (MiniKeyPress("cancel")) { Minigame("stop"); instance_destroy(); }
}

if (state == 0)
{
    cou += dt();
    if (cou &gt; 40)
    {
        blockFor = 0;
        state = 0.5;
    }
}
else if (state == 0.5)
{
    if (blockFor == 2)
    {
        state = 1;
        blockRev = 0;
        mainSpr = sMiniSwordbaneTitle;
    }
}
else if (state == 1)
{
    if (blockRev == 2 &amp;&amp; blockFor == 2)
    {
        if (MiniKeyPress("up"))
        {
            select = !select;
        }
        else if (MiniKeyPress("down"))
        {
            select = !select;
        }
        else if (MiniKeyPress("action"))
        {
            if (select == 0) { state = 2; blockFor = 0; }
            else if (select == 1) { instance_destroy(); } //room_goto(rMiniMain); }
        }
    }
}
else if (state == 2)
{
    if (blockFor == 2)
    {
        state += 1;
        cou = 0;
        mainSpr = sMiniSwordbaneLobby;
        mainX = 48;
        mainY = 30;
        blockRev = 0;
    }
}
else if (state == 3)
{
    if (blockRev == 2)
    {
        cou += dt();
        if (cou &lt; 20)
        {
            mainSub = 0;
        }
        else if (cou &lt; 45)
        {
            mainSub = 1;
        }
        else if (cou &lt; 75)
        {
            mainSub = 2;
        }
        else
        {
            blockFor = 0;
            state += 1;
        }
    }
}
else if (state == 4)
{
    if (blockFor == 2)
    {
        mainSpr = sMiniSwordbaneBG;
        mainX = 0;
        mainY = 0;
        mainSub = 0;
        blockRev = 0;
        state += 1;
        cou = 0;
    }
}
else if (state == 5)
{
    if (blockRev == 2)
    {
        tim = 1.5; //slows cinema by 1.5
        cou += dt();
        if (cou &lt; 15 * tim)
        {
            textSub = 0;
        }
        else if (cou &lt; 30 * tim)
        {
            textSub = 1;
        }
        else if (cou &lt; 50 * tim)
        {
            bcl = -abs(bcl);
        }
        else if (cou &lt; 65 * tim)
        {
            textSub = 2;
            bSub = 1;
        }
        else if (cou &lt; 85 * tim)
        {
            textSub = 3;
        }
        else if (cou &lt; 115 * tim)
        {
            instance_destroy(); //room_goto(rMiniMain);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reverse block draw
if (blockRev == 2) exit;
if (blockRev == 0) { blockRev = 1; blockCou = 48 * 30; ds_list_shuffle(blocks); }
blockCou -= dt() * 400;
for (i = 0; i &lt; blockCou; i += 1)
{
    h = ds_list_find_value(blocks, i);
    dx = (h mod 48) * 2 * scl;
    dy = (h div 48) * 2 * scl;
    draw_sprite_ext(sMiniSwordbane2, 0, global.miniX + dx, global.miniY + dy, scl, scl, 0, c_black, 1);
}
if (blockCou &lt;= 0) blockRev = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Forward block draw
if (blockFor == 2) exit;
if (blockFor == 0) { blockFor = 1; blockCou = 0; ds_list_shuffle(blocks); }
blockCou += dt() * 400;
for (i = 0; i &lt; blockCou; i += 1)
{
    h = ds_list_find_value(blocks, i);
    dx = (h mod 48) * 2 * scl;
    dy = (h div 48) * 2 * scl; //was 30 error
    draw_sprite_ext(sMiniSwordbane2, 0, global.miniX + dx, global.miniY + dy, scl, scl, 0, c_black, 1);
}
if (blockCou &gt;= 48 * 30) blockFor = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
draw_set_color(c_black);
dx = global.miniX;
dy = global.miniY;
draw_rectangle(dx, dy, dx + (385 * global.miniScale), dy + (241 * global.miniScale), 0);

if (state == 1)
{
    draw_sprite_ext(sMiniSwordbaneShine, 0, global.miniX + (floor(shineX) * scl) - (96 * scl), global.miniY + (5 * scl), scl, scl, 0, c_white, 1);
    draw_sprite_ext(sMiniSwordbaneShine, 0, global.miniX + (floor(shineX) * scl), global.miniY + (5 * scl), scl, scl, 0, c_white, 1);
    draw_sprite_ext(sMiniSwordbaneShine, 0, global.miniX + (floor(shineX) * scl) + (96 * scl), global.miniY + (5 * scl), scl, scl, 0, c_white, 1);
}

draw_sprite_ext(mainSpr, mainSub, global.miniX + (mainX * scl), global.miniY + (mainY * scl), scl, scl, 0, c_white, 1);

if (state == 1)
{
    draw_sprite_ext(mainSpr, 2 + select, global.miniX, global.miniY, scl, scl, 0, c_white, 1);
}

if (state &gt;= 4) //Lobby - 15 height textbox
{
    draw_sprite_ext(sMiniSwordbaneText, textSub, global.miniX, global.miniY + (42 * scl), scl, scl, 0, c_white, 1);
    if (mainSpr == sMiniSwordbaneBG) 
    {
        draw_sprite_ext(sMiniSwordbaneBlue, bSub, global.miniX + (74 * scl), global.miniY + (36 * scl), bcl, scl, 0, c_white, 1);
        //cloud
        draw_sprite_ext(sMiniSwordbaneBG, 1, global.miniX + (floor(cloudX) * scl) - (96 * scl), global.miniY, scl, scl, 0, c_white, 1);
        draw_sprite_ext(sMiniSwordbaneBG, 1, global.miniX + (floor(cloudX) * scl), global.miniY, scl, scl, 0, c_white, 1);
        draw_sprite_ext(sMiniSwordbaneBG, 1, global.miniX + (floor(cloudX) * scl) + (96 * scl), global.miniY, scl, scl, 0, c_white, 1);
    }
    if (textSub &gt;= 1) draw_sprite_ext(sMiniSwordbaneRed, textSub, global.miniX + (23 * scl), global.miniY + (36 * scl), scl, scl, 0, c_white, 1); //23, 36
}

event_user(0); //Forward trans
event_user(1); //Reverse trans
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
