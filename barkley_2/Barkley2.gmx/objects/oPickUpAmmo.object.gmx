<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sAmmo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oPickUp</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Inheritance //
event_inherited();

// Which type? //
if random(100) &lt; global.settingAmmoRandom then 
    {
    ammoType = 0;
    grafix = sAmmo;
    }
else 
    {
    ammoType = 1;
    grafix = sAmmoAlt;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show Text
var ind = instance_create(o_hoopz.x, o_hoopz.y, o_entity_indicatorCandy);
if (ammoType = 0)
{
    // Fill current gun to 100%
    var cap = Gun("capacity", Gun("current"));
    Gun("ammo", Gun("current"), cap);
    ind.name = Gun("name", Gun("current"));
    ind.number = "+100%";
}
else
{
    // Fill all Bandolier guns to 20%
    for (i = 0; i &lt; 5; i += 1)
    {
        if (Gun("exists", i))
        {
            var cap = Gun("capacity", i);
            var ammCur = Gun("ammo", i);
            Gun("ammo", i, min(cap, ammCur + (cap * 0.20)));
        }
    }
    ind.name = "BANDO";
    ind.number = "+20%";
}
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
event_inherited();
var scl = 1;
var drx = dx;
var dry = dy;
draw_sprite_ext(grafix, 0, x, y - base_z, 1, 1, 0, c_black, shadow_strength);
if (scr_item_blink(timer, flash))
{
    draw_sprite_ext(grafix, 0, drx, dry, 1, 1, 0, c_white, 1);
    if (pickable) 
    {
        var colorAlpha = abs(sin(colorSin)) * .25;
        colorAlpha /= 4;
        var color = merge_colour(c_ltblue, c_white, 0.5);
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(grafix, 1, drx - 1, dry, 1, 1, 0, color, colorAlpha);
        draw_sprite_ext(grafix, 1, drx + 1, dry, 1, 1, 0, color, colorAlpha);
        draw_sprite_ext(grafix, 1, drx, dry - 1, 1, 1, 0, color, colorAlpha);
        draw_sprite_ext(grafix, 1, drx, dry + 1, 1, 1, 0, color, colorAlpha);
        draw_set_blend_mode(bm_normal);
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
