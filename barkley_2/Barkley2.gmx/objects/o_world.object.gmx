<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>99</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// These teleport variables are in here because o_world is persistent and
// across worlds...
_teleport_x = 0;
_teleport_y = 0;

// Init and reset game
scr_game_init();

// Animated tile stuff //
tileanim = 0;
tileanimtimer = 0;

// Tile reading = ON //
read_tiles = true
room_has_z = 0;

// This is the only reference to temp_spawner in the entire game. Commenting it out //
// Don't know what this stuff below does, something about room and spawn loading //
// temp_spawner=0; //Temp Spawner info for Spawners not hard saved into the spms

// This is the only reference to room_spawn in the entire game so... I'll comment it out since it don't do dick.
// room_spawn=ds_map_create();

// This room_track stuff is used for keeping track of the 3 latest rooms you have been in but that data itself is not used for anything. It's being tracked for no reason so I'm
// commenting it out.
// room_track[0]=0;
// room_track[1]=0;
// room_track[2]=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Cap room speed
if (global.event == 0 &amp;&amp; global.borderOnce == 1) global.borderOnce = 0;
room_speed = global.settingGameFPSMax;

// Update delta time
scr_deltatime_update();

// Spawn points step
spawn_step();

// Read tiles when called
if (scr_area_get() == "mng") exit;
if (read_tiles) {
    scr_tile_importall();
    read_tiles = false;
    
    // Start deferredRender process ONLY if Z exists
    if (room_has_z != undefined and room_has_z) instance_create(0, 0, o_deferredRender);
    room_has_z = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Background music //
Sound("step");
Music("step");
audio_bgm_step();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render rails
if (instance_exists(oRailing0Placer) == 0) exit;
global.dsgRail = ds_grid_create(floor(room_width / 8), floor(room_height / 8));
global.dsgRailDid = ds_grid_create(floor(room_width / 8), floor(room_height / 8));
global.dslRailX = ds_list_create();
global.dslRailY = ds_list_create();
global.dslRailO = ds_list_create();
global.dslRailNextX = ds_list_create();
global.dslRailNextY = ds_list_create();
global.dslRailNextO = ds_list_create();
global.totRail = 0;
global.didRail = 0;

// Mark everything
with (oRailing0Placer) event_user(0);

// Find out how many links and add corners to queue
for (i = 0; i &lt; ds_list_size(global.dslRailX); i += 1)
{
    grx = global.dslRailX[| i];
    gry = global.dslRailY[| i];
    lnk = 0; upp = 0; dow = 0; lef = 0; rig = 0;
    if (ds_grid_get(global.dsgRail, grx, gry - 1)) { lnk += 1; upp = 1; }
    if (ds_grid_get(global.dsgRail, grx, gry + 1)) { lnk += 1; dow = 1; }
    if (ds_grid_get(global.dsgRail, grx - 1, gry)) { lnk += 1; lef = 1; }
    if (ds_grid_get(global.dsgRail, grx + 1, gry)) { lnk += 1; rig = 1; }
    if (lnk == 1)
    {
        if (lef)
        {
            Railing("place", grx, gry, 7);
            //Railing("queue", grx - 1, gry, 0);
        }
        if (rig)
        {
            Railing("place", grx, gry, 9);
            //Railing("queue", grx + 1, gry, 0);
        }
        if (upp)
        {
            Railing("place", grx, gry, 8);
            //Railing("queue", grx - 1, gry, 0);
        }
        if (dow)
        {
            Railing("place", grx, gry, 6);
            //Railing("queue", grx + 1, gry, 0);
        }
    }
    else if (lnk == 2)
    {
        if (upp &amp;&amp; dow) Railing("place", grx, gry, 2 + irandom(3));
        if (lef &amp;&amp; rig) Railing("place", grx, gry, (grx mod 2));
        if (upp &amp;&amp; rig)
        {
            Railing("place", grx, gry, 10);
            //Railing("queue", grx + 1, gry, 0);
            //Railing("queue", grx, gry - 1, 0);
        }
        if (upp &amp;&amp; lef)
        {
            Railing("place", grx, gry, 12);
            //Railing("queue", grx - 1, gry, 0);
            //Railing("queue", grx, gry - 1, 1);
        }
        if (dow &amp;&amp; rig)
        {
            Railing("place", grx, gry, 13);
            //Railing("queue", grx + 1, gry, 0);
            //Railing("queue", grx, gry + 1, 0);
        }
        if (dow &amp;&amp; lef)
        {
            Railing("place", grx, gry, 11);
            //Railing("queue", grx - 1, gry, 0);
            //Railing("queue", grx, gry + 1, 1);
        }
    }
}

// Free
ds_grid_destroy(global.dsgRail);
ds_grid_destroy(global.dsgRailDid);
ds_list_destroy(global.dslRailX);
ds_list_destroy(global.dslRailY);
ds_list_destroy(global.dslRailO);
ds_list_destroy(global.dslRailNextX);
ds_list_destroy(global.dslRailNextY);
ds_list_destroy(global.dslRailNextO);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update room_track array

// So that Z HEIGHT does not transfer base_z in create of Particle
with (sys_collision) {
    scr_collisionSystem_destroy();
    scr_collisionSystem_init(room_width, room_height);
}

// room_track[2]=room_track[1];
// room_track[1]=room_track[0];
// room_track[0]=room;

//show_debug_message("Room0 is " +string(room_track[0]));
//show_debug_message("Room1 is " +string(room_track[1]));
//show_debug_message("Room2 is " +string(room_track[2]));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Run roomstart script except for in logo rooms
//room != r_charcreate and

event_user(0); // Do railings
scr_deltatime_setModifier(1); // Fix teleport issue
// Must be before so it gets collisions

// Automatically create wading conditions for the map if there are wading tiles in it //
if (instance_exists(o_wading))
{
    if (instance_exists(o_wading_area) == 0)
    {
        instance_create(-128, 168, o_wading_area);
    }
}

// Automatically put room unbound to all rooms //
if (instance_exists(o_room_unbound) == 0)
{
    // GZ NOTE do room light on top / bottom first
    // LAZ NOTE environs also show up out of bounds when this is used, looks pretty goofy/bad
    // instance_create(-999, -999, o_room_unbound);
}

// Exceptions to the rules // Does the collisions, Z-height etc. for rooms BUT only if they are not one of the rooms listed here //
if (room != r_scale and
    room != r_logo and
    room != r_logo_debug and
    room != r_deathscreen01 and
    room != r_cc){
    scr_map_roomstart()
}

// Put the tiles in there //
read_tiles = true;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Write data to "settings.ini" -- outdated
//scr_save_config()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
