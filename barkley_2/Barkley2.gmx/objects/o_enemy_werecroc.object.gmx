<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sWerecrocMap</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>EnemyCombatActor</parentName>
  <maskName>mask_disk_32by32</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///you get all the default variables from EnemyCombatActor
event_inherited();

// Enemy stats
scr_enemyDB_statsGet(enemyBuild);

// Enemy configurations
scr_entity_setZHitbox(0, 48);
anim = 0;
animSpd = 0.2;
animStrike = 0;

// Crocs have a randomized Aggro distance
triggerDist = 80 + random(100);
if (random(10) &gt;= 6) {
   unaggroOnLand = true;
}
else {
   unaggroOnLand = false;
}

scr_AI_aggro_configure(40, triggerDist, 300);


///that function fills in the monster's default resistances
///based on its monster type.

deathSound = "werecroc_death";
damageSound = "werecroc_grunt";

diveAnim = 0;
diveAnimMax = 5;
submerged = true;

// Passive and active states
var ark, conf, attack, attacks,guard;
guard = scr_AI_addPassiveState(scr_AI_passive_guard);
guard[? "visionRange"] = triggerDist;
guard[? "visionAngle"] = 360;

conf = scr_AI_addActiveState(scr_AI_active_approach);

// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// Swipe
attack = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_action_slash);
attack[? "action"] = action; 
conf[? "stateAfterStop"] = action;

AI_util_action_setDamage(action, 10, 1, 0, 0, 10, 100, STAGGER_HARDNESS_MEDIUM);
action[? "attackName"] = "slash";
action[? "sndAttackWarn"] = "croc_warn"; //attacking scream
action[? "sndAttackStrike"] = "croc_attack"; 
action[? "beforeTime"] = 3;
action[? "afterTime"] = 2;
action[? "mask"] = mask_crescent_48_24;
action[? "range"] = 0;

attack[? "distMax"] = 40;
attack[? "cooldownTime"] = 8;
attack[? "cooldownTimeRnd"] = 2;
attack[? "predicate"] = predicate_AI_isNotWading;

// Snap Kill
attack = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_action_slash);
attack[? "action"] = action; 
conf[? "stateAfterStop"] = action;

action[? "attackName"] = "snap_kill";
action[? "dmg"] = 999;
action[? "sndAttackWarn"] = "croc_hunger"; //attacking scream
action[? "sndAttackStrike"] = "croc_snap_kill";
action[? "beforeTime"] = 2;
action[? "damageTime"] = 3;
action[? "afterTime"] = 10;
action[? "beforeSpeed"] = 15;
action[? "mask"] = mask_disk_48by48;
action[? "range"] = 0;
action[? "instantKill"] = true;

attack[? "distMax"] = 34;
attack[? "cooldownTime"] = 5;
attack[? "cooldownTimeRnd"] = 5;
attack[? "predicate"] = predicate_AI_isWading;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create animations

// Swim
scr_entity_animation_define("swim", s_werecroc_swim, 0, 1, 0);

// Emerge
scr_entity_animation_define("emerge", s_werecroc_swim, 0, 9, 0);

// Stand
scr_entity_animation_define("stand", s_werecroc, 0, 1, 0);

// Walk
scr_entity_animation_define("walk", s_werecroc, 2, 4, 0.9);

// Stagger
scr_entity_animation_define("stagger", s_werecroc, 1, 1, 0);

// Swipe 
scr_entity_animation_define("swipe_before", s_werecroc, 6, 3, 0);

scr_entity_animation_define("swipe_damage", s_werecroc, 9, 1, 0);

scr_entity_animation_define("swipe_after", s_werecroc, 10, 3, 0);

// Death-roll
scr_entity_animation_define("deathroll_before", s_werecroc_snap, 0, 2, 0);

scr_entity_animation_define("deathroll_damage", s_werecroc_snap, 2, 1, 0);

scr_entity_animation_define("deathroll_after", s_werecroc_snap, 3, 10, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!scr_actor_isWading(self.id))
{
    diveAnim = min(diveAnimMax, diveAnim + dt());
}
else
{
    diveAnim = max(0, diveAnim - dt());
    if (instance_exists(I_AI_target) and unaggroOnLand) {
        if (!scr_actor_isWading(I_AI_target)) {
            scr_AI_aggro_removeAggroTowardsTarget(I_AI_target);
        }
    }
}


if (diveAnim &gt; 0) {
    // On land
    scr_entity_setZHitbox(0, 48);
    shadow_visible = true;
    scr_stats_setBaseStat(self, STAT_BASE_SPEED, 7);
    collisionPush = ACTOR_COLLISIONPUSH_STANDARD;
}
else {
    // In water
    scr_entity_setZHitbox(0, 1); // Almost impossible to hit
    shadow_visible = false;
    scr_stats_setBaseStat(self, STAT_BASE_SPEED, 9);
    collisionPush=ACTOR_COLLISIONPUSH_NONE;
}

// For deathroll, should be able to shoot the croc
if (a_attackName == "snap_kill") {
    if (a_attackState == "after" &amp;&amp; I_atk_slsh_timer / I_atk_slsh_intAfter &gt; 0.5) {
        // ...unless croc has resubmerged after biting and bubbles are coming up
        scr_entity_setZHitbox(0, 1);
    }
    else {
        scr_entity_setZHitbox(0, 24);
    }
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _obj;

var repeats = 3 + irandom(3);
repeat(repeats) {
    _obj = instance_create(x,y,o_FX);
    _obj.z = z + random(hitbox_z_top);
    _obj.sprite_index = s_fx_bloodBurst;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y-4,o_gibs);
    _obj.z = z + 16;
    _obj.sprite_index = s_werecroc_gore;
    _obj.image_index = irandom(9);
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y+4,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_werecroc_gore;
    _obj.image_index = irandom(9);
}

repeat(4)
{
    if(random(1)&gt;0.3)
    {
        _obj = instance_create(x,y,o_gibs);
        _obj.z = z + 10;
        _obj.sprite_index = s_werecroc_gore;
        _obj.image_index = 3 + irandom(6);
    }
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>diveFalloff += dt() * 2;

///unless something happened to cancel climbing out, then stop the action
if(diveFalloff&gt;=9)
{
    stateResult = AI_STATERESULT_REMOVE;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Get quadrant enemy is facing towarsd
var quadrant = ((faceDir+360) mod 360) div 90;

// Set animation shifts
if (quadrant == 2 or quadrant == 3) {
    // Facing downwards
    scr_entity_animation_setShift("swim", 0);
    scr_entity_animation_setShift("emerge", 0);
    scr_entity_animation_setShift("stand", 0);
    scr_entity_animation_setShift("walk", 0);
    scr_entity_animation_setShift("stagger", 0);
    scr_entity_animation_setShift("swipe_before", 0);
    scr_entity_animation_setShift("swipe_damage", 0);
    scr_entity_animation_setShift("swipe_after", 0);
    scr_entity_animation_setShift("deathroll_before", 0);
    scr_entity_animation_setShift("deathroll_damage", 0);
    scr_entity_animation_setShift("deathroll_after", 0);
}
else {
    // Facing upwards
    scr_entity_animation_setShift("swim", 9);
    scr_entity_animation_setShift("emerge", 9);
    scr_entity_animation_setShift("stand", 13);
    scr_entity_animation_setShift("walk", 13);
    scr_entity_animation_setShift("stagger", 13);
    scr_entity_animation_setShift("swipe_before", 13);
    scr_entity_animation_setShift("swipe_damage", 13);
    scr_entity_animation_setShift("swipe_after", 13);
    scr_entity_animation_setShift("deathroll_before", 0);
    scr_entity_animation_setShift("deathroll_damage", 0);
    scr_entity_animation_setShift("deathroll_after", 0);
}

// Check if animation should be flipped
var xScale;
if (quadrant == 0 or quadrant == 2) {
    xScale = -1;
}
else {
    xScale = 1;
}

// Determine sprite and image to render
var sprite = s_werecroc;
var image = 0;

// Snap attack
if(a_attackName == "snap_kill") {
    switch(a_attackState)
    {
        case "before":
            sprite = scr_entity_animation_getSpriteIndex("deathroll_before");
            image = scr_entity_animation_imageByRatio("deathroll_before", I_atk_slsh_timer, I_atk_slsh_intBefore);
            break;
            
        case "damage":
            sprite = scr_entity_animation_getSpriteIndex("deathroll_damage");
            image = scr_entity_animation_imageByRatio("deathroll_damage", I_atk_slsh_timer, I_atk_slsh_intDamage);
            break;
        
        case "after":
            sprite = scr_entity_animation_getSpriteIndex("deathroll_after");
            image = scr_entity_animation_imageByRatio("deathroll_after", I_atk_slsh_timer, I_atk_slsh_intAfter);
            break;
    }
}
// Swipe attack
else if(a_attackName == "slash") {
    switch(a_attackState)
    {
        case "before":
            sprite = scr_entity_animation_getSpriteIndex("swipe_before");
            image = scr_entity_animation_imageByRatio("swipe_before", I_atk_slsh_timer, I_atk_slsh_intBefore);
            break;
            
        case "damage":
            sprite = scr_entity_animation_getSpriteIndex("swipe_damage");
            image = scr_entity_animation_imageByRatio("swipe_damage", I_atk_slsh_timer, I_atk_slsh_intDamage);
            break;
        
        case "after":
            sprite = scr_entity_animation_getSpriteIndex("swipe_after");
            image = scr_entity_animation_imageByRatio("swipe_after", I_atk_slsh_timer, I_atk_slsh_intAfter);
            break;
    }
}
// --Swim
else if (diveAnim == 0) {
    sprite = scr_entity_animation_getSpriteIndex("swim");
    image = scr_entity_animation_getImage("swim");
}
// --On land
else if (diveAnim == diveAnimMax) {
    
    // Stagger (on land only)
    if(a_attackName == "stagger") {
        sprite = scr_entity_animation_getSpriteIndex("stagger");
        image = scr_entity_animation_getImage("stagger");
    }
    
    // Walk or stand
    else {
        if (a_walking) {
            sprite = scr_entity_animation_getSpriteIndex("walk");
            image = scr_entity_animation_getImage("walk");
        }
        else {
            sprite = scr_entity_animation_getSpriteIndex("stand");
            image = scr_entity_animation_getImage("stand");
        }
    }
}
// --Climbing out
else {
    sprite = scr_entity_animation_getSpriteIndex("emerge");
    image = scr_entity_animation_imageByRatio("emerge", diveAnim, diveAnimMax);
}

// Render sprite
if (sprite == s_werecroc) DrawStripExt(sprite, image, dx, dy, xScale, 1, 0, image_blend, 1);
else draw_sprite_ext(sprite, image, dx, dy, xScale, 1, 0, image_blend, 1);
combatActor_draw_post();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>14,18</point>
    <point>14,14</point>
  </PhysicsShapePoints>
</object>
