<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBugflowerMimicMap</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>EnemyCombatActor</parentName>
  <maskName>mask_disk_40by32</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////you get all the default variables from EnemyCombatActor
event_inherited();

// Enemy stats
scr_enemyDB_statsGet(enemyBuild);

// Enemy configurations
scr_entity_setZHitbox(0, 32);

// Ailment totem coordinates //
ailmentTotem_define(self.id, -16, 18, 32, 50);

anim = 0;
animSpd = 0.5;
animStrike = 0;

event_hook_on_hit = 15;

deathSound = "plantmimic_death";
damageSound = "plantmimic_hurt";

// Mimiced plant frames

baseFrm = irandom(3);
leafFrm = irandom(3);
flowerFrm = irandom(3);

baseHscale = choose(1,-1);
baseVscale = choose(1,-1);
leafHscale = choose(1,-1);
flowerHscale = choose(1,-1);

// Movement
var movement = scr_AI_movement_init(scr_AI_movementType_standard);
movement[? "animWalkSpd"] = 0.16;

// Passive and active states
var ark, conf, guard;
proximity = scr_AI_addPassiveState(scr_AI_passive_proximity);
proximity[? "visionRange"] = 120;
proximity[? "checkFreq"] = 10; 
proximity[? "waitTime"] = 30 + random(20);  // Up to 5 seconds time before mimic wakes up!

scr_AI_hearing_setHearingDistanceModifer(0) // Do not wake up from sounds

conf = scr_AI_addActiveState(scr_AI_active_approach);
conf[? "walkScript"] = movement;


// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// SUPPLIES! animation
awaken_anim = scr_AI_addAction(scr_AI_action_animation);
awaken_anim[? "attackName"] = "awaken";
awaken_anim[? "time"] = 4;
awaken_anim[? "snd"] = "plantmimic_scream";
conf[? "actionOnActive"] = awaken_anim;

// Slash
attack = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_action_slash);
attack[? "action"] = action;
conf[? "stateAfterStop"] = action;

AI_util_action_setDamage(action, 10, 1, 0, 0, 10, 100, STAGGER_HARDNESS_SOFT);
action[? "mask"] = mask_crescent_40_20;
action[? "range"] = 8;
action[? "beforeTime"] = 4;
action[? "damageTime"] = 2;
action[? "afterTime"] = 3;
action[? "attackName"] = "tailwhip";
action[? "sndAttackWarn"] = "plantmimic_warn";
action[? "sndAttackStrike"] = "plantmimic_strike";

attack[? "distMax"] = 32;
attack[? "cooldownTime"] = 1.5;
attack[? "cooldownTimeRnd"] = 1.5;
attack[? "rechargeTime"] = 0;
attack[? "rechargeTimeRnd"] = 0;

scr_entity_animation_new("default");
_default_offset=0;

collisionPush=ACTOR_COLLISIONPUSH_IMMOBILE;
scr_entity_setCollisionType(COLLISION_ALL);
scr_AI_aggro_configure(40, 90, 200);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create animations

// Awaken
scr_entity_animation_new("awaken");
scr_entity_animation_setSpriteIndex("awaken", s_bugflower_mimic);
scr_entity_animation_setRange("awaken", 0, 5);

// Stand
scr_entity_animation_new("stand");
scr_entity_animation_setSpriteIndex("stand", s_bugflower_mimic);
scr_entity_animation_setRange("stand", 7, 1);

// Walk
scr_entity_animation_new("walk");
scr_entity_animation_setSpriteIndex("walk", s_bugflower_mimic);
scr_entity_animation_setRange("walk", 8, 4);
scr_entity_animation_setSpeed("walk", 1);

// Stagger
scr_entity_animation_new("stagger");
scr_entity_animation_setSpriteIndex("stagger", s_bugflower_mimic);
scr_entity_animation_setRange("stagger", 5, 1);

// Slash
scr_entity_animation_new("slash_before");
scr_entity_animation_setSpriteIndex("slash_before", s_bugflower_mimic);
scr_entity_animation_setRange("slash_before", 12, 7);
scr_entity_animation_new("slash_damage");
scr_entity_animation_setSpriteIndex("slash_damage", s_bugflower_mimic);
scr_entity_animation_setRange("slash_damage", 19, 3);
scr_entity_animation_new("slash_after");
scr_entity_animation_setSpriteIndex("slash_after", s_bugflower_mimic);
scr_entity_animation_setRange("slash_after", 22, 2);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if paused() exit;

if (AI_stateTopType == AI_STATETYPE_PASSIVE) {
    collisionPush=ACTOR_COLLISIONPUSH_IMMOBILE;
}
else {
    collisionPush=ACTOR_COLLISIONPUSH_STANDARD;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var atk = argument_attackId;

_obj = instance_create(x,y,o_FX);
_obj.sprite_index = s_bugflower_plant_gore;
_obj.image_index = 3 + irandom(6);
_obj.image_angle = choose(0,90,180,270);
_obj.x = atk.x;
_obj.y = atk.y;
_obj.depth = -99999;

event_inherited();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _obj,_reps;

_obj = instance_create(x,y,o_FX);
_obj.sprite_index = s_AlienBlood_big;
_obj.image_speed = 0.25;
_obj.image_angle = choose(0,90,180,270);

_reps = 0;
repeat(5)
{
    _obj = instance_create(x-32+random(64),y-32+random(64),o_FX);
    _obj.sprite_index = s_AlienBlood_small;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
    _reps +=1;
    _obj.delay = _reps*2;
}


_obj = instance_create(x,y,o_gibs);
_obj.sprite_index = s_bugflower_plant_gore;
_obj.shadow_radius = 5;
_obj.bloodburst = s_AlienBlood_small;
_obj.image_index = irandom(12);
    
if(random(1)&gt;0.2)
{
    _obj = instance_create(x,y-8,o_gibs);
    _obj.sprite_index = s_bugflower_plant_gore;
    _obj.bloodburst = s_AlienBlood_small;
    _obj.shadow_radius = 5;
    _obj.image_index = choose(0,1,3,6,12);
}

if(random(1)&gt;0.2)
{
    _obj = instance_create(x,y+8,o_gibs);
    _obj.sprite_index = s_bugflower_plant_gore;
    _obj.bloodburst = s_AlienBlood_small;
    _obj.shadow_radius = 5;
    _obj.image_index = choose(0,2,7,9,10);
}

if(random(1)&gt;0.2)
{
    _obj = instance_create(x-16,y,o_gibs);
    _obj.sprite_index = s_bugflower_plant_gore;
    _obj.bloodburst = s_AlienBlood_small;
    _obj.shadow_radius = 5;
    _obj.image_index = choose(1,8,4,10);
}

if(random(1)&gt;0.2)
{
    _obj = instance_create(x+16,y,o_gibs);
    _obj.sprite_index = s_bugflower_plant_gore;
    _obj.bloodburst = s_AlienBlood_small;
    _obj.shadow_radius = 5;
    _obj.image_index = choose(5,6,9,12);
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Get quadrant enemy is facing towarsd
var quadrant = ((faceDir+360) mod 360) div 90;

// Set animation shifts
if (quadrant == 2 or quadrant == 3) {
    // Facing downwards
    scr_entity_animation_setShift("awaken", 0);
    scr_entity_animation_setShift("stand", 0);
    scr_entity_animation_setShift("walk", 0);
    scr_entity_animation_setShift("stagger", 0);
    scr_entity_animation_setShift("slash_before", 0);
    scr_entity_animation_setShift("slash_damage", 0);
    scr_entity_animation_setShift("slash_after", 0);
}
else {
    // Facing upwards
    scr_entity_animation_setShift("awaken", 0);
    scr_entity_animation_setShift("stand", 19);
    scr_entity_animation_setShift("walk", 19);
    scr_entity_animation_setShift("stagger", -2);
    scr_entity_animation_setShift("slash_before", 18);
    scr_entity_animation_setShift("slash_damage", 18);
    scr_entity_animation_setShift("slash_after", 18);
}

// Check if animation should be flipped
var xScale;
if (quadrant == 0 or quadrant == 2) {
    xScale = -1;
}
else {
    xScale = 1;
}

// Determine sprite and image to render
var sprite = s_bugflower_mimic;
var image = 0;

// Mimic plant when passive
if (AI_stateTopType == AI_STATETYPE_PASSIVE) {
    draw_sprite_ext(s_bugflower_plant,baseFrm,dx,dy,baseHscale,baseVscale,0,image_blend,image_alpha);
    draw_sprite_ext(s_bugflower_plant,4 + leafFrm,dx,dy,leafHscale,1,0,image_blend,image_alpha);
    draw_sprite_ext(s_bugflower_plant,8 + flowerFrm,dx,dy,flowerHscale,1,0,image_blend,image_alpha);
    draw_sprite_ext(s_bugflower_plant,12 + leafFrm,dx,dy,leafHscale,1,0,image_blend,image_alpha);
    combatActor_draw_post();
    exit; // Done drawing
}
// Tail whip attack
else if(a_attackName == "tailwhip") {
    switch(a_attackState)
    {
        case "before":
            sprite = scr_entity_animation_getSpriteIndex("slash_before");
            image = scr_entity_animation_imageByRatio("slash_before", I_atk_slsh_timer, I_atk_slsh_intBefore);
            break;
            
        case "damage":
            sprite = scr_entity_animation_getSpriteIndex("slash_damage");
            image = scr_entity_animation_imageByRatio("slash_damage", I_atk_slsh_timer, I_atk_slsh_intDamage);
            break;
        
        case "after":
            sprite = scr_entity_animation_getSpriteIndex("slash_after");
            image = scr_entity_animation_imageByRatio("slash_after", I_atk_slsh_timer, I_atk_slsh_intAfter);
            break;
    }
}
// Awaken
else if(a_attackName == "awaken") {
    sprite = scr_entity_animation_getSpriteIndex("awaken");
    image = scr_entity_animation_imageByRatio("awaken", I_atk_anim_timer, I_atk_anim_max);
}
// Stagger
else if(a_attackName == "stagger") {
    sprite = scr_entity_animation_getSpriteIndex("stagger");
    image = scr_entity_animation_getImage("stagger");
}
    
// Walk or stand
else {
    if (a_walking) {
        sprite = scr_entity_animation_getSpriteIndex("walk");
        image = scr_entity_animation_getImage("walk");
    }
    else {
        sprite = scr_entity_animation_getSpriteIndex("stand");
        image = scr_entity_animation_getImage("stand");
    }
}

// Render sprite
DrawStripExt(sprite, image, dx, dy, xScale, 1, 0, image_blend, 1);

combatActor_draw_post();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>36,44</point>
    <point>36,36</point>
  </PhysicsShapePoints>
</object>
