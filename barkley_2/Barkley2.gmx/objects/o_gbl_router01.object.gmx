<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_gbl_router01</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>InteractiveActor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
event_inherited();
scr_event_hook_onInteract(event_cinema);

// Area check //
routerId = 0;
switch (scr_area_get())
    {    
    case "air": routerId = 0; break;
    case "bct": routerId = 1; break;
    case "est": routerId = 2; break;
    case "wst": routerId = 3; break;
    case "swp": routerId = 4; break;
    case "usw": routerId = 5; break;
    }

// Animation setup //
scr_entity_animation_define("routerError", s_gbl_router01, 0, 2, ANIMATION_DEFAULT_SPEED/2);
scr_entity_animation_define("routerOff", s_gbl_router01, 2, 0, 0);
scr_entity_animation_define("routerYellow", s_gbl_router01, 2, 3, ANIMATION_DEFAULT_SPEED/2);
scr_entity_animation_define("routerGreen", s_gbl_router01, 6, 0, 0);

// Other misc things //
shadow_radius = false;
dny = -16;
timer_reboot = 0;
ready = false;
lastState = -1;

/* The state the routers can be in.
    0 = Broken
    1 = Off
    2 = Working
*/

script = "
MOVETO | o_cts_hoopz | o_cinema0 | MOVE_NORMAL
WAIT   | 0
LOOKAT | o_cts_hoopz | o_gbl_router01
IF area == air | IF routerAirReady == 3 | GOTO | ON
IF area == bct | IF routerBctReady == 3 | GOTO | ON
IF area == est | IF routerEstReady == 3 | GOTO | ON
IF area == wst | IF routerWstReady == 3 | GOTO | ON
IF area == swp | IF routerSwpReady == 3 | GOTO | ON
IF area == usw | IF routerUswReady == 3 | GOTO | ON
IF area == air | IF routerAirReady == 2 | GOTO | OFF
IF area == bct | IF routerBctReady == 2 | GOTO | OFF
IF area == est | IF routerEstReady == 2 | GOTO | OFF
IF area == wst | IF routerWstReady == 2 | GOTO | OFF
IF area == swp | IF routerSwpReady == 2 | GOTO | OFF
IF area == usw | IF routerUswReady == 2 | GOTO | OFF
IF area == air | IF routerAir == 0 | GOTO | BROKEN
IF area == bct | IF routerBct == 0 | GOTO | BROKEN
IF area == est | IF routerEst == 0 | GOTO | BROKEN
IF area == wst | IF routerWst == 0 | GOTO | BROKEN
IF area == swp | IF routerSwp == 0 | GOTO | BROKEN
IF area == usw | IF routerUsw == 0 | GOTO | BROKEN
IF area == air | IF routerAir == 1 | GOTO | OFF
IF area == bct | IF routerBct == 1 | GOTO | OFF
IF area == est | IF routerEst == 1 | GOTO | OFF
IF area == wst | IF routerWst == 1 | GOTO | OFF
IF area == swp | IF routerSwp == 1 | GOTO | OFF
IF area == usw | IF routerUsw == 1 | GOTO | OFF

BROKEN
CHOICE | A mysterious router...
REPLY  | UNPLUG | Unplug the router.
REPLY  | MANUAL | Check the owner's manual.
REPLY  | LEAVE  | Leave it be.

UNPLUG
USEAT  | o_gbl_router01
SET    | o_gbl_router01 | routerOff
EVENT  | o_gbl_router01 | 1
EVENT  | o_gbl_router01 | 15

MANUAL
DIALOG | P_NAME | ...
DIALOG | P_NAME | Ah here it is, /'to connect to WiFi, unplug the device and wait 15 seconds before plugging back in./'
GOTO   | BROKEN

LEAVE
DIALOG | P_NAME | This router could become the bane of my existence. I better leave before something wacky happens.

OFF
CHOICE | The router is off.
REPLY  | TURNON    | Turn on the router.
REPLY  | OFF_LEAVE | Leave it off.

TURNON
USEAT  | o_gbl_router01
EVENT  | o_gbl_router01 | 2
WAIT   | 0.5
IF area == air | IF routerAir == 2 | GOTO | SUCCESS
IF area == bct | IF routerBct == 2 | GOTO | SUCCESS
IF area == est | IF routerEst == 2 | GOTO | SUCCESS
IF area == wst | IF routerWst == 2 | GOTO | SUCCESS
IF area == swp | IF routerSwp == 2 | GOTO | SUCCESS
IF area == usw | IF routerUsw == 2 | GOTO | SUCCESS
DIALOG | P_NAME | It doesn't work...
WAIT   | 1
DIALOG | P_NAME | Did I mess it up?

SUCCESS
DIALOG | P_NAME = s_port_hoopzSmirk | Heh, I've still got it...
GOTO   | ON

ON
CHOICE | The router is on and connected to WiFi.
REPLY  | CHAT       | Connect to Chatroulette.
REPLY  | UNPLUG_ON  | Unplug the router.
REPLY  | LEAVE_WIFI | Leave it be.

CHAT
CHATROULETTE | 1

UNPLUG_ON
USEAT  | o_gbl_router01
SET    | o_gbl_router01 | routerOff
DIALOG | P_NAME | There is a time and a place for routing.
EVENT  | o_gbl_router01 | 1
EVENT  | o_gbl_router01 | 15

LEAVE_WIFI
DIALOG | P_NAME | Nothing browns my toast like a stable WiFi connection.

OFF_LEAVE
DIALOG | P_NAME | I'd better leave it off, for now...
";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
// Inherit //
event_inherited();

// Pause //
if paused() exit;

// Reboot //
if timer_reboot &gt; 0 then
    {
    // Tick down //
    timer_reboot -= dt_sec();
    
    // Event //
    if timer_reboot &lt;= 0 then 
        {
        switch (routerId)
            {
            case 0: Quest("routerAirReady", 2);
            case 1: Quest("routerBctReady", 2);
            case 2: Quest("routerEstReady", 2);
            case 3: Quest("routerWstReady", 2);
            case 4: Quest("routerSwpReady", 2);
            case 5: Quest("routerUswReady", 2);
            }
        }
    }

// State
if routerId = 0 then
    {
    if (lastState != Quest("routerAir"))
        {
        lastState = Quest("routerAir");
        if (Quest("routerAir") == 0) then scr_entity_animation_set(o_gbl_router01, "routerYellow"); 
        else if (Quest("routerAir") == 1) then scr_entity_animation_set(o_gbl_router01, "routerOff");
        else if (Quest("routerAir") == 2) then scr_entity_animation_set(o_gbl_router01, "routerGreen");
        }
    }
else if routerId = 1 then
    {
    if (lastState != Quest("routerBct"))
        {
        lastState = Quest("routerBct");
        if (Quest("routerBct") == 0) then scr_entity_animation_set(o_gbl_router01, "routerYellow"); 
        else if (Quest("routerBct") == 1) then scr_entity_animation_set(o_gbl_router01, "routerOff");
        else if (Quest("routerBct") == 2) then scr_entity_animation_set(o_gbl_router01, "routerGreen");
        }
    }
else if routerId = 2 then
    {
    if (lastState != Quest("routerEst"))
        {
        lastState = Quest("routerEst");
        if (Quest("routerEst") == 0) then scr_entity_animation_set(o_gbl_router01, "routerYellow"); 
        else if (Quest("routerEst") == 1) then scr_entity_animation_set(o_gbl_router01, "routerOff");
        else if (Quest("routerEst") == 2) then scr_entity_animation_set(o_gbl_router01, "routerGreen");
        }
    }
else if routerId = 3 then
    {
    if (lastState != Quest("routerWst"))
        {
        lastState = Quest("routerWst");
        if (Quest("routerWst") == 0) then scr_entity_animation_set(o_gbl_router01, "routerYellow"); 
        else if (Quest("routerWst") == 1) then scr_entity_animation_set(o_gbl_router01, "routerOff");
        else if (Quest("routerWst") == 2) then scr_entity_animation_set(o_gbl_router01, "routerGreen");
        }
    }
else if routerId = 4 then
    {
    if (lastState != Quest("routerSwp"))
        {
        lastState = Quest("routerSwp");
        if (Quest("routerSwp") == 0) then scr_entity_animation_set(o_gbl_router01, "routerYellow"); 
        else if (Quest("routerSwp") == 1) then scr_entity_animation_set(o_gbl_router01, "routerOff");
        else if (Quest("routerSwp") == 2) then scr_entity_animation_set(o_gbl_router01, "routerGreen");
        }
    }
else if routerId = 5 then
    {
    if (lastState != Quest("routerUsw"))
        {
        lastState = Quest("routerUsw");
        if (Quest("routerUsw") == 0) then scr_entity_animation_set(o_gbl_router01, "routerYellow"); 
        else if (Quest("routerUsw") == 1) then scr_entity_animation_set(o_gbl_router01, "routerOff");
        else if (Quest("routerUsw") == 2) then scr_entity_animation_set(o_gbl_router01, "routerGreen");
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Reboot //
timer_reboot = 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Working
switch (routerId)
    {
    case 0: if Quest("routerAirReady") = 2 then Quest("routerAir", 2); break;
    case 1: if Quest("routerBctReady") = 2 then Quest("routerBct", 2); break;
    case 2: if Quest("routerEstReady") = 2 then Quest("routerEst", 2); break;
    case 3: if Quest("routerWstReady") = 2 then Quest("routerWst", 2); break;
    case 4: if Quest("routerSwpReady") = 2 then Quest("routerSwp", 2); break;
    case 5: if Quest("routerUswReady") = 2 then Quest("routerUsw", 2); break;
    }

// Working for realz
switch (routerId)
    {
    case 0: if Quest("routerAirReady") = 2 then Quest("routerAirReady", 3); break;
    case 1: if Quest("routerBctReady") = 2 then Quest("routerBctReady", 3); break;
    case 2: if Quest("routerEstReady") = 2 then Quest("routerEstReady", 3); break;
    case 3: if Quest("routerWstReady") = 2 then Quest("routerWstReady", 3); break;
    case 4: if Quest("routerSwpReady") = 2 then Quest("routerSwpReady", 3); break;
    case 5: if Quest("routerUswReady") = 2 then Quest("routerUswReady", 3); break;
    }
    
// Too early, it doesn't work //
switch (routerId)
    {
    case 0: if Quest("routerAirReady") &lt;= 1 then Quest("routerAir", 0); break;
    case 1: if Quest("routerBctReady") &lt;= 1 then Quest("routerBct", 0); break;
    case 2: if Quest("routerEstReady") &lt;= 1 then Quest("routerEst", 0); break;
    case 3: if Quest("routerWstReady") &lt;= 1 then Quest("routerWst", 0); break;
    case 4: if Quest("routerSwpReady") &lt;= 1 then Quest("routerSwp", 0); break;
    case 5: if Quest("routerUswReady") &lt;= 1 then Quest("routerUsw", 0); break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Off
switch (routerId)
    {
    case 0: Quest("routerAir", 1); break;
    case 1: Quest("routerBct", 1); break;
    case 2: Quest("routerEst", 1); break;
    case 3: Quest("routerWst", 1); break;
    case 4: Quest("routerSwp", 1); break;
    case 5: Quest("routerUsw", 1); break;
    }
switch (routerId)
    {
    case 0: Quest("routerAirReady", 1); break;
    case 1: Quest("routerBctReady", 1); break;
    case 2: Quest("routerEstReady", 1); break;
    case 3: Quest("routerWstReady", 1); break;
    case 4: Quest("routerSwpReady", 1); break;
    case 5: Quest("routerUswReady", 1); break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Break
switch (routerId)
    {
    case 0: Quest("routerAir", 0); break;
    case 1: Quest("routerBct", 0); break;
    case 2: Quest("routerEst", 0); break;
    case 3: Quest("routerWst", 0); break;
    case 4: Quest("routerSwp", 0); break;
    case 5: Quest("routerUsw", 0); break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
