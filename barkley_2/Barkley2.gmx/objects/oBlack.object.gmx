<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2510001</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
alpha = 0;
alphaGoal = 0;
alphaTime = 1;

// For fading to a room
roomGoto = NULL;
roomX = 0;
roomY = 0;
roomTimer = 0;

roomDelay = global.settingFadeDelay; // Ideal time to wait for transitions
// Fade out = 1, fade delay = 1, fade in = 1 = 3 second transiton

global.fadeBlack = 0;
global.fadeTime = 0; // retain current time
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Room Mover
if (paused()) exit;

if (global.fadeTime != 0)
{
    global.fadeTime -= dt_sec();
    if (global.fadeTime &lt; 0) global.fadeTime = 0;
    exit;
}

alpha = Goto(alpha, alphaGoal, dt_sec() / alphaTime);

if (roomTimer &gt; 0)
{
    roomTimer = Goto(roomTimer, 0, dt_sec());
    if (roomTimer &lt;= 0)
    {
        // Prevents hoopz dying while going through door
        if (Stat("hp") &lt;= 0) 
        { 
            alpha = 0; 
            alphaGoal = 0; 
            global.hudStick = 0;
            exit; 
        }
        global.fadeTime = current_time;
        Teleport(roomGoto, roomX, roomY, global.settingFadeOut);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Black Transition
if (global.fadeBlack &gt; 0)
{
    alpha = 1;
    alphaGoal = 0;
    alphaTime = global.fadeBlack;
    //o_hud.hudHide = global.fadeHud; // not created yet
    global.fadeTime = (current_time - global.fadeTime) / (1000 / roomDelay);
    global.fadeTime = min(roomDelay, global.fadeTime);
    global.fadeBlack = 0;
}
else
{
    alpha = 0;
    alphaGoal = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw End - Over HUD
draw_sprite_ext(s1x1, 0, floor(view_xview[0]) - 4, floor(view_yview[0]) - 4, view_wview[0] + 8, view_hview[0] + 8, 0, c_black, alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
