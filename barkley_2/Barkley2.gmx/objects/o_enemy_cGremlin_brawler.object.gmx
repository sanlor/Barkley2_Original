<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCybergremlinMap</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_enemygroup_cybergremlins</parentName>
  <maskName>mask_rect_16by16</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
event_inherited();
scr_enemyDB_statsGet(enemyBuild);
scr_path_setMovementType(scr_path_movementType_standard_offset);
scr_path_setWalldist(12+random(10));
ailmentTotem_define(self.id, -3, 10, 12, 25);
combatActor_setRenderSurfSize(64);
scr_entity_setZHitbox(0, 24);

anim = 0;
animSpd = 0.2;
animStrike = 0;
pType = choose(1,2,3,5,6);
headType = choose(5,6,7,8,9,10,11);
weaponType = choose(1,2,3,4,5);
armTypeR = choose(1,2);
armTypeL = choose(armTypeR,armTypeR,0,1,2);

screamSound = "cGremlinSmall_scream";
attackSound = "cGremlinSmall_swipe";
alertSound = "cGremlinSmall_alert";
deathSound = "cGremlinSmall_death";
damageSound = "cGremlinSmall_grunt";
hook_hitfx = enemy_hitfx_cgremlins;

// Passive and active states
var guard = scr_AI_addPassiveState(scr_AI_passive_guard);
ds_map_replace(guard, "sndAlertSound", alertSound);
activeApproach = scr_AI_addActiveState(scr_AI_active_approach);
activeCircle = scr_AI_addActiveState(scr_AI_active_circle);
activeCircle[? "switchAddMaxDist"] = 80;
activeCircle[? "switchPriority"] = 10;
activeRetreat = scr_AI_addActiveState(scr_AI_active_retreat);
activeRetreat[? "switchPriority"] = 20;
activeRetreat[? "switchDisablePush"] = true;

// Movement
var movement = scr_AI_movement_init(scr_AI_movementType_standard);
movement[? "dirOffsetMax"] = 40;
activeApproach[? "walkScript"] = movement;

// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// Charge
attack = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_action_charge);
Attack("assign", action, "charge", 0.5, 0.0, 0.5, 0, 0, 0);
attack[? "action"] = action; 
action[? "sndAttackWarn"] = screamSound;
action[? "sndAttackStrike"] = attackSound;
action[? "doRetreat"] = true; 
attack[? "distMax"] = 90;
attack[? "cooldownTime"] = 15; 
attack[? "cooldownTimeRnd"] = 30;
attack[? "rechargeTime"] = 0;
attack[? "rechargeTimeRnd"] = 6;
ai_charge = action;

// Slash
attack = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_action_slash);
Attack("assign", action, "slash", 0.5, 0.0, 0.5, 0, 0, 0);
attack[? "action"] = action; 
conf[? "stateAfterStop"] = action;
AI_util_action_setDamage(action, 2, .8, 0, 0, 10, 100, STAGGER_HARDNESS_SOFT);
action[? "sndAttackWarn"] = screamSound;
action[? "sndAttackStrike"] = attackSound;
action[? "mask"] = mask_crescent_32_16;
attack[? "distMax"] = 30;
attack[? "cooldownTime"] = 2; 
attack[? "cooldownTimeRnd"] = 2;
attack[? "rechargeTime"] = 0;
attack[? "rechargeTimeRnd"] = 0;
ai_slash = action;

// ACRO TIME
deviate = 1;
time0 = AI_decisionFrequency;
time1 = ai_slash[? "beforeTime"];
time2 = ai_slash[? "damageTime"];
time3 = ai_slash[? "afterTime"];
time4 = ai_charge[? "beforeTime"];
time5 = ai_charge[? "damageTime"];
time6 = ai_charge[? "afterTime"];

// Animation
scr_entity_animation_new("body");
scr_entity_animation_new("head");
scr_entity_animation_new("left_arm");
scr_entity_animation_new("right_arm");
scr_entity_animation_setSpeed("body", 0.3);
scr_entity_animation_setSpeedPerPixel("body", 1/9);
scr_entity_animation_setSpeed("head", 0);
scr_entity_animation_setSpeedPerPixel("head", 1/9);
scr_entity_animation_setSpeed("left_arm", 1);
scr_entity_animation_setSpeed("right_arm", 1);
_body_offset=0;
_head_offset=0;
_leftarm_offset=0;
_rightarm_offset=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
event_inherited();

// ACRO TIME
deviate = scr_stats_getEffectiveStat(id, STAT_BASE_AGILE) / scr_stats_getBaseStat(id, STAT_BASE_AGILE);
AI_decisionFrequency = time0 / deviate;
ai_slash[? "beforeTime"] = time1 / deviate;
ai_slash[? "damageTime"] = time2 / deviate;
ai_slash[? "afterTime"] = time3 / deviate;
ai_charge[? "beforeTime"] = time4 / deviate;
ai_charge[? "damageTime"] = time5 / deviate;
ai_charge[? "afterTime"] = time3 / deviate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gibs
var _obj;

var repeats = 3 + irandom(3);
repeat(repeats) {
    _obj = instance_create(x,y,o_FX);
    _obj.z = z + random(hitbox_z_top);
    _obj.sprite_index = s_fx_bloodBurst;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y-4,o_gibs);
    _obj.z = z + 16;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 0;
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y+4,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 1;
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 2;
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 3;
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
event_inherited();

var _col,pt2x,pt2y,pt3x,pt3y,_img,_hScale,_frm,_hoff,_hFrm,_showLArm,_showRArm;
_col = image_blend;

_frm = 0;
_img = 0;
_hScale = 1;
_hoff = 0;
_hFrm = 0;

_aFrmR = 0;
_aFrmL = 0;

_showLArm = true;
_showRArm = true;

_img = s_cgremlin_small_gibs;

_body_offset = pType*12;
_rightarm_offset = armTypeR*10;
_leftarm_offset = armTypeL*10;
_head_offset = headType*4;

_dirdir = ((faceDir+360)mod 360) div 90;
_odir = ((faceDir+360)mod 360);
switch(_dirdir)
{
    case 0: 
        _hScale = -1; 
        _body_offset += 6;
        _rightarm_offset += 5; 
        _leftarm_offset += 5;  
        _head_offset += 2; 
        break;
    case 1:
        _hScale = 1; 
        _body_offset += 6;
        _rightarm_offset += 5; 
        _leftarm_offset += 5;  
        _head_offset += 2; 
        break;
    case 2:
        _hScale = -1;
        break;
    case 3:
    default:
        _hScale = 1;
        break;
}

if(a_attackName == "stagger")
{
    scr_entity_animation_setRange("body", _body_offset+1, 1);
    scr_entity_animation_setRange("head", _head_offset+1, 1);
    scr_entity_animation_setRange("left_arm", _leftarm_offset, 1);
    scr_entity_animation_setRange("right_arm", _rightarm_offset, 1);
}
else
{
    if(a_walking)
    {
        scr_entity_animation_setRange("body", _body_offset+2, 2);
        scr_entity_animation_setRange("head", _head_offset, 1);
        _hoff = floor(scr_entity_animation_getImage("head") mod 2);
        scr_entity_animation_setRange("left_arm", _leftarm_offset+1, 4);
        scr_entity_animation_setRange("right_arm", _rightarm_offset+1, 4);

    }
    else
    {
        scr_entity_animation_setRange("body", _body_offset, 1);
        scr_entity_animation_setRange("head", _head_offset, 1);
        scr_entity_animation_setRange("left_arm", _leftarm_offset+1, 1);
        scr_entity_animation_setRange("right_arm", _rightarm_offset+1, 1);
    }
}


if(a_attackName=="slash")
{
    _showRArm = false;
    if(_odir&lt;180)
    {
        switch(a_attackState)
        {
            case "before":
                draw_sprite_ext(s_cgremlin_weap,weaponType,dx-6*_hScale,dy+6,_hScale,1,180+animStrike,_col,1);
                draw_sprite_ext(s_cgremlin_atkArm,armTypeR*2,dx,dy-4,_hScale,1,180,_col,1);
                break;
                
            case "attack":
                draw_sprite_ext(s_cgremlin_slash,0,dx,dy-4,_hScale,1,180,_col,1);
                break;
            
            case "after":
                draw_sprite_ext(s_cgremlin_weap,weaponType,dx+6*_hScale,dy-14,-_hScale,1,90-animStrike,_col,1);
                draw_sprite_ext(s_cgremlin_atkArm,armTypeR*2+1,dx,dy-4,_hScale,1,180,_col,1);
                break;
        }
        
    }
}
else if(a_attackName=="charge")
{
    _showRArm = false;
    if(_odir&lt;180)
    {
        switch(a_attackState)
        {
            case "before":
            case "approach":
                draw_sprite_ext(s_cgremlin_weap,weaponType,dx-6*_hScale,dy+6,_hScale,1,180+animStrike,_col,1);
                draw_sprite_ext(s_cgremlin_atkArm,armTypeR*2,dx,dy-4,_hScale,1,180,_col,1);
                break;
                
            case "attack":
                draw_sprite_ext(s_cgremlin_slash,0,dx,dy-4,_hScale,1,180,_col,1);
                break;
            
            case "after":
                draw_sprite_ext(s_cgremlin_weap,weaponType,dx+6*_hScale,dy-14,-_hScale,1,90-animStrike,_col,1);
                draw_sprite_ext(s_cgremlin_atkArm,armTypeR*2+1,dx,dy-4,_hScale,1,180,_col,1);
                break;
        }
        
    }
}
else
{
    animStrike = 0;
    if(_odir&gt;=180)
    {draw_sprite_ext(s_cgremlin_weap,weaponType,dx-1*_hScale,dy-2,_hScale,1,0,_col,1);}
}

draw_set_alpha(1);

///back arm
if(_odir&gt;=180 &amp;&amp; _showRArm || _odir&lt;180 &amp;&amp; _showLArm)
{
    _fr = scr_entity_animation_getImage("right_arm");
    if(_dirdir&lt;=180){_fr = scr_entity_animation_getImage("left_arm");}
    draw_sprite_ext(s_cgremlin_armsR,_fr,dx,dy-4,_hScale,1,0,_col,1);
}

DrawStripExt(s_cgremlin_torso,scr_entity_animation_getImage("body"),dx,dy,_hScale,1,0,_col,1);
DrawStripExt(s_cgremlin_head,scr_entity_animation_getImage("head"),dx,dy-10+_hoff,_hScale,1,0,_col,1);


if(_odir&gt;=180 &amp;&amp; _showLArm || _odir&lt;180 &amp;&amp; _showRArm)
{
    _fr = scr_entity_animation_getImage("left_arm");
    if(_dirdir&lt;=180){_fr = scr_entity_animation_getImage("right_arm");}
    draw_sprite_ext(s_cgremlin_armsL,_fr,dx,dy-4,_hScale,1,0,_col,1);
}

if(a_attackName=="slash")
{
    if(_odir&gt;=180)
    {
        switch(a_attackState)
        {
            case "before":
                draw_sprite_ext(s_cgremlin_weap,weaponType,dx+6*_hScale,dy-14,_hScale,1,0+animStrike,_col,1);
                draw_sprite_ext(s_cgremlin_atkArm,armTypeR*2,dx,dy-4,_hScale,1,0,_col,1);
                break;
                
            case "attack":
                draw_sprite_ext(s_cgremlin_slash,0,dx,dy,_hScale,1,0,_col,1);
                break;
            
            case "after":
                draw_sprite_ext(s_cgremlin_weap,weaponType,dx-6*_hScale,dy+6,-_hScale,1,90-animStrike,_col,1);
                draw_sprite_ext(s_cgremlin_atkArm,armTypeR*2+1,dx,dy-4,_hScale,1,0,_col,1);
                break;
        }
    }
}
else if(a_attackName=="charge")
{
    if(_odir&gt;=180)
    {
        switch(a_attackState)
        {
            case "before":
            case "approach":
                draw_sprite_ext(s_cgremlin_weap,weaponType,dx+6*_hScale,dy-14,_hScale,1,0+animStrike,_col,1);
                draw_sprite_ext(s_cgremlin_atkArm,armTypeR*2,dx,dy-4,_hScale,1,0,_col,1);
                break;
                
            case "attack":
                draw_sprite_ext(s_cgremlin_slash,0,dx,dy-4,_hScale,1,0,_col,1);
                break;
            
            case "after":
                draw_sprite_ext(s_cgremlin_weap,weaponType,dx-6*_hScale,dy+6,-_hScale,1,90-animStrike,_col,1);
                draw_sprite_ext(s_cgremlin_atkArm,armTypeR*2+1,dx,dy-4,_hScale,1,0,_col,1);
                break;
        }
        
    }
}
else
{
    if(_odir&lt;180)
    {draw_sprite_ext(s_cgremlin_weap,weaponType,dx-1*_hScale,dy-2,_hScale,1,0,_col,1);}
}

combatActor_draw_post();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>14,18</point>
    <point>14,14</point>
  </PhysicsShapePoints>
</object>
