<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2100000</depth>
  <persistent>0</persistent>
  <parentName>o_debugMode</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
collisionPrevious = o_hoopz.collision_check;
o_hoopz.collision_check = COLLISION_NONE;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make Hoopz solid
o_hoopz.collision_check = collisionPrevious;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
if (global.DEBUGMODE == 0) exit;

if (keyboard_check_pressed(ord('1'))) global.dialogSpeed = 1;
if (keyboard_check_pressed(ord('2'))) global.dialogSpeed = 2;
if (keyboard_check_pressed(ord('3'))) global.dialogSpeed = 3;

if (keyboard_check(ord('5'))) scr_deltatime_setModifier(10);
if (keyboard_check(ord('6'))) scr_deltatime_setModifier(1);
if (keyboard_check(ord('7'))) scr_deltatime_setModifier(.5); // was .1

// Toggle HUD //
if keyboard_check_pressed(ord('H')) and global.event = false then 
    {
    if (Quest("hudVisible") == 1) Quest("hudVisible", 0);
    else Quest("hudVisible", 1);
    }


// Add lugner event
if(keyboard_check_pressed(ord('U')) &amp;&amp; global.DEBUGMODE)
{ 
    Note("viewer");
    //ClockTime("event", "lugnerQuest", 3, 1); //After 1 minute set to 3
}
if(keyboard_check_pressed(ord('Y')) &amp;&amp; global.DEBUGMODE) Note("take", "Cornrow's Plea");

// Add to ClockTime
if(keyboard_check_pressed(ord('K')) &amp;&amp; global.DEBUGMODE)
{ 
    ClockTime("process", 19.5 * 60); 
    //instance_create(0, 0, o_mg_document_babby);
}

// Add to Money
if(keyboard_check_pressed(ord('M')) &amp;&amp; global.DEBUGMODE)
{ 
    scr_money_change(+50);
}

// Sub from Money
if(keyboard_check_pressed(ord('N')) &amp;&amp; global.DEBUGMODE)
{ 
    scr_money_change(-50);
    if (scr_money_count() &lt; 0) scr_money_set(0);
}

// Load game
if(keyboard_check_pressed(ord('L')) &amp;&amp; global.DEBUGMODE)
{ 
    //event_user(0);
    obj = instance_create(mouse_x, mouse_y, oEffectLightning);
    obj.x = mouse_x;
    obj.y = mouse_y;// - 200;
    obj.hei = 256;
    with (obj) lid = EffectLightning("generate", -1, 0, hei);
}

// Add lugner event
if(keyboard_check_pressed(ord('I')) &amp;&amp; global.DEBUGMODE)
{ 
    ClockTime("event", "sceneBrandingStart", 1, 2); //After 2 minutes set to 1
}

// End current event
if(keyboard_check_pressed(ord('B')) &amp;&amp; global.DEBUGMODE)
{ 
    global.event = false; 
    BodySwap("hoopz");
    Quest("deadSon", 0);
    Quest("govQuest", 0);
    paused(false);
}


if (keyboard_check_pressed(ord('P')) &amp;&amp; global.DEBUGMODE) 
{
    // Play as Matthias
    //BodySwap("matthias");
    //Quest("deadSon", 3);
    //Quest("govQuest", 0);
    for (i = 0; i &lt; Gun("amount"); i += 1)
    {
        Gun("ammo", i, Gun("capacity", i));
    }
    for (i = 0; i &lt; Gun("gunbag amount"); i += 1)
    {
        Gun("ammo", i + 5, Gun("capacity", i + 5));
    }
}

// Play as Governor
if (keyboard_check_pressed(ord('J')) &amp;&amp; global.DEBUGMODE) 
{
    BodySwap("governor");
    Quest("govQuest", 5);
    Quest("deadSon", 0);
}

// Get every note
if (keyboard_check_pressed(ord('9')) &amp;&amp; global.DEBUGMODE) 
{
    for (i = 0; i &lt; ds_list_size(global.noteList); i += 1)
    {
        Note("take", ds_list_find_value(global.noteName, i));
    }
}

// Spawn Lugner
if (keyboard_check_pressed(ord('8')) &amp;&amp; global.DEBUGMODE) 
{
    for (h = 0; h &lt; global.duergarStandardAmount; h += 1)
    {
        Duergar("spawn", global.duergarStandard[h], x, y);
    }
    Duergar("battle royal");
}

//Pacify
if (keyboard_check_pressed(vk_end) &amp;&amp; global.DEBUGMODE)
{
    //with (o_room_pacify) instance_destroy();
    if (global.gunPacify)
    {
        global.gunPacify = false;
        PEDESTRIAN(0);
    }
    else
    {
        global.gunPacify = 0;
        PEDESTRIAN(1);
    }
}

// Suicide
if (keyboard_check_pressed(vk_delete) &amp;&amp; global.DEBUGMODE) 
{
    scr_stats_setCurrentStat(o_hoopz, STAT_CURRENT_HP, -1); //0hp didn't work
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Performance gibberish
drx = display_get_gui_width() - 150;
ysp = 16;
draw_set_font(global.fn_1);
draw_set_alpha(1);
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

draw_text(drx, 2 + ysp*0,  "FPS: " + string(fps));

draw_text(drx, 2 + ysp*1,  "INSTANCES: " + string(instance_count));
draw_text(drx, 2 + ysp*2,  "ENTITIES: " + string(instance_number(Entity)));
draw_text(drx, 2 + ysp*3,  "ACTORS: " + string(instance_number(Actor)));
draw_text(drx, 2 + ysp*4,  "COMBAT ACTORS: " + string(instance_number(CombatActor)));
draw_text(drx, 2 + ysp*5,  "COMBAT ATTACKS: " + string(instance_number(CombatAttackEntity)));

var paths = 0;
with (Actor) { if scr_path_active() paths++; }
draw_text(drx, 2 + ysp*6,  "ACTIVE PATHS: " + string(paths));

var en_pass = 0;
var en_act = 0;
with (EnemyCombatActor) {
    if (AI_stateTopType == AI_STATETYPE_PASSIVE) {
        en_pass++;
    }
    else {
        en_act++;
    }
}

draw_text(drx, 2 + ysp*7,  "ENEMIES: " + string(instance_number(EnemyCombatActor)));
draw_text(drx, 2 + ysp*8,  "PASSIVE ENEM: " + string(en_pass));
draw_text(drx, 2 + ysp*9,  "ACTIVE ENEM: " + string(en_act));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Marquee quests
drx = 800; dry = 5;
scr_font(global.fn_smallc, c_white);
draw_text(drx, dry, "MARQUEE ACTIVE QUESTS");
dry += 12;
_ind = ds_list_find_index(global.marqueeName, "Quest");
_lst = ds_list_find_value(global.marqueeLineList, _ind);
_ist = ds_list_find_value(global.marqueeLineListIndex, _ind);
for (i = 0; i &lt; ds_list_size(_ist); i += 1)
{
    _ind = i;
    if (Marquee("evaluate", ds_list_find_value(_ist, _ind)))
    {
        draw_text(drx, dry, ds_list_find_value(_lst, _ind));
        dry += 12;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load game
global.fadeRoomTemp = -1;
scr_savedata_load();
var save_roomname = scr_savedata_get("map.room");
var save_room = asset_get_index(save_roomname);
var save_roomx = scr_savedata_get("map.x");
var save_roomy = scr_savedata_get("map.y");
//a//udio_set_bgm(scr_audio_getRoomBGM(save_room));
var rt;
with (o_world) { rt = scr_map_initialise_load_room(save_room, save_roomx, save_roomy); }
room_target = rt;

paused(false);
global.event = false;
//a//udio_set_bgm(nextBGM);
if (scr_savedata_get("player.respawn.do") == true) {
    // Respawn logic
    //instance_create(0, 0, o_hoopz);
    with (o_hoopz) { scr_player_respawn(); }
}
else 
{
    // Teleport player to destination
    room_goto(room_target);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw gui
event_user(5); // marquee
draw_set_font(global.fn_1);
draw_set_color(c_white);
draw_set_halign(0);
draw_set_valign(0);
dx = 6;
dy = 300;
draw_text(dx, dy, "When on this menu, you can phase through objects with Hoopz."); dy += 20;
draw_text(dx, dy, "Press delete to suicide Hoopz."); dy += 20;
draw_text(dx, dy, "Press B to stop event / stop playing Governor or Matthias"); dy += 20;
draw_set_color(c_red);
draw_text(dx, dy, "P = RELOAD ALL GUNS"); dy += 20;
draw_set_color(c_white);
draw_text(dx, dy, "Press J to play as Governor."); dy += 20;
draw_text(dx, dy, "Press L to lightning."); dy += 20; //load last save.
draw_text(dx, dy, "Press K to add 19.5 minutes to clock time."); dy += 20;
draw_text(dx, dy, "Press M to add 50 Neuro-Shekels. (Holding " + string(scr_money_count()) + " NS)"); dy += 20;
draw_text(dx, dy, "Press N to subtract 50 Neuro-Shekels. (Holding " + string(scr_money_count()) + " NS)"); dy += 20;
draw_text(dx, dy, "Press H to toggle HUD on/off"); dy += 20;
draw_text(dx, dy, "Press END to toggle pacify and pedestirans (pedestrian = " + string(PEDESTRIAN()) + ")"); dy += 20;
draw_text(dx, dy, "Press 9 to get every note in the game"); dy += 20;
draw_text(dx, dy, "8 = spawn Lugner, 5 = fast, 6 = normal delta, 7 = slow-mo"); dy += 20;
draw_set_color(c_white);
event_user(10);

ClockTime("draw", 5, 5);
dx = 300;
dy = 5;
var evt = ClockTime("event"); //Gets number of running events
for (i = 0; i &lt; evt; i += 1)
{
    ClockTime("event", i); //Pull event numbered i from clocktime
    draw_text(dx, dy, "QUEST = " + string(clockQuest)); dx += 250;
    draw_text(dx, dy, "VALUE = " + string(clockValue)); dx += 150;
    draw_text(dx, dy, "TIMER = " + string(clockTimer)); dx += 150;
    dx = 300;
    dy += 20;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
