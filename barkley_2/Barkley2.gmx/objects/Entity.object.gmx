<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>icon_parent</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Particle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize all Entity variables
event_inherited()

// Hitbox
scr_entity_setMovementCollisionShape_rectangle(16,16);
scr_entity_setZHitbox(0, 16);

// Define collision target
collision_check = COLLISION_NORMAL;

// Denotes if movement collided with a wall or not
movement_hit = false;
movement_hit_vx = 0;
movement_hit_vy = 0;

// Depth Negative-Y
dny = 0;

// Shadow
scr_entity_setShadowVisible(true);
shadow_strength = 0.4;
shadow_radius = NULL;  // If -1, equal to width of shape
shadow_sprite_index = NULL;
shadow_image_index = NULL;
shadow_sprite_offset_x = 0;
shadow_sprite_offset_y = 0;


// Flag to indicate if object supports paths - Entity does not
path_support = false;

// Entities do not have any sound emitters by default
sound_emitter = NULL;

damageIndicator = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup audio resources
// Destroy audio emitter
if (sound_emitter != NULL) {
    audio_emitter_free(sound_emitter);
    sound_emitter = NULL;
}

_sat_shape = 0 // Free hitbox shape

event_inherited();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ENTITIES OVERRIDE STEP CODE (NO INHERITED CODE)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle pausing
if (paused()) {

    // Store built-in behaviour-affecting variables during pause
    if (image_speed != 0) {
        paused_image_speed = image_speed;
        image_speed = 0;
    }
}
else {
    // Restore built-in behaviour-affecting variables during pause
    if (paused_image_speed != 0) {
        image_speed = paused_image_speed;
        paused_image_speed = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Perform all movement code
if paused() exit;

// Base Z (from heightmap)
base_z = scr_entity_getZHeight();

// Copied movement vector
var mx, my, mz;
mx = move_x * dt();
my = move_y * dt();
mz = move_z * dt();

var onGround = false;
if (z &lt;= base_z &amp;&amp; move_z &lt;= 0 ) {
    onGround = true;
}
var _zprev;
_zprev = z;

// Perform movement
if (mx != 0 or my != 0) {
    var _xprev, _yprev;
    _xprev = x;
    _yprev = y;
    movement_hit = scr_collision_move_contact_solid(mx, my, collision_check);
    if (movement_hit) {
        movement_hit_vx = __vx
        movement_hit_vy = __vy
    }
    delta_x = x - _xprev;
    delta_y = y - _yprev;
    
    // Apply friction
    if (move_friction &gt; 0 &amp;&amp; (move_x != 0 || move_y != 0)) {
        var dir, dist;
        dist = point_distance(0, 0, move_x, move_y);
        dir = point_direction(0, 0, move_x, move_y);
        dist = max(0, dist - (move_friction * dt()));
        move_x =  cos(degtorad(dir)) * dist;
        move_y = -sin(degtorad(dir)) * dist;
    }
    
    // Convert movement vector to dir/dist for easy use in scripts/code
    move_dir = point_direction(0, 0, move_x, move_y)
    move_dist = point_distance(0, 0, move_x, move_y)
    
    // Handle walking on Z stairs
    if (onGround and move_dist &gt; 0) {
        var zstair = scr_collision_zstair(x, y);
        if (!is_undefined(zstair)) {
            if (zstair == ZSTAIRS_LEFT and move_x &lt; 0) {
                z += move_x;
            }
            if (zstair == ZSTAIRS_RIGHT and move_x &gt; 0) {
                z -= move_x;
            }
            if (zstair == ZSTAIRS_UP and move_y &gt; 0) {
                z -= move_y;
            }
        }
    }
}
else {
    delta_x = 0;
    delta_y = 0;
    move_dist = 0;
    movement_hit = false;
}
    
// Perform Z movement
if (z &lt;= base_z &amp;&amp; move_z &lt;= 0 ) {
    move_z = 0;
    z = base_z;
}
else {
    z += mz;
}
delta_z = z - _zprev;
    
// Apply gravity
move_z -= gravity_z * dt();

// Rendering depth
scr_dny(dny)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle animations
if paused() exit;

scr_entity_animation_step_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ENTITIES OVERRIDE DRAW CODE (NO INHERITED CODE)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ENTITIES OVERRIDE DRAW CODE (NO INHERITED CODE)
// Draw event, exports (dx,dy)
dx = x;
dy = y - z;

// Draw shadow
if (shadow_visible) 
{
    if (shadow_sprite_index != NULL) 
    {
        draw_sprite_ext(shadow_sprite_index, shadow_image_index, x+shadow_sprite_offset_x, y+shadow_sprite_offset_y-base_z, image_xscale, image_yscale, image_angle, c_black, shadow_strength);
    }
    else 
    {
        var _radius = shadow_radius;
        if (shadow_radius = -1) _radius = scr_entity_getMovementCollisionShapeRadius();
        _radius = _radius * (1 / (1 + ((z - base_z) / 100))) // Scale shadow with Z height 
        var dvv = (1 / 64) * 2; // so i don't have to muck with radius
        draw_sprite_ext(s_lensflare, 0, round(x + shadow_sprite_offset_x), round(y + shadow_sprite_offset_y - base_z), 
            _radius * dvv, (_radius * 0.5) * dvv, 0, c_black, shadow_strength);
    }
}
    
// Set draw color and alpha
image_blend = c_white;
image_alpha = 1;

// Leave draw script here - entity can now use dx,dy to render in correct position
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
