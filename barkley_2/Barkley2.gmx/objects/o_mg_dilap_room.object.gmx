<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Create the room accordingly //
var decor       = scr_quest_get_state("dilapZoneDecor");
var plants      = scr_quest_get_state("dilapZonePlants");
var internet    = scr_quest_get_state("dilapZoneInternet");
var hvac        = scr_quest_get_state("dilapZoneHvac");
var water       = scr_quest_get_state("dilapZoneWater");
var floors      = scr_quest_get_state("dilapZoneFloors");
var walls       = scr_quest_get_state("dilapZoneWalls");
var tenant      = scr_quest_get_state("dilapZoneTenant");

// Create decor //
switch (decor)
    {
    // No decorative things //
    case 0:
    
    break;
    
    // Basic decorative things //
    case 1:
    
    break;
    
    // OK decorative thigns //
    case 2:
    
    break;
    
    // Good decorative things //
    case 3:
    
    break;
    }

// Check what sort of plants there are //

/*if (!scr_savedata_contains("supergrid")) {
    // create tenant grid/list
    global.supergrid = ds_list_create();
    for (var i = 0; i &lt; ROOMS_TOTAL; i += 1) {
        global.supergrid[| (RP * i) + 0] = "EMPTY"; // tenant name
        global.supergrid[| (RP * i) + 1] = 0; // rent
        global.supergrid[| (RP * i) + 2] = 0; // rent total
        global.supergrid[| (RP * i) + 3] = "NONE"; // occupation
        global.supergrid[| (RP * i) + 4] = 0; // time
        global.supergrid[| (RP * i) + 5] = 0; // happiness
        global.supergrid[| (RP * i) + 6] = 0; // happiness minimum
        global.supergrid[| (RP * i) + 7] = 0; // value to cause unhappiness
        global.supergrid[| (RP * i) + 8] = 0; // absolute value minimum
        global.supergrid[| (RP * i) + 9] = 0; // complaint
        global.supergrid[| (RP * i) + 10] = 5; // maximum happiness
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
