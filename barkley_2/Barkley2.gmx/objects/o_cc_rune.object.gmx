<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Dont run the event after this for this character //
o_cc_data.event_finished_cookie = true;

// Phase setup //
phase[0] = 18;
phase[1] = 1;
phase[2] = 0;

// Phase skipping //
phase_skip_time = 0;
phase_skip_to = 0;
phase_skip = 0;

// Textbox setup //
textbox_written = "";
textbox_goal = "";
textbox_pause = 0;
textbox_position = 0;
textbox_skip = false;  

// Alpha setup //
alpha_textbox = 0;
alpha_textbox_goal = 0;
alpha_textbox_timer = 0;
alpha_event = 0;
alpha_event_goal = 0;

// Other shite //
o_cc_wizard.alpha_goal = 1;
timer_transition = 0;

question = false;

option_hover[0] = false;
option_hover[1] = false;
option_hover[2] = false;

option_yes = "Yes.";
option_no = "Nah."

text[0] = "In ages long past, shamans would draw their#strength from runestones, fossilized candies#passed on from grandpa to grandchild."
text[1] = "The shamans used the powers of the runes to heal,#to curse, to smite foes, to communicate with the#dead, to perceive in ways inconceivable. The old#ways are gone, washed away in the tide of -";
text[2] = "- modernity. And perhaps it is best that way. But#there yet exist fragments of the old ways,#scattered remnants of a life made obsolete by new#technologies and new beliefs.";
text[3] = "I possess a small collection of these runestones,#their power unknown even to me. Perhaps the#secrets contained within the runes can unlock the#secrets of the cosmos."
text[4] = "Or perhaps it is better it lies dormant. Would you#like to have one, " +string(o_cc_data.character_name)+ "?";
text[5] = "Yes, maybe you are right. It has been said that#discretion is the better part of valor. Perhaps it#is best if the secrets of the runes remain#forgotten...";
text[6] = "A courageous answer. I will present to you my#modest collection. All you need to do is draw the#runestone you feel most attuned to. I wish you well,#youngster.";
text[7] = "Ah, I hope the ancient wisdoms have enlightened#your path as much as they have mine.";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Phases //
if phase[0] &gt; 0 then
    {
    // Tick down //
    phase[0] -= dt();
    
    // Event //
    if phase[0] &lt;= 0 then
        {
        // Introduction to Cookies / Runestones //
        if phase[1] &gt;= 1 and phase[1] &lt;= 4 then scr_cc_textbox(text[phase[1] - 1]);
        
        // Question //
        if phase[1] = 5 then
            {
            scr_cc_textbox(text[phase[1] - 1]);
            textbox_skip = false;
            }
        
        // End //
        if phase[1] = 6 then scr_cc_textbox(text[5]);
        
        // End //
        if phase[1] = 7 then phase[2] = 5;
        
        // Calculus test //
        if phase[1] = 8 then scr_cc_textbox(text[6]);
        
        // Runes //
        if phase[1] = 9 then
            {
            alpha_event_goal = 1;
            for (i=0; i&lt;8; i+=1;) 
                {
                cookie = instance_create(64 + i * 80, 100, o_cc_rune_runes);
                cookie.direction = instance_number(o_cc_rune_runes) * 45;
                }
            }
            
        // Outros //
        if phase[1] = 10 then
            {
            with o_cc_rune_runes instance_destroy();
            scr_cc_textbox(text[7]);
            }
            
        // End //
        if phase[1] = 11 then 
            {
            timer_transition = 15;
            phase[2] = 25;
            }
        }
    } 
    
// Prompt question on screen //
if phase[1] = 5 and string_length(textbox_written) = string_length(textbox_goal) and textbox_goal = text[4] then question = true;
else question = false;

// Question // Do you want a Runestone / Cookie?
if question = true then
    {
    // Hovers //
    option_hover[0] = scr_cc_button_xy(26, 358, 200, 210);
    option_hover[1] = scr_cc_button_xy(26, 358, 211, 220);
    
    // Click an answer //
    //if scr_input_check_pressed(KEYID_ACTION, PLAYER1) then
    if mouse_check_button_pressed(mb_left) then    
        {
        // Gimme a runestone / cookie //
        if option_hover[0] = true then
            {
            phase[1] = 8;
            phase[0] = 5;
            alpha_textbox_goal = 0;
            question = false;
            }
        
        // Keep your filthy runestones / cookies //
        if option_hover[1] = true then 
            {
            Quest("playerCCRune", "Abstain");
            phase[1] = 6;
            phase[0] = 5;
            alpha_textbox_goal = 0;
            question = false;
            }
        }
    }    

// Transition //
if timer_transition &gt; 0 then
    {
    // Tick down //
    timer_transition -= dt();
    
     // Event //
     if timer_transition &lt;= 0 then instance_create(0, 0, o_cc_transition);
     }
    
// End of this event //
if phase[2] &gt; 0 then
    {
    // Tick down //
    phase[2] -= dt();
    
    // End //
    if phase[2] &lt;= 0 then
        {
        with (o_cc_wizard) event_user(0);
        instance_destroy();
        }
    }
        
// Skip text with button //
scr_cc_textbox_skip();

// Type it //
scr_cc_textbox_type();
 
// Move to a next phase //
scr_cc_phase_skip_process();
   
// Alpha for Textboxes //
if alpha_textbox_timer &gt; 0 then alpha_textbox_timer -= dt();
else
    {
    if alpha_textbox &lt; alpha_textbox_goal then alpha_textbox += 0.1;
    if alpha_textbox &gt; alpha_textbox_goal then alpha_textbox -= 0.1;
    }

// Alpha for Events //
if alpha_event &lt; alpha_event_goal then alpha_event += 0.1;
if alpha_event &gt; alpha_event_goal then alpha_event -= 0.1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw veil //
draw_set_color(c_black);
draw_set_alpha(alpha_event * 0.5);
draw_rectangle(-2, -2, 386, 242, false);

// Draw textboxes //
scr_cc_draw_textbox();

// Draw popup //
if question = true then
    {
    // YES //
    if option_hover[0] = true then 
        {
        draw_set_color(c_white);
        draw_set_alpha(alpha_textbox * 0.2);
        draw_rectangle(24, 200, 360, 210, false);
        draw_set_color(o_cc_data.color_question_hover);
        }
    else draw_set_color(o_cc_data.color_question_nohover);
    draw_set_alpha(alpha_textbox * 2);
    draw_text(29, 201, option_yes);
    
    // NO //
    if option_hover[1] = true then 
        {
        draw_set_color(c_white);
        draw_set_alpha(alpha_textbox * 0.2);
        draw_rectangle(24, 212, 360, 222, false);
        draw_set_color(o_cc_data.color_question_hover);
        }
    else draw_set_color(o_cc_data.color_question_nohover);
    draw_set_alpha(alpha_textbox * 2);
    draw_text(29, 213, option_no);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
