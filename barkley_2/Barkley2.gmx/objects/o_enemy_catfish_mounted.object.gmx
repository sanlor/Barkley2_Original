<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_catfish_mounted</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_enemygroup_catfish</parentName>
  <maskName>mask_disk_48by48</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
// TODO: give poke attack
event_inherited();
scr_enemyDB_statsGet(enemyBuild);
scr_entity_setShadowCircle(12);
combatActor_setRenderSurfSize(64);
ailmentTotem_define(self.id, -10, 20, 25, 42);
scr_entity_setZHitbox(0, global.settingEnemyBigHeight);

shield_equipped = false;
count = 0; // used for???
alertSound = "catfish_mount_alert";
deathSound = "catfish_mount_death";
damageSound = "catfish_mount_grunt";
hook_hitfx = enemy_hitfx_catfish;

var conf, attacks, attack, guard;
// Movement
var movement = scr_AI_movement_init(scr_AI_movementType_hopping);
movement[? "walkSpdMod"] = 1;
movement[? "jumpTime"] = 6;
movement[? "jumpGravity"] = 7;
movement[? "jumpWait"] = 1;
movement[? "soundHop"] = "catfish_mount_jump";
movement[? "soundLand"] = "catfish_mount_land";

guard = scr_AI_addPassiveState(scr_AI_passive_guard);
guard[? "sndAlertSound"] = alertSound;

// Active state in water
activeMoveTowardsLand = scr_AI_addActiveState(scr_AI_active_moveTowardsLand);
activeMoveTowardsLand[? "switchPredicate"] = predicate_AI_isWading;

// Active state on land
ai_approach = scr_AI_addActiveState(scr_AI_active_approach);
ai_approach[? "walkScript"] = movement;
ai_approach[? "switchPredicate"] = predicate_AI_isNotWading;

ai_hangBack = scr_AI_addActiveState(scr_AI_active_hangback);
ai_hangBack[? "walkScript"] = movement;
ai_hangBack[? "switchPriority"] = 10;
ai_hangBack[? "switchRemoveMaxDist"] = 150;
ai_hangBack[? "switchAddMaxDist"] = 110;
ai_hangBack[? "switchPredicate"] = predicate_AI_isNotWading;

// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// Jump action
var jump = scr_AI_addAction(scr_AI_action_jump);
jump[? "jumpHeightBase"] = 35;

activeMoveTowardsLand[? "jumpAction"] = jump;

// Shot
ai_shot = scr_AI_addAction(scr_AI_action_shot);
ai_shot[? "attackName"] = "blowpipe";
ai_shot[? "bulletObject"] = o_enemyAttack_blowdart;
ai_shot[? "burst"] = 2;
ai_shot[? "burstRnd"] = 2;
ai_shot[? "precision"] = 12;
ai_shot[? "motion"] = 45;
ai_shot[? "beforeTime"] = 4;
ai_shot[? "afterTime"] = 2;
ai_shot[? "dmg"] = 14;
ai_shot[? "gunRange"] = 20;
ai_shot[? "sndAttackWarn"] = "catfish_mount_attack";
ai_shot[? "sndAttackStrike"] = "catfish_mount_shoot";

AI_util_action_setDamage(ai_shot, 1, 0.5, 0, 0.5, 10, 50, STAGGER_HARDNESS_SOFT);

// ACRO TIME
deviate = 1;
time0 = AI_decisionFrequency;

// Animation
Animation("define", "catfish_stand", s_catfish_mounted, 0, 1, 0);
Animation("define", "catfish_walk", s_catfish_mounted, 0, 4, 0.6);
scr_entity_animation_setSpeedPerPixel("catfish_walk", 1/10);
Animation("define", "catfish_jump", s_catfish_mounted, 0, 1, 0);
Animation("define", "catfish_stagger", s_catfish_mounted, 0, 1, 0);
Animation("define", "catfish_shot_before", s_catfish_mounted, 4, 1, 1);
Animation("define", "catfish_shot_attack", s_catfish_mounted, 5, 1, 1);
Animation("define", "catfish_shot_after", s_catfish_mounted, 6, 1, 1);
Animation("define", "catfish_net_before", s_catfish_mounted, 4, 1, 1);
Animation("define", "catfish_net_attack", s_catfish_mounted, 5, 1, 1);
Animation("define", "catfish_net_after", s_catfish_mounted, 6, 1, 1);
Animation("define", "water", s_watershadow_medium, 0, 4, 0.5);

/*
// Aim and shoot
attack = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_active_aimandshoot);
attack[? "action"] = action; 
action[? "action"] = ai_shot;

attack[? "distMin"] = 30;
attack[? "distMax"] = 150;
attack[? "cooldownTime"] = 15; 
attack[? "cooldownTimeRnd"] = 5;
attack[? "prepTime"] = 3;
attack[? "predicate"] = predicate_AI_isNotWading;

// Net shot
attack = scr_AI_switch_standard("new_attack", conf);
var action = scr_AI_addAction(scr_AI_action_net);
attack[? "action"] = action; 

action[? "motion"] = 28;
action[? "precision"] = 25;
action[? "dmg"] = 0;
action[? "burst"] = 1;
action[? "beforeTime"] = 8;
action[? "afterTime"] = 4;
action[? "burstRnd"] = 0;
action[? "gunRange"] = 14;
action[? "attackName"] = "net";
action[? "sndAttackWarn"] = "catfishshield_netswing"; //attacking scream (desperate)
action[? "sndAttackStrike"] = "catfishshield_netthrow";

attack[? "distMax"] = 150;
attack[? "ammo"] = 2;
attack[? "cooldownTime"] = 10; 
attack[? "cooldownTimeRnd"] = 5;
attack[? "prepTime"] = 4;
attack[? "rechargeTime"] = 20;
attack[? "rechargeTimeRnd"] = 10;
attack[? "predicate"] = predicate_AI_catfish_targetIsNotNetted;
*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
event_inherited();

// ACRO TIME
deviate = scr_stats_getEffectiveStat(id, STAT_BASE_AGILE) / scr_stats_getBaseStat(id, STAT_BASE_AGILE);
AI_decisionFrequency = time0 / deviate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gib (TODO) and create catfish_small
if (Quest("fishgutQuest") &gt;= 1 &amp;&amp; Quest("fishgutQuest") &lt;= 4) then
{
    repeat (2)
    {
        instance_create(x - 4 + random(8), y - 8 + random(8), o_mg_collect_guts);
    }
}

var enemy = instance_create(x,y,o_enemy_catfish_small);

// Apply build with same name
var build = enemyBuild;
with (enemy) scr_enemyDB_statsGet(build);

// Add new enemy to spawn state if connected to spawn point
if (spawnPoint != NULL) {
    var spawnUuid = spawnPoint[? "uuid"];
    if (spawn_state_exists(spawnUuid)) {
        var state = spawn_state_get(spawnUuid);
        spawn_state_addEnemy(state, enemy);
    }
}


event_inherited();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
event_inherited();

if (scr_actor_isWading(id)) 
{
    // In water, draw water shadow only
    var sprite = scr_entity_animation_getSpriteIndex("water");
    var image = scr_entity_animation_getImage("water");
    draw_sprite(sprite, image, dx, dy);
    
} else {
    
    var _dir,_frameOff
    _dir = ((faceDir+360)mod 360) div 90;
    
    switch(_dir)
    {
        case 0: 
            _hScale = 1;
            break;
        case 1: 
            _hScale = -1;
            break;
        case 2: 
            _hScale = -1; 
            break;
        case 3: 
            _hScale = 1;
            break;
    }
    
    // Set animation shifts
    if (_dir == 2 or _dir == 3) {
        // Facing downwards
        scr_entity_animation_setShift("catfish_stand", 0);
        scr_entity_animation_setShift("catfish_walk", 0);
        scr_entity_animation_setShift("catfish_jump", 0);
        scr_entity_animation_setShift("catfish_stagger", 0);
        scr_entity_animation_setShift("catfish_shot_before", 0);
        scr_entity_animation_setShift("catfish_shot_attack", 0);
        scr_entity_animation_setShift("catfish_shot_after", 0);
    }
    else
    {
        // Facing upwards
        scr_entity_animation_setShift("catfish_stand", 10);
        scr_entity_animation_setShift("catfish_walk", 10);
        scr_entity_animation_setShift("catfish_jump", 10);
        scr_entity_animation_setShift("catfish_stagger", 10);
        scr_entity_animation_setShift("catfish_shot_before", 10);
        scr_entity_animation_setShift("catfish_shot_attack", 10);
        scr_entity_animation_setShift("catfish_shot_after", 10);
    }
    
    var image = 0;
    var jumpheight = z - base_z;
    if (a_attackName == "stagger")
    {
        image = scr_entity_animation_getImage("catfish_stagger");
    }
    else if (a_attackName == "blowpipe")
    {
        switch(a_attackState)
        {
        case "before":
            image = scr_entity_animation_imageByRatio("catfish_shot_before", a_attackAnim, I_atk_shot_intAfter);
            break;
            
        case "attack":
            image = scr_entity_animation_imageByRatio("catfish_shot_attack", a_attackAnim, I_atk_shot_intAfter);
            break;
        
        case "after":
            image = scr_entity_animation_imageByRatio("catfish_shot_after", a_attackAnim, I_atk_shot_intAfter);
            break;
        }
    }
    else if(a_attackName == "net")
    {
        switch(a_attackState)
        {
        case "before":
            image = scr_entity_animation_imageByRatio("catfish_net_before", a_attackAnim, I_atk_shot_intAfter);
            break;
            
        case "attack":
            image = scr_entity_animation_imageByRatio("catfish_net_attack", a_attackAnim, I_atk_shot_intAfter);
            break;
        
        case "after":
            image = scr_entity_animation_imageByRatio("catfish_net_after", a_attackAnim, I_atk_shot_intAfter);
            break;
        }
    }
    else if (jumpheight &gt;= 1)
    {
        image = scr_entity_animation_getImage("catfish_walk");
    }
    else
    {
        if(a_walking)
        {
            image = scr_entity_animation_getImage("catfish_walk");
        }
        else
        {
            image = scr_entity_animation_getImage("catfish_stand");
        }
    }
    
    var sprite = scr_entity_animation_getSpriteIndex("catfish_stand");
    draw_sprite_ext(sprite,image,dx,dy,_hScale,1,0,c_white,1);
}


combatActor_draw_post();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,21</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
