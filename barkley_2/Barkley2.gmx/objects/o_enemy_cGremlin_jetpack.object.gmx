<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCybergremlinMap</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_enemygroup_cybergremlins</parentName>
  <maskName>mask_rect_16by16</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
event_inherited();
scr_enemyDB_statsGet(enemyBuild);
scr_path_setMovementType(scr_path_movementType_standard_offset);
ailmentTotem_define(self.id, -3, 10, 12, 25);
scr_entity_setZHitbox(0, 24);
combatActor_setRenderSurfSize(64);

// Jetpaxxer vars
scr_entity_setCollisionType(COLLISION_ONLY_SOLID);
jetpack_bob = 0; // Sine wave for bobbing at top
jetpack_smokepuke = 0;
jetSound = 0;
jetpackSound = "cGremlinJetpack_hover";

anim = 0;
animSpd = 0.2;
animStrike = 0;

pType = choose(0,0,irandom(3));

weaponType = choose(0,1,2,3,4,5);
armTypeR = choose(0,0,1,2);
armTypeL = choose(armTypeR,armTypeR,0,1,2);

screamSound = "cGremlinSmall_scream";
attackSound = "cGremlinSmall_swipe";
alertSound = "cGremlinSmall_alert";
deathSound = "cGremlinSmall_death";
damageSound = "cGremlinSmall_grunt";

hook_hitfx = enemy_hitfx_cgremlins;

// Passive and active states
var guard = scr_AI_addPassiveState(scr_AI_passive_guard);
ds_map_replace(guard, "sndAlertSound", alertSound);

activeApproach = scr_AI_addActiveState(scr_AI_active_approach);
activeCircle = scr_AI_addActiveState(scr_AI_active_circle);
activeCircle[? "switchAddMaxDist"] = 80;
activeCircle[? "switchPriority"] = 10;
activeRetreat = scr_AI_addActiveState(scr_AI_active_retreat);
activeRetreat[? "switchPriority"] = 20;
activeRetreat[? "switchDisablePush"] = true;

// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// Charge
attack = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_action_tackle);
Attack("assign", action, "charge", 0.5, 0.5, 0.5, 0.0, 0.0, 0.0);
attack[? "action"] = action; 
action[? "windupTime"] = 10; // time to aim tackle in air
action[? "tackleTime"] = 8; // fly down to hit you
action[? "afterTime"] = 15; // pause time on ground
action[? "attackName"] = "tackle";
attack[? "walkSpdMod"] = 3; // speed multiplier of tackle
attack[? "sndAttackWarn"] = screamSound; //attacking scream (desperate)
attack[? "sndAttackStrike"] = attackSound;
attack[? "distMax"] = 90;
attack[? "cooldownTime"] = 20; // gz increased 
attack[? "cooldownTimeRnd"] = 20;
ai_charge = action;

// ACRO TIME
deviate = 1;
time0 = AI_decisionFrequency;
time1 = ai_charge[? "windupTime"];
time2 = ai_charge[? "tackleTime"];
time3 = ai_charge[? "afterTime"];

// Animation
scr_entity_animation_new("body");
scr_entity_animation_new("head");
scr_entity_animation_new("left_arm");
scr_entity_animation_new("right_arm");
_body_offset=0;
_head_offset=0;
_leftarm_offset=0;
_rightarm_offset=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy
if (jetSound &gt; 0) 
{
    audio_stop_sound(jetSound);
    jetSound = NULL;
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
event_inherited();
if paused() exit;

// ACRO TIME
deviate = scr_stats_getEffectiveStat(id, STAT_BASE_AGILE) / scr_stats_getBaseStat(id, STAT_BASE_AGILE);
AI_decisionFrequency = time0 / deviate;
ai_charge[? "windupTime"] = time1 / deviate;
ai_charge[? "tackleTime"] = time2 / deviate;
ai_charge[? "afterTime"] = time3 / deviate;

var spa = 3 * 1; // Ascend
var sp0 = -1.5 * 2; // Descend
var sp1 = -7 * 2; // ???
var sp2 = -12 * 2; // smoke z

// Jetpack behaviour
if (AI_stateTopType == AI_STATETYPE_PASSIVE) {
    // Slowly descend
    move_z = sp0;
    jetpack_smokepuke -= 3 * dt();    
} 
else if (AI_stateTopType == AI_STATETYPE_ACTION &amp;&amp; a_attackName == "tackle" &amp;&amp; a_attackState == "after")
{
    // On ground time after tackle
}
else if (AI_stateTopType == AI_STATETYPE_ACTION) {
    // Quickly raus down to floor level during charge
    if (z &gt; 8 &amp;&amp; move_dist &gt; 0) {
        move_z = sp1;
    } else {
        move_z = 0;
    }
    jetpack_smokepuke -= 12 * dt();
} 
else {
    // Ascend
    move_z = spa;
    jetpack_smokepuke -= 6 * dt();
    // Cap height
    var max_z = global.settingEnemyFlyHeight - (sin(jetpack_bob) * 4);
    z = min(z, max_z);
    jetpack_bob += .6 * dt();
}

// Puke smoke from butt
if (jetpack_smokepuke &lt;= 0) 
{
    jetpack_smokepuke += 24 * dt();
    if (z &gt;= 1) 
    {    
        /*
        var s = instance_create(x, y, o_FX);
        s.z = z;
        s.sprite_index = s_effect_jetpackSmoke;
        s.image_speed = .5;
        if (AI_stateTopType != AI_STATETYPE_ACTION) {
            s.move_z = sp2;
            with s scr_entity_setMoveXY(.2 + random(.4), .2 + random(.4));
        } else {
            s.move_z = 0;
            with s scr_entity_setDirSpd(other.faceDir, -3);
        }
        */
        
        // Need movement on smoke particles for this to be replaced
        // Smoke("puff", x - 1 + random(2), y - 1 + random(2), z, 10 + random(6));
        smk = Smoke("puff keep", x, y + 6, z, 28 + random(8)); // 24 - 8
        smk.sty = 1;
        smk.frc = 0.2; // 0.4
        if (AI_stateTopType != AI_STATETYPE_ACTION)
        {
            smk.move_x = .4 + random(.8); //.2 + random .4
            smk.move_y = .4 + random(.8);
        }
        else
        {
            smk.move_x = lengthdir_x(-3, other.faceDir + irandom_range(-7, 7));
            smk.move_y = lengthdir_y(-3, other.faceDir + irandom_range(-7, 7));
        }
        smk.z = z;
        smk.smoke_speed = 1.5;
        with (smk) { event_user(0); instance_destroy(); }
        Smoke("color", c_white);
        timer_smoke = 0.5 + random(0.25);
    }
}

// Tried to steal the rumbleSound from washingmachine legs of the junkbot, didn't work out too well
/*
if (jetSound &lt;= 0) 
    {
    jetSound = audio_play_sound_on_actor(id, jetpackSound, true, 0);
    }
else 
    {
    if (jetSound &gt; 0) 
        {
        audio_stop_sound(jetSound);
        jetSound = NULL;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gibs
var _obj;
var repeats = 3 + irandom(3);
repeat (repeats) 
{
    _obj = instance_create(x,y,o_FX);
    _obj.z = z + random(hitbox_z_top);
    _obj.sprite_index = s_fx_bloodBurst;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y-4,o_gibs);
    _obj.z = z + 16;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 0;
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y+4,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 1;
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 2;
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 3;
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
event_inherited();

var _col,pt2x,pt2y,pt3x,pt3y,_hScale,_frm,_hoff,_hFrm;
_col = image_blend;

_frm = 0;
_img = 0;
_hScale = 1;
_hoff = 0;
_hFrm = 0;

_aFrmR = 0;
_aFrmL = 0;

_body_offset = pType*4;
_head_offset = 0;
_rightarm_offset = armTypeR*10+1;
_leftarm_offset = armTypeL*10+1;

_dirdir = ((faceDir+360)mod 360) div 90;
_odir = ((faceDir+360)mod 360);

switch(_dirdir)
{
    case 0: _hScale = -1; _body_offset = pType*4+ 6;_rightarm_offset = armTypeR*10+5; _leftarm_offset = armTypeL*10+5; _head_offset =2; break;
    case 1: _hScale = 1; _body_offset = pType*4+ 6;_rightarm_offset = armTypeR*10+5; _leftarm_offset = armTypeL*10+5; _head_offset =2; break;
    case 2: _hScale = -1; _body_offset = pType*4; _rightarm_offset = armTypeR*10; _leftarm_offset = armTypeL*10; _head_offset=0; break;
    case 3: _hScale = 1; _body_offset = pType*4; _rightarm_offset = armTypeR*10; _leftarm_offset = armTypeL*10; _head_offset=0;   break;
}



draw_set_alpha(1);

// Back arm
_fr = _aFrmR;
if(_dirdir&lt;=180){_fr = scr_entity_animation_getImage("left_arm");}
draw_sprite_ext(s_cgremlin_armsR,_fr,dx,dy,_hScale,1,0,_col,1);

// Torso and head
//draw_sprite_ext(s_cgremlin_rocket_body,scr_entity_animation_getImage("body"),dx,dy,_hScale,1,0,_col,1);
//draw_sprite_ext(s_cgremlin_rocket_head,scr_entity_animation_getImage("head"),dx,dy-6+_hoff,_hScale,1,0,_col,1);
draw_sprite_ext(s_cgremlin_rocket_body,_body_offset,dx,dy,_hScale,1,0,_col,1);
draw_sprite_ext(s_cgremlin_rocket_head,_head_offset,dx,dy-6+_hoff,_hScale,1,0,_col,1);

// Front arm
_fr = _aFrmL;
if(_dirdir&lt;=180){_fr = scr_entity_animation_getImage("right_arm");}
draw_sprite_ext(s_cgremlin_armsL,_fr,dx,dy,_hScale,1,0,_col,1);

combatActor_draw_post();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>14,18</point>
    <point>14,14</point>
  </PhysicsShapePoints>
</object>
