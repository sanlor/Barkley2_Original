<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000005</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //
x = view_xview[0];
y = view_yview[0];

margin_left = 10;
margin_right = 20;
width = o_dnet_control.dnet_width - margin_left - margin_right;
height = 95;

// Data //
for (i=0; i&lt;50; i+=1;) 
    {
    button_hover_poll[i] = false;
    poll_option_text[i] = "Poll option X"
    poll_ratio[i] = 0;
    poll_votes[i] = 0;
    }
button_hover_vote = false;
    
poll_variable = "";
poll_variable_2 = "";
poll_title = "";
poll_choice = 0;
poll_votes_total = 0;
poll_locked = false;
poll_vote_cast = false;

number_of_options = 0;
size_poll_title = 0;
size_poll_title_gap = 0;

// Overall content tone //
tone = global.dnet_color_variation; 
add_height = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Hovers //
drx = margin_left +view_xview[0];
dry = o_dnet_control.top_height + global.dnet_vspace + view_yview[0];
dry -= (o_dnet_control.totHei / o_dnet_control.use_height) * o_dnet_control.slider_y;

var vx = view_xview[0];
var vy = view_yview[0];

if o_dnet_app.dnet_app == -1 then
    {
    // Poll isn't locked //
    if poll_locked = false then 
        {
        // Choice buttons //
        for (var i=0; i&lt;number_of_options; i+=1;) 
            {
            button_hover_poll[i] = Dnet("pointer",
            drx + 10-vx,
            dry + 11 + topMin + size_poll_title_gap + i * (optHei + 1) + size_poll_title * 10-vy,
            drx + width - 10-vx,
            dry + 11 + topMin + optHei + size_poll_title_gap + i * (optHei + 1) + size_poll_title * 10-vy);
            }
            
        // Vote button //
        button_hover_vote = Dnet("pointer",
        drx + 10-vx,
        dry + 16 + topMin + size_poll_title_gap + number_of_options * (optHei + 0) + size_poll_title * 10-vy,
        drx + 60-vx,
        dry + 36 + topMin + size_poll_title_gap + number_of_options * (optHei + 0) + size_poll_title * 10-vy);
        }
    
    // Votes
    poll_votes_total = 0;
    for (var i=0; i&lt;number_of_options; i+=1;) poll_votes_total += poll_votes[i]; // Total votes
    for (var i=0; i&lt;number_of_options; i+=1;) poll_ratio[i] = poll_votes[i] / poll_votes_total; // Ratios
        
    // Make your choice //
    if MiniKeyPress("action") then
        {
        // Choice //
        for (var i=0; i&lt;number_of_options; i+=1;) 
            {
            if button_hover_poll[i] = true then 
                {
                if poll_locked = false then
                    {
                    poll_choice = i;
                    scr_quest_set_state(poll_variable, poll_choice);
                    }
                }
            }
            
        // Commit choice //
        if poll_locked == false &amp;&amp; button_hover_vote = true then
            {
            scr_quest_set_state(poll_variable_2, 1);
            poll_locked = true;
            poll_votes[poll_choice] += 1;
            poll_vote_cast = true;
            poll_votes_total += poll_vote_cast;
            }
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Poll title //
size_poll_title = string_height_ext(poll_title, -1, 235) / 10 + 1;
if size_poll_title &gt; 0 then size_poll_title_gap = 10;

// Height //
optHei = 22;
topMin = -20;
height = 53 + topMin + (number_of_options * optHei) + (size_poll_title * 10);



// Locked? //
if scr_quest_get_state(poll_variable_2) != 0 then 
    {
    poll_vote_cast = false;
    poll_locked = true;
    }

// Add in height to overall thread height // 10 = gap between posts //
if add_height = false then
    {
    o_dnet_control.scrolling_position += height + 8;
    o_dnet_control.scrolling_max = o_dnet_control.scrolling_position;
    add_height = true;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Set font //
draw_set_font(global.fn_dnet);
draw_set_alpha(1);

drx = x + margin_left;
dry = y + o_dnet_control.top_height + global.dnet_vspace;
dry -= (o_dnet_control.totHei / o_dnet_control.use_height) * o_dnet_control.slider_y;
// Poll box // 
MiniSprite9(sDNETBorder0, 0, drx, dry, width, height, 1, c_white, 1);
 
// Title //
DnetText(drx + 17, dry + 11 - 4, poll_title, width - 34, c_white, 1, fa_left, fa_top);

// Poll options //
for (var o=0; o&lt;number_of_options; o+=1;)
{
    // Boxes and texts //
    var sub = 0;
    if (poll_choice == o) sub = 5; else if (button_hover_poll[o]) sub = 4; else sub = 3;
    MiniSprite9(sDNETBorder0, sub, drx + 10, dry + 11 + topMin + o * (optHei + 1) + size_poll_title_gap + size_poll_title * 10, width - 20, optHei, 1, c_white, 1);
        
    // Poll option text //
    DnetText(drx + 37, dry + 16 + topMin + o * (optHei + 1) + size_poll_title_gap + size_poll_title * 10, poll_option_text[o], 270, c_white, 1, fa_left, fa_top);
    
    // Poll radio button // 23 on y
    if poll_choice = o then draw_sprite(s_dnet_button_poll, 1 + scr_quest_get_state("dwarfnet_skin_content") * 2, drx + 20, dry + 17 + topMin + o * (optHei + 1) + size_poll_title_gap + size_poll_title * 10);
    else draw_sprite(s_dnet_button_poll, 0 + scr_quest_get_state("dwarfnet_skin_content") * 2, drx + 20, dry + 17 + topMin + o * (optHei + 1) + size_poll_title_gap + size_poll_title * 10);

    // Poll ratios and graphs //
    if poll_locked = true then
    {
        polWid = width - 112 - 60;
        // Bars //
        draw_sprite_ext(s1x1, 0, drx + 88 + 30, dry + 30 - 10 + topMin + o * (optHei + 1) + size_poll_title_gap + size_poll_title * 10, polWid + 4, 5, 0, c_gray, 1);
        draw_sprite_ext(s1x1, 0, drx + 90 + 30, dry + 32 - 10 + topMin + o * (optHei + 1) + size_poll_title_gap + size_poll_title * 10, (poll_ratio[o] * polWid), 1, 0, c_red, 1);
        // Poll ratio % // below || was 27
        DnetText(drx + 94 + 60 + polWid, dry + 16 + topMin + o * (optHei + 1) + size_poll_title_gap + size_poll_title * 10, string(floor(poll_ratio[o] * 50) * 2) + "%", 270, c_aqua, 1, 2, fa_top);
    }
    /*
    draw_set_color(c_red);
    scr_drawRect(drx + 10,
    dry + 11 + topMin + size_poll_title_gap + o * (optHei + 1) + size_poll_title * 10,
    drx + width - 10,
    dry + 11 + topMin + optHei + size_poll_title_gap + o * (optHei + 1) + size_poll_title * 10,
    false);*/
    
    /*
    if poll_locked = false then 
        {
        // Choice buttons //
        for (var i=0; i&lt;number_of_options; i+=1;) 
            {
            button_hover_poll[i] = Dnet("pointer", drx + 10, dry + 11 + topMin + size_poll_title_gap + i * (optHei + 1) + size_poll_title * 10, drx + width - 10, dry + 11 + topMin + optHei + size_poll_title_gap + i * (optHei + 1) + size_poll_title * 10);
            }
            
        // Vote button //
        button_hover_vote = Dnet("pointer", drx + 10, dry + 16 + topMin + size_poll_title_gap + number_of_options * (optHei + 0) + size_poll_title * 10, drx + 60, dry + 36 + topMin + size_poll_title_gap + number_of_options * (optHei + 0) + size_poll_title * 10);
        }
    */
}
    
// Vote button //
if poll_locked = false then
    {
    if button_hover_vote = true then draw_sprite_ext(s_dnet_button_vote, 1, drx + 10, dry + 16 + topMin + size_poll_title_gap + size_poll_title * 10 + number_of_options * (optHei + 0), 1, 1, 0, c_white, 1); 
    else draw_sprite_ext(s_dnet_button_vote, 0, drx + 10, dry + 16 + topMin + size_poll_title_gap + size_poll_title * 10 + number_of_options * (optHei + 0), 1, 1, 0, c_white, 1); 
    DnetText(drx + 20, dry + 20 + topMin + size_poll_title_gap + size_poll_title * 10 + number_of_options * (optHei + 0), "Vote", 235, c_white, 1, fa_left, fa_top);
     /*
    draw_set_color(c_red);
    scr_drawRect(drx + 10,
    dry + 16 + topMin + size_poll_title_gap + number_of_options * (optHei + 0) + size_poll_title * 10,
    drx + 60,
    dry + 36 + topMin + size_poll_title_gap + number_of_options * (optHei + 0) + size_poll_title * 10,
    false);*/
        
    
    }
// Total votes cast //
else
    {
    DnetText(drx + 16, dry + 16 + topMin + size_poll_title_gap + size_poll_title * 10 + number_of_options * (optHei + 1), "Total number of votes cast: " + string(poll_votes_total), 235, c_white, 1, fa_left, fa_top);
    }



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
