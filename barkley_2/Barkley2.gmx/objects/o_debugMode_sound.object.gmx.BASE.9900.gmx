<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2100000</depth>
  <persistent>0</persistent>
  <parentName>o_debugMode</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
audio_stop_all();
scl = display_get_gui_width() / 384;

plyX = ((384 / 2) - 24) * scl;
plyY = 48 * scl;
stpX = plyX + (48 * scl);
stpY = plyY;

volLck = 0;

sndPro = 0; // progress
sndTim = 0;

//scr_soundbanks_init();

// Build debug lists
dslMusic = ds_list_create();
dslMus = ds_list_create();
dslOrphan = ds_list_create();
dslOrp = ds_list_create();
var siz = ds_map_size(global.dsmSound) - 1;
var sndNam = ds_map_find_first(global.dsmSound);
for (var i = 0; i &lt; siz; i += 1)
{
    if (global.dsmSoundOrphan[? sndNam] == 1)
    {
        if (string_copy(sndNam, 1, 3) != "mus")
        {
            ds_list_add(dslOrphan, sndNam);
            //show_debug_message("o_debugMode_sound: " + sndNam);
        }
        else
        {
            ds_list_add(dslMusic, sndNam);
        }
    }
    //ds_map_add(global.dsmSoundOrphan, sndNam, 0);
    sndNam = ds_map_find_next(global.dsmSound, sndNam);
}
ds_list_sort(dslOrphan, 1);
ds_list_sort(dslMusic, 1);

// Get soundbanks
dslBank = ds_list_create();
dslBnk = ds_list_create();
siz = ds_map_size(global.soundbanks) - 1;
sndNam = ds_map_find_first(global.soundbanks);
for (var i = 0; i &lt; siz; i += 1)
{
    ds_list_add(dslBank, sndNam);
    sndNam = ds_map_find_next(global.soundbanks, sndNam);
}
ds_list_sort(dslBank, 1);

// Short names
for (i = 0; i &lt; ds_list_size(dslOrphan); i += 1)
{
    sndNam = dslOrphan[| i];
    sndLen = min(18, string_length(sndNam) - 3);
    ds_list_add(dslOrp, string_copy(sndNam, 4, sndLen));
}
for (i = 0; i &lt; ds_list_size(dslMusic); i += 1)
{
    sndNam = dslMusic[| i];
    sndLen = min(18, string_length(sndNam) - 4);
    ds_list_add(dslMus, string_copy(sndNam, 5, sndLen));
}
for (i = 0; i &lt; ds_list_size(dslBank); i += 1)
{
    sndNam = dslBank[| i];
    ds_list_add(dslBnk, sndNam);
}

curSel = ""; //lst, mus, bnk

musAmt = ds_list_size(dslMusic);
musSel = "";
musPos = 0;
musShw = 5; //10 - 1;
musHei = 120 - (5 * 12);
musY = 12;
musWid = 90;
musScrLck = 0;
musScrSiz = (musHei / musAmt) * musShw;
musScrPos = (musHei / musAmt) * musPos;
musCol0 = c_aqua;
musCol1 = merge_color(c_aqua, c_white, 0.5);

bnkAmt = ds_list_size(dslBank);
bnkSel = "";
bnkPos = 0;
bnkShw = 10 + 4;
bnkHei = 156; //120 - 12;
bnkY = 84; //120 + 12;
bnkWid = 90;
bnkScrLck = 0;
bnkScrSiz = (bnkHei / bnkAmt) * bnkShw;
bnkScrPos = (bnkHei / bnkAmt) * bnkPos;
bnkCol0 = c_fuchsia;
bnkCol1 = merge_color(c_fuchsia, c_white, 0.5);

lstAmt = ds_list_size(dslOrphan);
lstSel = "";
lstSelPrv = "";
lstPos = 0; //Position to start scroll
lstShw = 20 - 1; //Amount of records to show
lstHei = 240 - 12;
lstY = 12;
lstWid = 90; //Width of list
lstScrLck = 0;
lstScrSiz = (lstHei / lstAmt) * lstShw;
lstScrPos = (lstHei / lstAmt) * lstPos;
lstCol0 = c_ltgray;
lstCol1 = merge_color(c_gray, c_ltgray, 0.5);

sndAct = ds_list_find_value(dslOrphan, 0);

//musInd = ds_map_find_first(global.dsmMusic);
sndInd = ds_map_find_first(global.dsmSound);
//audio_stop_all();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy lists, save sound data
ds_list_destroy(dslMusic);
ds_list_destroy(dslMus);
ds_list_destroy(dslOrphan);
ds_list_destroy(dslOrp);
ds_list_destroy(dslBank);
ds_list_destroy(dslBnk);
scr_sound_save();

audio_stop_all();
audio_set_bgm_instant(global.bgm_current_music);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stream DNET tunes
scr_pause_doPause();
scl = display_get_gui_width() / 384;

moy = window_mouse_get_y();// * (6 * scl);
moy2 = window_mouse_get_y() * (6 * scl);

// Active sound
if ((lstSel != "" &amp;&amp; curSel == "lst") || (curSel == "mus"))
{
    // Play Button
    if (keyboard_check_pressed(vk_space) || scr_mouse_area(plyX - (16 * scl), plyY - (16 * scl), plyX + (16 * scl), plyY + (16 * scl)))
    {
        if (keyboard_check_pressed(vk_space) || mouse_check_button_pressed(mb_left)) 
        { 
            if (mouse_check_button_pressed(mb_left)) mouse_clear(mb_left);
            event_user(15); // Play sound tracker
        }
    }
    
    // Stop button
    if (scr_mouse_area(stpX - (16 * scl), stpY - (16 * scl), stpX + (16 * scl), stpY + (16 * scl)))
    {
        if (mouse_check_button_pressed(mb_left)) 
        { 
            mouse_clear(mb_left);
            if (curSel == "mus") audio_stop_sound(global.dsmSound[? musSel]);
            else audio_stop_sound(global.dsmSound[? lstSel]);
            sndPro = sndTim;
        }
    }
}

// Listbox
//lstSelPrv = lstSel;
doMov = 0;
if (scr_mouse_area(0, lstY * scl, (lstWid * scl), (lstY * scl) + (lstHei * scl)) &amp;&amp; lstScrLck == 0)
{
    if (mouse_check_button_pressed(mb_left)) 
    { 
        mouse_clear(mb_left);
        lstSel = dslOrphan[| lstPos + floor((moy - (lstY * scl)) / (12 * scl))];
        curSel = "lst";
        event_user(15); // Play sound tracker
    }
}

// Recent 10 unique
dx = (lstWid * scl) + (8 * scl);
dy = 120 * scl;
if (scr_mouse_area(dx, dy, dx + ((384 - lstWid - musWid - 16) * scl), 240 * scl))
{
    if (mouse_check_button_pressed(mb_left)) 
    { 
        mouse_clear(mb_left);
        ind = floor((moy - dy) / (12 * scl));
        if (ind &lt; ds_list_size(global.dslSoundRecent))
        {
            if (string_count("mus_", global.dslSoundRecent[| ind]) &gt; 0)
            {
                audio_stop_sound(global.dsmSound[? musSel]);
                musSel = global.dslSoundRecent[| ind];
                curSel = "mus";
            }
            else
            {
                lstSel = global.dslSoundRecent[| ind];
                curSel = "lst"; // added
            }
            event_user(15); // Play sound tracker
        }
    }
}

// Orphan Scrollbar
doPos = 0;
if (mouse_wheel_up()) doPos = -5;
if (mouse_wheel_down()) doPos = +5;
lstScrSiz = (lstHei / lstAmt) * lstShw;
lstScrPos = (lstHei / lstAmt) * lstPos;
if (scr_mouse_area((lstWid * scl), lstY * scl, (lstWid * scl) + (8 * scl), (lstY * scl) + (lstHei * scl))  || lstScrLck == 1)
{
    if (mouse_check_button_pressed(mb_left) || lstScrLck == 1)
    {
        if (lstScrLck == 0) { lstScrY = moy; lstPosOrg = lstPos; }
        lstScrLck = 1;
        lstPos = lstPosOrg - floor((lstScrY - moy) / ((lstHei / lstAmt) * scl));
    }
}
if (mouse_check_button(mb_left) == 0) lstScrLck = 0;
lstPos = clamp(lstPos + doPos, 0, lstAmt - lstShw); //doubled

// Music Scrollbar
dx = (384 - musWid) * scl; 
dy = 0 * scl;
if (scr_mouse_area(dx - (7 * scl), musY * scl, dx, (musY * scl) + (musHei * scl)) || musScrLck == 1)
{
    if (mouse_check_button_pressed(mb_left) || musScrLck == 1)
    {
        if (musScrLck == 0) { musScrY = moy; musPosOrg = musPos; }
        musScrLck = 1;
        musPos = musPosOrg - floor((musScrY - moy) / ((musHei / musAmt) * scl));
    }
}
if (mouse_check_button(mb_left) == 0) musScrLck = 0;
musPos = clamp(musPos, 0, musAmt - musShw);
musScrSiz = (musHei / musAmt) * musShw;
musScrPos = (musHei / musAmt) * musPos;

// Music Listbox
if (scr_mouse_area(dx, musY * scl, dx + (musWid * scl), (musY * scl) + (musHei * scl)) &amp;&amp; musScrLck == 0)
{
    if (mouse_check_button_pressed(mb_left)) 
    { 
        mouse_clear(mb_left);
        if (musSel != "") audio_stop_sound(global.dsmSound[? musSel]);
        curSel = "mus"; // test
        musSel = dslMusic[| musPos + floor((moy - (musY * scl)) / (12 * scl))];
        audio_play_sound(global.dsmSound[? musSel], 10, 1);
    }
}

// Bank Scrollbar
dx = (384 - musWid) * scl; 
dy = bnkY * scl;
if (scr_mouse_area(dx - (7 * scl), bnkY * scl, dx, (bnkY * scl) + (bnkHei * scl)) || bnkScrLck == 1)
{
    if (mouse_check_button_pressed(mb_left) || bnkScrLck == 1)
    {
        if (bnkScrLck == 0) { bnkScrY = moy; bnkPosOrg = bnkPos; }
        bnkScrLck = 1;
        bnkPos = bnkPosOrg - floor((bnkScrY - moy) / ((bnkHei / bnkAmt) * scl));
    }
}
if (mouse_check_button(mb_left) == 0) bnkScrLck = 0;
bnkPos = clamp(bnkPos, 0, bnkAmt - bnkShw);
bnkScrSiz = (bnkHei / bnkAmt) * bnkShw;
bnkScrPos = (bnkHei / bnkAmt) * bnkPos;

// Bank Listbox
if (scr_mouse_area(dx, bnkY * scl, dx + (bnkWid * scl), (bnkY * scl) + (bnkHei * scl)) &amp;&amp; bnkScrLck == 0)
{
    if (mouse_check_button_pressed(mb_left)) 
    { 
        mouse_clear(mb_left);
        if (bnkSel != "") audio_stop_sound(global.dsmSound[? bnkSel]);
        curSel = "bnk";
        bnkSel = dslBank[| bnkPos + floor((moy - (bnkY * scl)) / (12 * scl))];
        //audio_play_sound(global.dsmSound[? bnkSel], 10, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Play sound with tracker
//audio_stop_all();
if (curSel == "mus")
{
    audio_stop_sound(global.dsmSound[? musSel]);
    audio_play_sound(global.dsmSound[? musSel], 0, 0);
}
else
{
    if (lstSelPrv != "") audio_stop_sound(global.dsmSound[? lstSelPrv]);
    
    audio_play_sound(global.dsmSound[? lstSel], 0, 0);
    scr_sound_log(lstSel);
    sndPro = 0;
    sndTim = global.dsmSoundLength[? lstSel];
    lstSelPrv = lstSel;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Instance destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw mixer
draw_set_font(fnt_debugTiny);

draw_sprite_ext(s_1, 0, 0, 0, 384 * scl, 240 * scl, 0, c_ltgray, 1);

//draw_set_halign(0); draw_set_color(c_white); draw_text(600, 5, lstSelPrv); draw_text(600, 17, lstSel);

// Sound log
draw_set_halign(1);
draw_set_color(c_black);
dx = (384 / 2) * scl;
dy = 120 * scl;
draw_sprite_ext(s_1, 0, 0, dy - scl, 384 * scl, scl, 0, c_black, 1);
for (i = 0; i &lt; 10; i += 1)
{
    selCol = c_white;
    if (i mod 2 == 0) draw_sprite_ext(s_1, 0, 0, dy, 384 * scl, 12 * scl, 0, merge_color(lstCol0, selCol, 0.5), 1);
    else draw_sprite_ext(s_1, 0, 0, dy, 384 * scl, 12 * scl, 0, merge_color(lstCol1, selCol, 0.5), 1);
    if (i &lt; ds_list_size(global.dslSoundRecent)) draw_text_transformed(dx, dy, global.dslSoundRecent[| i], scl, scl, 0);
    dy += 12 *scl;
}

// Sound Log Title
wid = (384 - (bnkWid + 7) - (lstWid + 7)) * scl;
hei = 12 * scl;
dx = (lstWid + 7) * scl;
dy = (120 - 12) * scl;
draw_sprite_ext(s_1, 0, dx, dy, wid, hei, 0, c_white, 1); // BG
draw_text_transformed(dx + floor(wid / 2), dy, "Last 10 Unique Sounds", scl, scl, 0); 
draw_sprite_ext(s_1, 0, dx, dy, wid, scl, 0, c_black, 1);
draw_sprite_ext(s_1, 0, dx, dy, scl, hei, 0, c_black, 1);
draw_sprite_ext(s_1, 0, dx + wid, dy, scl, hei, 0, c_black, 1);
draw_sprite_ext(s_1, 0, dx, dy + (hei - scl), wid, scl, 0, c_black, 1);

// Draw orphans
draw_set_halign(0);
draw_set_color(c_white);
vsp = 12 * scl;
dx = 0 * scl; 
dy = lstY * scl;
//draw_text_transformed(dx, dy, "ORPHAN SOUNDS", scl, scl, 0); 
//dy += vsp;
draw_set_color(c_black);
for (i = lstPos; i &lt; lstPos + lstShw; i += 1)
{
    if (i &gt;= lstAmt) break;
    //Alternating color
    if (lstSel == dslOrphan[| i]) selCol = c_yellow; else selCol = c_white;
    if (i mod 2 == 0) draw_sprite_ext(s_1, 0, dx, dy, lstWid * scl, 12 * scl, 0, merge_color(lstCol0, selCol, 0.5), 1);
    else draw_sprite_ext(s_1, 0, dx, dy, lstWid * scl, 12 * scl, 0, merge_color(lstCol1, selCol, 0.5), 1);
    // Draw volume overlay
    draw_sprite_ext(s_1, 0, dx, dy, (lstWid * global.dsmSoundVolume[? dslOrphan[| i]]) * scl, 12 * scl, 0, c_lime, 0.25);
    
    draw_text_transformed(dx + (3 * scl), dy, ds_list_find_value(dslOrp, i), scl, scl, 0); 
    dy += vsp;
}

////////// Draw Orphan scrollbar //////////
draw_sprite_ext(s_1, 0, ((lstWid + 0) * scl), lstY * scl, scl, lstHei * scl, 0, c_black, 1); // Vert
draw_sprite_ext(s_1, 0, ((lstWid + 7) * scl), lstY * scl, scl, lstHei * scl, 0, c_black, 1); // Vert
draw_sprite_ext(s_1, 0, ((lstWid + 1) * scl), lstY * scl, 6 * scl, lstHei * scl, 0, c_gray, 1);
draw_sprite_ext(s_1, 0, ((lstWid + 1) * scl), (lstY * scl) + (lstScrPos * scl), 6 * scl, lstScrSiz * scl, 0, c_yellow, 1);

// Draw title for orphans
wid = (lstWid + 7) * scl;
hei = 12 * scl;
draw_sprite_ext(s_1, 0, 0, 0, wid, hei, 0, c_white, 1); // BG
draw_text_transformed((3 * scl), 0, "Bankless", scl, scl, 0); 
draw_sprite_ext(s_1, 0, 0, 0, wid, scl, 0, c_black, 1);
draw_sprite_ext(s_1, 0, 0, 0, scl, hei, 0, c_black, 1);
draw_sprite_ext(s_1, 0, wid, 0, scl, hei, 0, c_black, 1);
draw_sprite_ext(s_1, 0, 0, hei - scl, wid, scl, 0, c_black, 1);

// Draw music
dx = (384 - musWid) * scl; 
dy = musY * scl;
draw_set_color(c_black);
for (i = musPos; i &lt; musPos + musShw; i += 1)
{
    if (i &gt;= musAmt) break;
    if (musSel == dslMusic[| i]) selCol = c_yellow; else selCol = c_white;
    if (i mod 2 == 0) draw_sprite_ext(s_1, 0, dx, dy, musWid * scl, 12 * scl, 0, merge_color(musCol0, selCol, 0.5), 1);
    else draw_sprite_ext(s_1, 0, dx, dy, musWid * scl, 12 * scl, 0, merge_color(musCol1, selCol, 0.5), 1);
    // Draw volume overlay
    //draw_sprite_ext(s_1, 0, dx, dy, (musWid * global.dsmSoundVolume[? dslMusic[| i]]) * scl, 12 * scl, 0, c_lime, 0.25);
    
    draw_text_transformed(dx + (3 * scl), dy, dslMus[| i], scl, scl, 0); 
    dy += vsp;
}

////////// Draw Music scrollbar //////////
draw_sprite_ext(s_1, 0, dx - (0 * scl), (musY * scl), scl, musHei * scl, 0, c_black, 1); // Vert
draw_sprite_ext(s_1, 0, dx - (7 * scl), (musY * scl), scl, musHei * scl, 0, c_black, 1); // Vert
draw_sprite_ext(s_1, 0, dx - (6 * scl), (musY * scl), 6 * scl, musHei * scl, 0, c_gray, 1);
draw_sprite_ext(s_1, 0, dx - (6 * scl), (musY * scl) + (musScrPos * scl), 6 * scl, musScrSiz * scl, 0, c_yellow, 1);

// Draw title for music
wid = (musWid + 7) * scl;
hei = 12 * scl;
dx = dx - (7 * scl);
dy = 0;
draw_sprite_ext(s_1, 0, dx, 0, wid, hei, 0, c_white, 1); // BG
draw_text_transformed(dx + (3 * scl), 0, "Music", scl, scl, 0); 
draw_sprite_ext(s_1, 0, dx, 0, wid, scl, 0, c_black, 1);
draw_sprite_ext(s_1, 0, dx, 0, scl, hei, 0, c_black, 1);
draw_sprite_ext(s_1, 0, dx + wid, 0, scl, hei, 0, c_black, 1);
draw_sprite_ext(s_1, 0, dx, hei - scl, wid, scl, 0, c_black, 1);

// Draw Bank Listbox
dx = (384 - bnkWid) * scl; 
dy = bnkY * scl;
draw_set_color(c_black);
for (i = bnkPos; i &lt; bnkPos + bnkShw; i += 1)
{
    if (i &gt;= bnkAmt) break;
    if (bnkSel == dslBank[| i]) selCol = c_yellow; else selCol = c_white;
    if (i mod 2 == 0) draw_sprite_ext(s_1, 0, dx, dy, bnkWid * scl, 12 * scl, 0, merge_color(bnkCol0, selCol, 0.5), 1);
    else draw_sprite_ext(s_1, 0, dx, dy, bnkWid * scl, 12 * scl, 0, merge_color(bnkCol1, selCol, 0.5), 1);
    // Draw volume overlay
    //draw_sprite_ext(s_1, 0, dx, dy, (bnkWid * global.dsmSoundVolume[? dslMusic[| i]]) * scl, 12 * scl, 0, c_lime, 0.25);
    
    draw_text_transformed(dx + (3 * scl), dy, dslBank[| i], scl, scl, 0); 
    dy += vsp;
}

////////// Draw Bank Scrollbar //////////
draw_sprite_ext(s_1, 0, dx - (0 * scl), (bnkY * scl), scl, bnkHei * scl, 0, c_black, 1); // Vert
draw_sprite_ext(s_1, 0, dx - (7 * scl), (bnkY * scl), scl, bnkHei * scl, 0, c_black, 1); // Vert
draw_sprite_ext(s_1, 0, dx - (6 * scl), (bnkY * scl), 6 * scl, bnkHei * scl, 0, c_gray, 1);
draw_sprite_ext(s_1, 0, dx - (6 * scl), (bnkY * scl) + (bnkScrPos * scl), 6 * scl, bnkScrSiz * scl, 0, c_yellow, 1);

// Draw Bank Title
wid = (bnkWid + 7) * scl;
hei = 12 * scl;
dx = dx - (7 * scl);
dy = (bnkY - 12) * scl;
draw_sprite_ext(s_1, 0, dx, dy, wid, hei, 0, c_white, 1); // BG
draw_text_transformed(dx + (3 * scl), dy, "Soundbanks", scl, scl, 0); 
draw_sprite_ext(s_1, 0, dx, dy, wid, scl, 0, c_black, 1);
draw_sprite_ext(s_1, 0, dx, dy, scl, hei, 0, c_black, 1);
draw_sprite_ext(s_1, 0, dx + wid, dy, scl, hei, 0, c_black, 1);
draw_sprite_ext(s_1, 0, dx, dy + (hei - scl), wid, scl, 0, c_black, 1);

// Draw active
if (curSel != "") //lstSel != "")
{
    if (curSel == "lst")
    {
        curSnd = lstSel;
        sndTim = global.dsmSoundLength[? lstSel];
    }
    else if (curSel == "mus")
    {
        curSnd = musSel;
        sndTim = 0;
    }
    else // Soundbank
    {
        dslTmp = global.soundbanks[? bnkSel];
        draw_set_halign(1);
        dx = (384 / 2) * scl;
        dy = 0 * scl;
        for (i = 0; i &lt; ds_list_size(dslTmp); i += 1)
        {
            if (scr_mouse_area(dx - (50 * scl), dy, dx + (50 * scl), dy + (12 * scl)))
            {
                if (mouse_check_button_pressed(mb_left))
                {
                    mouse_clear(mb_left);
                    lstSel = dslTmp[| i];
                    curSel = "lst";
                    event_user(15);
                    
                    // On the fly
                    curSnd = lstSel;
                    sndTim = global.dsmSoundLength[? lstSel];
                }
            }
            draw_sprite_ext(s_1, 0, dx - (50 * scl), dy, (100 * global.dsmSoundVolume[? dslTmp[| i]]) * scl, 12 * scl, 0, c_lime, 0.25);
            draw_text_transformed(dx, dy, dslTmp[| i], scl, scl, 0); 
            dy += 12 * scl;
        }
    }
    
    if (curSel != "bnk")
    {
        draw_set_halign(1);
        dx = (384 / 2) * scl;
        dy = 0 * scl;
        draw_text_transformed(dx, dy, curSnd, scl, scl, 0); 
        dy += 12 * scl;
        draw_text_transformed(dx - (48 * scl), dy, "Memory: " + string(ceil(global.dsmSoundMemory[? curSnd])) + "kb", scl, scl, 0);
        draw_text_transformed(dx + (48 * scl), dy, "Length: " + string(global.dsmSoundLength[? curSnd]) + "s", scl, scl, 0);
    }
    
    // Play bar
    if (curSel == "lst")
    {
        sndPro = clamp(sndPro + (delta_time / 1000000), 0, sndTim);
        dx = (120 * scl);
        dy = 28 * scl;
        draw_sprite_ext(s_1, 0, dx, dy, (144 * scl), 2, 0, c_black, 1);
        if (sndTim == 0) pct = 0; else pct = sndPro / sndTim;
        draw_set_color(c_black);
        draw_circle(dx + ((144 * pct) * scl), dy, 3 * scl, 0);
    }
    
    // Volume
    if (curSel == "muss") // test
    {
        dx = (384 / 2) * scl;
        dy = 70 * scl;
        draw_text_transformed(dx, dy, "Music volume cannot be edited#Change by directly editing the sound file", scl, scl, 0); 
    }
    else if (curSel == "lst" || curSel == "mus") // test
    {
        sndVol = global.dsmSoundVolume[? curSnd];
        pct = sndVol;
        dx = (384 / 2) * scl;
        dy = 70 * scl;
        draw_text_transformed(dx, dy, "Volume", scl, scl, 0); 
        dx = (120 * scl);
        dy += 20 * scl;
        draw_sprite_ext(s_1, 0, dx, dy, (144 * scl), 2, 0, c_black, 1);
        draw_set_color(c_black);
        volX = dx + ((144 * pct) * scl);
        volY = dy;
        volSiz = 12 * scl;
        draw_circle(volX, volY, 12 * scl, 0);
        draw_set_color(c_white);
        draw_text_transformed(volX, volY - (6 * scl), string(floor(sndVol * 100)), scl, scl, 0); 
        
        if (scr_mouse_area(volX - volSiz, volY - volSiz, volX + volSiz, volY + volSiz) || volLck == 1)
        {
            if (mouse_check_button_pressed(mb_left) || volLck == 1)
            {
                if (volLck == 0) { volLckX = window_mouse_get_x(); sndVolOrg = sndVol; }
                volLck = 1;
                sndVol = sndVolOrg + (window_mouse_get_x() - volLckX) / (144 * scl);
                sndVol = clamp(sndVol, 0, 1);
                global.dsmSoundVolume[? curSnd] = sndVol;
                audio_sound_gain_ext(global.dsmSound[? curSnd], sndVol, 0);
            }
        }
        if (mouse_check_button(mb_left) == 0) volLck = 0;
    
        // Play
        draw_set_color(c_black);
        draw_circle(plyX, plyY, 16 * scl, 0);
        draw_set_color(c_gray);
        draw_circle(plyX, plyY, 14 * scl, 0);
        draw_set_color(c_lime);
        draw_triangle(plyX - (6 * scl), plyY - (8 * scl), plyX - (6 * scl), plyY + (8 * scl), plyX + (10 * scl), plyY - (0 * scl), 0);
        draw_set_color(c_black);
        draw_text_transformed(plyX, plyY - (6 * scl), "Space", scl, scl, 0); 
        
        // Stop
        draw_set_color(c_black);
        draw_circle(stpX, stpY, 16 * scl, 0);
        draw_set_color(c_gray);
        draw_circle(stpX, stpY, 14 * scl, 0);
        draw_set_color(c_red);
        draw_rectangle(stpX - (8 * scl), stpY - (8 * scl), stpX + (8 * scl), stpY + (8 * scl), 0);
    }
}

///Draw mouse
draw_set_color(c_black);
draw_circle(window_mouse_get_x(), window_mouse_get_y(), scl * 2, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
