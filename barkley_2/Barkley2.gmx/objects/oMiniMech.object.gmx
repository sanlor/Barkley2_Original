<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2600000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create menus
//last was doing options
//window_center();

lists = 0; //For MiniMechDS

wMain = MiniMechDS();
wMain_Mech = MiniMechDS();
ds_list_add(wMain, "Mech Settings...|DS=" + string(wMain_Mech));
wMain_Options = MiniMechDS();
ds_list_add(wMain, "Options...|DS=" + string(wMain_Options));
wMain_Mode = MiniMechDS();
ds_list_add(wMain, "Mode...|DS=" + string(wMain_Mode));
wMain_Init = MiniMechDS();
ds_list_add(wMain, "Initialize...|DS=" + string(wMain_Init));
//ds_list_add(wMain, "Initialize...|CONFIRM");

//MECH SETTINGS
wMain_Mech_Hard = MiniMechDS();
ds_list_add(wMain_Mech, "Hardware...|DS=" + string(wMain_Mech_Hard));
wMain_Mech_Soft = MiniMechDS();
ds_list_add(wMain_Mech, "Software...|DS=" + string(wMain_Mech_Soft));
wMain_Mech_Fluid = MiniMechDS();
ds_list_add(wMain_Mech, "Fluids...|DS=" + string(wMain_Mech_Fluid));
wMain_Mech_Align = MiniMechDS();
ds_list_add(wMain_Mech, "Alignment...|DS=" + string(wMain_Mech_Align));
wMain_Mech_Ballast = MiniMechDS();
ds_list_add(wMain_Mech, "Ballast...|DS=" + string(wMain_Mech_Ballast));
wMain_Mech_Access = MiniMechDS();
ds_list_add(wMain_Mech, "Accessories...|DS=" + string(wMain_Mech_Access));

//OPTIONS
ds_list_add(wMain_Options, "Sound:|On, Off");
ds_list_add(wMain_Options, "Music:|On, Off");
ds_list_add(wMain_Options, "Invert Y-Axis:|On, Off");
ds_list_add(wMain_Options, "Invert X-Axis:|On, Off");

//MODE
ds_list_add(wMain_Mode, "Type:|Gib-Fest, Clock Attack, Guardian");
ds_list_add(wMain_Mode, "Wins:|1, 3, 5, 7");

//INITIALIZE
ds_list_add(wMain_Init, "Confirm set-up?|DS=0");
ds_list_add(wMain_Init, "Yes");
ds_list_add(wMain_Init, "No");

//MECH SETTINGS - HARDWARE
wMain_Mech_Hard_Engine = MiniMechDS();
ds_list_add(wMain_Mech_Hard, "Engine...|DS=" + string(wMain_Mech_Hard_Engine));
wMain_Mech_Hard_Trans = MiniMechDS();
ds_list_add(wMain_Mech_Hard, "Transmission...|DS=" + string(wMain_Mech_Hard_Trans));
wMain_Mech_Hard_Brake = MiniMechDS();
ds_list_add(wMain_Mech_Hard, "Brakes...|DS=" + string(wMain_Mech_Hard_Brake));
wMain_Mech_Hard_Suspension = MiniMechDS();
ds_list_add(wMain_Mech_Hard, "Suspension...|DS=" + string(wMain_Mech_Hard_Suspension));
wMain_Mech_Hard_Thrust = MiniMechDS();
ds_list_add(wMain_Mech_Hard, "Thrusters...|DS=" + string(wMain_Mech_Hard_Thrust));
ds_list_add(wMain_Mech_Hard, "Radar:|Gomp Tech, Garbash, Delmon Radar");
ds_list_add(wMain_Mech_Hard, "Wiper Blade:|SuperWipe EX, Hoark WB-7, Stick");

//MECH SETTINGS - SOFTWARE
ds_list_add(wMain_Mech_Soft, "OS:|Beach VirOS, SunSun, Tuxedo OS Free Edition");
wMain_Mech_Soft_Target = MiniMechDS();
ds_list_add(wMain_Mech_Soft, "Targeting...|DS=" + string(wMain_Mech_Soft_Target));
ds_list_add(wMain_Mech_Soft, "Patching:|Auto, Ask, Manual");

//MECH SETTINGS - FLUIDS
wMain_Mech_Fluid_Fuel = MiniMechDS();
ds_list_add(wMain_Mech_Fluid, "Fuel...|DS=" + string(wMain_Mech_Fluid_Fuel));
wMain_Mech_Fluid_Motor = MiniMechDS();
ds_list_add(wMain_Mech_Fluid, "Motor Oil...|DS=" + string(wMain_Mech_Fluid_Motor));
wMain_Mech_Fluid_Brake = MiniMechDS();
ds_list_add(wMain_Mech_Fluid, "Brake Fluid...|DS=" + string(wMain_Mech_Fluid_Brake));
wMain_Mech_Fluid_Washer = MiniMechDS();
ds_list_add(wMain_Mech_Fluid, "Washer Fluid...|DS=" + string(wMain_Mech_Fluid_Washer));
wMain_Mech_Fluid_Joint = MiniMechDS();
ds_list_add(wMain_Mech_Fluid, "Joint Fluid...|DS=" + string(wMain_Mech_Fluid_Joint));

//MECH SETTINGS - ALIGNMENT
ds_list_add(wMain_Mech_Align, "Toe:|-3 degrees, -2 degrees, -1 degree, Flat, +1 degree, +2 degree, +3 degree");
ds_list_add(wMain_Mech_Align, "Caster:|-3 degrees, -2 degrees, -1 degree, Flat, +1 degree, +2 degree, +3 degree");
ds_list_add(wMain_Mech_Align, "Camber:|-3 degrees, -2 degrees, -1 degree, Flat, +1 degree, +2 degree, +3 degree");

//MECH SETTINGS - BALLAST
ds_list_add(wMain_Mech_Ballast, "Rear:|0 tons, 20 tons, 40 tons, 60 tons, 80 tons, 100 tons"); //Slider 0 - 100 tons
ds_list_add(wMain_Mech_Ballast, "Front:|0 tons, 20 tons, 40 tons, 60 tons, 80 tons, 100 tons");
ds_list_add(wMain_Mech_Ballast, "Left:|0 tons, 20 tons, 40 tons, 60 tons, 80 tons, 100 tons");
ds_list_add(wMain_Mech_Ballast, "Right:|0 tons, 20 tons, 40 tons, 60 tons, 80 tons, 100 tons");

//MECH SETTINGS - ACCESSORIES
wMain_Mech_Access_Music = MiniMechDS();
ds_list_add(wMain_Mech_Access, "Music...|DS=" + string(wMain_Mech_Access_Music));
ds_list_add(wMain_Mech_Access, "Air Freshener:|Pine, Lemon, Chicken Pot Pie, None");
ds_list_add(wMain_Mech_Access, "Radio:|Installed, None");
ds_list_add(wMain_Mech_Access, "Toilet:|Built-In, Diaper, None");

//spark plug timing -  number of degrees form top dead center
//MECH SETTINGS - HARDWARE - ENGINE
ds_list_add(wMain_Mech_Hard_Engine, "Model:|Brigand 51-32 TURBO, V24 HellBeaster, Garbash 700, Jelq 8-D");
ds_list_add(wMain_Mech_Hard_Engine, "Heatsink:|Chandler ZQZ, Gaze = Belork Phenomenon, Maxx Cool");
ds_list_add(wMain_Mech_Hard_Engine, "Location:|Front, Mid, Rear");
wMain_Mech_Hard_Engine_Spark = MiniMechDS();
ds_list_add(wMain_Mech_Hard_Engine, "Spark Plug Timing...|DS=" + string(wMain_Mech_Hard_Engine_Spark));

//MECH SETTINGS - HARDWARE - TRANSMISSION
ds_list_add(wMain_Mech_Hard_Trans, "Type:|Automatic, Manual");
ds_list_add(wMain_Mech_Hard_Trans, "Gears:|5, 6, 7, 8, 9, 10");
ds_list_add(wMain_Mech_Hard_Trans, "Max Ratio:|2.00, 2.25, 2.50, 2.75, 3.00, 3.25, 3.50");

//MECH SETTINGS - HARDWARE - BRAKES
ds_list_add(wMain_Mech_Hard_Brake, "Air Type:|Wing, Retro-Booster, Gyro");
ds_list_add(wMain_Mech_Hard_Brake, "Ground Type:|Drum, Disc, Bolt");

//MECH SETTINGS - HARDWARE - SUSPENSION
ds_list_add(wMain_Mech_Hard_Suspension, "Type:|Leaf Spring, Coil Spring, Torsion Bar");
ds_list_add(wMain_Mech_Hard_Suspension, "Material:|Bone, Metal, Sludge");

//MECH SETTINGS - HARDWARE - THRUSTERS
ds_list_add(wMain_Mech_Hard_Thrust, "Back Model:|None, Garbash T100, HGG-928, DelmonThrust 5000");
ds_list_add(wMain_Mech_Hard_Thrust, "Front Model:|None, Garbash T100, HGG-928, DelmonThrust 5000");
ds_list_add(wMain_Mech_Hard_Thrust, "Leg Model:|Twin Blast GX, HGG-422x2, Garbash 30 / 30");

//MECH SETTINGS - SOFTWARE - TARGETING
ds_list_add(wMain_Mech_Soft_Target, "Heat:|Omni HeatSeek v3.01b, Raffleson MultiPak 1990, Bonzi B");
ds_list_add(wMain_Mech_Soft_Target, "Sonar:|Raffleson MultiPak 1990, DoSonar, BounceBottle v10");

//MECH SETTINGS - FLUIDS - FUEL
ds_list_add(wMain_Mech_Fluid_Fuel, "Capacity:|50 gallons, 75 gallons, 100 gallons, 125 gallons, 150 gallons");
ds_list_add(wMain_Mech_Fluid_Fuel, "Type:|Petroleum, Hydrogen, Blood");
ds_list_add(wMain_Mech_Fluid_Fuel, "Brand:|DGH, Gremlin Corp.");

//MECH SETTINGS - FLUIDS - MOTOR
ds_list_add(wMain_Mech_Fluid_Motor, "Type:|Synthetic, Non-Synthetic");
ds_list_add(wMain_Mech_Fluid_Motor, "Viscosity:|5W-20, 5W-30, 10W-30, 10W-40, 15W-30, 15W-40, 20W-40, 20W-50, 25W-50, 30W-60, Blood");
ds_list_add(wMain_Mech_Fluid_Motor, "Brand:|Top Notch, Get Right Krew");

//MECH SETTINGS - FLUIDS - BRAKE
ds_list_add(wMain_Mech_Fluid_Brake, "DOT:|3, 4, 5, 5.1, 18.27, Blood");
ds_list_add(wMain_Mech_Fluid_Brake, "Brand:|Gluben, Top Notch, Huey");

//MECH SETTINGS - FLUIDS - WASHER
ds_list_add(wMain_Mech_Fluid_Washer, "Type:|Anti-Streaking, Quick-Glide, Blood");
ds_list_add(wMain_Mech_Fluid_Washer, "Brand:|Fluid Amalgamate, Top Notch");

//MECH SETTINGS - FLUIDS - JOINT
ds_list_add(wMain_Mech_Fluid_Washer, "Type:|Mag Fluid, Jolt Grease, Blood");

//MECH SETTINGS - ACCESSORIES - MUSIC
ds_list_add(wMain_Mech_Access_Music, "Format:|8-Track, Cassette, CD, Minidisc, Vinyl");
ds_list_add(wMain_Mech_Access_Music, "Primary Genre:|Doo Wop, Jock Jams, Sludge Rock, Hip Hop");
ds_list_add(wMain_Mech_Access_Music, "Secondary Genre:|Country, Rap");

//MECH SETTINGS - HARDWARE - ENGINE - SPARK
ds_list_add(wMain_Mech_Hard_Engine_Spark, "Timing (BTDC):|11 degrees, 12 degrees, 13 degrees, 14 degrees");
ds_list_add(wMain_Mech_Hard_Engine_Spark, "Timing (ATDC):|18 degrees, 19 degrees, 20 degrees, 21 degrees");
ds_list_add(wMain_Mech_Hard_Engine_Spark, "Model:|Garbash Spark 7, Kjoller Bolt HG9, Lubic's Value Spark Plug");




textHeight = 16;
mechX = 0;
mechXSpd = 2 / 10;
mechY = 0;
mechYSpd = 1 / 10;
cinema = 0;
cinemaCou = 0;
cinemaState = 0;

//do list back
for (i = 1; i &lt; lists; i += 1)
{
    if (list[i] != wMain_Init) ds_list_add(list[i], "Back");
}

//Make 2d array to get real displays
cou = 0;
for (i = 0; i &lt; lists; i += 1)
{
    displayWidth[list[i]] = 0;
    for (h = 0; h &lt; ds_list_size(list[i]); h += 1)
    {
        Delimit(ds_list_find_value(list[i], h), "|");
        
        display[list[i], h] = art[0];
        displayFull[list[i], h] = ds_list_find_value(list[i], h);
        //Get options
        displayOptionInd[list[i], h] = cou;
        org = art[1];
        Delimit(art[1], ", ");
        scr_font(CourierNew12);
        //displayWidth[list[i], h] = 0;
        if (string_count("DS=", org) &gt; 0 || org == "Back" || org == "CONFIRM")
        {
            displayOptions[list[i], h] = 0;
            option[cou, 0] = "";
            q = 0;
            displayWidth[list[i]] = max(displayWidth[list[i]], string_width(display[list[i], h]) * global.miniScale);
        }
        else 
        {
            for (q = 0; art[q] != "-999"; q += 1)
            {
                option[cou, q] = art[q];
                displayWidth[list[i]] = max(displayWidth[list[i]], string_width(display[list[i], h] + " " + art[q]) * global.miniScale);
            }
            displayOptions[list[i], h] = q;
        }
        //if (string_count("DS=", org) &gt; 0 || org == "Back" || org == "CONFIRM") displayOptions[list[i], h] = 0;
        //show_message("total: " + string(q));
        displayOptionSel[list[i], h] = floor(random(q));
        cou += 1;
    }
}

windows = 0;
active = -1;

//Have menus open at start
window[windows] = wMain;
event_user(0);
winWid[active] = winWidDes[active];
winHei[active] = winHeiDes[active];

window[windows] = wMain_Mech;
event_user(0);
winWid[active] = winWidDes[active];
winHei[active] = winHeiDes[active];

window[windows] = wMain_Mech_Hard;
event_user(0);
winWid[active] = winWidDes[active];
winHei[active] = winHeiDes[active];

window[windows] = wMain_Mech_Hard_Engine;
event_user(0);
winWid[active] = winWidDes[active];
winHei[active] = winHeiDes[active];
winSel[active] = 3;

window[windows] = wMain_Mech_Hard_Engine_Spark;
event_user(0);
winWid[active] = winWidDes[active];
winHei[active] = winHeiDes[active];

//displayOptionSel[wMain_Mech_Hard_Engine] = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Window step
//since there are multiple windows, need to have only active window does scale effect
mechX += mechXSpd * dt();
if (mechX &gt; 48) mechX -= 48;
mechY += mechYSpd * dt();
if (mechY &gt; 48) mechY -= 48;
for (i = 0; i &lt; windows; i += 1)
{
    if (winWid[i] &lt;= 0 || winHei[i] &lt;= 0)
    {
        windows = 0;
        active = -1;
        if (windows &lt;= 0 &amp;&amp; cinema == 1) cinema = 2;
    }
    else if (winWid[i] &lt; winWidDes[i])
    {
        winWid[i] += winWidSpd[i] * dt();
        winHei[i] += winHeiSpd[i] * dt();
        if (winWid[i] &gt;= winWidDes[i])
        {
            winWid[i] = winWidDes[i];
            winHei[i] = winHeiDes[i];
        }
    }
    else if (winWid[i] &gt; winWidDes[i])
    {
        winWid[i] += winWidSpd[i] * dt();
        winHei[i] += winHeiSpd[i] * dt();
        if (winWid[i] &lt;= winWidDes[i])
        {
            windows -= 1;
            active -= 1;
            if (windows &lt;= 0 &amp;&amp; cinema == 1) cinema = 2;
        }
    }
}

if (cinema != 0)
{
    if (cinema == 2) event_user(1);
    exit;
}

//Input
if (active != -1)
{
    if (winWid[active] == winWidDes[active])
    {
        if (MiniKeyPress("cancel"))
        {
            //Can't exit
            //Minigame("stop"); 
            //instance_destroy();
        }
        if (MiniKeyPress("up"))
        {
            winSel[active] -= 1;
            if (winSel[active] &lt; 0) winSel[active] = winMax[active] - 1;
            if (window[active] == wMain_Init) if (winSel[active] == 0) winSel[active] = 2;
        }
        if (MiniKeyPress("down"))
        {
            winSel[active] += 1;
            if (winSel[active] &gt; winMax[active] - 1) winSel[active] = 0;
            if (window[active] == wMain_Init) if (winSel[active] == 0) winSel[active] = 1;
        }
        if (MiniKeyPress("left"))
        {
            //displayOptionSel[window[active], h]
            //displayOptions[window[active], h]
            //ind = displayOptionInd[window[active], h];
            if (window[active] != wMain_Init)
            {
                displayOptionSel[window[active], winSel[active]] -= 1;
                if (displayOptionSel[window[active], winSel[active]] &lt; 0) 
                    displayOptionSel[window[active], winSel[active]] = displayOptions[window[active], winSel[active]] - 1;
            }
        }
        if (MiniKeyPress("right"))
        {
            //ind = displayOptionInd[window[i], h];
            if (window[active] != wMain_Init)
            {
                displayOptionSel[window[active], winSel[active]] += 1;
                if (displayOptionSel[window[active], winSel[active]] &gt; displayOptions[window[active], winSel[active]] - 1) displayOptionSel[window[active], winSel[active]] = 0;
            }
        }
        if (MiniKeyPress("action"))
        {
            str = display[window[active], winSel[active]];
            if (str == "Yes")
            {
                for (i = 0; i &lt; windows; i += 1)
                {
                    winWidSpd[i] = -abs(winWidSpd[i]);
                    winHeiSpd[i] = -abs(winHeiSpd[i]);
                    winWidDes[i] = 30 * global.miniScale;
                    winHeiDes[i] = 30 * global.miniScale;
                }
                cinema = 1;
            }
            else if (false) //string_count("Initialize...", str) &gt; 0)
            {
                winWidSpd[active] = -abs(winWidSpd[active]);
                winHeiSpd[active] = -abs(winHeiSpd[active]);
                winWidDes[active] = 30 * global.miniScale;
                winHeiDes[active] = 30 * global.miniScale;
                
                //windows = 0;
                //active = -1;
                //show_message("hi");
            }
            else if (string_count("...", str) &gt; 0)
            {
                Delimit(ds_list_find_value(window[active], winSel[active]), "DS=");
                window[windows] = real(art[1]);
                event_user(0);
                if (str == "Initialize...") winSel[active] = 1; //show_message("hi"); }
            }
            else if (str == "Back" || str == "No")
            {
                winWidSpd[active] = -abs(winWidSpd[active]);
                winHeiSpd[active] = -abs(winHeiSpd[active]);
                winWidDes[active] = 30 * global.miniScale;
                winHeiDes[active] = 30 * global.miniScale;
            }
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///airhorn stuff
cinemaCou += dt();
if (cinemaState == 0)
{
    cinemaState = 1;
    audio_play_sound_ext("sn_bb_airhorn", 10, 0);
}
else if (cinemaState == 1)
{
    if (cinemaCou &gt; 40) { cinemaState = 2; cinemaCou = 0; }
}
else if (cinemaState == 2)
{
    if (cinemaCou &gt; 10) 
    {
        audio_play_sound_ext("sn_ptonyright", 10, 0);
        cinemaState = 3;
        cinemaCou = 0;
    }
}
else if (cinemaState == 3)
{
    if (cinemaCou &gt; 20) 
    {
        Minigame("stop"); 
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create test window - 384, 240

active = windows;


spd = 2.5; //delta time
winSel[active] = 0;
winMax[active] = ds_list_size(window[windows]); //this is error
winX[active] = 25 * global.miniScale;
winY[active] = 10 * global.miniScale;
winWid[active] = 30 * global.miniScale;
winHei[active] = 30 * global.miniScale;
winWidDes[active] = 300 * global.miniScale;
winWidDes[active] = (18 * global.miniScale) + displayWidth[window[active]];
winHeiDes[active] = (15 + (winMax[active] * textHeight)) * global.miniScale;
winX[active] = floor(random(384 - (winWidDes[active] / global.miniScale))) * global.miniScale; //overlapped
winY[active] = floor(random(240 - (winHeiDes[active] / global.miniScale))) * global.miniScale; //overlapped
winWidSpd[active] = (winWidDes[active] - winWid[active]) / spd;
winHeiSpd[active] = (winHeiDes[active] - winHei[active]) / spd;

windows += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite9
for (xx = 0; xx &lt; 10; xx += 1)
{
    for (yy = 0; yy &lt; 6; yy += 1)
    {
        draw_sprite_ext(sMiniMechBG, 0, global.miniX + ((- 48 + (xx * 48) + mechX) * global.miniScale), global.miniY + ((- 48 + (yy * 48) + mechY) * global.miniScale), global.miniScale, global.miniScale, 0, c_white, 1);
    }
}
draw_sprite_ext(sMiniMech, 0, global.miniX + (global.miniWidthS / 2), global.miniY + (global.miniHeightS / 2), global.miniScale, global.miniScale, 0, c_white, 1);
for (i = 0; i &lt; windows; i += 1) //For every window
{
    if (i + 1 == windows) col = c_white; else col = c_dkgray;
    dx = global.miniX + winX[i];
    dy = global.miniY + winY[i];
    MiniSprite9(sMiniMechSprite9, dx, dy, floor(winWid[i]), floor(winHei[i]), global.miniScale, col);
    //Draw list options
    dx += 10 * global.miniScale;
    dy += 6 * global.miniScale;
    scr_font(CourierNew12, col, 0, 0);
    //draw_text_transformed(dx - (10 * global.miniScale), dy - (6 * global.miniScale), displayOptions[window[i]], global.miniScale, global.miniScale, 0);
    if (winWid[i] == winWidDes[i])
    {
        for (h = 0; h &lt; ds_list_size(window[i]); h += 1) //For every list in every window
        {
            if (winSel[i] == h) col2 = c_red; else col2 = col;
            if (active != i) col2 = c_dkgray;
            draw_set_color(col2);
            str = display[window[i], h];
            draw_text_transformed(dx, dy, str, global.miniScale, global.miniScale, 0);
            //show option
            ind = displayOptionInd[window[i], h]; //need to get the list of the other lists
            if (displayOptions[window[i], h] != 0)
            {
                str2 = option[ind, displayOptionSel[window[i], h]];
                draw_text_transformed(dx + (string_width(str + " ") * global.miniScale), dy, str2, global.miniScale, global.miniScale, 0);
            }
            dy += textHeight * global.miniScale;
        }
    }
}

//Red flash
if (cinemaState == 1)
{
    if (floor(cinemaCou / 5) == floor(cinemaCou) / 5)
    {
        draw_set_color(c_red);
        draw_rectangle(global.miniX, global.miniY, global.miniX + global.miniWidthS, global.miniY + global.miniHeightS, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
