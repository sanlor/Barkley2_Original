<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2510004</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///?GOOD? - Inventory / item
scale = global.qmScale;
roomWidth = global.qmRoomWidth;
roomHeight = global.qmRoomHeight;
objCursor = o_curs;

//FREE SLOTS
//TOGGLE FOR GRAB
//RIGHT CLICK ENABLE

rmx = 0;
rmy = 0;
offX = view_xview[0];
offY = view_yview[0];
movX = 0;//view_xview[0];
movY = 0;//view_yview[0];

c_ldgray = make_color_rgb(43,46,40);
c_dgray = make_color_rgb(48,52,45);
c_owhite = make_color_rgb(204,204,204);
c_hyellow = make_color_rgb(255,255,127);
c_sblue = make_color_rgb(155,199,242);
c_syellow = make_color_rgb(255,202,19);
c_sred = make_color_rgb(238,96,83);
c_sgreen = make_color_rgb(96,238,83);
c_dred = make_color_rgb(59,32,34);

descColor = c_black;
descColorH = make_color_rgb(32, 32, 32);
invenDragClick = 400000000;
invenDrag = -1; //When over 0 it's at the mover spot
invenIconAlpha = .8; //???? not used
invenIconDragAlpha = .5;
invenIconColorBG = c_black;
invenIconColorH = descColorH;
invenBGDraw = 0;
invenBGAlpha = .66;
invenPush = (12 * scale);
mouseLeftOnce = 0;
noItemText = "No items.";
noFreeText = "No free item slots.";

//Draw move icon?
invenIconMover = 1;
invenIconCursorHide = 1; // hide cursor when moving
invenXP = movX + (4 * scale); invenYP = invenXP; //was 8 because 32 + 8 has 16 center, for mover
invenYP2 = movY - (15 * scale); //Move icon y relative to top, was 14



//in oInit now

inven_press = 9;
inven_move = -1;
inven_move_press = 1;
inven_y_lerp = .3;

for (i = 0; i &lt; 20; i += 1)
{
    invenDX[i] = 0;
    invenDY[i] = 0;
    invenX[i] = 0;
    invenY[i] = 0;
}

//draw centered
yy = movY + 128 - 1 - 8 + 8;
invenFnt = global.fn_2;//Koni x7o;
invenY0 = (yy) * scale; //Item text
invenY1 = (yy + 24 - 8 + 1) * scale;
invenY2 = (yy + 24 - 8 + 36 - 4) * scale; 
////////////////////invenY2 -= (1 * 8) * scale;
invenY2 -= 4 * scale;
invenY0 = invenY2;
invenY2 += (2 * 8) * scale;
cx = movX + (roomWidth / 2);
itmAmt = scr_items_count(ITEMTYPE_CANDY);
itmSpc = 8 * scale;
itmSiz = 24 * scale;
zauberY = movY + ((128 + 48 + 24 + 8) * scale);
slotNumber = 0;
firstNumber = 0;

if (Jerkin("pockets free") == 0) //no free slot button
{
    dx = cx - ((itmAmt * itmSiz) / 2) - (((itmAmt - 1) * itmSpc) / 2);
    invenSiz = ((itmAmt * itmSiz) / 1) + (((itmAmt - 1) * itmSpc) / 1);
    invenFree = 0;
}
else
{
    dx = cx - (((itmAmt + 1) * itmSiz) / 2) - (((itmAmt - 0) * itmSpc) / 2);
    invenSiz = (((itmAmt + 1) * itmSiz) / 1) + (((itmAmt - 0) * itmSpc) / 1);
    invenFree = 1;
}
//minimum size
invenDescX = min(dx, cx - ((5 * itmSiz) / 2) - (((5 - 1) * itmSpc) / 2));
invenDescW = max(invenSiz, ((5 * itmSiz) / 1) + (((5 - 1) * itmSpc) / 1));
invenX0 = dx;
invenXC = cx;
dy = invenY1;
sx = dx;
for (i = 0; i &lt; itmAmt; i += 1)
{
    invenX[i] = dx;
    invenY[i] = dy;
    invenDX[i] = invenX[i];
    invenDY[i] = invenY[i];
    dx += itmSpc + itmSiz;
}

mouse_dragging = -1;
mouse_hover = -1;
mouse_cou = 0;

//zauber
zauberTitleX = movX + ((8 + 4) * scale) + ((39 * 8) * scale);
zauberTitleY = movY + invenY1 - ((2 * 8) * scale);
zauberTitleW = (6 * 8) * scale;
zauberTitleH = (2 * 8) * scale;
zauberTitleText = "Zauber";
zauberTitleColorBG = c_black;
zauberTitleColorText = c_ltgray; //c_white;
zauberTitleFont = global.fn_2; //Koni x7o;
zauberTitleAlpha = .66;
zauberIconAlpha = .66;
zauberAmount = scr_items_count(ITEMTYPE_ZAUBER);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_hover != -1) //On hover show hand icon unless the item is already active
{ 
    if (Candy("current") != mouse_hover) objCursor.frame = 1; 
    if (invenDrag != -1) objCursor.frame = 2;
}
if (mouse_dragging != -1 &amp;&amp; mouse_cou &gt; 4) objCursor.frame = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step
//Get slotNumber, firstNumber, lastNumber for moving items
//rmx = view_xview[0] + o_curs.x; rmy = view_yview[0] + o_curs.y; //using full coods
//if (global.controlType == "xbox") scr_keys_process();

rmx = o_curs.x; rmy = o_curs.y;

if (mouse_dragging == -1)
{
    slotCurrent = Candy("current");
    event_user(10); 
}

invenDrag = -1;
if (mouse_dragging == -1 &amp;&amp; global.controlType == "pc")
{
    mouse_hover = -1;
    itmAmt = scr_items_count(ITEMTYPE_CANDY);
    for (i = 0; i &lt; itmAmt; i += 1)
    {
        //if (InsideRectangl e(rmx, rmy, invenX[i], invenY[i] - (16 * scale), invenX[i] + itmSiz, invenY[i] + itmSiz + (0 * scale)))
        if (scr_mouse_rect(offX + invenX[i], offY + invenY[i] - (16 * scale), offX + invenX[i] + itmSiz, offY + invenY[i] + itmSiz + (0 * scale)))
        {
            if (rmy &lt; invenY[i]) { invenDrag = i; }
            mouse_hover = i;
            mouse_gx = invenDX[i] - rmx; //was x and y not dx and dy
            mouse_gy = invenDY[i] - rmy;
        }
    }
}

//Tells me when the mouse was first clicked (for dragging / holding)
if (scr_mouse(mb_left)) mouseLeftOnce += 1; else mouseLeftOnce = 0; //Mouse

if (mouse_hover != -1)
{
    if (scr_mouse(mb_left)) //Mouse
    {
        if (mouse_dragging == -1 &amp;&amp; mouseLeftOnce == 1)
        {
            if (invenDrag != -1)
            {
                //invenDrag = -1; //added
                mouse_dragging = mouse_hover;
                inven_move = -1;
                mouse_cou = 5;
                slotCurrent = mouse_hover;
                event_user(10); 
            }
            else Candy("current", mouse_hover);
        }
        //mouse_cou += 1; /////////removed
    }
}
if (scr_mouse(mb_left) == 0) //Mouse
{ 
    if (mouse_dragging != -1) //Let go after dragging an item
    {
        invenX[mouse_dragging] = rmx + mouse_gx;
        invenY[mouse_dragging] = lerp(invenDY[mouse_dragging], rmy + mouse_gy, inven_y_lerp);
    }
    mouse_dragging = -1; 
    mouse_cou = 0; 
}

if (mouse_dragging != -1 &amp;&amp; mouse_cou &gt; 4)
{
    didSwap = 0;
    //Swap active item slot only if I'm dragging the active item
    
    if (mouse_dragging == Candy("current")) doActive = 1; else doActive = 0;
    if (slotNumber != firstNumber) //allow left movement
    {
        if (rmx &lt; invenDX[slotNumber - 1] + itmSiz)
        {
            swap = slotID[slotNumber - 1];
            swapNumber = slotNumber - 1;
            if (swap == Candy("current")) doActive = 2;
            scr_quickmenu_item_swap(ITEMTYPE_CANDY, mouse_dragging);
            if (doActive == 1) Candy("current", swap);
            else if (doActive == 2) Candy("current", slotCurrent);
            mouse_dragging = swapNumber; //slotNumber;
            mouse_hover = swapNumber;
            didSwap = 1;
            //Ms g("hi " + string(doActive));
        }
    }
    if (slotNumber != lastNumber &amp;&amp; didSwap == 0) //allow right movement
    {
        if (rmx &gt; invenDX[slotNumber + 1])
        {
            swap = slotID[slotNumber + 1];
            swapNumber = slotNumber + 1;
            if (swap == Candy("current")) doActive = 2;
            scr_quickmenu_item_swap(ITEMTYPE_CANDY, mouse_dragging);
            if (doActive == 1) Candy("current", swap);
            else if (doActive == 2) Candy("current", slotCurrent);
            mouse_dragging = swapNumber; //slotNumber;
            mouse_hover = swapNumber;
            didSwap = 1;
        }
    }
    if (didSwap == 1)
    {
        //Get slotNumber, firstNumber, lastNumber
        slotCurrent = swap;
        event_user(10); 
    }
}

//////////////////////////////////////////////////////////////////CONTROLLER
if (mouse_dragging == -1 &amp;&amp; scr_items_count(ITEMTYPE_CANDY) &gt; 0)
{

    doInven = 0;
    if (scr_button("dpad left"))
    {
        inven_press += 1;
        if (inven_press &gt; 9) { inven_press = 0; doInven = -1; }
    } 
    else if (scr_button("dpad right"))
    {
        inven_press += 1;
        if (inven_press &gt; 9) { inven_press = 0; doInven = 1; }
    }
    else inven_press = 9;
    
    swap = -1;
    if (doInven == -1)
    {
        if (slotNumber == 0) { if (last != -1) { swap = last; swapNumber = lastNumber; } }
        else { swap = slotID[slotNumber - 1]; swapNumber = slotNumber - 1; }
        
    }
    if (doInven == 1)
    {
        if (slotNumber == total - 1) { { if (first != -1) swap = first; swapNumber = firstNumber; } }
        else { swap = slotID[slotNumber + 1]; swapNumber = slotNumber + 1; }
    }
    
    if (doInven != 0)
    {
        if (inven_move != -1)
        {
            if (swap != -1 &amp;&amp; swap != Candy("current")) 
            {
                scr_quickmenu_item_swap(ITEMTYPE_CANDY, Candy("current"));
    
                Candy("current", swap);
                inven_move = Candy("current");
                
                //Get slotNumber, firstNumber, lastNumber
                slotCurrent = Candy("current");
                event_user(10); 
            }
        }
        else Candy("current", swap);
    }
    
    //Allow user to drag items using action button
    if (scr_button("bumper right"))
    {
        if (inven_move_press == 1)
        {
            if (inven_move == -1) inven_move = Candy("current"); else inven_move = -1;
        }
        inven_move_press = 0;
    }
    else inven_move_press = 1;

}

/////////////////////////////////////////////////TRANSITIONS
for(i = 0; i &lt; 20; i += 1) 
{
    invenX[i] = scr_math_smooth(invenX[i], invenDX[i], 0.5);
    invenY[i] = scr_math_smooth(invenY[i], invenDY[i], 0.5);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get slot numbers
//get all available slots
total = 0;
first = -1;
last = -1;
for (i = 0; i &lt; scr_items_count(ITEMTYPE_CANDY); i += 1)
{
    if (first == -1) { first = i; firstNumber = total; }
    last = i; lastNumber = total;
    slotID[total] = i;
    if (slotCurrent == i) slotNumber = total;
    total += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw zauber sides
//if it's over 4, do - 3 8 slots
if (zauberAmount == 0) exit;

//Draw title BG
dx = zauberTitleX;
dy = zauberTitleY;
if (zauberAmount &gt; 4) dy -= (3 * 8) * scale; //for 5 to 6
scr_draw_rect(offX + dx + (scale * 0), offY + dy + scale, zauberTitleW - (scale * 1), zauberTitleH - scale, zauberTitleColorBG, zauberTitleAlpha);
scr_font(zauberTitleFont, zauberTitleColorText, 1, 1);
draw_text_transformed(offX + dx + (zauberTitleW / 2) - scale, offY + dy + (zauberTitleH / 2) + scale, zauberTitleText, scale, scale, 0);
dx += (39 * 8) * scale;

//Draw all side BG Deals
dsx = zauberTitleX + (scale * 0);
dsy = zauberTitleY + scale + (scale * 15);
if (zauberAmount &gt; 4) dsy -= (3 * 8) * scale; //for 5 to 6
zo = 0;
for (h = 0; h &lt; 1; h += 1)
{
    dx = dsx;
    dy = dsy;
    if (zauberAmount &gt; 0 + (zo * 4))
    {
        scr_draw_rect(offX + dx, offY + dy, zauberTitleW - (scale * 1), (scale * 24), zauberTitleColorBG, zauberTitleAlpha);
        if (zauberAmount == 1 + (zo * 4)) dx += ((24 / 2) * scale);
        io = 0 + (zo * 4);
        skip = 0;
        for (i = 0; i &lt; zauberAmount - io; i += 1)
        {
            scr_items_draw_ext(scr_items_get(ITEMTYPE_ZAUBER, i + io), offX + dx + invenPush, offY + dy + invenPush, scale, scale, 0, c_white, zauberIconAlpha);
            dx += (24 * scale);
            if (skip == 1) break;
            skip = 1;
        }
    }
    
    dx = dsx;
    dy = dsy + (scale * 24);
    if (zauberAmount &gt; 2 + (zo * 4))
    {
        scr_draw_rect(offX + dx, offY + dy, zauberTitleW - (scale * 1), (scale * 24), zauberTitleColorBG, zauberTitleAlpha);
        if (zauberAmount == 3 + (zo * 4)) dx += ((24 / 2) * scale);
        io = 2 + (zo * 4);
        skip = 0;
        for (i = 0; i &lt; zauberAmount - io; i += 1)
        {
            scr_items_draw_ext(scr_items_get(ITEMTYPE_ZAUBER, i + io), offX + dx + invenPush, offY + dy + invenPush, scale, scale, 0, c_white, zauberIconAlpha);
            dx += (24 * scale);
            if (skip == 1) break;
            skip = 1;
        }
    }
    
    dx = dsx;
    dy = dsy + (scale * 48);
    if (zauberAmount &gt; 4 + (zo * 4))
    {
        scr_draw_rect(offX + dx, offY + dy, zauberTitleW - (scale * 1), (scale * 24), zauberTitleColorBG, zauberTitleAlpha);
        if (zauberAmount == 3 + (zo * 4)) dx += ((24 / 2) * scale);
        io = 4 + (zo * 4);
        skip = 0;
        for (i = 0; i &lt; zauberAmount - io; i += 1)
        {
            scr_items_draw_ext(scr_items_get(ITEMTYPE_ZAUBER, i + io), offX + dx + invenPush, offY + dy + invenPush, scale, scale, 0, c_white, zauberIconAlpha);
            dx += (24 * scale);
            if (skip == 1) break;
            skip = 1;
        }
    }
    
    zo = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw item segment
offX = view_xview[0];
offY = view_yview[0];

event_user(0); //Draw zauber sides

////////////////////////////////////////////////////////////////////////////////ITEMS
itmAmt = scr_items_count(ITEMTYPE_CANDY);
dx = invenX0;
dy = invenY0;
scr_font(invenFnt, c_syellow, 1, 0);
ddx = dx + 0;
psh = (2 * scale);
//inventory description back box

if (itmAmt == 0) col = descColor; 
else
{
    col = descColor;
    if (mouse_hover != -1) { if (mouse_hover == Candy("current")) col = descColorH; }
    else col = descColorH;
}
if (invenBGDraw == 1) scr_draw_rect(offX + invenDescX, offY + dy + (scale * 2), invenDescW - scale, ((3 * 8) * scale) - scale, col, invenBGAlpha);
//Draw massive item border
if (invenBGDraw == 0) //default drawn
{
    if !(scr_items_count(ITEMTYPE_CANDY) == 0 &amp;&amp; Jerkin("pockets used") &gt; 0)
        scr_draw_rect(offX + invenX0, offY + invenY1 - (15 * scale), invenSiz - scale, itmSiz + (15 * scale), c_black, invenBGAlpha);
}

invenNoneY = dy + psh + scale;
invenDescID = Candy("current");
invenDescCol = c_syellow;
if (mouse_hover != -1) 
{ 
    if (mouse_hover != Candy("current")) { invenDescID = mouse_hover; invenDescCol = c_white; } 
}
draw_set_color(invenDescCol);
if (Candy("current") &gt;= 0) {
    if (itmAmt &gt; 0) {
        var item = scr_items_get(ITEMTYPE_CANDY, invenDescID);
        if (item != NULL) {
            draw_text_transformed(offX + invenXC + (8*scale), offY + dy + (8*scale),
                                  item[? "name"],
                                  scale, scale, 0);
        }
    }
}
draw_set_color(c_white);
dy = invenY1;
for (i = 0; i &lt; itmAmt; i += 1)
{
    ind = i;
    dx = invenX[i];
    dy = invenY[i];
    
    //Icon BG and BG Hilight when dragging
    if (invenBGDraw == 1)
    {
        scr_draw_rect(offX + dx, offY + dy + scale - (16 * scale), 23 * scale, 39 * scale, invenIconColorBG, 1);
        if (mouse_dragging == i) scr_draw_rect(offX + dx, offY + dy + scale - (16 * scale), 23 * scale, 39 * scale, invenIconColorH, .66);
    }
    else
    {
        if (mouse_dragging == i) scr_draw_rect(offX + dx, offY + dy + scale - (16 * scale), 23 * scale, 39 * scale, invenIconColorH, .66);
    }
    
    //Draw top mover for item when mouse over a non active item
    if (mouse_hover == i &amp;&amp; ind != Candy("current"))
    {
        if (mouse_dragging == -1) 
        {
            if (invenDrag == -1) col = c_white; else col = c_hyellow;
            draw_sprite_ext(s_qicon, 2, offX + dx + invenXP, offY + dy + invenYP2, scale, scale, 0, col, 1);
        }
    }
    
    if (mouse_dragging != i || mouse_cou &lt; 5)
    {
        if (invenBGDraw == 1)
        {
            if (ind == Candy("current")) scr_draw_rect(offX + dx, offY + dy + scale - (16 * scale), 23 * scale, 39 * scale, invenIconColorH, 1);
            else if (mouse_hover == i) scr_draw_rect(offX + dx, offY + dy + scale - (16 * scale), 23 * scale, 39 * scale, invenIconColorH, invenIconDragAlpha);
        }
        else
        {
            if (ind == Candy("current")) scr_draw_rect(offX + dx, offY + dy + scale - (16 * scale), 23 * scale, 39 * scale, invenIconColorH, 1);
        }
        
        var itmMap = scr_items_get(ITEMTYPE_CANDY, i);
        Candy("draw name", Candy("name", itmMap), offX + dx + invenPush, offY + dy + invenPush, scale, scale, 0, c_white, 1);
        //You only see this when dragging with the controller
        doMove = 0;
        if (invenIconMover)
        {
            if (inven_move == ind || (mouse_dragging == i &amp;&amp; mouse_cou &gt; 4)) 
            {
                draw_sprite_ext(s_qicon, 2, offX + dx + invenXP, offY + dy + invenYP2, scale, scale, 0, c_hyellow, 1);
                doMove = 1;
            }
        }
        if !(doMove == 1 &amp;&amp; invenIconCursorHide == 1)
        {
            if (ind == Candy("current"))
                draw_sprite_ext(s_item_arrow, 0, offX + dx + invenXP, offY + dy - (invenYP * 4), scale, scale, 0, c_white, 1);
        }
    }
    else
    {
        mouse_ind = ind;
        mouse_i = i;
    }
    dx += itmSpc + itmSiz;
}
dy = invenY2;
if (scr_items_count(ITEMTYPE_CANDY) == 0 &amp;&amp; Jerkin("pockets free") == 0) //scr_inventory("slots used") &gt; 0)
{
    invenNoneY = mean(invenNoneY, dy - psh + scale);
    //if (scr_inventory("slots free") &gt; 0) 
    draw_text_transformed(offX + invenXC, offY + invenNoneY, noFreeText, scale, scale, 0); // if (itmAmt == 0)
}
else //if (scr_inventory("items used") == 0 &amp;&amp; scr_inventory("slots free") &gt; 0) //No items, draw free slots if applicable
{
    if (scr_items_count(ITEMTYPE_CANDY) &gt; 0) 
    {
        draw_set_color(invenDescCol);
        if (Candy("current") &gt;= 0) {
            var item = scr_items_get(ITEMTYPE_CANDY, invenDescID);
            if (item != NULL)
                draw_text_transformed(offX + invenXC, offY + dy + psh + scale,
                                      item[? "utility"],
                                      scale, scale, 0);
        }
    }
    invenNoneY = mean(invenNoneY, dy - psh + scale);
    if (scr_items_count(ITEMTYPE_CANDY) == 0)
        draw_text_transformed(offX + invenXC, offY + invenNoneY, noItemText, scale, scale, 0);
}

//Item borders
for (i = 0; i &lt; itmAmt; i += 1)
{
    draw_sprite_ext(s_item_border, 1, offX + invenDX[i], offY + invenDY[i], scale, scale, 0, c_white, .5);
}

//FREE SLOT ICON
if (invenFree == 1)
{
    dx = invenX0;
    for (i = 0; i &lt; itmAmt; i += 1) dx += itmSpc + itmSiz;
    dy = invenY1;
    scr_font(global.fn_small, c_white, 1, 1); //Koni x5
    if (invenBGDraw == 1 || scr_items_count(ITEMTYPE_CANDY) == 0) scr_draw_rect(offX + dx, offY + dy + scale - (16 * scale), 23 * scale, 39 * scale, invenIconColorBG, .66);
    draw_text_transformed(offX + dx + (itmSiz / 2), offY + dy + (itmSiz / 2) + scale, string(Jerkin("pockets free")) + "#Free", scale, scale, 0);
}

if (mouse_dragging != -1 &amp;&amp; mouse_cou &gt; 4)
{
    dx = rmx + mouse_gx; //was mouse_x and y
    dy = rmy + mouse_gy;
    //edit dy to make it constrain
    dy = lerp(invenDY[mouse_i], dy, inven_y_lerp); //was .6
    scr_draw_rect(offX + dx, offY + dy + scale - (16 * scale), 23 * scale, 39 * scale, invenIconColorH, invenIconDragAlpha);
    var itmMap = scr_items_get(ITEMTYPE_CANDY, mouse_i);
    Candy("draw name", Candy("name", itmMap), offX + dx + invenPush, offY + dy + invenPush, scale, scale, 0, c_white, 1);
    doMove = 0;
    //You only see this when dragging with mouse
    if (invenIconMover) 
    { 
        draw_sprite_ext(s_qicon, 2, offX + dx + invenXP, offY + dy + invenYP2, scale, scale, 0, c_hyellow, 1); 
        doMove = 1; 
    }
    if !(doMove == 1 &amp;&amp; invenIconCursorHide == 1) draw_sprite_ext(s_item_arrow, 0, offX + dx + invenXP, offY + dy - (invenYP * 4), scale, scale, 0, c_white, 1);
}

//Reset font
draw_set_halign(0);
draw_set_valign(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>384,384</point>
  </PhysicsShapePoints>
</object>
