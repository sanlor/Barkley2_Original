<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2510002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// scr_event_dialogue_init()
/// Initializes a dialogue object.
/// Automatically runs when a dialogue object is created.
/// Note: Most of these variables are initialized in scr_event_action_dialogue.

// The title of the text, defaults to an empty string.
_title = NULL_STRING;
// The portrait for this text, defaults to NULL.
_portrait = NULL;
// GZ STUDY THIS //
// Timed dialog boxes timer // Needs to be longer than the time it takes for the dialog system to write the text, it seems //
timerConfirm = 0;
// The number of frames a portrait has.
_portrait_frames = NULL;
// The speed of the portrait animation.
_portrait_speed = global.dialogFaceSpeed * global.dialogSpeed;// * global.dialogSpeed; //was 0.5;
// True if the portrait animation should always play, or false if we want normal animation.
_always_play_portrait_animation = false;
// The text blocks to be displayed. Only one block is displayed at a time.
_blocks = NULL;
_block_number = 0;
_block_count = 0; // Add string length for block every time
// The full text that should be displayed.
_text = "";
_text_length = 0;
// The x offset to draw the dialogue at, defaults to 8.
_draw_x = 8;
// The y offset to draw the dialogue at, defaults to 0.
if (global.dialogY == -1) _draw_y = 140;
else _draw_y = global.dialogY;
// The width of the textbox, defaults to SCREEN_WIDTH - 16.
_width = SCREEN_WIDTH - 16;
// The width of the text, defaults to 64 less than width.
_text_width = _width - 64;
// The amount of lines this textbox has, defaults to 4.
_lines = 4;
// The amount of characters that are added per 1/10s, defaults to 3.
_text_speed = 3;

// The different colors for the different texts, defaults are set below.
_title_color = c_ltblue;
_text_color = c_white;

// The sound used whenever characters are typed.
_talk_sound = "sn_talk1";
// The sound used whenever a textbox is completed and the player selects to go to the next one.
_confirm_sound = "sn_talk3";

// The event associated with this dialogue, defaults to null.
_event = NULL;

// The text that should be displayed currently.
_draw_text = "";
curLtr = 1; // GZ for current letter
// The current position of the text being displayed.
_current_position = 0; // was 1;
// The last character position that was displayed.
_last_position = 0; // was 1;
// The current frame of the portrait.
_talk_frame = 0;
// If the button to confirm has been released since the last confirmation.
_confirm_released = false; // gzfix true;
// If the player can actually use the confirm. Starts at true inbetween each dialogue so that the previous
// confirmation doesn't bleed into the next segment.
_can_confirm = false;
// The currently displaying block.
_current_block = 0;
// The amount of time to wait before the player can confirm a message after it completes showing it.
// -1 means the wait timer hasn't started yet, 0 means it has completed, but the player hasn't presed confirm yet.
_wait = -1;
// Bob amount for the confirm cursor.
_bob = 0;
_return_show = 0;

// Draw without the dialog box //
_boxless = false;

// Draw the normal dialog box //
_normal_backdrop = true;

// Draw the mystery dialog box // Usable for Mysterious voices heard from the darkness etc.
_mystery_backdrop = false;

// GZ STUDY THIS //
// Timed dialog boxes timer // Needs to be longer than the time it takes for the dialog system to write the text, it seems //
timerConfirm = -1;

// Blink
blink = 0;
blinkTime = 4; // Variance in blink, 4 means it can be from 4 to 6 seconds (4 + (4 / 2))
blinkDuration = 0.2; // Duration of blink
blinkCount = random(blinkTime + (blinkTime / 2));
flourishFrame = 0;

style = 1; // 0 is old style, 1 is generated
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// scr_event_dialogue_destroy()
/// Automatically runs from the dialogue destroy event.

//ds_list_destroy(_blocks);
if (timerConfirm == -1) scr_event_advance(_event);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// scr_event_dialogue_step()
/// Script for stepping when the dialogue is active.
/// Automatically runs from the dialogue step event.
/// GZ NOTE: I added * 1000 on text speed

// If the game is not paused, look for button presses.
var pause = paused() or Minigame();
// Only check for presses when the dialogue isn't paused.
if (pause) { visible = 0; exit; }
visible = 1;

// Is true if any of the confirm buttons are currently being pressed, false otherwise.
var confirm_pressed = false;
// True if a confirm button was just pressed in this frame, false otherwise.
var confirm = false;

// GZ STUDY THIS //
// While timed dialogs are being used, regular confirmation should be disabled //
// Timed dialogue boxes // Used for automatically closing dialog boxes //
if (timerConfirm &gt; 0)
{
    timerConfirm -= dt_sec();
    if (timerConfirm &lt;= 0) { confirm = true; timerConfirm = 0; }
}
    
var confirm_pressed = scr_input_check_held(KEYID_DIALOGUE, PLAYER1) or 
                     (scr_input_check_held(KEYID_ACTION, PLAYER1) and 
                      global.keyinput_type == KEYINPUT_KEYBOARD_MOUSE);

// Confirm // GZ STUDY THIS //
if (confirm_pressed and _confirm_released and timerConfirm &lt;= 0) {
    confirm = true;
    _confirm_released = false;
}
// If the buttons are released, make sure the player can confirm again.
//if (!scr_input_check_held(KEYID_DIALOGUE, PLAYER1) and (!scr_input_check_held(KEYID_ACTION, PLAYER1) and global.keyinput_type == KEYINPUT_KEYBOARD_MOUSE)) and !_confirm_released {
if (!scr_input_check_held(KEYID_DIALOGUE, PLAYER1) and !scr_input_check_held(KEYID_ACTION, PLAYER1) and !_confirm_released)
{
    _confirm_released = true;
    _can_confirm = true;
}

// If confirm is pressed, increase the text speed a lot.
var current_text_speed = _text_speed * global.dialogSpeed;
if (confirm_pressed and _can_confirm) 
{
    curLtr = TextSpecial("line start", _block_count + 4);
    //show_debug_message("scr_event_dialogue_step() - skip");
}

// DSL CINEMA SKIP - oCinema begin step has rest
if (MiniKeyPress("cancel", 1)) 
{
    current_text_speed *= 3;
    confirm = true; 
}

// Try to add characters or complete the text box.
var animate_portrait = 0;
var _talk = 1;
if (curLtr &gt;= TextSpecial("line start", _block_count + 4))
{
    _current_position = 0;
    _talk = 0;
}
if (curLtr &lt; TextSpecial("line start", _block_count + 4)) { //_text_length) {
    // If there is more text to display...
    _current_position += current_text_speed * dt();
    while (true)
    {
        var del = TextSpecial("delay", curLtr - 1);
        if (_current_position &gt;= 1 / del)
        {
            if (del == 1) animate_portrait = 1;
            _current_position -= 1 / del;
            curLtr += 1;
        }
        else break;
        if (curLtr &gt;= TextSpecial("line start", _block_count + 4)) 
        { 
            _current_position = 0; 
            _talk = 0; 
            break; 
        }
    }
} else if (_wait == -1) {
    // If there is no more text to display, initiate the wait.
    _wait = 2.5;
} else if (_wait &gt; 0) {
    // Decrement the wait until it is zero.
    _wait -= dt();
} else {
    if (confirm) // Once zero, the player can confirm.
    {
        global.flourishTime = -1; flourishFrame = 0; // Reset flourish
        audio_play_sound_fresh(_confirm_sound, 100, false);
        _block_count += 4;
        if (curLtr &gt;= TextSpecial("normal length")) 
        {
            instance_destroy();
        } 
        else // Advance to the next block and reset values.
        {
            _can_confirm = false;
            _wait = -1;
            _return_show = 0;
        }
    } 
    else // Bob the confirm cursor.
    {
        _bob = (_bob + (0.3 * dt())) mod 2;
        _return_show = 1;
    }
}

// Animate the portrait if plausible.
if (animate_portrait) audio_play_sound_fresh(_talk_sound, 100, false);

// Check to see if portrait is one frame, if so, skip everything below
if (_portrait_frames &lt;= 1) { _talk_frame = 0; exit; }

if (_always_play_portrait_animation)
{
    _talk_frame = (_talk_frame + (_portrait_speed * dt_sec())) mod (_portrait_frames - 1);
}
else if (_talk &amp;&amp; curLtr &lt; TextSpecial("normal length"))
{
    if (TextSpecial("delay", curLtr - 1) != 1) _talk_frame = 0;
    else 
    {
        if (_talk_frame == 0.000001) _talk_frame = 1;
        else _talk_frame = (_talk_frame + (_portrait_speed * dt_sec())) mod (_portrait_frames - 1);
    }
}
else _talk_frame = 0.000001;

// Override with blink
blinkCount -= dt_sec();
if (blinkCount &lt;= 0)
{
    blinkCount = blinkTime + random(blinkTime / 2);
    blink = blinkDuration;
}
if (blink &gt; 0) { blink -= dt_sec(); _talk_frame = _portrait_frames - 1; }

// Override with flourish
if (global.flourishTime != -1 &amp;&amp; (_text_length * global.flourishTime) &lt;= _current_position)
{
    if (flourishFrame == 0) portraitOld = _portrait;
    _portrait = Portrait(global.flourishPortrait);
    _talk_frame = floor(flourishFrame);
    flourishFrame += dt_sec() * global.flourishSpeed;
    if (_talk_frame &gt;= sprite_get_number(global.flourishPortrait)) global.flourishTime = -1;
}
else if (flourishFrame != 0) _portrait = portraitOld;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// scr_event_dialogue_draw()
/// Draws the dialogue.
/// Automatically runs from the dialogue draw event.

Breakout("draw", -1);

// Set where to draw the dialogue.
x = view_xview + _draw_x;
y = view_yview + _draw_y;

var frame_left = x;
var frame_top = y;
var frame_right = x + _width;
var frame_bottom = y + _lines * 12 + 44;
//if (_title == NULL_STRING) frame_bottom -= 12;

if (global.borderOnce == 0)
{
    global.borderOnce = 1;
    Border("generate", 10, frame_right - frame_left, frame_bottom - frame_top);
}

// Load up correct grafix //
_diag_frame = global.dialogFrame;
_diag_corner = global.dialogCorner;
_diag_return = global.dialogReturn;
_diag_edge = global.dialogEdge;
_diag_bg = global.dialogBG;
    
// Set the alpha if it is on top of the hud.
if instance_exists(o_hud) then var alpha = 1 - o_hud.hudHide;
else var alpha = 1;

// Draw the background.
if (global.dialogFrame != s_diag_frame || _mystery_backdrop || _boxless) then
    {
    if _normal_backdrop = true then draw_spr_tiled(frame_left + 4, frame_top + 4, frame_right - 4, frame_bottom - 4, _diag_bg, 0, 0.75 * alpha);
    else if _mystery_backdrop = true then draw_sprite_ext(s_diag_mystery_backdrop, 0, frame_left - 8, frame_top + 10, 384, 1, 0, c_white, 0.5);
    }
else if (style == 1) Border("draw back", 10, frame_left, frame_top);
    
// Draw the portrait, if there is one.
if (_portrait != NULL) 
{
    var portrait_frame_left = frame_left + 15;
    var portrait_frame_top = frame_top + 8 + ((_lines - 3) * 5);
    var portrait_left = portrait_frame_left + 8;
    var portrait_top = portrait_frame_top + 10;
    // Portrait frame.
    draw_sprite(_diag_frame, 0, portrait_frame_left, portrait_frame_top);
    // Actual portrait.
    if (_title == Quest("playerBlueFaceName")) BlueFace("begin");
    else if (_title == P_NAME || _title == P_NAME_S || _title == P_NAME_F) BlueFace("begin");
    draw_sprite(_portrait, _talk_frame, portrait_left, portrait_top);
    if (global.portraitFlicker)
    {
        var ptf = random(0.05);
        ptf += abs(lengthdir_x(0.1, current_time / 3));
        ptf += abs(lengthdir_y(0.1, current_time / 11));
        draw_sprite_ext(_portrait, _talk_frame, portrait_left, portrait_top, 1, 1, 0, c_black, ptf);
    }
    if (_title == Quest("playerBlueFaceName")) BlueFace("end");
    else if (_title == P_NAME || _title == P_NAME_S || _title == P_NAME_F) BlueFace("end");
}

/// Draw the frame. ///
// Edges...
// Right.
if global.dialogFrame != s_diag_frame &amp;&amp; _boxless = false and _mystery_backdrop = false then 
    {
    draw_spr_tiled(frame_right - 16, frame_top + 16, frame_right, frame_bottom - 16, _diag_edge, 0, alpha);
    // Top.
    draw_spr_tiled(frame_left + 16, frame_top , frame_right - 16, frame_top + 15, _diag_edge, 1, alpha);
    // Left.
    draw_spr_tiled(frame_left, frame_top + 8, frame_left + 15, frame_bottom - 4, _diag_edge, 2, alpha);
    // Bottom.
    draw_spr_tiled(frame_left + 16, frame_bottom - 16, frame_right - 16, frame_bottom, _diag_edge, 3, alpha);
    // Corners...
    var diag_corner_width = sprite_get_width(_diag_corner);
    // Top right.
    draw_sprite_ext(_diag_corner, 0, frame_right - diag_corner_width, frame_top, 1, 1, 0, c_white, alpha);
    // Top left.
    draw_sprite_ext(_diag_corner, 1, frame_left, frame_top, 1, 1, 0, c_white, alpha);
    // Bottom left.
    draw_sprite_ext(_diag_corner, 2, frame_left, frame_bottom - diag_corner_width, 1, 1, 0, c_white, alpha);
    // Bottom right.
    draw_sprite_ext(_diag_corner, 3, frame_right - diag_corner_width, frame_bottom - diag_corner_width, 1, 1, 0, c_white, alpha);
    /// End draw the frame. ///
    }
else if _boxless = false and _mystery_backdrop = false then 
{
    Border("draw border", 10, frame_left, frame_top);
}
// Set the font.

draw_set_font(global.fn_2);
draw_set_halign(0);

// Draw the title then the actual text.
var title_top = frame_top + 17;
var text_and_title_left = frame_left + 27;
var text_top = title_top + 16;
if (_title == NULL_STRING) text_top -= 16 - 3;
if (_portrait != NULL) {
    text_and_title_left += 46;
}
draw_set_color(_title_color);
draw_text(text_and_title_left - 1, title_top, _title);
draw_set_color(_text_color);
if scr_isNippon(_draw_text) {scr_draw_jp_text_sprite(text_and_title_left, text_top,_draw_text,0,0,s_fn_2_jp,12287,0,-1,28);}
else 
{
    //draw_text(text_and_title_left, text_top, _draw_text);
    TextSpecial("draw", text_and_title_left, text_top, _block_count, _block_count + 4, curLtr);
}

// Draw the 'more text' indicator.
if (_return_show &amp;&amp; timerConfirm &lt;= 0) { //_wait &lt;= 0) {
    draw_sprite(_diag_return, 0, frame_left + _width - 24, frame_bottom - 24 + floor(_bob));
}

//Breakout("draw", -1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
