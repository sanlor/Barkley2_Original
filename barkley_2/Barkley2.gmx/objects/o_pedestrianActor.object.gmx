<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_pedestrianMapSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>InteractiveActor</parentName>
  <maskName>s_pedestrian_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Inheritance //
event_inherited();

// Not allowed to exist //
if (Quest("govSpeechInitiate") == 2) { instance_destroy(); exit; }
if (Quest("gutterEscape") == 1) { instance_destroy(); exit; }
// Disable during TNN CURFEW //
if (scr_time_db("tnnCurfew") == "during" &amp;&amp; scr_area_get() == "tnn") { instance_destroy(); exit; }

areaName = scr_area_get();
gilbert = (areaName == "far");
if (gilbert) 
{
    _disableOutline = 1;
    _spriteHue = random(360);
}
zReg = 10;
_z = zReg;
zBob = random(360);

// For draw sprite part GZ code
sprite_width_edit = 28;
sprite_height_edit = 56;

// Shadow radius below my feet //
shadow_radius = 8;

// I am a pedestrian and I've got the variable to prove it //
_pedestrian = true;

// I don't have a rigid attached to me, you can run all over me... //
scr_actor_unsetRigid(id);

// I don't want to get stuck on walls and corners //
scr_path_setMovementType(scr_path_movementType_standard_offset);
scr_path_setWalldist(24);

// Set the "look ahead value"
scr_path_setLookaheadDist(16 + 8);

// Area checker //
idn = scr_area_get();
if idn = "tnn" then area = 0;
else if idn = "bct" then area = 1;
else if idn = "ala" then area = 2; 
else if idn = "pdt" then area = 3;
else if idn = "tri" then 
{
    area = 4;
    if (room == r_tri_bar01) area = 5;
    if (room == r_tri_ghetto01) area = 6;
}
else if idn = "wst" then area = 7;
else area = 0;

// Gossip variables //
event_user(10); // Gossip text
gossip = false;
gossip_index = irandom_range(0, 9)
timer_spouting_gossip = 0;
if (irandom(100) &lt;= 30) gossip = 1;
if (gilbert) gossip = 0;
    
// Set sprite //
event_user(15);

// Some NPC/Interactive actor related thing //
_automatic_animation = true;

// Variables for pushing around hoopz and the pedestrian upon collision of the two //
//I am making these guys push hoopz a lot more - bhroom (101315)
push_return_to_origin = 0;
push_return_to_origin_cooldown = 0;
push_return_to_origin_treshold = 0;
pushed_x = 0;
pushed_y = 0;
push_player_force = 1.5;
push_me_force = 1;
push_weight = 1.5 + random_range(0, 2);

// Alpha fade in/out, used for transits in and out of maps //
alpha = 0;
alpha_goal = 1;

// Set movement speed
move_speed = 2 + 0.5 * irandom(3);
if (gilbert) { move_speed += 1; move_speed *= 2; }

// Things related to waypoints and destinations //
waypoint = false;
circulationCut = false;
restart_journey_treshold = 0;
timer_set_forth_on_my_journey = 1;
timer_circulation = 0;
loudspeak = false;
listen = false;

// Check if waypoints exist in the map and if they do, head for them // If not, head for the exit //
if (instance_exists(o_pedestrian_waypoint)) 
{
    my_destination = instance_nearest(x, y, o_pedestrian_waypoint);
    waypoint = true;
}
else if instance_exists(o_pedestrian_exit) then my_destination = instance_nearest(x, y, o_pedestrian_exit);
else my_destination = NULL;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Inherit //
event_inherited();

// Pause //
if paused() exit;

// Ability to kill in triskelion
if (areaName == "tri" &amp;&amp; place_meeting(x, y, CombatAttackEntity)) // gilbert == 0
{
    event_user(9);
    exit;
}

/*if (gilbert)
{
    _z = zReg + (sin(zBob) * 3);
    zBob += dt() / 2;
    if (global.event == 0 &amp;&amp; Quest("mountainCooldown") &lt;= 0)
    {
        if (place_meeting(x, y, PlayerCombatActor))
        {
            scr_path_delete();
            move_speed = 0;
            timer_set_forth_on_my_journey = 999;
            global.eventTeleport = 1;
            Quest("mountainEncounterRoom", room);
            Quest("mountainEncounterX", x);
            Quest("mountainEncounterY", y);
            rom = "r_far_encounter0" + choose("1", "2");
script = "
FADE | 1 | 1
WAIT | 1
Teleport | " + rom + " | 160 | 160 | 1";
            Cinema("run", script);
        }
    }
}*/

// Free self if standing at the same spot for too long // Still necessary? //
if (x == xprevious &amp;&amp; y == yprevious &amp;&amp; timer_spouting_gossip &lt;= 0 &amp;&amp; loudspeak == false)
{
    restart_journey_treshold += dt_sec();
    if (restart_journey_treshold &gt;= 1) 
    {
        restart_journey_treshold = 0;
        timer_set_forth_on_my_journey = 0.0001;
    }
}
    
// Gossip begins when Hoopz runs into me //
if (gossip &amp;&amp; global.event == 0 &amp;&amp; timer_spouting_gossip &lt;= 0)
{
    if (place_meeting(x, y, PlayerCombatActor))
    {
        // Timers to reset back to normal //
        timer_spouting_gossip = 55;
        timer_set_forth_on_my_journey = 0;
        
        // Gossip bubble //
        gossip = instance_create(x, y, o_entity_indicatorGossip); // 45 DT life
        gossip.text = gossip_pool[area, gossip_index];
        
        // Stop moving //
        _last_direction = DOWN;
        scr_path_delete();
        move_x = 0;
        move_y = 0;
    }
}
    
// Spout gossip, then move on //
if (timer_spouting_gossip &gt; 0 &amp;&amp; loudspeak == false)
{
    timer_spouting_gossip -= dt();
    if (timer_spouting_gossip &lt;= 10 &amp;&amp; gossip != true)
    {
        // Stop gossiping and start to move on //
        timer_set_forth_on_my_journey = 0.0001;
        gossip = true;
    }  
}
    
// Begin the journey to my destination //
if timer_set_forth_on_my_journey &gt; 0 then
    {
    // Tick down //
    timer_set_forth_on_my_journey -= dt();
    
    // Event //
    if timer_set_forth_on_my_journey &lt;= 0 then
        {
        // Find a new destination among the waypoints if diceroll dictates so, otherwise go to an exit //
        if irandom(100) &gt;= 15 or area = 3 then
            {
            waypoint = true;
            with o_room_pedestrian ds_list_shuffle(list_waypoints);
            my_destination = ds_list_find_value(o_room_pedestrian.list_waypoints, 0);
            scr_path_delete();
            scr_path_set(x, y, my_destination.x, my_destination.y, move_speed, 0, 30000);
            }                     
        // Find an exit //
        else
            {
            waypoint = false;
            with o_room_pedestrian ds_list_shuffle(list_exits);
            my_destination = ds_list_find_value(o_room_pedestrian.list_exits, 0);
            scr_path_delete();
            scr_path_set(x, y, my_destination.x, my_destination.y, move_speed, 0, 30000);
            }
        }
    }
    
// Reaching my_destination //
if timer_spouting_gossip &lt;= 0 and loudspeak = false then
    {
    // Alpha out near destination //
    if point_distance(x, y, my_destination.x, my_destination.y) &lt;= 32 and waypoint = false then alpha_goal = 0;
    else alpha_goal = 1;
    
    // Reaching the my_destination //
    if point_distance(x, y, my_destination.x, my_destination.y) &lt;= 8 then
        {
        // Circulation of pedestrians is verboten //
        if PEDESTRIAN() = false then instance_destroy();
        
        // I reached a waypoint //
        else if waypoint = true then timer_set_forth_on_my_journey = 0.0001;
        
        // I reached an exit //
        else if instance_exists(o_pedestrian_entrance) then
            {
            event_user(0); // become new ped
            }
        }
    }
    
// Gather around the loudspeaker //
if loudspeak = true and circulationCut = false and listen = false then
    {
    if distance_to_point(my_destination.x, my_destination.y) &lt;= 128 then 
        {
        scr_path_delete(); 
        listen = true;
        move_x = 0;
        move_y = 0;
        }   
    }
    
// Circulation is cut //
// Every second regenerate path //
if (timer_circulation &gt; 0) then
{
    timer_circulation -= dt_sec();
    if (timer_circulation &lt;= 0)
    {
        scr_path_delete();
        scr_path_set(x, y, my_destination.x, my_destination.y, move_speed, 0, 3000);
        timer_circulation = 1;
    }
}
    
// Find an exit pronto //
if (PEDESTRIAN() == false &amp;&amp; circulationCut == false)
{
    // Reset everything and RUN //
    with (o_entity_indicatorGossip) instance_destroy();
    waypoint = false;
    circulationCut = true;
    move_speed = MOVE_FAST + 3;
    timer_circulation = 1;
    with (o_room_pedestrian) ds_list_shuffle(list_exits);
    my_destination = ds_list_find_value(o_room_pedestrian.list_exits, 0);
    scr_path_delete();
    scr_path_set(x, y, my_destination.x, my_destination.y, move_speed, 0, 3000);
}

// Error fixer
if (move_x != 0 || move_y != 0)
{
    if (path_exists(path_walk) == 0)
    {
        timer_set_forth_on_my_journey = 0.0001;
    }
}
 
// NPC Push //
script_execute(scr_pedestrian_push);

// Move alpha to goal and clamp with 0-1 bounds //
alpha = clamp(Goto(alpha, alpha_goal, dt() / 2), 0, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set sprite from area grab above
// TNN has 30 //
if area = 0 then
    {
    global.pedestrianSprite += irandom(2) + 1;
    if global.pedestrianSprite &gt;= 28 then global.pedestrianSprite -= 28;   // 27 
    }
    
// BCT has 30 // TODO check the actual amount
else if area = 1 then
    {
    global.pedestrianSprite += irandom(2) + 1;
    if global.pedestrianSprite &gt;= 27 then global.pedestrianSprite -= 27;
    }
    
// ALA has 30 // TODO check the actual amount
else if area = 2 then
    {
    global.pedestrianSprite += irandom(2) + 1;
    if global.pedestrianSprite &gt;= 28 then global.pedestrianSprite -= 28;
    }
    
// PDT has 1 //
else if area = 3 then
    {
    global.pedestrianSprite = 0;
    }
    
// Triskelion //
else if area &gt;= 4 then
    {
    global.pedestrianSprite += irandom(2) + 1;
    if global.pedestrianSprite &gt;= 28 then global.pedestrianSprite -= 28;   // 27 
    }
    
// WST //
else if area = 7 then
    {
    global.pedestrianSprite += irandom(2) + 1;
    if global.pedestrianSprite &gt;= 28 then global.pedestrianSprite -= 28;   // 27 
    }

// Sprite sheet //
if (area == 5) gossip = 1;
switch (area)
    {
    // TNN //
    case 0: sprite_sheet = s_pedestrian_tnn01; break;
    
    // BCT //
    case 1: sprite_sheet = s_pedestrian_tnn01; break;
    
    // ALA //
    case 2: sprite_sheet = s_pedestrian_tnn01; break;
    
    // YSK //
    case 3: sprite_sheet = s_pedestrian_tnn01; break;
    
    // TRI //
    case 4: 
    case 5: 
    case 6: sprite_sheet = s_pedestrian_tnn01; break;
    
    // WST //
    case 7: sprite_sheet = s_pedestrian_tnn01; break;
    }
    
// Set the sprite //
scr_entity_set_pedestrian(sprite_sheet, global.pedestrianSprite);
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Gather around the loudspeaker //
my_destination = o_tnn_loudspeakerPedestrianSpot01;
scr_path_set(x, y, my_destination.x, my_destination.y, move_speed, 0, 3000);
loudspeak = true;
timer_set_forth_on_my_journey = 0;
restart_journey_treshold = 0;
timer_spouting_gossip = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Stop listening to loudspeaker //
loudspeak = false;
listen = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gossip Text per area

// TNN //
gossip_pool[0, 0] = "Go North from Gilberts Peak";
gossip_pool[0, 1] = "Look for the Hammer of Zoldar";
gossip_pool[0, 2] = "Golden Fish has mystical power";
gossip_pool[0, 3] = "Talk to people for clues and hints";
gossip_pool[0, 4] = "Friends and Foes get stronger during the night";
gossip_pool[0, 5] = "Go to Father Giuseppes church for sanctuary";
gossip_pool[0, 6] = "I smell something... dank. Could it be...?";
gossip_pool[0, 7] = "Where there is smoke... there is fire";
gossip_pool[0, 8] = "Remember this, youngster: Still waters run deep...";
gossip_pool[0, 9] = "Rock the Vote";

// Brain City //
gossip_pool[1, 0] = "I'm proud to be a Braincinian";
gossip_pool[1, 1] = "Where's my son? Have you seen my baby boy?!";
gossip_pool[1, 2] = "I'm a resolute coffee drinker, full of beans";
gossip_pool[1, 3] = "A neurodeck in the head is worth ten in the belfry";
gossip_pool[1, 4] = "Cyberdwarf is a scam, don't believe the hype";
gossip_pool[1, 5] = "The tallest tower holds the deepest secrets";
gossip_pool[1, 6] = "Gilberts Peak eludes me";
gossip_pool[1, 7] = "Fortune favors the bald";
gossip_pool[1, 8] = "Search south of Castle Duffrey";
gossip_pool[1, 9] = "My next upgrade is going to be my tendons";

// Al-akihabara //
gossip_pool[2, 0] = "Ugh... I'm so parched...";
gossip_pool[2, 1] = "Water... I need... Water...";
gossip_pool[2, 2] = "Ungh... It's so hot in here...";
gossip_pool[2, 3] = "Please, someone, anyone... Give me nectar!";
gossip_pool[2, 4] = "If only us dwarfs wouldn't need to drink...";
gossip_pool[2, 5] = "Every word pains my parched throat";
gossip_pool[2, 6] = "My sore throat beckons for water...";
gossip_pool[2, 7] = "So thirsty...";
gossip_pool[2, 8] = "Thirst is the real enemy of us dwarfs...";
gossip_pool[2, 9] = "Hattori Temple appears only when the moon is full";

// Ys-Kolob // Esperanto //
gossip_pool[3, 0] = "Ĉiuj gloro al la urbestro de la Manĝtuloj";
gossip_pool[3, 1] = "Bonvenon al Ys-Kolob, amiko";
gossip_pool[3, 2] = "Beware la fantomoj de Kastelo Duffrey";
gossip_pool[3, 3] = "Birdo en la ĉapelo valoras du en la sonorilejo";
gossip_pool[3, 4] = "Mi sentas komploto mortigi ĉiuj Manĝtuloj";
gossip_pool[3, 5] = "Pekoj de la patro neston profunde en la itala";
gossip_pool[3, 6] = "Don de la Vega estas ne kiu li ŝajnas";
gossip_pool[3, 7] = "Se nur sinjoro Passepartout estis ankoraŭ tie...";
gossip_pool[3, 8] = "La fosaĵoj teni kaŝitan trezoron";
gossip_pool[3, 9] = "La knabo faris de betulo... Ĉu li vere mortas?";

// Triskelion
for (i = 0; i &lt; 10; i += 1)
{
    gossip_pool[4, i] = "I like looking at the water.";
}

// Triskelion Bar
gossip_pool[5, 0] = "*BURP*";
gossip_pool[5, 1] = "*SLURP*";
gossip_pool[5, 2] = "*HIC*";
gossip_pool[5, 3] = "*HORK*";
gossip_pool[5, 4] = "*HOOT*";
gossip_pool[5, 5] = "*COUGH*";
gossip_pool[5, 6] = "*HOLLER*";
gossip_pool[5, 7] = "Fuck you!";
gossip_pool[5, 8] = "*MUNCH*";
gossip_pool[5, 9] = "*CRUNCH*";

// Triskelion ghetto
gossip_pool[6, 0] = "I ain't sayin' anythin'";
gossip_pool[6, 1] = "Please... One more grape...";
gossip_pool[6, 2] = "Do you have a noose I could borrow?";
gossip_pool[6, 3] = "The cock-sucker guards won't let me in the city";
gossip_pool[6, 4] = "I wonder where the ladders go...";
gossip_pool[6, 5] = "...What!";
gossip_pool[6, 6] = "What a load of horse patoot!";
gossip_pool[6, 7] = "They call me Il Pauper.";
gossip_pool[6, 8] = "Greetings, saahib.";
gossip_pool[6, 9] = "I'm afraid of the night.";

// Industrial Park //
gossip_pool[7, 0] = "Great POWER is northwest";
gossip_pool[7, 1] = "The dankest of Swamps lie south";
gossip_pool[7, 2] = "Fary's are racist";
gossip_pool[7, 3] = "Stay clear of chups";
gossip_pool[7, 4] = "Respect the rules...";
gossip_pool[7, 5] = "One man's piece of shit is another man's gold";
gossip_pool[7, 6] = "Use anesthetics to capture live enemies";
gossip_pool[7, 7] = "Cybergremlins are BULLSHIT!";
gossip_pool[7, 8] = "Knowledge is power";
gossip_pool[7, 9] = "Sepideh's machine will save us all";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ice them
instance_destroy();
var _obj;

var repeats = 6 + irandom(3);
repeat(repeats) {
    _obj = instance_create(x-3+random(6),y-3+random(6),o_FX);
    _obj.z = z + random(hitbox_z_top);
    _obj.sprite_index = s_fx_bloodBurst;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
}

repeat (2)
{
if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y+4,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 1;
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 2;
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 3;
}
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Transform into new ped
// Move to one of the entrances in the pool //
with o_room_pedestrian ds_list_shuffle(list_entrances);
var entrance = ds_list_find_value(o_room_pedestrian.list_entrances, 0);
alpha = 0;
alpha_goal = 1;
x = entrance.x;
y = entrance.y;
timer_set_forth_on_my_journey = 0.0001;
scr_path_delete();
move_x = 0;
move_y = 0;

my_destination = o_room_pedestrian; // Prevents getting stuck on exit

// Change appearance //
event_user(15);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug
//if (path_exists(path_walk)) draw_text(x, y, "path");
//else draw_text(x, y, "none");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
if (gilbert)
{
    shader_set(shader_hue);
    shader_set_uniform_f(shader_get_uniform(shader_hue, "argHue"), _spriteHue); // 120
    //event_inherited();
    var xcl = 1;
    if (delta_x &gt; 0) xcl = -1;
    var shadow_alpha = 0.4 * image_alpha;
    var _radius = 12;
    _radius = _radius * (1 / (1 + ((_z) / 40))) // Scale shadow with Z height 
    var dvv = (1 / 64) * 2; // so i don't have to muck with radius
    if (_radius &gt; 0)
    {
        draw_sprite_ext(s_lensflare, 0, round(x), round(y), 
            _radius * dvv, (_radius * 0.5) * dvv, 0, c_black, shadow_alpha);
    }
    draw_sprite_ext(s_potato_fary01, floor(zBob * 2), x, y - _z, xcl, 1, 0, c_white, 1);
    shader_reset();
}
else
{
    event_inherited();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,24</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
