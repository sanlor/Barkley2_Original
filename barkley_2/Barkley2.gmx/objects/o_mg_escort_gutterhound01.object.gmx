<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_gutterhound01</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>InteractiveActor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUTTERHOUND mover
event_inherited();

didSpawn = 0;

shadow_radius = 12;
_pedestrian = true;
scr_entity_set_look_mirror(s_gutterhound_walk, 4, 4, 8, 0, 0, 0, 8, 4);
scr_actor_unsetRigid(id);
scr_entity_set_pedestrian(s_gutterhound_walk, 0);
scr_entity_look(id, SOUTH);
scr_path_setMovementType(scr_path_movementType_standard_offset);
scr_path_setWalldist(15);

// Animate automagically //
_automatic_animation = true;

// Variables for pushing around hoopz and the pedestrian upon collision of the two //
target_x = x;
target_y = y;
push_return_to_origin = 0;
push_return_to_origin_cooldown = 0;
push_return_to_origin_treshold = 0;
pushed_x = 0;
pushed_y = 0;
push_player_force = 0;
push_me_force = 0;
push_weight = 0;
timer_push = 0;
timer_heal = 0;

// Set movement speed
move_speed = MOVE_FAST;

// Spawn //
timer_spawn = 0.1;
spawnX = 0;
spawnY = 0;
spawner = false;

// Pathing timer //
timer_check = 0;

// Action timer //
timer_action = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Inherit //
event_inherited();

// Pause //
if paused() exit;

// Spawn //
if timer_spawn &gt; 0 then
    {
    // Tick down //
    timer_spawn -= dt();
    
    // Event //
    if timer_spawn &lt;= 0 then
        {
        if spawner = false then
            {
            timer_spawn = 0.1;
            if instance_exists(o_hoopz) then 
                {
                spawnX = o_hoopz.x;
                spawnY = o_hoopz.y;
                spawner = true;
                }
            }
        else
            {
            if instance_exists(o_hoopz) and didSpawn == 0 then
                {
                timer_spawn = 0.1;
                //if o_hoopz.x != spawnX or o_hoopz.y != spawnY then
                //    {
                    didSpawn = 1;
                    x = spawnX;
                    y = spawnY;
                    visible = true;
                    timer_check = 7;
                    timer_push = 7;
                //    }
                }
            }
        }
    }
    
// Check for vacant spot //
if timer_check &gt; 0 then
    {
    // Tick down //
    timer_check-= dt();
    
    // Event //
    if timer_check &lt;= 0 then
        {
        // Reset check //
        timer_check = 4 + irandom(4);
        
        // Check distance //
        if distance_to_object(PlayerCombatActor) &gt;= 40 then
            {
            target_x = PlayerCombatActor.x;
            target_y = PlayerCombatActor.y;
            scr_path_set(x, y, target_x, target_y, move_speed, 0, 2000);
            }
        }
    }
    
// Reaching the target //
if distance_to_point(target_x, target_y) &lt; 35 then
    {
    scr_path_delete();
    move_x = 0;
    move_y = 0;
    }
    
if (didSpawn == 0) exit;
    
// PUSH ACTIVATES //
if timer_push &gt; 0 then
    {
    // Tick down //
    timer_push -= dt();
    
    // Event //
    if timer_push &lt;= 0 then
        {
        push_player_force = 1;
        push_me_force = 1;
        push_weight = 0.75;
        }
    }
    
// NPC Push //
scr_pedestrian_push();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>30,47</point>
    <point>30,30</point>
  </PhysicsShapePoints>
</object>
