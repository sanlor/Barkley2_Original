<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gridw = ceil(room_width / TILEGRID_SIZE)
gridh = ceil(room_height / TILEGRID_SIZE)
grid = ds_grid_create(gridw, gridh)
for (var _x = 0; _x &lt; gridw; _x++) {
    for (var _y = 0; _y &lt; gridh; _y++) {
        ds_grid_set(grid, _x, _y, ds_list_create())
    }
}

surface = -1
prev_render_lft = -1
prev_render_top = -1

next_tileid = 0

tw_max = 0; // Max tile width (updated as tiles are added)
th_max = 0; // Max tile height (updated as tiles are added)

//GZ ADDED for animated tiles
tileanimtimer = 0;
tileanim = 0;
prev_tileanim = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up grid
for (var _x = 0; _x &lt; gridw; _x++) {
    for (var _y = 0; _y &lt; gridh; _y++) {
        var list = ds_grid_get(grid, _x, _y)
        ds_list_destroy(list)
    }
}

ds_grid_destroy(grid)

if (surface_exists(surface)) {
    surface_free(surface)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var lft = max(0, floor((view_xview[0]) / TILEGRID_SIZE))
var top = max(0, floor((view_yview[0]) / TILEGRID_SIZE))

// Reset surface if necessary
if (!surface_exists(surface)) {
    surface = surface_create(512, 512);
    prev_render_lft = -1
    prev_render_top = -1
}

//GZ ADDED for animated tiles
renderDo = 0;
if (prev_render_lft == -1 or prev_render_top == -1 or
    prev_render_lft != lft or prev_render_top != top) renderDo = 1;
if (depth == 100 &amp;&amp; prev_tileanim != tileanim) renderDo = 1;
//GZ ADDED for animated tiles

if (renderDo) {

    var lft_draw = max(0, floor((view_xview[0] - tw_max) / TILEGRID_SIZE))
    var top_draw = max(0, floor((view_yview[0] - th_max) / TILEGRID_SIZE))
    var rgt_draw = min(ceil((view_xview[0] + SCREEN_WIDTH + tw_max) / TILEGRID_SIZE), floor((room_width - 1) / TILEGRID_SIZE))
    var btm_draw = min(ceil((view_yview[0] + SCREEN_HEIGHT +th_max) / TILEGRID_SIZE)+1, floor((room_height - 1) / TILEGRID_SIZE))

    // Setup surface to render to
    surface_set_target(surface)
    draw_clear_alpha(c_black, 0)
    
    // Render tiles
    var rendered_ids = ds_list_create()
    
    if (depth == 100) tdp = tileanim * 16; else tdp = 0; //GZ ADDED
    
    for (var _x = lft_draw; _x &lt;= rgt_draw; _x++) {
        for (var _y = top_draw; _y &lt;= btm_draw; _y++) {
            list = ds_grid_get(grid, _x, _y)
            // Draw all in list
            var count = ds_list_size(list)
            var i = 0;
            while (i &lt; count) {
                var tile_id = ds_list_find_value(list, i)
                if (ds_list_find_index(rendered_ids, tile_id) == -1) {
                    ds_list_add(rendered_ids, tile_id)
                    var tx = ds_list_find_value(list, i+1)
                    var ty = ds_list_find_value(list, i+2)
                    var tw = ds_list_find_value(list, i+3)
                    var th = ds_list_find_value(list, i+4)
                    var tlft = ds_list_find_value(list, i+5)
                    var ttop = ds_list_find_value(list, i+6)
                    var tbg = ds_list_find_value(list, i+7)
                    if (background_exists(tbg)) {
                        draw_background_part(tbg, tlft + tdp, ttop, tw, th,
                                             tx - (lft * TILEGRID_SIZE), ty - (top * TILEGRID_SIZE))
                    }
                }
                i += 8
            }
        }
    }
    
    surface_reset_target()
    ds_list_destroy(rendered_ids)
    prev_render_lft = lft
    prev_render_top = top
    prev_tileanim = tileanim; //GZ ADDED
}

// Draw surface to screen
draw_surface(surface, lft*TILEGRID_SIZE, top*TILEGRID_SIZE)

//GZ ADDED for animated tiles
if (tileanimtimer &gt; 0)
{
    tileanimtimer -= dt();
    if (scr_area_get() == "pea") tileanimtimer -= dt();
}
else
{
    tileanimtimer = 4; //3 switches a second
    tileanim = (tileanim + 1) mod 3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
