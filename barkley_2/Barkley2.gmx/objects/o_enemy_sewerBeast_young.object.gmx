<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_sewerBeast_young</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>EnemyCombatActor</parentName>
  <maskName>mask_disk_24by24</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////you get all the default variables from EnemyCombatActor
event_inherited();

scr_entity_setShadowCircle(14);

// Enemy stats
scr_enemyDB_statsGet(enemyBuild);

// Ailment totem coordinates //
ailmentTotem_define(self.id, -5, 12, 19, 42);

// Enemy configurations
scr_entity_setZHitbox(0, 32);

anim = 0;
animSpd = 0.2;
animStrike = 0;
_head_offset=0;

deathSound = "sewerbeastJr_death";
damageSound = "sewerbeastJr_hit";

var conf, attack, guard;
guard = scr_AI_addPassiveState(scr_AI_passive_guard);
guard[? "sndAlertSound"] = "sewerbeastJr_alert";

// Active state in water
activeMoveTowardsLand = scr_AI_addActiveState(scr_AI_active_moveTowardsLand);
activeMoveTowardsLand[? "switchPredicate"] = predicate_AI_isWading;

// Active state on land
activeApproach = scr_AI_addActiveState(scr_AI_active_approach);
activeApproach[? "switchPredicate"] = predicate_AI_isNotWading;

activeHangback = scr_AI_addActiveState(scr_AI_active_hangback);
activeHangback[? "switchPriority"] = 10;
activeHangback[? "switchRemoveMaxDist"] = 150;
activeHangback[? "switchAddMaxDist"] = 110;
activeHangback[? "switchPredicate"] = predicate_AI_isNotWading;

// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// Jump action
var jump = scr_AI_addAction(scr_AI_action_jump);
activeMoveTowardsLand[? "jumpAction"] = jump;

// Shot
var shot = scr_AI_addAction(scr_AI_action_shot);
shot[? "motion"] = 28;
shot[? "motionRnd"] = 7;
shot[? "precision"] = 30;
shot[? "burst"] = 1;
shot[? "burstRnd"] = 1;
shot[? "beforeTime"] = 3.5;
shot[? "attackName"] = "spit";
shot[? "afterTime"] = 1.5;
shot[? "gunRange"] = 15;
shot[? "gunFlashShow"] = false;
shot[? "bulletObject"] = o_enemyAttack_bullet_oozeSpit;
shot[? "sndAttackWarn"] = "sewerbeastJr_warn";
shot[? "sndAttackStrike"] = "sewerbeastJr_spit";
AI_util_action_setDamage(shot, 2, 0, 0, 1, 10, 100, STAGGER_HARDNESS_SOFT);
AI_util_action_setAttackScript(shot, scr_AI_attackScript_addMalnourished);

// Aim and shoot
attack = scr_AI_switch_standard("new_attack", conf);
var action = scr_AI_addAction(scr_AI_active_aimandshoot);
attack[? "action"] = action; 
action[? "action"] = shot; 

attack[? "distMin"] = 30;
attack[? "distMax"] = 150;
attack[? "cooldownTime"] = 20; 
attack[? "cooldownTimeRnd"] = 16.5;
attack[? "predicate"] = predicate_AI_isNotWading;




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create animations

// Water shadow
scr_entity_animation_new("water");
scr_entity_animation_setSpriteIndex("water", s_watershadow_medium);
scr_entity_animation_setRange("water", 0, 4);
scr_entity_animation_setSpeed("water", 0.5);

// Tentacles
scr_entity_animation_new("tentacles");
scr_entity_animation_setSpriteIndex("tentacles", s_sewerBeast_young);
scr_entity_animation_setRange("tentacles", 6, 6);
scr_entity_animation_setSpeed("tentacles", 0.6);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if paused() exit;

scr_entity_setShadowVisible(predicate_AI_isNotWading(id));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gibbing

var _obj,_reps;

_obj = instance_create(x,y,o_FX);
_obj.sprite_index = s_fx_bloodBurst;
_obj.image_speed = 0.25;
_obj.image_angle = choose(0,90,180,270);

_reps = 0;
var repeats = 3 + irandom(3);
repeat(repeats)
{
    _obj = instance_create(x-6+random(12),y-6+random(12),o_FX);
    _obj.z = z + random(hitbox_z_top);
    _obj.sprite_index = s_fx_bloodBurst;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
    _reps +=1;
    _obj.delay = _reps*2;
}

_obj = instance_create(x,y,o_gibs);
_obj.sprite_index = s_sewerBeast_young;
_obj.shadow_radius = 5;
_obj.bloodburst = s_catfish_bloodsmall;
_obj.image_index = irandom(11);
    
if(random(1)&gt;0.2)
{
    _obj = instance_create(x,y-4,o_gibs);
    _obj.sprite_index = s_sewerBeast_slash;
    _obj.bloodburst = s_fx_bloodBurst;
    _obj.shadow_radius = 5;
    _obj.image_index = choose(0,1,2,3,6,7);
}

if(random(1)&gt;0.2)
{
    _obj = instance_create(x,y+4,o_gibs);
    _obj.sprite_index = s_sewerBeast_slash;
    _obj.bloodburst = s_fx_bloodBurst;
    _obj.shadow_radius = 5;
    _obj.image_index = choose(0,1,2,3,6,7);
}

if(random(1)&gt;0.2)
{
    _obj = instance_create(x-8,y,o_gibs);
    _obj.sprite_index = s_sewerBeast_slash;
    _obj.bloodburst = s_fx_bloodBurst;
    _obj.shadow_radius = 5;
    _obj.image_index = choose(0,1,2,3,6,7);
}

if(random(1)&gt;0.2)
{
    _obj = instance_create(x+8,y,o_gibs);
    _obj.sprite_index = s_sewerBeast_slash;
    _obj.bloodburst = s_fx_bloodBurst;
    _obj.shadow_radius = 5;
    _obj.image_index = choose(0,1,2,3,6,7);
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (scr_actor_isWading(id)) {
    // In water, draw water shadow only
    var sprite = scr_entity_animation_getSpriteIndex("water");
    var image = scr_entity_animation_getImage("water");
    draw_sprite(sprite, image, dx, dy)
    
} else {
    // On land, draw full body
    var _hScale,_walkheadbob;
    
    var headImage = 0;
    var _walkheadbob = 0;
    var tentaclesFrame = scr_entity_animation_getFrame("tentacles")
    var tentaclesImage = scr_entity_animation_getImage("tentacles")
    
    if(a_attackName == "stagger")
    {
        headImage = 2; 
        tentaclesImage = 12;
    }
    else if(a_walking)
    {
        switch(floor(tentaclesFrame))
        {
            case 0: _walkheadbob = 0; break;
            case 1: _walkheadbob = 1; break;
            case 2: _walkheadbob = 3; break;
            case 3: _walkheadbob = 4; break;
            case 4: _walkheadbob = 2; break;
            case 5: _walkheadbob = 1; break;
        }
    }
    
    switch(a_attackName)
    {
        case "spit":
            switch(a_attackState)
            {
                case "before":
                    headImage = 1; //(2 frames)
                break;
                
                case "attack":
                    headImage = 1;
                break;
                   
                case "after":
                    headImage = 1 + a_attackAnim/5; ///2 frames
                break;    
            }
            break;
    }
    
    _dirdir = ((faceDir+360)mod 360) div 90;
    
    switch(_dirdir)
    {
        case 0: _hScale = -1; headImage += 3; break;
        case 1: _hScale = 1; headImage += 3; break;
        case 2: _hScale = -1; break;
        case 3: _hScale = 1; break;
    }
    
    draw_sprite_ext(sprite_index, tentaclesImage, dx, dy, _hScale, 1, 0, c_white, 1);
    draw_sprite_ext(sprite_index, headImage, dx, dy - _walkheadbob, _hScale, 1, 0, c_white, 1);
}

combatActor_draw_post();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>19,18</point>
    <point>20,20</point>
  </PhysicsShapePoints>
</object>
