<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2100000</depth>
  <persistent>0</persistent>
  <parentName>o_debugMode</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>COLUMN_BASE_X = 20;
COLUMN_BASE_Y = 35;
COLUMN_EFFECTIVE_X = 260;
COLUMN_EFFECTIVE_Y = 35;
COLUMN_CURRENT_X = 500;
COLUMN_CURRENT_Y = 35;
COLUMN_STATUS_X = 750;
COLUMN_STATUS_Y = 35;

target = noone;
closest = noone;

list_base = ds_list_create();
ds_list_add(list_base, STAT_BASE_HP);
ds_list_add(list_base, STAT_BASE_LEVEL);
ds_list_add(list_base, STAT_BASE_SPEED);
ds_list_add(list_base, STAT_BASE_WEIGHT);
ds_list_add(list_base, "");
ds_list_add(list_base, STAT_BASE_GUTS);
ds_list_add(list_base, STAT_BASE_MIGHT);
ds_list_add(list_base, STAT_BASE_AGILE);
ds_list_add(list_base, STAT_BASE_LUCK);
ds_list_add(list_base, STAT_BASE_PIETY);
ds_list_add(list_base, "");
ds_list_add(list_base, STAT_BASE_RESISTANCE_NORMAL);
ds_list_add(list_base, STAT_BASE_RESISTANCE_BIO);
ds_list_add(list_base, STAT_BASE_RESISTANCE_CYBER);
ds_list_add(list_base, STAT_BASE_RESISTANCE_MENTAL);
ds_list_add(list_base, STAT_BASE_RESISTANCE_ZAUBER);
ds_list_add(list_base, STAT_BASE_RESISTANCE_COSMIC);
ds_list_add(list_base, "");
ds_list_add(list_base, STAT_BASE_RESISTANCE_KNOCKBACK);
ds_list_add(list_base, STAT_BASE_RESISTANCE_STAGGER);
ds_list_add(list_base, "");
ds_list_add(list_base, STAT_BASE_VULN_NORMAL);
ds_list_add(list_base, STAT_BASE_VULN_BIO);
ds_list_add(list_base, STAT_BASE_VULN_CYBER);
ds_list_add(list_base, STAT_BASE_VULN_MENTAL);
ds_list_add(list_base, STAT_BASE_VULN_ZAUBER);
ds_list_add(list_base, STAT_BASE_VULN_COSMIC);

list_effective = ds_list_create();
ds_list_copy(list_effective, list_base);
ds_list_add(list_effective, "");
ds_list_add(list_effective, STAT_EFFECTIVE_MAX_HP);
ds_list_add(list_effective, STAT_EFFECTIVE_ENCUMBERANCE);

list_current = ds_list_create();
ds_list_add(list_current, STAT_CURRENT_HP);
ds_list_add(list_current, STAT_CURRENT_KNOCKBACK);

ds_list_add(list_current, STAT_CURRENT_STAGGER_TIME);
ds_list_add(list_current, STAT_CURRENT_STAGGER_HARDNESS);
ds_list_add(list_current, STAT_CURRENT_STAGGER_INSTANT);
ds_list_add(list_current, STAT_CURRENT_STAGGER_SOFT);
ds_list_add(list_current, STAT_CURRENT_STAGGER_HARD);


// Variables for button being hovered
button_hovered = false;
button_image = 2;
button_x = 0;
button_y = 0;

click_time = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Find closest target actor
var cx = o_curs.x + view_xview; // Cursor X in-game
var cy = o_curs.y + view_yview; // Cursor Y in-game
var csx = o_curs.x * global.screen_scale; // Cursor X on-screen
var csy = o_curs.y * global.screen_scale; // Cursor Y on-screen

var dist = 64;
closest = noone;
with (CombatActor) {
    if (!invulnerable &amp;&amp; targetable) {
        var mydist = point_distance(x, y, cx, cy);
        if (mydist &lt; dist) {
            other.closest = id;
            dist = mydist;
        }
    }
}

if (mouse_check_button_pressed(mb_right)) {
    show_debug_message("Selecting combatactor");
    target = closest;
}
else if (!instance_exists(target)) {
    target = noone;
}

// Determine which button is being hovered
button_hovered = false;
var button_effect;
var button_stat;
var button_basestat;

if (target != noone) {
    // Base stat buttons
    if (csx &gt;= COLUMN_BASE_X &amp;&amp; csx &lt; COLUMN_BASE_X + 24 &amp;&amp;
        csy &gt;= COLUMN_BASE_Y &amp;&amp; csy &lt; COLUMN_BASE_Y + 12*ds_list_size(list_base)) {
        var n = ((csy - COLUMN_BASE_Y) / 12) div 1;
        button_stat = ds_list_find_value(list_base, n);
        if (button_stat != "") {
            button_hovered = true;
            button_basestat = true;
            if (csx &gt;= COLUMN_BASE_X + 12) {
                button_effect = 1;
                button_x = COLUMN_BASE_X + 12;
                button_y = COLUMN_BASE_Y + 12*n;
                button_image = 2;
            }
            else {
                button_effect = -1;
                button_x = COLUMN_BASE_X;
                button_y = COLUMN_BASE_Y + 12*n;
                button_image = 3;
            }
        }
    }

    // Current stat buttons
    if (csx &gt;= COLUMN_CURRENT_X &amp;&amp; csx &lt; COLUMN_CURRENT_X + 24 &amp;&amp;
        csy &gt;= COLUMN_CURRENT_Y &amp;&amp; csy &lt; COLUMN_CURRENT_Y + 12*ds_list_size(list_current)) {
        var n = floor((csy - COLUMN_CURRENT_Y) / 12);
        button_stat = ds_list_find_value(list_current, n);
        if (button_stat != "") {
            button_hovered = true;
            button_basestat = false;
            if (csx &gt;= COLUMN_CURRENT_X + 12) {
                button_effect = 1;
                button_x = COLUMN_CURRENT_X + 12;
                button_y = COLUMN_CURRENT_Y + 12*n;
                button_image = 2;
            }
            else {
                button_effect = -1;
                button_x = COLUMN_CURRENT_X;
                button_y = COLUMN_CURRENT_Y + 12*n;
                button_image = 3;
            }
        }
    }
}


if (mouse_check_button(mb_left)) {
    if (click_time == 0 || click_time &gt; 30) {
        if (button_hovered) {
            if (button_basestat) {
                scr_stats_setBaseStat(target, button_stat, scr_stats_getBaseStat(target, button_stat) + button_effect);
            }
            else {
                scr_stats_setCurrentStat(target, button_stat, scr_stats_getCurrentStat(target, button_stat) + button_effect);
            }
            audio_play_sound_ext("sn_talk1", 100, false);
        }
    }
    click_time++;
}
else {
    click_time = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

// Draw title
draw_set_font(global.fn_2)
draw_text(2, 2 + 10*0,  "STAT INSPECTOR");
if (target == noone) {
    draw_text(2, 2 + 10*1,  "Right click to select combatactor");
}
else {
    var i, s;

    // Draw headers
    draw_set_font(global.fn_2);
    draw_text(COLUMN_BASE_X, 25, "BASE STATS");
    draw_text(COLUMN_EFFECTIVE_X, 25, "EFFECTIVE STATS");
    draw_text(COLUMN_CURRENT_X, 25, "CURRENT STATS");
    draw_text(COLUMN_STATUS_X, 25, "STATUS EFFECTS");

    draw_set_font(global.fn_2);

    // Base stats
    var m = target.stats_base;
    for (var i = 0; i &lt; ds_list_size(list_base); i++) {
        s = ds_list_find_value(list_base, i);
        if (s != "") {
            draw_sprite(s_statInspector_icon, 1, COLUMN_BASE_X,      COLUMN_BASE_Y + 12*i);
            draw_sprite(s_statInspector_icon, 0, COLUMN_BASE_X + 12, COLUMN_BASE_Y + 12*i);
            draw_text(COLUMN_BASE_X + 26,       COLUMN_BASE_Y + 12*i +2,  string_upper(s));
            draw_text(COLUMN_BASE_X + 26 + 170, COLUMN_BASE_Y + 12*i +2,  ds_map_find_value(m, s));
        }
    }

    // Effective stats
    var m = target.stats_effective;
    for (var i = 0; i &lt; ds_list_size(list_effective); i++) {
        s = ds_list_find_value(list_effective, i);
        if (s != "") {
            draw_text(COLUMN_EFFECTIVE_X,       COLUMN_EFFECTIVE_Y + 12*i +2,  string_upper(s));
            draw_text(COLUMN_EFFECTIVE_X + 170, COLUMN_EFFECTIVE_Y + 12*i +2,  ds_map_find_value(m, s));
        }
    }

    // Current
    var m = target.stats_current;
    for (var i = 0; i &lt; ds_list_size(list_current); i++) {
        s = ds_list_find_value(list_current, i);
        if (s != "") {
            draw_sprite(s_statInspector_icon, 1, COLUMN_CURRENT_X,      COLUMN_CURRENT_Y + 12*i);
            draw_sprite(s_statInspector_icon, 0, COLUMN_CURRENT_X + 12, COLUMN_CURRENT_Y + 12*i);
            draw_text(COLUMN_CURRENT_X + 26,       COLUMN_CURRENT_Y + 12*i +2,  string_upper(s));
            draw_text(COLUMN_CURRENT_X + 26 + 170, COLUMN_CURRENT_Y + 12*i +2,  ds_map_find_value(m, s));
        }
    }
    
    // STATUS EFFECTS
    for (var i = 0; i &lt; ds_list_size(target.list_status_effect); i += 1) 
    {
        var map, scr;
        map = ds_list_find_value(target.list_status_effect, i);
        scr = ds_map_find_value(map, "script");
        draw_text(COLUMN_STATUS_X + 26,       COLUMN_STATUS_Y + 12*i +2,  script_get_name(scr));
        draw_text(COLUMN_STATUS_X + 26 + 170,       COLUMN_STATUS_Y + 12*i +2, string(ds_map_find_value(map, "timer")));
        //script_execute(scr, map, self.id, "draw", NULL);
    }

    // Draw hovered button (if any)
    if (button_hovered) {
        draw_sprite(s_statInspector_icon, button_image, button_x, button_y);
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (target != noone &amp;&amp; instance_exists(target)) {
    draw_set_color(c_white);
    draw_set_alpha(1);
    draw_circle(target.x, target.y, 24, true);
}

if (closest != noone &amp;&amp; instance_exists(closest)) {
    draw_set_color(c_red);
    draw_set_alpha(1);
    draw_circle(closest.x, closest.y, 22, true);
    draw_set_color(c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
