<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1661992960</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //
//instance_create(x, y, o_rm_score_tally_effect);
variable = irandom(2);
current_point = 0;
reset_screen = false;
screen_scroll_add = 0;
screen_scroll_add_slow = 0;
screen_scroll_end = 0;
free_scroll = false;
point_total = 0;

// Scoring phase //
timer_show_name = 15;
timer_show_alignment = 0;
timer_show_description = 0;
timer_show_points = 0;
timer_tally_score = 0;
timer_show_total = 0;
timer_reset_screen = 0;
timer_screen_scroll = 0;

// Appear //
for (i=0; i&lt;10; i+=1;) 
    {
    appear_points[i] = false;
    effect_alpha_points[i] = 0;
    effect_scale_points[i] = 0.75;
    position_base_points[i] = 80 + i * 20;
    position_effect_points[i] = 10;
    }
appear_name = false;
appear_alignment = false;
appear_total = false;

effect_alpha_name = 0;
effect_scale_name = 1.0;
effect_alpha_alignment = 0;
effect_scale_alignment = 0.75;
effect_alpha_total = 1;
effect_scale_total = 1;

position_base_name = 22;
position_effect_name = 10;
position_base_alignment = 70;
position_effect_alignment = 10;
position_base_total = 200;
position_effect_total = 10;

screen_scroll = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //
switch (variable)
    {
    // BBALL LAW //
    case 0:
        // Descriptions //
        goal_name = "B-Ball";
        alignment_description = "To promote sportsmanship and fair play as the B-ball Amballsador.";
        points_description[0] = "Games won.";
        points_description[1] = "Overall record.";
        points_description[2] = "Championships won.";
        points_description[3] = "Close games.";
        points_description[4] = "League expansion.";
        points_description[5] = "Courts built.";
        points_description[6] = "Good B-ball deeds done.";
        points_description[7] = "B-ball evangelism.";
        
        // Points awwarded //
        points[0] = irandom(100);
        points[1] = irandom(100);
        points[2] = irandom(100);
        points[3] = irandom(100);
        points[4] = irandom(100);
        points[5] = irandom(100);
        points[6] = irandom(100);
        points[7] = irandom(100);

        // Rubrics //
        rubric[0] = irandom(10);
        rubric[1] = irandom(10);
        rubric[2] = irandom(10);
        rubric[3] = irandom(10);
        rubric[4] = irandom(10);
        rubric[5] = irandom(10);
        rubric[6] = irandom(10);
        rubric[7] = irandom(10);
        
        // Number of different point categories, array size //
        points_count = 8;
        
        // Talles points //
        for (i=0; i&lt;points_count; i+=1;) points_tallied[i] = 0;
    break;
    
    // BBALL CHAOS //
    case 1:
        // Descriptions //
        goal_name = "B-Ball";
        alignment_description = "To change the game forever as the most dominant, explosive B-ball player the sport has ever known." 
        points_description[0] = "Games won.";
        points_description[1] = "Overall record.";
        points_description[2] = "Championships won.";
        points_description[3] = "Dominant victories.";
        points_description[4] = "No pain, no gain.";
        points_description[5] = "Game rules elevated.";
        points_description[6] = "Chaos Dunks performed.";
        
        // Points awwarded //
        points[0] = irandom(100);
        points[1] = irandom(100);
        points[2] = irandom(100);
        points[3] = irandom(100);
        points[4] = irandom(100);
        points[5] = irandom(100);
        points[6] = irandom(100);
        
        // Rubrics //
        rubric[0] = irandom(10);
        rubric[1] = irandom(10);
        rubric[2] = irandom(10);
        rubric[3] = irandom(10);
        rubric[4] = irandom(10);
        rubric[5] = irandom(10);
        rubric[6] = irandom(10);
        
        // Number of different point categories, array size //
        points_count = 7;
        
        // Talles points //
        for (i=0; i&lt;points_count; i+=1;) points_tallied[i] = 0;
    break;
    
    // CYBERDWARF //
    case 2:
        // Descriptions //
        goal_name = "Cyberdwarf";
        alignment_description = "To follow Cyberdwarf and be his eternal comrade.";
        points_description[0] = "Cyberdwarfs met.";
        points_description[1] = "Identities determined by Cyberdwarfs.";
        points_description[2] = "Cyberdwarfs alive.";
        points_description[3] = "Cyberdwarfs installed.";
        points_description[4] = "Are Cyberdwarf.";
        points_description[5] = "Cyberspear pieces collected.";
        points_description[6] = "Cyberspears completed.";
        points_description[7] = "Cyberdwarfs reformatted.";
        points_description[8] = "Cyberdwarfs unmet.";
        points_description[9] = "Cyberdwarfs slain";
        
        // Points awwarded //
        points[0] = irandom(100);
        points[1] = irandom(100);
        points[2] = irandom(100);
        points[3] = irandom(100);
        points[4] = irandom(100);
        points[5] = irandom(100);
        points[6] = irandom(100);
        points[7] = irandom(100);
        points[8] = irandom(100);
        points[9] = irandom(100);

        // Rubrics //
        rubric[0] = irandom(10);
        rubric[1] = irandom(10);
        rubric[2] = irandom(10);
        rubric[3] = irandom(10);
        rubric[4] = irandom(10);
        rubric[5] = irandom(10);
        rubric[6] = irandom(10);
        rubric[7] = irandom(10);
        rubric[8] = irandom(10);
        rubric[9] = irandom(10);
        
        // Number of different point categories, array size //
        points_count = 10;
        
        // Talles points //
        for (i=0; i&lt;points_count; i+=1;) points_tallied[i] = 0;
    break;
    }
    
// Scroll end //
screen_scroll_end = 0;

/*Candy

Candy eaten
Pro-Candy Choices
Recipes collected
Pockets filled
Candy Relief Aid

Vengeance

Enemies killed
Quantum Atwoody Slain
Combat rolls
Pro-Vengeance choices
Duergar Ganks

Clispaeth

Priests talked to
Pro-Clisp choices
Slag dwarfs saved
Money donated
Piety

Gun's

Gun's picked up
Gun's Fused
Shots fired
Materials discovered
Pro-Gun's Choices

B-Ball

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Prob won't need in the end //
global.event = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Debug //
if scr_input_check_pressed(KEYID_HOLSTER, PLAYER1) then 
    {
    global.event = false;
    with o_rm_score_tally_effect instance_destroy();
    instance_destroy();
    }

// Free scrolling //
if free_scroll = true then
    {
    if screen_scroll &gt; 10 then
        {
        if mouse_wheel_up() then screen_scroll -= 10;
        }
    if screen_scroll &lt; screen_scroll_end then
        {
        if mouse_wheel_down() then screen_scroll += 10;
        }
    }
    
// Timer before screen scroll can commence //
if timer_screen_scroll &gt; 0 then timer_screen_scroll -= dt();

// Show name //
if timer_show_name &gt; 0 then
    {
    // Tick down //
    timer_show_name -= dt();
    
    // Event //
    if timer_show_name &lt;= 0 then
        {
        appear_name = true;
        timer_show_alignment = 15;
        }
    }
    
// Show alignment //
if timer_show_alignment &gt; 0 then
    {
    // Tick down //
    timer_show_alignment -= dt();
    
    // Event //
    if timer_show_alignment &lt;= 0 then
        {
        appear_alignment = true;
        timer_show_points = 15;
        }
    }
    
// Show points //
if timer_show_points &gt; 0 then
    {
    // Tick down //
    timer_show_points -= dt();
    
    // Event //
    if timer_show_points &lt;= 0 then
        {
        if current_point &lt; (points_count) then
            {
            appear_points[current_point] = true;
            current_point += 1;
            timer_show_points = 10;
            if current_point &gt;= 8 then 
                {
                timer_screen_scroll = 0.5;
                screen_scroll_add = 20;
                }
            } 
        else
            {
            timer_tally_score = 20;
            timer_reset_screen = 10;
            current_point = 0;
            }
        }
    }
    
// Reset screen //
if timer_reset_screen &gt; 0 then
    {
    // Tick down //
    timer_reset_screen -= dt();
    
    // Event //
    if timer_reset_screen &lt;= 0 then reset_screen = true;
    }
    
// Score tally //
if timer_tally_score &gt; 0 then
    {
    // Tick down //
    timer_tally_score -= dt();
    
    // Count em //
    if timer_tally_score &lt;= 0 then
        {
        if current_point &lt; (points_count) then
            {
            if points[current_point] &gt; 0 then
                {
                points[current_point] -= 1;
                points_tallied[current_point] += rubric[current_point];
                if points[current_point] = 0 then timer_tally_score = 5;
                else 
                    {
                    timer_tally_score = 0.1;
                    if !audio_is_playing_ext("sn_bb_scoretally") then audio_play_sound_ext("sn_bb_scoretally", 1, false);
                    } 
                }
            else
                {
                current_point += 1;
                timer_tally_score = 10;
                if current_point &gt;= 8 and current_point &lt; points_count then 
                    {
                    audio_play_sound_ext("sn_cc_wizard_arms", 0, false);
                    timer_screen_scroll = 0.5;
                    if current_point = 8 then screen_scroll_add = 20; 
                    else screen_scroll_add = 20;
                    }
                }
            }
        else
            {
            // All points added to the pool before the final score //
            current_point = 0;
            for (i=0; i&lt;points_count; i+=1;) 
                {
                point_total += points_tallied[current_point];
                current_point += 1;
                }
            if current_point &gt;= 8 then 
                {
                audio_play_sound_ext("sn_cc_grandpa_select1", 0, false);
                //timer_screen_scroll = 0.5;
                //screen_scroll_add_slow = 20;
                timer_show_total = 15;
                screen_scroll_end = screen_scroll;
                }
            else timer_show_total = 10;
            }
        }
    }
   
// Total score //
if timer_show_total &gt; 0 then
    {
    // Tick down //
    timer_show_total -= dt();
    
    // Show it //
    if timer_show_total &lt;= 0 then 
        {
        free_scroll = true;
        appear_total = true;
        }
    }
    
// Screen scrolling downwards //
if timer_screen_scroll &lt;= 0 then
    {
    // Normal scroll //
    if screen_scroll_add &gt; 0 then
        {
        // Tick down //
        screen_scroll_add -= 4;
        
        // Move the screen //
        screen_scroll += 4;
        }
        
    // Slow scroll //
    if screen_scroll_add_slow &gt; 0 then
        {
        // Tick down //
        screen_scroll_add_slow -= 2;
        
        // Move the screen //
        screen_scroll += 2;
        }
    }
    
// Reset the screen by moving it back to the top //
if reset_screen = true then
    {
    if screen_scroll &gt; 10 then screen_scroll -= 10;
    else 
        {
        reset_screen = false;
        screen_scroll = 4;
        }
    }
    
// Appearances //
if appear_name = true then
    {
    if effect_scale_name &lt; 2 then effect_scale_name += 0.05;
    if effect_alpha_name &lt; 1 then effect_alpha_name += 0.05;
    if position_effect_name &gt; 0 then position_effect_name -= 1;
    }
if appear_alignment = true then
    {
    if effect_scale_alignment &lt; 1 then effect_scale_alignment += 0.05;
    if effect_alpha_alignment &lt; 1 then effect_alpha_alignment += 0.05;
    if position_effect_alignment &gt; 0 then position_effect_alignment -= 1;
    } 
for (i=0; i&lt;points_count; i+=1;)
    {
    if appear_points[i]= true then
        {
        if effect_scale_points[i] &lt; 1 then effect_scale_points[i] += 0.1;
        if effect_alpha_points[i] &lt; 1 then effect_alpha_points[i] += 0.2;
        if position_effect_points[i] &gt; 0 then position_effect_points[i] -= 1;
        }
    }
if appear_total = true then
    {
    if effect_scale_total &lt; 2 then effect_scale_total += 0.15;
    if effect_alpha_total &lt; 1 then effect_alpha_total += 0.1;
    if position_effect_total &gt; 0 then position_effect_total -= 2;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// BG alpha box //
draw_set_alpha(1); //0.8);
draw_set_color(c_black); //make_color_rgb(0, 20, 60));
draw_rectangle(view_xview - 2, view_yview - 2, view_xview + view_wview + 2, view_yview + view_hview + 2, false);

// Draw alignment //
scr_font(global.fn_2, make_color_rgb(60, 200, 230), fa_center, fa_bottom);
draw_set_alpha(effect_alpha_alignment);
draw_text_ext_transformed(view_xview + 192, view_yview + position_base_alignment + position_effect_alignment - screen_scroll, alignment_description, -1, 360, effect_scale_alignment, effect_scale_alignment, 0);

// Draw points //
draw_set_valign(1);
draw_set_color(c_white);
for (i=0; i&lt;points_count; i+=1;) 
    {
    draw_set_alpha(effect_alpha_points[i]);
    draw_set_font(global.fn_2);
    draw_set_color(c_white);
    draw_set_halign(fa_left);
    draw_text_ext(view_xview + 15, view_yview + position_base_points[i] + position_effect_points[i] - screen_scroll, points_description[i], -1, 240);
    draw_text(view_xview + 320, view_yview + position_base_points[i] + position_effect_points[i] - screen_scroll, string(rubric[i]));
    draw_set_halign(fa_right);
    draw_text(view_xview + 316, view_yview + position_base_points[i] + position_effect_points[i] - screen_scroll, string(points[i]) + " x");
    draw_set_font(global.fn_1);
    draw_set_color(c_red);
    draw_set_halign(fa_left);
    draw_text(view_xview + 350, view_yview + position_base_points[i] + position_effect_points[i] - screen_scroll, string(points_tallied[i]));
    }

// Frames //
draw_sprite_ext(s_rmscore_frame, 0, view_xview, view_yview, 1, 1, 0, c_white, 1);
    
// Text alignemnts //
draw_set_halign(fa_center);
draw_set_valign(fa_center);

// Draw title name //
draw_set_font(global.fn_1);
draw_set_color(c_green);
draw_set_alpha(effect_alpha_name);
draw_text_transformed(view_xview + 192, view_yview + position_base_name + position_effect_name, goal_name, effect_scale_name, effect_scale_name, 0);
    
// Draw total score //
draw_set_font(global.fn_1);
draw_set_alpha(effect_alpha_total);
draw_set_color(c_white);
draw_set_halign(fa_right);
draw_text_transformed(view_xview + 90, view_yview + 228, "Total score:", 1, 1, 0);
draw_set_color(c_red);
draw_set_halign(fa_left);
draw_text_transformed(view_xview + 102, view_yview + 228, point_total, 1, 1, 0);



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
