<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_duergar_head</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_enemygroup_duergars</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////you get all the default variables from EnemyCombatActor
event_inherited();

// Enemy stats
scr_enemyDB_statsGet(enemyBuild);

// Enemy configurations
scr_entity_setZHitbox(0, 24);
scr_entity_setMovementCollisionShape_circle(12);

shield_equipped = false;
shield_direction = 0;

anim = 0;
animSpd = 0.2;

pType = 0;//choose(0,0,irandom(8));
headSpr = s_duergar_head;
headType = choose(0,irandom(5));
bodyType = 0; // Default duergar body

weaponType = 0;//choose(0,1,2,3,4,5);
armTypeR = 0;  //choose(0,0,1,2);
armTypeL = 0;  //choose(armTypeR,armTypeR,0,1,2);

deathSound = "duergar_death";
damageSound = "duergar_grunt";

p_bulletOz = 18;

var conf, attacks, attack, prox;
prox = scr_AI_addPassiveState(scr_AI_passive_proximity);
prox[? "sndAlertSound"] = "duergar_alert";

scr_AI_addActiveState(scr_AI_active_approach);
activeHangback = scr_AI_addActiveState(scr_AI_active_hangback);
activeHangback[? "switchPriority"] = 10;
activeHangback[? "switchRemoveMaxDist"] = 150;
activeHangback[? "switchAddMaxDist"] = 110;
activeHangback[? "doPauses"] = false;

// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// Shot
var shot = scr_AI_addAction(scr_AI_action_shot);
shot[? "burst"] = 5;
shot[? "burstRnd"] = 4;
shot[? "precision"] = 12;
shot[? "beforeTime"] = .3;
shot[? "afterTime"] = .3;
shot[? "gunRange"] = 14 + 8;
shot[? "sndAttackWarn"] = "duergar_attack"; //attacking scream (desperate)
shot[? "sndAttackStrike"] = "duergar_shot";
AI_util_action_setDamage(shot, 4, 0, 0, 1, 10, 50, STAGGER_HARDNESS_SOFT);

// Aim and shoot
attack = scr_AI_switch_standard("new_attack", conf);
var action = scr_AI_addAction(scr_AI_active_aimandshoot);
attack[? "action"] = action; 
action[? "action"] = shot; 

attack[? "distMin"] = 30;
attack[? "distMax"] = 150;
attack[? "cooldownTime"] = 16; 
attack[? "cooldownTimeRnd"] = 9;



//Initiate Animation Entities
scr_entity_animation_new("body");
scr_entity_animation_new("head");
scr_entity_animation_new("left_arm");
scr_entity_animation_new("right_arm");
_body_offset=0;
_head_offset=0;
_leftarm_offset=0;
_rightarm_offset=0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _obj, _dmg;
_obj = instance_place(x,y,vo_friendBullets)

if(_obj != noone)
{
    _dmg = true;    
    if(shield_equipped)
    {
        var _frDir, _diff;
        _frDir = (180 + _obj.direction)mod 360; //point_direction(x,y,_obj.xprevious,_obj.yprevious);
        _diff = abs(scr_math_rdif(_frDir,shield_direction+45));
        global.angleDiff = _diff;
        if(_diff&lt;60)
        {
            _dmg = false;
            _tob = instance_create(_obj.x,_obj.y,o_fakeBullet);
            _tob.image_xscale = _obj.image_xscale*0.7;
            _tob.image_yscale = _obj.image_yscale*0.7;
            _tob.direction = shield_direction+random(90);
            _tob.speed = _obj.speed;
            with(_obj){instance_destroy();}
        }
    }
    
    if(_dmg)
    {
        // TODO: Cause damage here! Only if shot was not blocked. 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///On death execute the following...
if (duergarName != "") Duergar("kill", duergarName);
var _obj, _dx, _dy;
repeat (3) //Until there are "gibs" made, use a bunch of blood splatter for killing
{
    _dx = x - 8 + floor(random(16));
    _dy = y - 8 + floor(random(16));
    _obj = instance_create(_dx, _dy, o_FX);
    _obj.sprite_index = s_fx_bloodBurst;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
}

// Mines streamlining thing //
if scr_area_get() = "min" then with InteractiveActor duergar_mines_check = 1;

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

var _col,pt2x,pt2y,pt3x,pt3y,_hScale,_frm,_hoff,_hFrm,_showLArm,_showRArm,_bodyFrm,_gunImg,_xoff;
_col = image_blend;

_frm = 0;
_hScale = 1;
_hoff = 0;
_hFrm = 0;

_aFrmR = 0;
_aFrmL = 0;
_bodyFrm = 0;

_showLArm = true;
_showRArm = true;

// Down-facing offsets
_body_offset = pType*12;
_rightarm_offset = 4;
_leftarm_offset = 0;
_head_offset = headType*2;

// Adjust for direction
_dirdir = ((faceDir+360)mod 360) div 90;
_odir = ((faceDir+360)mod 360);

switch(_dirdir)
{
    case 0: _hScale = -1; _body_offset += 5; _rightarm_offset = 12; _leftarm_offset = 8; _head_offset += 1; _bodyFrm = 1; break;
    case 1: _hScale = 1; _body_offset += 5;  _rightarm_offset = 12; _leftarm_offset = 8; _head_offset += 1; _bodyFrm = 1; break;
    case 2: _hScale = -1; _bodyFrm = 0; break;
    case 3: default: _hScale = 1; _bodyFrm = 0; break;
}
_bodyFrm = (bodyType * 2) + _bodyFrm;

// Shield's-halder
if(shield_equipped) {
    if(isBlocking)
    {
        shield_direction = faceDir div 90 * 90;
    }
    else
    {
        shield_direction = ((faceDir+90)mod 360) div 90 * 90;
    }
    
    switch(_dirdir)
    {
        case 0: case 1: _leftarm_offset = 17; break;
        case 2: case 3: default: _rightarm_offset = 16; break;
    }
}

// Set core sprite's animation frames
if(a_attackName == "stagger")
{
    scr_entity_animation_setSpeed("body", 0);
    scr_entity_animation_setRange("body", _body_offset+1, 1);
    scr_entity_animation_setSpeed("head", 0);
    scr_entity_animation_setRange("head", _head_offset, 1);
    scr_entity_animation_setSpeed("left_arm", 0);
    scr_entity_animation_setRange("left_arm", _leftarm_offset, 1);
    scr_entity_animation_setSpeed("right_arm", 0);
    scr_entity_animation_setRange("right_arm", _rightarm_offset, 1);
}
else
{
    if (AI_stateTopType == AI_STATETYPE_ACTION) {
               
        scr_entity_animation_setSpeed("body", 1);
        scr_entity_animation_setRange("body", _body_offset, 1);
        scr_entity_animation_setSpeed("head", 1);
        scr_entity_animation_setRange("head", _head_offset, 1);
        
        scr_entity_animation_setSpeed("left_arm", 1);
        scr_entity_animation_setRange("left_arm", _leftarm_offset, 1);
        scr_entity_animation_setSpeed("right_arm", 1);
        scr_entity_animation_setRange("right_arm", _rightarm_offset, 1);

    }
    else if(a_walking)
    {
        scr_entity_animation_setSpeed("body", 1);
        scr_entity_animation_setRange("body", _body_offset+1, 4);
        scr_entity_animation_setSpeed("head", 1);
        scr_entity_animation_setRange("head", _head_offset, 1);
        _hoff = floor(scr_entity_animation_getImage("head") mod 2);
        
        scr_entity_animation_setSpeed("left_arm", 1);
        if (_leftarm_offset &lt; 16) scr_entity_animation_setRange("left_arm", _leftarm_offset, 4);
        else scr_entity_animation_setRange("left_arm", _leftarm_offset, 1);
        scr_entity_animation_setSpeed("right_arm", 1);
        if (_rightarm_offset &lt; 16) scr_entity_animation_setRange("right_arm", _rightarm_offset, 4);
        else scr_entity_animation_setRange("right_arm", _rightarm_offset, 1);
    }
    else
    {
        scr_entity_animation_setSpeed("body", 0);
        scr_entity_animation_setRange("body", _body_offset, 1);
        scr_entity_animation_setSpeed("head", 0);
        scr_entity_animation_setRange("head", _head_offset, 1);
        scr_entity_animation_setSpeed("left_arm", 0);
        scr_entity_animation_setRange("left_arm", _leftarm_offset, 1);
        scr_entity_animation_setSpeed("right_arm", 0);
        scr_entity_animation_setRange("right_arm", _rightarm_offset, 1);
    }
}


// Shield facing up
if(shield_equipped)
{
    switch(shield_direction)
    {
        case 0:
            draw_sprite_ext(s_duergar_shield,1,dx,dy,-1,1,0,c_white,1);
            break;
        case 90:
            draw_sprite_ext(s_duergar_shield,1,dx,dy,1,1,0,c_white,1);
            break;
    }
}

// Gun facing up
if(I_aAI_aiState != "hangback")
{
    if(_odir&lt;180)
    {
        _gunImg = 0;
        _xoff = 0;
        _showRArm = false;
        if(_odir&gt;90)
        {
            _gunImg = _odir div 30 - 3;
            _xoff = 0 - _gunImg*2;
        }
        else
        {
            _gunImg = 2 - (_odir div 30);
            _xoff = _gunImg*2;
        }
        
        draw_sprite_ext(s_duergar_gun,_gunImg,dx+_xoff,dy-13+_hoff,_hScale,1,0,c_white,1);
    }
    
}


draw_set_alpha(1);

/// Rigth Arm
if (_showRArm)
{
    _fr = scr_entity_animation_getImage("right_arm");
    draw_sprite_ext(s_duergar_arms,_fr,dx,dy-17+_hoff,_hScale,1,0,_col,1);
}

draw_sprite_ext(s_duergar_legs,scr_entity_animation_getImage("body"),dx,dy+1,_hScale,1,0,_col,1);
draw_sprite_ext(s_duergar_body,_bodyFrm,dx,dy-13+_hoff,_hScale,1,0,_col,1);
draw_sprite_ext(headSpr,scr_entity_animation_getImage("head"),dx,dy-19+_hoff,_hScale,1,0,_col,1);

// Shield facing down
if(shield_equipped)
{
    switch(shield_direction)
    {
        case 180:
            draw_sprite_ext(s_duergar_shield,0,dx,dy,-1,1,0,c_white,1);
            break;
        case 270:
            draw_sprite_ext(s_duergar_shield,0,dx,dy,1,1,0,c_white,1);
            break;
    }
}

// Gun facing down
if(I_aAI_aiState != "hangback")
{
    if(_odir&gt;=180)
    {
        _gunImg = 0;
        _xoff = 0;
        _showLArm = false;
        if(_odir&gt;270)
        {
            _gunImg = _odir div 30 - 6;
            _xoff = (_gunImg-2)*2;
        }
        else
        {
            _gunImg = 11 - (_odir div 30);
            _xoff = 0- (_gunImg-2)*2;
        }
        
        draw_sprite_ext(s_duergar_gun,_gunImg,dx+_xoff,dy-13+_hoff,_hScale,1,0,c_white,1);
    }
}

// Left arm
if (_showLArm)
{
    _fr = scr_entity_animation_getImage("left_arm");
    draw_sprite_ext(s_duergar_arms,_fr,dx,dy-17+_hoff,_hScale,1,0,_col,1);
}


combatActor_draw_post();



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,23</point>
    <point>20,20</point>
  </PhysicsShapePoints>
</object>
