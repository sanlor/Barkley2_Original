<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_rainControl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000002</depth>
  <persistent>0</persistent>
  <parentName>o_effect_smog</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup stuff //
event_inherited();
basCol = make_color_rgb(180, 180, 230);
basColR = color_get_red(basCol);
basColG = color_get_green(basCol);
basColB = color_get_blue(basCol);


interval = 2;
timer_splash = 1;
timer_check_previous = 1;
timer_end_rain = 0;
stop_sound = false;

///PROPERTIES TO ADD TO CREATION CODE FOR INSTANCES:
intensity = 0;
rain = false;
sound = "sn_rain_normal01";
type = "light";

// Particle system //
/*
system = part_system_create();
part_system_depth(system, -1000002);

// Paticle emitter //
emitter = part_emitter_create(system);
part_emitter_region(system, emitter, 64, room_width-64, 64, room_height-64, ps_shape_rectangle, ps_distr_linear);

// Particle //
particle = part_type_create();
part_type_alpha3(particle, 0.025, 0.05, 0.02);
part_type_color1(particle, make_color_rgb(200, 200, 210));
part_type_life(particle, 150, 250);
part_type_speed(particle, 0.25, 0.5, 0, 0);
part_type_direction(particle, 0, 360, 0, 0);
part_type_size(particle, 0.75, 1.5, 0, 0);
part_type_sprite(particle, s_effect_smog, false, false, false);

// Some initial rainfog, for map transitions //
part_emitter_region(system, emitter, view_xview - 128, view_xview + 384 + 128, view_yview - 128, view_yview + 240 + 128, ps_shape_rectangle, ps_distr_linear);
part_emitter_burst(system, emitter, particle, irandom(15) + 25);

part_system_automatic_update(system, 0); // Added so it can be paused
// In the future, consider a different method (ie. smaller speeds with 
// updates based on FPS) to get this truly working with delta time
*/

// Rain movement variables //
speed_x = 2;
speed_y = 6;

// Onscreen rain position //
rain_x = 0;
rain_y = 0;
rain_x2 = 0;
rain_y2 = 0;

// Thunder, disabled for now, but it does function BEAUTIFUILLY //
thunder = false;
thunder_effect = 0;
thunder_x = 0;
thunder_y = 0;
thunder_distance = 0;
timer_thunder = 15 + irandom(15);
timer_thunder_sound = 0;

// Alphas //
alpha = 0;
alpha2 = 0;
alpha_rain_dark = 1;

// TNN //
if scr_area_get() == "tnn" then
    {
    // Rain moves //
    if ClockTime() &gt;= 5 and ClockTime() &lt; 6 then 
        {
        rain = true;
        type = "light";
        thunder = 0;
        }
    else if ClockTime() &gt;= 6 and ClockTime() &lt; 7 then
        {
        rain = true;
        type = "normal";
        thunder = 1;
        }
    else if ClockTime() &gt;= 7 and ClockTime() &lt; 8 then
        {
        rain = true;
        type = "heavy";
        thunder = 1;
        }
    else if ClockTime() &gt;= 9 and ClockTime() &lt; 10 then
        {
        rain = true;
        type = "normal";
        thunder = 0;
        }
    else if ClockTime() &gt;= 11 and ClockTime() &lt; 12 then
        {
        rain = true;
        type = "light";
        thunder = 0;
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Remove emitter proper //
//part_emitter_destroy(system,emitter);
//part_system_destroy(system);
//part_type_destroy(particle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Particle effects need to keep generating while paused or they go extinct //
if (instance_exists(o_room_interior) == 0) event_inherited();
if (paused()) exit;

/*
part_system_update(system); //Allows pausing

// Interval //
if interval &gt; 0 and rain = true then
    {
    // Tick down //
    interval -= 1;
    
    // Rain area //
    part_emitter_region(system, emitter, view_xview - 128, view_xview + 384 + 128, view_yview - 128, view_yview + 240 + 128, ps_shape_rectangle, ps_distr_linear);
    
    // Event //
    if interval = 0 then
        {
        part_emitter_burst(system, emitter, particle, irandom(intensity) + intensity / 2);
        interval = irandom(4) + 4;
        }
    }
*/

// Play sound //
if rain = true or global.it_rained_on_previous_map = true then
    {
    // Keep playing sound //
    if !audio_is_playing_ext(sound) and stop_sound = false then audio_play_sound_ext(sound, 10, false);
    
    // Change volume intensity based on if you are indoors or not //
    if type = "indoors" then
        {
        global.sfx_rain_intensity = 0.75;
        audio_sound_gain_ext(sound, global.sfx_rain_intensity, 50);
        }
    else
        {
        global.sfx_rain_intensity = 0.3 + intensity / 50;
        audio_sound_gain_ext(sound, global.sfx_rain_intensity, 50);
        }
    }
else global.sfx_rain_intensity = 0;

// There was rain on previous map but not here,.... or is there? //
if timer_check_previous &gt; 0 then
    {
    // Tick down //
    timer_check_previous -= 1;
    
    // Indoors ? //
    if instance_exists(o_room_interior) then 
        {
        // Stop the outdoors sounds //
        audio_stop_sound_ext("sn_rain_heavy01");
        audio_stop_sound_ext("sn_rain_normal01");
        audio_stop_sound_ext("sn_rain_light01");
        
        // Swap in a interiors rain sound //
        if type = "light" then sound = "sn_rain_light_indoors01";
        else if type = "normal" then sound = "sn_rain_normal_indoors01";
        else if type = "heavy" then sound = "sn_rain_heavy_indoors01";
        type = "indoors";
        intensity = 0;
        
        // Remove particles too //
        //part_emitter_destroy(system,emitter);
        //part_system_destroy(system);
        //part_type_destroy(particle);
        }
    
    // Event //
    if timer_check_previous &lt;= 0 then
        {
        // Check intensity //
        if type != "indoors" then
            {
            if type = "light" then 
                {
                intensity = 10;
                sound = "sn_rain_normal01";
                }
            else if type = "normal" then 
                {
                intensity = 18;
                sound = "sn_rain_normal01";
                }
            else if type = "heavy" then 
                {
                intensity = 25;
                sound = "sn_rain_heavy01";
                }
            }
        
        // Did it rain previously? //
        if global.it_rained_on_previous_map = true and rain = false then
            {
            intensity += 3;
            rain = true;
            global.it_rained_on_previous_map = false;
            timer_end_rain = 30;
            stop_sound = true;
            if audio_is_playing_ext(sound) then audio_sound_gain_ext(sound, 0, 50);
            if audio_is_playing_ext("sn_rain_heavy01") then audio_sound_gain_ext("sn_rain_heavy01", 0, 50);
            if audio_is_playing_ext("sn_rain_normal01") then audio_sound_gain_ext("sn_rain_normal01", 0, 50);
            if audio_is_playing_ext("sn_rain_light01") then audio_sound_gain_ext("sn_rain_light01", 0, 50);
            }
        else if rain = true then 
            {
            global.it_rained_on_previous_map = true;
            }
        }
    }
   
// End the rain //
if timer_end_rain &gt; 0 then
    {
    // Tick down //
    timer_end_rain -= dt();
    alpha_rain_dark -= 0.1;
    
    // Intensity down //
    if intensity &gt; 0 then intensity -= 0.05;
    
    // Event //
    if timer_end_rain &lt;= 0 then 
        {
        audio_stop_sound_ext("sn_rain_heavy01");
        audio_stop_sound_ext("sn_rain_normal01");
        audio_stop_sound_ext("sn_rain_light01");
        rain = false;
        intensity = 0;
        }
    }

// Raindrop splash efects //
if rain = true then
    {
    // Timer for raindrops //
    if timer_splash &gt; 0 then
        {
        // Tick down //
        timer_splash -= dt();
        
        // Event //
        repeat(intensity / 2)
            {
            instance_create(irandom_range(view_xview - 64, view_xview + 448), irandom_range(view_yview - 64, view_yview + 304), o_effect_raindrop_splash);
            timer_splash = random(3) + 2;
            }       
        }
    }
    
// Rain speeds //
if intensity &gt;= 25 then
    {
    speed_x = -(8 + intensity * 0.5);
    speed_y = 24 + intensity * 0.5;
    }
else if intensity &gt;= 18 then
    {
    speed_x = -(6 + intensity * 0.5);
    speed_y = 18 + intensity * 0.5;
    }
else
    {
    speed_x = -(4 + intensity * 0.5);
    speed_y = 12 + intensity * 0.5;
    }
    
// Move the rain //
rain_x += speed_x * dt();
rain_y += speed_y * dt();
rain_x2 += speed_x * dt();
rain_y2 += speed_y * dt();

// Thunder strikes //
if timer_thunder &gt; 0 then
    {
    // Tick down //
    timer_thunder -= dt();
    
    // Event //
    if timer_thunder &lt;= 0 then
        {
        if thunder = true then
            {
            // Thunder effect //
            thunder_effect = 10;
            thunder = 15 + irandom(75);
            thunder_x = irandom(-200) + irandom(room_width) + irandom(200);
            thunder_y = irandom(-200) + irandom(room_height) + irandom(200);
            timer_thunder_sound = 5 + irandom(7);
            
            // Check distance to hoopz //
            if instance_exists(PlayerCombatActor) then
                {
                with PlayerCombatActor other.thunder_distance = distance_to_point(other.thunder_x, other.thunder_y);                    
                }
            else thunder_distance = irandom(1000);
            }
        }
    }

// Thunder sound //
if timer_thunder_sound &gt; 0 then
    {
    // Tick down //
    timer_thunder_sound -= dt();
    
    // Event //
    if timer_thunder_sound &lt;= 0 then
        {
        if string(type) = "indoors" then audio_play_sound_at_xy("thunder_muffled", false, 15, thunder_x, thunder_y); 
        else audio_play_sound_at_xy("thunder", false, 15, thunder_x, thunder_y);
        }
    }
        
// Thunder effect //
if thunder_effect &gt; 0 then thunder_effect -= 1;

// Alhpa //
if alpha &gt; 0 then alpha -= 0.6 * dt();
if alpha2 &gt; 0 then alpha2 -= 0.15 * dt();
if alpha_rain_dark &lt; 1 and timer_end_rain &lt;= 0 then alpha_rain_dark += 0.1;

// Lightning strike flash stuff //
if instance_exists(o_enemyAttack_thunderstrike) or thunder_effect &gt; 0 then alpha_rain_dark = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Adios //
if rain = true then audio_sound_gain_ext(sound, 0, 50);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Screen gets darker during rain //
event_inherited();

// It's raining so...
if (rain)
{
    // ... if you aren't indoors, and there is no thunderstrike going on then the is some screen dimming depending on how heavy the rain is.
    if type != "indoors" and !instance_exists(o_enemyAttack_thunderstrike) and thunder_effect &lt;= 0 then
    {
        draw_set_color(c_black);
        if type = "light" then draw_set_alpha(alpha_rain_dark * 0.1);
        else if type = "normal" then draw_set_alpha(alpha_rain_dark * 0.25);
        else if type = "heavy" then draw_set_alpha(alpha_rain_dark * 0.4);
        draw_rectangle(view_xview - 2, view_yview - 2, view_xview + view_wview + 2, view_yview + view_hview + 2, false);
    }
    
    // Draw rain //
    draw_sprite_tiled_ext(s_effect_rainfall, 1, 0 + rain_x, 0 + rain_y, 1, 1, c_white, (intensity / 40));
    draw_sprite_tiled_ext(s_effect_rainfall, 0, 0 + rain_x2, 0 + rain_y2, 1, 1, c_white, (intensity / 70));
}

// Thunder //
draw_set_color(c_white);
if thunder_distance &lt; 250 then thunder_distance = 0;
else if thunder_distance &gt;= 250 then thunder_distance = 0.1;
else if thunder_distance &gt;= 350 then thunder_distance = 0.15;
else if thunder_distance &gt;= 450 then thunder_distance = 0.2;
else thunder_distance = 0.3;

// Indoors lightning //
if string(type) = "indoors" then
{ 
    switch (thunder_effect)
    {
        case 8: alpha = 0.05 + random(0.05) - thunder_distance; alpha2 = 0.05 - thunder_distance / 2; break;
        case 6: alpha = 0.075 + random(0.05) - thunder_distance; alpha2 = 0.05 - thunder_distance / 2; break;
        case 1: alpha = 0.02 + random(0.05) - thunder_distance; alpha2 = 0.05 - thunder_distance / 2; break;
    }
}
    
// Outdoors lightning
else
{ 
    switch (thunder_effect)
    {
        case 8: alpha = 0.4 + random(0.2) - thunder_distance; alpha2 = 0.2 - thunder_distance / 2; break;
        case 6: alpha = 0.5 + random(0.2) - thunder_distance; alpha2 = 0.2 - thunder_distance / 2; break;
        case 1: alpha = 0.2 + random(0.1) - thunder_distance; alpha2 = 0.1 - thunder_distance / 2; break;
    }
}
    
// Lightning screen flash //
draw_sprite_ext(s_effect_flash_overlay, 0, view_xview + 192, view_yview + 120, 1, 1, 0, c_white, alpha2);
draw_set_alpha(alpha);
draw_rectangle(view_xview - 2, view_yview - 2, view_xview + 386, view_yview + 242, false);
draw_set_alpha(1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>64,64</point>
    <point>64,64</point>
  </PhysicsShapePoints>
</object>
