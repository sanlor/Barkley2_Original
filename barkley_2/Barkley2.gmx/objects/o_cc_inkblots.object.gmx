<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Dont run the event after this for this character //
o_cc_data.event_finished_inkblots = true;

// Phase setup //
phase[0] = 18;
phase[1] = 1;
phase[2] = 0;
phase[3] = 0;

// Phase skipping //
phase_skip_time = 0;
phase_skip_to = 0;
phase_skip = 0;

// Textbox setup //
textbox_written = "";
textbox_goal = "";
textbox_pause = 0;
textbox_position = 0;
textbox_skip = false;  

// Alpha setup //
alpha_textbox = 0;
alpha_textbox_goal = 0;
alpha_textbox_timer = 0;
alpha_event = 0;
alpha_event_goal = 0;

// Other //
o_cc_wizard.alpha_goal = 1;
timer_transition = 0;
timer_active = 0;

inkblots = false;
inkblots_id = irandom(15);
inkblots_asked = 0;
answer_text = 0;
answer_id = 0;

inkblots_x = -384;
goal_inkblots_x = -384;

for (i=0; i&lt;4; i+=1;) option_hover[i] = false;

// Defaults //
text[0] = "I'm going to show you a series of formless ink-blot#pictures. All you have to do is tell me the first#thing that comes to mind for each of these#pictures." 
text[1] = "It's very simple and perhaps even enjoyable.";
text[2] = "Interesting... very interesting. The Rorschach test#does not fall strictly within the lines of traditional#soothsaying, but I believe modern psychology can#be a powerful and insightful tool to gauge the -"
text[3] = " - human psyche. Indeed, I have learned much from#this... and it is my hope that you have as well.";

answer[0, 0] = "Basketball referee";
answer[0, 1] = "Basketball hoop";
answer[0, 2] = "A basketball whistle";
answer[0, 3] = "Basketball jersey";

answer[1, 0] = "Three pointer";
answer[1, 1] = "Two pointer";
answer[1, 2] = "Slam dunk";
answer[1, 3] = "A basketball dunk";

answer[2, 0] = "Jump shot";
answer[2, 1] = "Foul ball";
answer[2, 2] = "Third quarter of a basketball match";
answer[2, 3] = "A be-dunked basketball";

answer[3, 0] = "An ancient basketball secret";
answer[3, 1] = "A lost basketball tome";
answer[3, 2] = "A withered basketball parchment";
answer[3, 3] = "Basketball artifact";

answer[4, 0] = "Basketball shorts";
answer[4, 1] = "Basketball net";
answer[4, 2] = "Basketball court";
answer[4, 3] = "Basketball cheerleader";

answer[5, 0] = "College basketball";
answer[5, 1] = "NBA";
answer[5, 2] = "High school basketball";
answer[5, 3] = "Little league basketball";

answer[6, 0] = "Pre-game warmup";
answer[6, 1] = "Basketball playbook";
answer[6, 2] = "Assistant basketball coach";
answer[6, 3] = "Slam dunk";

answer[7, 0] = "Basketball totem";
answer[7, 1] = "Basketball rune";
answer[7, 2] = "Fun basketball vidcon";
answer[7, 3] = "Basketball song on the radio";

answer[8, 0] = "Bouncing basketball";
answer[8, 1] = "Swooshing basketball";
answer[8, 2] = "Dunked basketball";
answer[8, 3] = "Deflated basketball";

answer[9, 0] = "A cosmic dunk";
answer[9, 1] = "Dribbling through the legs";
answer[9, 2] = "Spectral ref";
answer[9, 3] = "Glowing coach";

answer[10, 0] = "Basketball layup";
answer[10, 1] = "Basketball free throw";
answer[10, 2] = "Basketball half court";
answer[10, 3] = "Basketball sideline";

answer[11, 0] = "Jock jams";
answer[11, 1] = "Very high jump";
answer[11, 2] = "Basketball player";
answer[11, 3] = "Sneaker";

answer[12, 0] = "Somber whistle";
answer[12, 1] = "Energetic whistle";
answer[12, 2] = "Chipper whistle";
answer[12, 3] = "Distraught whistle";

answer[13, 0] = "Bulging basketball muscle";
answer[13, 1] = "Bedazzling basketball muscle";
answer[13, 2] = "Waterproof basketball muscle";
answer[13, 3] = "Eldritch basketball muscle";

answer[14, 0] = "A wise coach";
answer[14, 1] = "A chaotic coach";
answer[14, 2] = "A cryptic coach";
answer[14, 3] = "A wet coach";

answer[15, 0] = "x10 gravity basketball chamber";
answer[15, 1] = "x100 gravity basketball chamber";
answer[15, 2] = "x1000 gravity basketball chamber";
answer[15, 3] = "1/100 gravity basketball chamber";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Phases //
if phase[0] &gt; 0 then
    {
    // Tick down //
    phase[0] -= dt();
    
    // Event //
    if phase[0] &lt;= 0 then
        {
        // Introduction to Inkblots //
        if phase[1] &gt;= 1 and phase[1] &lt;= 2 then scr_cc_textbox(text[phase[1] - 1]);
        
        // Question //
        if phase[1] = 3 then timer_active = 5;
            
        // End speech //
        else if phase[1] &gt;= 4 and phase[1] &lt;= 5 then scr_cc_textbox(text[phase[1] - 2])
        
        // End //
        if phase[1] = 6 then 
            {
            timer_transition = 15;
            phase[2] = 25;
            }
        }
    } 

// Timer active //
if timer_active &gt; 0 then
    {
    // Tick down //
    timer_active -= dt();
    
    // Event //
    if timer_active &lt;= 0 then
        {
        if inkblots_asked &lt; 4 then
            {
            alpha_event_goal = 1;
            answer_id = 0;
            inkblots = true;
            inkblots_id += 1 + irandom(1);
            if inkblots_id &gt; 15 then inkblots_id -= 15;
            inkblots_asked += 1;
            inkblots_x = -384;
            goal_inkblots_x = 0;
            audio_play_sound_ext("sn_cc_inkblots_left", 10, false);
            }
        else
            {
            phase[1] = 4;
            phase[0] = 10;
            alpha_event_goal = 0;
            }
        }
    }
    
// Question //
if inkblots = true then
    {
    // Hovers //
    for (i=0; i&lt;4; i+=1;) option_hover[i] = scr_cc_button_xy(64 + inkblots_x, 335 + inkblots_x, 145 + i * 16, 159 + i * 16);
    
    // Option 1 // 
    if MiniKeyPress("action") then
        {
        for (i=0; i&lt;4; i+=1;)
            {
             if option_hover[i] = true then
                {
                timer_active = 10;
                inkblots = false;
                goal_inkblots_x = 384;
                
                // Character data //
                o_cc_data.character_inkblots[inkblots_id] = i;
                Quest("playerCCInkblot" + string(inkblots_id), i + 1);
                
                // Sound //
                audio_play_sound_ext("sn_cc_inkblots_right", 10, false);
                }
            }
        }
    }

// Move them inkblots and all the rest //
if inkblots_x &lt; goal_inkblots_x then inkblots_x += 16;
if inkblots_x &gt; goal_inkblots_x then 
    {
    inkblots_x -= 16;
    if inkblots &lt;= goal_inkblots_x then audio_play_sound_ext("sn_cc_inkblots_mid", 10, false);
    }
    
// Transition //
if timer_transition &gt; 0 then
    {
    // Tick down //
    timer_transition -= dt();
    
     // Event //
     if timer_transition &lt;= 0 then instance_create(0, 0, o_cc_transition);
     }

// End of this event //
if phase[2] &gt; 0 then
    {
    // Tick down //
    phase[2] -= dt();
    
    // End //
    if phase[2] &lt;= 0 then
        {
        with (o_cc_wizard) event_user(0);
        instance_destroy();
        }
    }

// Skip text with button //
scr_cc_textbox_skip();

// Type it //
scr_cc_textbox_type();

// Move to a next phase //
scr_cc_phase_skip_process();

// Alpha for Textboxes //
if alpha_textbox_timer &gt; 0 then alpha_textbox_timer -= dt();
else
    {
    if alpha_textbox &lt; alpha_textbox_goal then alpha_textbox += 0.1;
    if alpha_textbox &gt; alpha_textbox_goal then alpha_textbox -= 0.1;
    }

// Alpha for Events //
if alpha_event &lt; alpha_event_goal then alpha_event += 0.1;
if alpha_event &gt; alpha_event_goal then alpha_event -= 0.1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Dim the screen //
draw_set_color(c_black);
draw_set_alpha(alpha_event * 0.5);
draw_rectangle(-2, -2, 386, 242, false);

// Draw sprite //
draw_sprite_ext(s_cc_inkblots_page, 0, 192 + inkblots_x, 120, 1, 1, 0, c_white, alpha_event);

// Draw textboxes //
scr_cc_draw_textbox();

// Questions //
if inkblots_id &gt;= 0 then
    {
    // Questions //
    draw_sprite_ext(s_cc_inkblots, inkblots_id, 192 + inkblots_x, 72, 1, 1, 0, c_white, alpha_event);
    
    // Answer texts //
    draw_set_halign(fa_left);
    draw_set_alpha(alpha_event);
    for (i=0; i&lt;4; i+=1;) 
        {
        if option_hover[i] = true then draw_set_color(make_color_rgb(80, 240, 40));
        else draw_set_color(make_color_rgb(210, 210, 210));
        draw_text_ext(91 + inkblots_x, 150 + i * 16, answer[inkblots_id, answer_id + i], -1, 300);
        draw_set_color(make_color_rgb(250, 40, 80));
        draw_text(69 + inkblots_x, 150 + i * 16, string(i));
        draw_text(81 + inkblots_x, 150 + i * 16, "-");
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
