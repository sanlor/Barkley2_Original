<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_archambeau01</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>InteractiveActor</parentName>
  <maskName>s_pedestrian_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //
event_inherited();
shadow_radius = 8;
_disableOutline = true;
_pedestrian = true;
_duergar = true;
scr_actor_unsetRigid(id);

// Set sprite set //
var type = 0;
if type = 0 then {scr_entity_set_pedestrian(s_archambeau01, 0);}
_automatic_animation = true;

// Variables for pushing around hoopz and the pedestrian upon collision of the two //
push_return_to_origin = 0;
push_return_to_origin_cooldown = 0;
push_return_to_origin_treshold = 0;
pushed_x = 0;
pushed_y = 0;
push_player_force = 1;
push_me_force = 1;
push_weight = 1;

// Set movement speed //
move_speed = 3;

// oTHER STUFF //
timer_change = 0;
timer_wait_until_proceeding = 1;
target = 0;
target_reset = false;
target_previous = 0;
target_number = 5;
target_x[0] = 0;
target_y[0] = 0;
target_x[1] = 0;
target_y[1] = 0;
target_x[2] = 0;
target_y[2] = 0;
target_x[3] = 0;
target_y[3] = 0;
target_x[4] = 0;
target_y[4] = 0;
target_x[5] = 0;
target_y[5] = 0;  
pause[0] = false;
pause[1] = false;
pause[2] = false;
pause[3] = false;
pause[4] = false;
pause[5] = false;

turn_into = o_enemy_kobold_small;
name = "";
detect = instance_create(x, y, o_mg_stealth_detection_ring);
detect.host = id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(detect)) Destroy(detect);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Inherit //
event_inherited();

// Pause //
if paused() exit;

// Check for vacant spot //
if timer_wait_until_proceeding &gt; 0 then
    {
    // Tick down //
    timer_wait_until_proceeding -= dt();
    
    // Event //
    if timer_wait_until_proceeding &lt;= 0 then scr_path_set(x, y, target_x[target], target_y[target], move_speed, 0, 2000);        
    }
    
// Check if you have reached the target //
if distance_to_point(target_x[target], target_y[target]) &lt;= 3 and target_reset = false then 
    {
    // Next target //
    target_previous = target;
    if target &lt; target_number then target += 1;
    else target = 0;       
    
    // Pause or not //
    if pause[target_previous] = true then 
        {
        scr_path_delete();
        timer_wait_until_proceeding = 50;
        move_x = 0;
        move_y = 0;
        }
    else 
        {
        timer_wait_until_proceeding = 1;
        move_x = 0;
        move_y = 0;
        }   
        
    // This will only happen once //
    target_reset = true;           
    }
    
// Change //
if timer_change &gt; 0 then
    {
    // Tick down //
    timer_change -= dt();
    
    // Event //
    if timer_change &lt;= 0 then 
        {
        if (name == "")
        {
        instance_create(x, y, turn_into);
        with EnemyCombatActor scr_AI_aggro_configure(9999, 9999, 9999);
        }
        else
        {
        Duergar("spawn", name, x, y);
        }
        instance_destroy();
        }
    } 
    
// Target clear //
if distance_to_point(target_x[target_previous], target_y[target_previous]) &gt;= 16 then target_reset = false;
    
// NPC Push //
scr_pedestrian_push();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,24</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
