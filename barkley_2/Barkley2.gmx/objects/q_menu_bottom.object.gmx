<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2510000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
wid = (SCREEN_WIDTH/4)*3-(SCREEN_WIDTH/5) + 10;
hei = SCREEN_HEIGHT/4;
startX = SCREEN_WIDTH/4;
startY = SCREEN_HEIGHT-40;
targetX = startX;
targetY = SCREEN_HEIGHT-40-hei+10;

startScaleX = 1;
startScaleY = 0;
borderId = 23;

//No touch
Border("generate", borderId, wid, hei);
x = startX;
y = startY;
image_xscale = startScaleX;
image_yscale = startScaleY;
hiding = 0;

surf = surface_create(wid, hei);
surface_set_target(surf);
Border("draw", borderId, 0, 0);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>quickmenu2</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string>"killSurface"</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>surf</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Hide animation;
    hiding = !global.quickmenuShown;

if(hiding == 1){
    if(x == startX and 
        y == startY and 
        image_xscale == startScaleX and
        image_yscale == startScaleY) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(not surface_exists(surf)){
    surf = surface_create(wid, hei);
}

  surface_set_target(surf);
  draw_clear_alpha(c_white,0);

  Border("draw", borderId, 0, 0);

  var viewX = x+view_xview[0];
  var viewY = y+view_yview[0];

  var baseX = 13;
  var baseY = 13;
  var boxWidth = 185;
  var boxHeight = 34;

  var candies = scr_items_getAllOfType(ITEMTYPE_CANDY);
  var candyCount = ds_list_size(candies);

  var candyPos = boxWidth/Jerkin("pockets");
  var candyWidth = 21;
  var candyHeight = 34;
  var candySeparation = 1;

  scr_draw_rect(baseX, baseY, boxWidth, boxHeight, c_orange, 1);
  scr_draw_rect(baseX+1, baseY+1, boxWidth-2, boxHeight-2, c_black, 1);

  var i;
  var hover;
  var boxColor = c_gray;
  var hasCandy = false;
  var click = mouse_check_button_pressed(mb_left);
  var candy = 0;
  var hoverText = "";
  var hoverTextX = 0;
  baseX += candyPos/2 - candyWidth/2;
  for (i = 0; i &lt; (Jerkin("pockets")); i += 1) {
    if (i &lt; ds_list_size(candies)) candy = candies[| i]; else candy = NULL;

    hover = scr_mouse_rect(viewX+baseX, viewY+baseY, viewX+baseX+candyWidth, viewY+baseY+candyHeight);

    if(candy != NULL) {
      if(hover) boxColor = c_yellow;
      else  boxColor = c_orange;
    } else boxColor = c_gray;

    scr_draw_rect(baseX+1, baseY+1, candyWidth-2, candyHeight-2, boxColor, global.quickmenuTextAlpha);
    scr_draw_rect(baseX+2, baseY+2, candyWidth-4, candyHeight-4, c_black, 1);

    if(candy != NULL){
      Candy("draw name", Candy("name", candy), baseX+candyWidth/2, baseY+12, 1, 1, 0, c_white, 1);
      if(hover) {
        if(click) Candy("use", i)
        hoverText = Candy("name", candy);
        hoverTextX = baseX+candyWidth/2;
        //quickmenu2("write", global.fn_7ocs, boxColor, baseX+candyWidth/2, baseY+24, fa_center, fa_middle,  Candy("name", candy));//Item("name",));
      } else {
        quickmenu2("write", global.fn_7ocs, boxColor, baseX+candyWidth/2, baseY+24, fa_center, fa_middle,  string_upper(string_copy(Candy("name", candy),0,4)));//Item("name",));
      }
    } else {
      if(hover) {
        hoverText = "Empty";
        hoverTextX = baseX+candyWidth/2;
        //quickmenu2("write", global.fn_7ocs, c_gray, baseX+candyWidth/2, baseY+24, fa_center, fa_middle,  "Empty");
      }
      else quickmenu2("write", global.fn_7ocs, c_gray, baseX+candyWidth/2, baseY+24, fa_center, fa_middle,  "X");
    }

    baseX += candyPos;
  }
  
  if(hoverText != ""){
    if(hoverText == "Empty") quickmenu2("write", global.fn_7ocs, c_gray, hoverTextX, baseY+24, fa_center, fa_middle,  hoverText);
    else quickmenu2("write", global.fn_7ocs, c_yellow, hoverTextX, baseY+24, fa_center, fa_middle, hoverText);
  }
      
  ds_list_destroy(candies);
  surface_reset_target();

if(hiding == 0) {
    quickmenu2("showAnimation", self, targetX, targetY); 
} else if(hiding == 1){ 
    quickmenu2("hideAnimation", self, startX, startY, startScaleX, startScaleY);
}

draw_surface_ext(surf, view_xview[0]+x, view_yview[0]+y, image_xscale, image_yscale, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
