<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_pedestrian_tnn01</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>InteractiveActor</parentName>
  <maskName>s_pedestrian_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Actor related bullshit //
event_inherited();
shadow_radius = 8;
_pedestrian = true;
scr_actor_unsetRigid(id);
flip = false;
sprite_width_edit = 28;
sprite_height_edit = 56;

//Set sprite from area grab above
global.pedestrianSprite += irandom(2) + 1;
if global.pedestrianSprite &gt;= 29 then global.pedestrianSprite -= 29;
scr_entity_set_pedestrian(s_pedestrian_tnn01, global.pedestrianSprite);

// Animate automagically //
_automatic_animation = true;

// Variables for pushing around hoopz and the pedestrian upon collision of the two //
push_return_to_origin = 0;
push_return_to_origin_cooldown = 0;
push_return_to_origin_treshold = 0;
pushed_x = 0;
pushed_y = 0;
push_player_force = 1;
push_me_force = 1;
push_weight = 1;
waypoint = false;
slowdown = 0;
respotting = false;

// Set movement speed
move_speed = 3;

// Waiting in line //
timer_check_for_spot = 5;
target_spot = o_mg_wait_spot01;
my_processing_time = 400 + irandom(250); //added in random wait times
vikingstad_animation = my_processing_time - 20;
process_complete = false;
timer_prole_spawn = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Inherit //
event_inherited();

// Pause //
if paused() exit;

// Check for vacant spot //
if timer_check_for_spot &gt; 0 then
    {
    // Tick down //
    timer_check_for_spot -= dt();
    
    // Event //
    if timer_check_for_spot &lt;= 0 then
        {
        timer_check_for_spot = 0.1;
        if target_spot.occupied = false and process_complete = false then scr_path_set(x, y, target_spot.x, target_spot.y, move_speed, 0, 256);
        }
    }
    
// My process //
if target_spot = o_mg_wait_spot13 and (move_x + move_y) = 0 then
    {   
    // Process time //
    if my_processing_time &lt;= 999 then
        {
        if my_processing_time &gt; 0 and place_meeting(x, y, o_mg_wait_spot13) then
            {
            // Paperwork end //
            if vikingstad_animation &gt; 0 then
                {
                // Tick down //
                vikingstad_animation -= dt();
                
                // Event //
                if (vikingstad_animation &lt;= 0) o_vikingstad01.state = 3;
                }
    
            // MOVE UP //
            if flip = false then
                {
                _last_direction = UP;
                flip = true;
                
                //scr_entity_animation_set(o_vikingstad01, "pick");
                o_vikingstad01.state = 1;
                } 
            
            // Tick down //
            my_processing_time -= dt();
            
            // Don't process if spot 02 is vacant // Prevents cheating AKA going AFK while on spot 01 //
            if my_processing_time &lt;= 100 then
                {
                if o_mg_wait_spot01.occupied = true and o_mg_wait_spot02.occupied = false then my_processing_time += dt();
                }
                           
            // Process done //
            if my_processing_time &lt;= 0 then
                {
                process_complete = true;
                scr_path_set(x, y, 320, 248, move_speed, 0, 480);
                }
            }
        }
    } 
    
// Leave the office //
if process_complete = true and distance_to_point(320, 244) &lt;= 2 then scr_path_set(x, y, 320, 270, move_speed, 0, 480);   
else if process_complete = true and distance_to_point(320, 270) &lt;= 2 then scr_path_set(x, y, 160, 270, move_speed, 0, 480);  
else if process_complete = true and distance_to_point(160, 270) &lt;= 2 then scr_path_set(x, y, 128, 360, move_speed, 0, 480); 

// Remove //
if y &gt;= 334 and process_complete = true then instance_destroy();
    
// Reaching the target //
if place_meeting(x, y, target_spot) and (move_x + move_y) != 0 and process_complete = false and respotting = false then
    {
    if target_spot = o_mg_wait_spot01 then target_spot = o_mg_wait_spot02;
    else if target_spot = o_mg_wait_spot02 then target_spot = o_mg_wait_spot03;
    else if target_spot = o_mg_wait_spot03 then target_spot = o_mg_wait_spot04;
    else if target_spot = o_mg_wait_spot04 then target_spot = o_mg_wait_spot05;
    else if target_spot = o_mg_wait_spot05 then target_spot = o_mg_wait_spot06;
    else if target_spot = o_mg_wait_spot06 then target_spot = o_mg_wait_spot07;
    else if target_spot = o_mg_wait_spot07 then target_spot = o_mg_wait_spot08;
    else if target_spot = o_mg_wait_spot08 then target_spot = o_mg_wait_spot09;
    else if target_spot = o_mg_wait_spot09 then target_spot = o_mg_wait_spot10;
    else if target_spot = o_mg_wait_spot10 then target_spot = o_mg_wait_spot11;
    else if target_spot = o_mg_wait_spot11 then target_spot = o_mg_wait_spot12;
    else if target_spot = o_mg_wait_spot12 then target_spot = o_mg_wait_spot13;
    slowdown = 5;
    respotting = true;
    }
    
// Slowing down //
if slowdown &gt; 0 then
    {
    // Tick down //
    slowdown -= dt();
    
    // Event //
    if slowdown &lt;= 0 then 
        {
        scr_path_delete();
        move_x = 0;
        move_y = 0;
        respotting = false;
        }
    }
    
// NPC Push //
scr_pedestrian_push();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,24</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
