<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_eventCollision_circle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
trg = 64; // Distance to manhole for it to open state
dir = EAST; // Direction manhole slides
dis = 40; // Distance manhole slides
spd = 40 * 2; // Pixels manhole moves a second

rom = r_gau_NPCVilla01;
gox = 304;
goy = 304;

// No need to edit below
opn = 0; // Open state
opnLst = opn;

cox = 0; // Current cover coordinates
coy = 0;

opx = 0; // Where the manhole slides to in coordinates
opy = 0;

conditional = "";
value = 0;

// Activate only when Hoopz has been a certain distance away from this //
active = false;
timer_active = 5;


// DRAW
col[0] = make_color_rgb(240, 240, 32);
col[1] = make_color_rgb(32, 240, 32);
cou = 0;
couDir = 1;
couTrl = 0;
couTrlTim = 0.2;
dny = 24;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Trail
if (paused()) exit;
couTrl += dt_sec();
while (couTrl &gt; couTrlTim) 
{ 
    couTrl -= couTrlTim; 
    obj = instance_create(x + choose(1, -1) * irandom(12), y + choose(1, -1) * irandom(8), o_effect_drawing_point_particle); 
    obj.image_blend = make_color_rgb(160 + random(40), 220, 120);
}

// PULSATE //
cou += dt_sec() * couDir;
if (cou &gt;= 1) { cou = 1; couDir = -1; }
if (cou &lt;= 0) { cou = 0; couDir = +1; }
image_blend = merge_color(col[0], col[1], cou);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
if (conditional != "")
{
    if (Quest(conditional) != value) exit;
}
if (instance_exists(o_hoopz))
{
    if (global.event == 0) 
    {
        pdt = point_distance(o_hoopz.x, o_hoopz.y, x, y);
        if active = true and pdt &lt;= 16 then event_user(15);
    }
}

// Active //
if timer_active &gt; 0 then timer_active -= dt();
else
    {
    if instance_exists(o_hoopz) then
        {
        if global.event = 0 then
            {
            pdt = point_distance(o_hoopz.x, o_hoopz.y, x, y);
            if pdt &gt;= 32 then active = true;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Build event to teleport
var dum = instance_create(x, y, oDummy);
script = "
MOVETO | o_cts_hoopz | " + string(dum) + " | MOVE_NORMAL
WAIT   | 0
LOOK   | o_cts_hoopz | SOUTH
WAIT   | 0.60
CREATE | o_cts_hoopz_mystic | " +string(x)+ " | " +string(y)+ "
WAIT   | 1
FADE   | 1 | 1
WAIT   | 1
Teleport | " + string(rom) + " | " + string(gox) + " | " + string(goy) + " | 0.5
";
Cinema("run", script);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(s_drawing_point, 1, x, y, 1, 1, 0, image_blend, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
