<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000010</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //
target_x = x;
target_y = y;
previous_x = -1;
previous_y = y;
alpha = 0.5;
first = false;
active = true;

// Other //
timer_start = 7;
timer_end = 0;
timer_fade = 0;
timer_destroy = 0;
timer_trajectory = 15;
draw_space = false;

for (i=0; i&lt;20; i+=1;)
    {
    line_sx[i] = x;
    line_sy[i] = y;
    line_ex[i] = x;
    line_ey[i] = y;
    }

// New line //
number_of_lines = 0;
instance_create(x, y, o_mg_star_transition);

planet_name = "";
planet_description = "";

button_pressed_confirm = 0;
button_hover_confirm = 0;
button_pressed_reset = 0;
button_hover_reset = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// There is some 1 frame hud showing when transitioning from this minigame back into the script 
guglio = instance_create(x, y, o_hud_stealther);
guglio.lifespan = 10;
global.event = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.event = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Make effects //
if paused() exit;

// Buttons //
if active = true then 
    {
    button_hover_confirm = scr_mg_button(view_xview + 320, view_xview + 380, view_yview + 8, view_yview + 23);
    button_hover_reset = scr_mg_button(view_xview + 320, view_xview + 380, view_yview + 24, view_yview + 39);
    
    // Click buttons //
    if scr_input_check_held(KEYID_ACTION, PLAYER1) then
        {
        // Confirm //
        if button_hover_confirm = true then
            {
            button_pressed_confirm = 3;
            timer_end = 3;
            active = false;
            }
        
        else // Reset //
        if button_hover_reset = true then
            {
            target_x = x;
            target_y = y;
            previous_x = -1;
            previous_y = y;
            button_pressed_reset = 3;
            number_of_lines = 0;
            with o_mg_star_planet active = false;
            with o_mg_star_effect instance_destroy();
            with o_mg_star_effect_trail instance_destroy();
            }  
        }
    }

// Reset flash effect //
if button_pressed_confirm &gt; 0 then button_pressed_confirm -= dt();
if button_pressed_reset &gt; 0 then button_pressed_reset -= dt();

// Transition // Start //
if timer_start &gt; 0 then
    {
    // Tick down //
    timer_start -= dt();
    
    // Add in all the shit //
    if timer_start &lt;= 0 then
        {
        // Other stuff //
        event_user(1);
        instance_create(x, y, o_mg_star_overlay);
        instance_create(x, y, o_mg_star_backdrop);
        instance_create(x, y, o_pointer);
        draw_space = true;
        }
    }

// End //
if timer_end &gt; 0 then
    {
    // Tick down //
    timer_end -= dt();
    
    // Event //
    if timer_end &lt;= 0 then
        {
        instance_create(x, y, o_mg_star_transition);
        timer_fade = 7;
        }
    }
    
// Fade //
if timer_fade &gt; 0 then
    {
    // Tick down //
    timer_fade -= dt();
    
    // Event //
    if timer_fade &lt;= 0 then
        {
        timer_destroy = 10;
        draw_space = false;
        with o_mg_star_effect instance_destroy();
        with o_mg_star_effect_trail instance_destroy();
        with o_mg_star_planet instance_destroy();
        with o_mg_star_backdrop instance_destroy();
        with o_mg_star_overlay instance_destroy();
        with o_pointer instance_destroy();
        }
    }
    
// Destroy //
if timer_destroy &gt; 0 then
    {
    // Tick down //
    timer_destroy -= dt();
    
    // Event //
    if timer_destroy &lt;= 0 then instance_destroy();
    }
    
// Trajectory //
if timer_trajectory &gt; 0 then
    {
    // Tick down //
    timer_trajectory -= dt();
    
    // Event //
    if timer_trajectory &lt;= 0 then 
        {
        timer_trajectory = 25;
        instance_create(view_xview + 248, view_yview + 88, o_mg_star_effect_trajectory);
        }
    }

// Info reset //    
planet_name = "";
planet_description = "";


    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Make star map //
// Aqua / Blue planet //
star = instance_create(view_xview + 24, view_yview + 24, o_mg_star_planet);
star.image_index = 0;
star.name = "Galastos 9";
star.description = "Aqua cluster - Population: 0";

// Red / Orange star //
star = instance_create(view_xview + 40, view_yview + 48, o_mg_star_planet);
star.image_index = 1;
star.name = "Primorde 666"
star.description = "Primordial hell cluster - Population: 666";

// Purple planet //
star = instance_create(view_xview + 72, view_yview + 104, o_mg_star_planet);
star.image_index = 2;
star.name = "Amazon Charlie"
star.description = "Charlium cluster - Population: 4";

// Black orb //
star = instance_create(view_xview + 24, view_yview + 120, o_mg_star_planet);
star.image_index = 3;
star.name = "The Iron Hoosegow"
star.description = "Iron cluster - Prisoners: 420";

// Black meteor //
star = instance_create(view_xview + 88, view_yview + 72, o_mg_star_planet);
star.image_index = 4;
star.name = "Haleys Pearl"
star.description = "Pearl cluster - Population: 0";

// Ghost //
star = instance_create(view_xview + 112, view_yview + 64, o_mg_star_planet);
star.image_index = 5;
star.name = "Ectoria"
star.description = "Ecto cluster - Population: Ghost's";

// Sun //
star = instance_create(view_xview + 112, view_yview + 136, o_mg_star_planet);
star.image_index = 6;
star.name = "Big Cheese 42"
star.description = "Big cluster - Cheese count: Bon apetit";

// Stick //
star = instance_create(view_xview + 152, view_yview + 136, o_mg_star_planet);
star.image_index = 7;
star.name = "Jholpers Tuna"
star.description = "Tuna cluster - Population: 999";

// Pollen //
star = instance_create(view_xview + 144, view_yview + 96, o_mg_star_planet);
star.image_index = 8;
star.name = "Xenobium Death"
star.description = "Death cluster - Population: 0";

// Green thing //
star = instance_create(view_xview + 160, view_yview + 32, o_mg_star_planet);
star.image_index = 9;
star.name = "Vincent's Vice"
star.description = "Vice cluster - Population: 1000000000";

// Red cross //
star = instance_create(view_xview + 192, view_yview + 48, o_mg_star_planet);
star.image_index = 10;
star.name = "Excelsius 69"
star.description = "69 cluster - Population: 68";

// Blob //
star = instance_create(view_xview + 184, view_yview + 72, o_mg_star_planet);
star.image_index = 11;
star.name = "Kaiser's Globule"
star.description = "Globule cluster - Population: 12895345";

// UFO //
star = instance_create(view_xview + 200, view_yview + 128, o_mg_star_planet);
star.image_speed = 0.5;
star.sprite_index = s_mg_star_ufo;
star.name = "U.F.O."
star.description = "U.F.O. cluster - Population: 1";

// Red Hole //
star = instance_create(view_xview + 96, view_yview + 32, o_mg_star_planet);
star.image_speed = 0.5;
star.sprite_index = s_mg_star_vortex;
star.name = "Hell Hole"
star.description = "Hole cluster - Population: 32";

// Serpent //
star = instance_create(view_xview + 80, view_yview + 40, o_mg_star_planet);
star.image_speed = 0.5;
star.sprite_index = s_mg_star_snake;
star.name = "The Old Parcheesi"
star.description = "Parcheesi cluster - Population: 999";

// Cube //
star = instance_create(view_xview + 216, view_yview + 88, o_mg_star_planet);
star.image_speed = 0.5;
star.sprite_index = s_mg_star_cube;
star.name = "Bastard's Claim"
star.description = "Cluster's last stand - Population: 1";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Set the origin of a new line //
line_sx[number_of_lines] = previous_x;
line_sy[number_of_lines] = previous_y;

// Set the end of a new line //
line_ex[number_of_lines] = target_x;
line_ey[number_of_lines] = target_y;

// New becomes old //
previous_x = target_x;
previous_y = target_y;

// Alpha //
alpha = 1;

// Effect //
if first = false then
    {
    effect = instance_create(line_sx[number_of_lines] + 4, line_sy[number_of_lines] + 4, o_mg_star_effect);
    with effect
        {
        target_x = other.line_ex[other.number_of_lines] + 4;
        target_y = other.line_ey[other.number_of_lines] + 4;
        }
    }

// New line //
number_of_lines += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw the field of darkness //
if draw_space = true then
    {
    // Backdrop //
    draw_sprite_tiled_ext(s_mg_techgrid, 0, view_xview, view_yview, 1, 1, make_color_rgb(10 - irandom(10), 30 - irandom(5), 10 - irandom(10)), 1);
    
    // Vista //
    draw_sprite(s_mg_star_vista, 0, view_xview + 16, view_yview + 16);
     
    // Necron 7 //
    draw_sprite(s_mg_star_necron7, 0, view_xview + 240, view_yview + 80);
       
    // Pitchfork //
    draw_sprite(s_mg_star_hell, 0, view_xview + 274, view_yview + 64); 
    
    // Text //
    draw_set_color(c_white);
    draw_set_font(global.fn_small);
    draw_set_halign(fa_left);
    if planet_name != "" then
        {
        draw_text(view_xview + 24, view_yview + 170, planet_name);
        draw_text(view_xview + 24, view_yview + 202, planet_description);
        }
    else
        {
        draw_set_color(c_gray);
        draw_text(view_xview + 24, view_yview + 170, "CELESTIAL OBJECT");
        draw_text(view_xview + 24, view_yview + 202, "CELESTIAL DESCRIPTION");
        }
    }
    
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
