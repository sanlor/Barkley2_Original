<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_cgremMed_head</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_enemygroup_cybergremlins</parentName>
  <maskName>mask_rect_16by16</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
event_inherited();
scr_enemyDB_statsGet(enemyBuild);
scr_path_setMovementType(scr_path_movementType_standard_offset);
scr_path_setWalldist(12+random(10));
scr_entity_setShadowCircle(12);
ailmentTotem_define(id, -3, 10, 12, 25);
combatActor_setRenderSurfSize(64);
scr_entity_setZHitbox(0, 24);

anim = 0;
animSpd = 0.2;
animStrike = 0;
pType = choose(0,irandom(3));
headType = choose(0,irandom(4));
weaponType = choose(0,1,2,3,4,5);
armTypeR = choose(0,0,1,2);
armTypeL = choose(armTypeR,armTypeR,0,1,2);

warnSound = "cGremlinSmall_attack";
strikeSound = "cGremlinSmall_gunattack";
alertSound = "cGremlinSmall_alert";
deathSound = "cGremlinSmall_death";
damageSound = "cGremlinSmall_grunt";
hook_hitfx = enemy_hitfx_cgremlins;

var conf, attacks, attack, guard;
guard = scr_AI_addPassiveState(scr_AI_passive_guard);
guard[? "sndAlertSound"] = alertSound;

activeApproach = scr_AI_addActiveState(scr_AI_active_approach);
activeHangback = scr_AI_addActiveState(scr_AI_active_hangback);
activeHangback[? "switchPriority"] = 10;
activeHangback[? "switchRemoveMaxDist"] = 150;
activeHangback[? "switchAddMaxDist"] = 110;

// Movement
var movement = scr_AI_movement_init(scr_AI_movementType_standard);
movement[? "dirOffsetMax"] = 40;
activeApproach[? "walkScript"] = movement;
activeHangback[? "walkScript"] = movement;

// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// Shot
var shot = scr_AI_addAction(scr_AI_action_shot);
Attack("assign", shot, "shot", 0.5, 0.5, 0.5, 0.0, 0.0, 0.0);
shot[? "burst"] = 3;
shot[? "burstRnd"] = 1;
shot[? "gunRange"] = 14;
shot[? "precision"] = 30;
shot[? "sndAttackWarn"] = warnSound;
shot[? "sndAttackStrike"] = strikeSound;
attack = scr_AI_switch_standard("new_attack", conf);
attack[? "distMin"] = 30;
attack[? "distMax"] = 120;
attack[? "cooldownTime"] = 20; 
attack[? "cooldownTimeRnd"] = 15;
var action = scr_AI_addAction(scr_AI_active_aimandshoot);
//action[? "prepTime"] = 30;
action[? "action"] = shot;
attack[? "action"] = action;
ai_shot = shot;
ai_shot_action = action;

// Snipe
var shot = scr_AI_addAction(scr_AI_action_shot);
Attack("assign", shot, "snipe", 0.5, 0.5, 0.5, 0.0, 0.0, 0.0);
shot[? "burst"] = 1;
shot[? "burstRnd"] = 0;
shot[? "gunRange"] = 14;
shot[? "range"] = 240;
shot[? "motion"] = 50;
shot[? "motionRnd"] = 10;
shot[? "sndAttackWarn"] = warnSound;
shot[? "sndAttackStrike"] = strikeSound;
shot[? "beforeTime"] = 25;
shot[? "afterTime"] = 10;
attack = scr_AI_switch_standard("new_attack", conf);
attack[? "distMin"] = 100;
attack[? "distMax"] = 150;
attack[? "cooldownTime"] = 20; 
attack[? "cooldownTimeRnd"] = 15;
var action = scr_AI_addAction(scr_AI_active_aimandshoot);
//action[? "prepTime"] = 30;
action[? "action"] = shot;
attack[? "action"] = action;
ai_snipe = shot;
ai_snipe_action = action;

// ACRO TIME
deviate = 1;
time0 = AI_decisionFrequency;
time1 = ai_shot[? "beforeTime"];
time2 = ai_shot[? "afterTime"];
time3 = ai_shot_action[? "prepTime"];
time4 = ai_snipe[? "beforeTime"];
time5 = ai_snipe[? "afterTime"];
time6 = ai_snipe_action[? "prepTime"];

// Animation
scr_entity_animation_new("body");
scr_entity_animation_new("head");
scr_entity_animation_new("left_arm");
scr_entity_animation_new("right_arm");
scr_entity_animation_setSpeed("body", 0.3);
scr_entity_animation_setSpeedPerPixel("body", 1/9);
scr_entity_animation_setSpeed("head", 0.3);
scr_entity_animation_setSpeedPerPixel("head", 1/9);
scr_entity_animation_setSpeed("left_arm", 1);
scr_entity_animation_setSpeed("right_arm", 1);
_body_offset=0;
_head_offset=0;
_leftarm_offset=0;
_rightarm_offset=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
event_inherited();

// ACRO TIME
deviate = scr_stats_getEffectiveStat(id, STAT_BASE_AGILE) / scr_stats_getBaseStat(id, STAT_BASE_AGILE);
AI_decisionFrequency = time0 / deviate;
ai_shot[? "beforeTime"] = time1 / deviate;
ai_shot[? "afterTime"] = time2 / deviate;
ai_shot_action[? "prepTime"] = time3 / deviate;
ai_snipe[? "beforeTime"] = time4 / deviate;
ai_snipe[? "afterTime"] = time5 / deviate;
ai_snipe_action[? "prepTime"] = time6 / deviate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gibs
var _obj;
var repeats = 3 + irandom(3);
repeat (repeats) 
{
    _obj = instance_create(x,y,o_FX);
    _obj.z = z + random(hitbox_z_top);
    _obj.sprite_index = s_fx_bloodBurst;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y-4,o_gibs);
    _obj.z = z + 16;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 0;
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y+4,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 1;
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 2;
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 3;
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
event_inherited();

var _col = image_blend;

var _frm = 0;
var _img = 0;
var _hScale = 1;
var _hoff = 0;
var _hFrm = 0;

var _aFrmR = 0;
var _aFrmL = 0;

var _showLArm = true;
var _showRArm = true;

var _img = s_cgremlin_small_gibs;

if(a_attackName == "stagger")
{
    _body_offset = pType*12;
    
    _rightarm_offset = armTypeR*12+1;
    _leftarm_offset = armTypeL*12+1;
    
    _head_offset = headType*10;
    
    scr_entity_animation_setRange("body", _body_offset+1, 1);
    scr_entity_animation_setRange("head", _head_offset+3, 1);
    scr_entity_animation_setRange("left_arm", _leftarm_offset+1, 1);
    scr_entity_animation_setRange("right_arm", _rightarm_offset+1, 1);
}
else
{
    if(a_walking)
    {
        scr_entity_animation_setRange("body", _body_offset+2, 4);
        scr_entity_animation_setRange("head", _head_offset, 4);
        scr_entity_animation_setRange("left_arm", _leftarm_offset+2, 4);
        scr_entity_animation_setRange("right_arm", _rightarm_offset+2, 4);
        _hoff = floor(scr_entity_animation_getImage("head") mod 2);
    }
    else
    {
        scr_entity_animation_setRange("body", _body_offset, 1);
        scr_entity_animation_setRange("head", _head_offset, 1);
        scr_entity_animation_setRange("left_arm", _leftarm_offset, 1);
        scr_entity_animation_setRange("right_arm", _rightarm_offset, 1);
    }
}

var _dirdir = ((faceDir+360)mod 360) div 90;
var _odir = ((faceDir+360)mod 360);

switch(_dirdir)
{
    case 0: 
        _hScale = -1; 
        _body_offset= pType*12+6; 
        _rightarm_offset = armTypeR*12+6; 
        _leftarm_offset = armTypeL*12+6; 
        _head_offset = headType*10+5; 
        break;
    case 1: 
        _hScale = 1; 
        _body_offset=pType*12+6; 
        _rightarm_offset = armTypeR*12+6;  
        _leftarm_offset = armTypeL*12+6; 
        _head_offset = headType*10+5; 
        break;
    case 2: 
        _hScale = -1; 
        _body_offset=pType*12; 
        _rightarm_offset = armTypeR*12; 
        _leftarm_offset = armTypeL*12; 
        _head_offset = headType*10; 
        break;
    case 3: 
        _hScale = 1; 
        _body_offset=pType*12; 
        _rightarm_offset = armTypeR*12;  
        _leftarm_offset = armTypeL*12; 
        _head_offset = headType*10; 
        break;
}


if(a_attackName == "shot")
{
    _showRArm = false;
    if(_odir&lt;180)
    {
        _gunImg = 0;
        _xoff = 0;
        if(_odir&gt;90)
        {
            _gunImg = _odir div 30 - 3;
            _xoff = 0 - _gunImg*2;
        }
        else
        {
            _gunImg = 2 - (_odir div 30);
            _xoff = _gunImg*2;
        }
        
        draw_sprite_ext(s_cgremMed_gun,_gunImg,x+_xoff,y-8+_hoff,_hScale,1,0,_col,1);
    }   
}
else{animStrike = 0;}


draw_set_alpha(1);

global.drawBack = false;
global.drawFront = false;
///back arm
if((_odir&gt;=180 &amp;&amp; _showRArm) || (_odir&lt;180 &amp;&amp; _showLArm))
{
    draw_sprite_ext(s_cgremMed_lArm,scr_entity_animation_getImage("left_arm"),dx,dy-10,_hScale,1,0,_col,1);
}

draw_sprite_ext(s_cgremMed_leg,scr_entity_animation_getImage("left_arm"),dx,dy,_hScale,1,0,_col,1);
draw_sprite_ext(s_cgremMed_head,scr_entity_animation_getImage("head"),dx,dy-18+_hoff,_hScale,1,0,_col,1);

if((_odir&gt;=180 &amp;&amp; _showLArm) || (_odir&lt;180 &amp;&amp; _showRArm))
{
    _fr = _aFrmR;
    draw_sprite_ext(s_cgremMed_rArm,scr_entity_animation_getImage("right_arm"),dx,dy-10,_hScale,1,0,_col,1);
    
}


if (a_attackName == "shot")
{
    if(_odir&gt;=180)
    {
        _gunImg = 0;
        _xoff = 0;
        if(_odir&gt;270)
        {
            _gunImg = _odir div 30 - 6;
            _xoff = (_gunImg-2)*2;
        }
        else
        {
            _gunImg = 11 - (_odir div 30);
            _xoff = 0- (_gunImg-2)*2;
        }
        draw_sprite_ext(s_cgremMed_gun,_gunImg,x+_xoff,y-8+_hoff,_hScale,1,0,c_white,1);
    }
}

combatActor_draw_post();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>19,18</point>
    <point>20,20</point>
  </PhysicsShapePoints>
</object>
