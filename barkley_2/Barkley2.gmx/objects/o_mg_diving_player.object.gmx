<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_mg_diving_player_prison</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //
blackscreen = 0; // When dead clear to black
image_speed = 0.1;
gravity_force = 0.1;
x_speed = 0;
y_speed = 0;
light_mod = 0;
hitpoints = 10;
immortal = 0;
facing = 1;
bubble_push_cooldown = 5;
drown = 0;
drownYSpd = -40;
drownY = 0;
drownTimer = 0;
gulping = 0;

bubbleCount = 0;
bubblePerSecond = 3;

// Oxygen stuff
oxygen = 100;
hazardMine = 20;
hazardEel = 20;
hazardJelly = 10;
hazardTorpedo = 25;
hazardYeti = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
if (paused()) { image_speed = 0; exit; }

if (drown)
{
    visible = 1;
    drownTimer += dt_sec();
    drownY += drownYSpd * dt_sec();
    drownYSpd += dt_sec() * 40;
    exit;
}

if (gulping &gt; 0)
{
    gulping += dt_sec() * 4;
    if (gulping &gt;= 2) gulping = 0;
    exit;
}

// Make movement bubbles //
bubbleCount += dt_sec();
while (bubbleCount &gt; 1 / bubblePerSecond)
{
    bubbleCount -= 1 / bubblePerSecond;
    bubble = instance_create(x - 1 + random(2), y - 1 + random(2), o_mg_diving_bubble);
    if (instance_exists(bubble))
    {
        bubble.depth = depth + 1;
        bubble.y_speed = -(2.5 + random(2.5));
    }
}

// Swim //
if MiniKeyPress("up", 1) then
    {
    if y_speed &gt; -1 then y_speed -= 0.1 * 60 * dt_sec();
    }
if MiniKeyPress("down", 1) then
    {
    if y_speed &lt; +1 then y_speed += 0.1 * 60 * dt_sec();
    }
if MiniKeyPress("left", 1) then
    {
    if x_speed &gt; -1 then x_speed -= 0.075 * 60 * dt_sec();
    }
if MiniKeyPress("right", 1) then
    {
    if x_speed &lt; +1 then x_speed += 0.075 * 60 * dt_sec();
    }

// Friction //
//if x_speed &gt; 0.001 then x_speed = max(0.001, x_speed - (0.02 * 60 * dt_sec()));
//else if x_speed &lt; -0.001 then x_speed = min(-0.001, x_speed + (0.02 * 60 * dt_sec()));
//else x_speed = 0;
x_speed = median(0, x_speed - (0.02 * 60 * dt_sec()), x_speed + (0.02 * 60 * dt_sec()));
y_speed = median(0, y_speed - (0.02 * 60 * dt_sec()), y_speed + (0.02 * 60 * dt_sec()));
//if y_speed &gt; 0.02 then y_speed -= 0.02 * 60 * dt_sec();
//if y_speed &lt; 0.02 then y_speed += 0.02 * 60 * dt_sec();

// Facing /
if x_speed &lt; 0 then facing = -1;
else if x_speed &gt; 0 then facing = 1;

// Image //
if y_speed &lt; -0.5 then
    {
    if image_index &lt; 0 then image_index = 0;
    if image_index &gt; 2.5 then image_index = 0;
    }
else if y_speed &gt; +0.5 then
    {
    if image_index &lt; 6 then image_index = 6;
    if image_index &gt; 8.5 then image_index = 6;
    }
else
    {
    if image_index &lt; 3 then image_index = 3;
    if image_index &gt; 5.5 then image_index = 3;
    }
    
// Image //
if x_speed &gt; 0.5 or x_speed &lt; -0.5 or y_speed &gt; 0.5 or y_speed &lt; -0.5 then image_speed = 0.15 * 60 * dt_sec();
else image_speed = 0.05 * 60 * dt_sec();
    
// Flashlight is shittier far away //
var o_cursx = view_xview + o_curs.x; //mouse_x;
var o_cursy = view_yview + o_curs.y; //mouse_y;
light_mod = distance_to_point(o_cursx, o_cursy) * 0.006; 
if light_mod &gt; 0.75 then light_mod = 0.75;   

// Actual movement //
var xrl = x_speed * 60 * dt_sec();
if place_free(x + xrl, y) then x += xrl;
else 
    {
    x -= x_speed;// * 60 * dt_sec();
    x_speed = -x_speed;// * 60 * dt_sec();
    }
var yrl = y_speed * 60 * dt_sec();
if place_free(x, y + yrl) then y += yrl;
else 
    {
    y -= y_speed;// * 60 * dt_sec();
    y_speed = -y_speed;// * 60 * dt_sec();
    }

// Inked //
if (distance_to_object(o_mg_diving_spawn_ink) &lt; 24)
    {
    ner = instance_nearest(x, y, o_mg_diving_spawn_ink);
    if (y &lt;= ner.y) 
        {
        if o_mg_diving_surface.ink_bonus &lt; 1 then o_mg_diving_surface.ink_bonus += dt_sec() * 2;
        }
    }
    
// Weeded //  
var slow = 0;
if (place_meeting(x, y, o_mg_diving_seaweed)) slow = 1;
if (place_meeting(x, y, o_mg_diving_fish)) slow = 1;
if (slow)
{
    if x_speed &gt; 0 then x_speed -= 0.075 * 60 * dt_sec();
    else if x_speed &lt; 0 then x_speed += 0.075 * 60 * dt_sec();
    if y_speed &gt; 0 then y_speed -= 0.05 * 60 * dt_sec();
    else if y_speed &lt; 0 then y_speed += 0.05 * 60 * dt_sec();
}
    
// Bubble cooldown //
//if bubble_push_cooldown &gt; 0 then bubble_push_cooldown -= dt();
    
// Push player with BUBBLES //
//if distance_to_object(o_mg_diving_spawn_bubbles) &lt;= 20 then
if distance_to_object(o_mg_diving_bubble_big) &lt;= 1 then
    {
    bubbler = instance_nearest(x, y, o_mg_diving_bubble_big);
    if (bubbler.radius &gt;= 9 &amp;&amp; bubbler.pop == 0)
    {
        with (bubbler) instance_destroy();
        gulping = 0.001;
        Delegate("sound play", "sn_mg_diving_hit" + string(choose(1, 2, 3, 4)));
        oxygen = 100; //clamp(oxygen + (dt_sec() * 25), 0, 100);
    }
    }
else
    {
    oxygen = clamp(oxygen - (dt_sec() * 2.5), 0, 100);
    }

// Getting hurt //
if place_meeting(x, y, o_mg_diving_danger) then
    {
    if immortal &lt;= 0 then
        {
        immortal = 5;
        motion_add(point_direction(x, y, instance_nearest(x, y, o_mg_diving_danger).x, instance_nearest(x, y, o_mg_diving_danger).y), -3);
        x_speed = hspeed;
        y_speed = vspeed;
        speed = 0;
        
        // Oogh //
        event_user(0); // Get hurt
        Delegate("sound play", "sn_mg_diving_hit" + string(choose(1, 2, 3, 4)));
        }
    }
    
// Immortal //
if immortal &gt; 0 then 
    {
    // Tick down //
    immortal -= dt();
    
    // Flicker //
    if (floor(immortal) == 4 || floor(immortal) == 2 || floor(immortal) == 0) visible = false;
    else visible = true;
    
    // End //
    if immortal &lt;= 0 then visible = true;
    }

// Speed limit //
x_speed = clamp(x_speed, -4, 4);
y_speed = clamp(y_speed, -4, 4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// YOU DIED
//o_hoopz.x = o_cts_hoopz.x;
//o_hoopz.y = o_cts_hoopz.y;
Destroy(o_mg_diving_surface);
blackscreen = 1;
depth = -9999;
//x = 0;
//view_xview[0] = 0;
//view_yview[0] = 0;
if (BodySwap() == "prison")
{
    x = 0;
    y = 0;
    view_xview[0] = 0;
    view_yview[0] = 0;
    Quest("junklordSpecial", "prison");
    grayscale = instance_create(view_xview[0] + (SCREEN_WIDTH / 2), - 48, o_hoopz_death_grayscale); 
    grayscale.junklord = true;
}
else
{
    x = 0;
    y = 0;
    view_xview[0] = 0;
    view_yview[0] = 0;
    Quest("junklordSpecial", "drown");
    grayscale = instance_create(view_xview[0] + (SCREEN_WIDTH / 2), - 48, o_hoopz_death_grayscale); 
    grayscale.junklord = true;
    /*
    view_xview[0] = 0;
    view_yview[0] = 0;
    spx = view_xview[0] + (SCREEN_WIDTH / 2);
    spy = view_yview[0] + (SCREEN_HEIGHT / 2);
    o_hoopz.x = spx;
    o_hoopz.y = spy;
    o_hoopz.visible = 0;
    global.respawnX = 498;
    global.respawnY = 828;
    global.respawnRoom = r_far_nexus01;
    scr_savedata_put("player.respawn.x", global.respawnX);
    scr_savedata_put("player.respawn.y", global.respawnY);
    scr_savedata_put("player.respawn.room", global.respawnRoom);
    with (o_hoopz) scr_player_respawn();
    instance_create(spx, spy - 200, o_hoopz_death_grayscale); 
    */
    //if (!instance_exists(o_camera_hoopz)) instance_create(0, 0, o_camera_hoopz);
    //o_camera_hoopz.x = o_hoopz.x;
    //o_camera_hoopz.y = o_hoopz.y - o_hoopz.z; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get hurt
o_mg_diving_surface.oxyShk = 2;
oxygen -= 10;
repeat (10)
{
    bubble = instance_create(x - 5 + random(10), y - 5 + random(10), o_mg_diving_bubble);
    if (instance_exists(bubble))
    {
        bubble.depth = depth + 1;
        bubble.x_speed = random(2.5) * choose(1, -1);
        bubble.y_speed = random(2.5) * choose(1, -1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
if (blackscreen) 
{
    draw_clear(c_black);
    exit;
}
if (sprite_index == s_mg_diving_player)
{
    sprDro = s_mg_diving_playerDrown;
    sprAir = s_mg_diving_playerAirgulp;
}
else
{
    sprDro = s_mg_diving_playerDrown_prison;
    sprAir = s_mg_diving_playerAirgulp_prison;
}
if (drown == 0)
{
    if (gulping &gt; 0)
    {
        draw_sprite_ext(sprAir, floor(gulping), x, y, facing ,1, 0, c_white, 1);
    }
    else
        draw_sprite_ext(sprite_index, image_index, x, y, facing ,1, 0, c_white, 1);
}
else
{
    if (drownTimer &lt; 1)
        draw_sprite_ext(sprDro, 0, x, y + drownY, facing ,1, 0, c_white, 1);
    else
        draw_sprite_ext(sprDro, 1, x, y + drownY, facing ,1, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
