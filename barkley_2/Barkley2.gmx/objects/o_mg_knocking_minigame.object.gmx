<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2510001</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
// Setup //
target_show = 0;
target_teach = 0;
target_room = "longinus"; // For what event to call on destroy
knock_clear = 0;
knock_wrong = "sn_utilitycursor_buttondisabled01"; // Sound

// Positions of grafix and texts //
y_position = 144;
y_goal = 0;
x_position_text1 = 384;
x_position_text2 = 384;
x_goal_text1 = 0;
x_goal_text2 = 0;
text1 = "INPUT:";
text2 = "The secret knock";

// Motion of grafix and texts //
speed_x = (8 * 60);
speed_y = (8 * 60);

// Dimmer setup //
dimmer_position = 1;
dimmer_goal = 0;

// Timers //
timer_mg_start = 13;
timer_mg_start_effect = 5;
timer_mg_end = 0;
timer_mg_end_effect_1 = 0;
timer_mg_end_effect_2 = 0;
timer_mg_end_effect_3 = 0;
timer_mg_end_effect_4 = 0;

// Alpha values //
alpha = 0;
alpha_goal = 1;
alpha_dim = 0;
alpha_dim_goal = 0;
alpha_flash = 0.1;
alpha_flash_goal = 0;

// Knocks //
knock_finished = 0;
knock_last = -1;
knock_last_cou = 0;
knock_position = 0;
knock_cooldown = 0;
knocking_mode = false;
knock_result = 0;
for (i = 0; i &lt; 10; i += 1) 
{
    knock_at_position[i] = -1;
    knock_effect[i] = -1;
}

// DEBUG // Test target knocks //
target_knock[0] = 2;
target_knock[1] = 1;
target_knock[2] = 2;
target_knock[3] = 2;
target_knock[4] = 1;
target_knock[5] = 2;
target_knock[6] = 3;
target_knock[7] = 3;
target_knock[8] = 3;
target_knock[9] = 0;

// Event //
//event = instance_create(x, y, o_event);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///go back to dialog with result
global.event = false;

if (target_room == "vrw")
{
    with (o_nene01) { Cinema("run", script); }
}
else 
{
    if (knock_result == 1) Quest("longinusDoorOpen", 3);
    else Quest("longinusDoorOpen", 1);
    with (o_bct_longinusDoor01) Cinema("run", script);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set event to true to freeze camera
global.event = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
// Pause //
if paused() then exit;

// Move the sheet //
y_position = Goto(y_position, y_goal, speed_y * dt_sec());

// Move the title text //
x_position_text1 = Goto(x_position_text1, x_goal_text1, speed_x * dt_sec());
x_position_text2 = Goto(x_position_text2, x_goal_text2, speed_x * dt_sec());

// Alpha //
alpha = Goto(alpha, alpha_goal, 6 * dt_sec());
alpha_dim = Goto(alpha_dim, alpha_dim_goal, 1.2 * dt_sec());
alpha_flash = Goto(alpha_flash, alpha_flash_goal, 6 * dt_sec());

knock_last_cou = Goto(knock_last_cou, 0, dt_sec() * 4);

// Start this shit //
if (timer_mg_start &gt; 0)
{
    timer_mg_start -= dt(); // Tick down
    if (timer_mg_start &lt;= 0) knocking_mode = true; // End
}
    
// Start this shit //
if (timer_mg_start_effect &gt; 0)
{
    timer_mg_start_effect -= dt(); // Tick down
    if (timer_mg_start_effect &lt;= 0) // Event
    {
        alpha_flash_goal = 0;
        alpha_dim_goal = 0.5;
    }
}

// End minigame //
if (knock_finished &amp;&amp; timer_mg_end = 0) 
{
    timer_mg_end = 20;
    timer_mg_end_effect_1 = 15;
    timer_mg_end_effect_2 = 5;
    timer_mg_end_effect_3 = 5;
}
    
// Knock cooldown //
if (knock_cooldown &gt; 0) 
{
    knock_cooldown -= dt_sec() * 4;
    if (knock_cooldown &lt;= 0 &amp;&amp; knock_clear == 1)
    {
        knock_clear = 0;
        knock_position = 0;
        for (i = 0; i &lt; 10; i += 1) 
        {
            knock_at_position[i] = -1;
            knock_effect[i] = -1;
        }
    }
}

// Knock effects //
for (i = 0; i &lt; 10; i += 1)
{
    if (knock_effect[i] != -1) knock_effect[i] = Goto(knock_effect[i], 1, 6 * dt_sec());
}

// Toot away //
if (target_teach == 0 &amp;&amp; knocking_mode == true &amp;&amp; knock_cooldown &lt;= 0 &amp;&amp; knock_position &lt; 10)
{
    // Up //
    if (scr_input_check_pressed(KEYID_UP, PLAYER1))
    {
        knock_last = 1;
        knock_last_cou = 1;
        if (target_show == 0 || target_knock[knock_position] == knock_last)
        {
            audio_play_sound_at_xy("sn_knocknote02", false, 50, view_xview + 192, view_yview + 120);
            knock_at_position[knock_position] = 1;
            knock_effect[knock_position] = 0.2;
            knock_position += 1;
        }
        else
        {
            audio_play_sound_at_xy(knock_wrong, false, 50, view_xview + 192, view_yview + 120);
            knock_clear = 1;
        }
        knock_cooldown = 1;
    }  
    // Down //
    else if scr_input_check_pressed(KEYID_DOWN, PLAYER1) = true then
    {
        knock_last = 3;
        knock_last_cou = 1;
        if (target_show == 0 || target_knock[knock_position] == knock_last)
        {
            audio_play_sound_at_xy("sn_knocknote04", false, 50, view_xview + 192, view_yview + 120);
            knock_at_position[knock_position] = 3;
            knock_effect[knock_position] = 0.2;
            knock_position += 1;
        }
        else
        {
            audio_play_sound_at_xy(knock_wrong, false, 50, view_xview + 192, view_yview + 120);
            knock_clear = 1;
        }
        knock_cooldown = 1;
    }
    // Left //
    else if scr_input_check_pressed(KEYID_LEFT, PLAYER1) = true then
    {
        knock_last = 2;
        knock_last_cou = 1;
        if (target_show == 0 || target_knock[knock_position] == knock_last)
        {
            audio_play_sound_at_xy("sn_knocknote03", false, 50, view_xview + 192, view_yview + 120);
            knock_at_position[knock_position] = 2;
            knock_effect[knock_position] = 0.2;
            knock_position += 1;
        }
        else
        {
            audio_play_sound_at_xy(knock_wrong, false, 50, view_xview + 192, view_yview + 120);
            knock_clear = 1;
        }
        knock_cooldown = 1; 
    }
    // Right //
    else if scr_input_check_pressed(KEYID_RIGHT, PLAYER1) = true then
    {
        knock_last = 0;
        knock_last_cou = 1;
        if (target_show == 0 || target_knock[knock_position] == knock_last)
        {
            audio_play_sound_at_xy("sn_knocknote01", false, 50, view_xview + 192, view_yview + 120);
            knock_at_position[knock_position] = 0;
            knock_effect[knock_position] = 0.2;
            knock_position += 1;
        }
        else
        {
            audio_play_sound_at_xy(knock_wrong, false, 50, view_xview + 192, view_yview + 120);
            knock_clear = 1;
        }
        knock_cooldown = 1;
    }
}
else if (target_teach == 1 &amp;&amp; knocking_mode == true &amp;&amp; knock_cooldown &lt;= 0 &amp;&amp; knock_position &lt; 10)
{
    audio_play_sound_at_xy("sn_knocknote0" + string(target_knock[knock_position] + 1), false, 50, view_xview + 192, view_yview + 120);
    knock_last = target_knock[knock_position];
    knock_last_cou = 1;
    knock_at_position[knock_position] = target_knock[knock_position];
    knock_effect[knock_position] = 0.2;
    knock_position += 1;
    knock_cooldown = 3;
}

// Check if all the notes are in already //
if (knock_finished == 0 &amp;&amp; knock_position &gt;= 10)
{
    if (target_teach == 1)
    {
        if (knock_cooldown &lt;= 0)
        {
            target_teach = 0;
            target_show = 1;
            knock_position = 0;
            for (i = 0; i &lt; 10; i += 1) 
            {
                knock_at_position[i] = -1;
                knock_effect[i] = -1;
            }
        }
    }
    else //if (target_show == 1)
    {
        knocking_mode = false;
        knock_finished = 1;
    }
}
    
// Minigame end effect Remove dimming //
if (timer_mg_end_effect_1 &gt; 0)
{
    timer_mg_end_effect_1 -= dt(); // Tick down
    if (timer_mg_end_effect_1 &lt;= 0) 
        {
        alpha_dim_goal = 0; // Alpha out
        dimmer_goal = 1; // Dimmers out //
        }
}

// Minigame end effect Remove grafix //
if (timer_mg_end_effect_2 &gt; 0)
{
    timer_mg_end_effect_2 -= dt(); // Tick down
    if (timer_mg_end_effect_2 &lt;= 0) alpha_goal = 0; // Remove marks
}

// Minigame end effect Shove grafix aside //
if (timer_mg_end_effect_3 &gt; 0)
{
    timer_mg_end_effect_3 -= dt(); // Tick down
    if (timer_mg_end_effect_3 &lt;= 0) // Remove everything
    {
        x_goal_text1 = 384;
        x_goal_text2 = 384;
        y_goal = 240;
    }
}
    
// End //
if (timer_mg_end &gt; 0)
{
    timer_mg_end -= dt(); // Tick down
    if (timer_mg_end &lt;= 0) // End
    {    
        // Solved or not? //
        correct = 0;
        for (i = 0; i &lt; 10; i += 1)
        {
            if (target_knock[i] == knock_at_position[i]) correct += 1;
        }
            
        // Need a 100% correct to get through //
        if (correct == 10) knock_result = 1;
        else knock_result = 0;
        
        // Remove this shit //
        instance_destroy();
    }
}

// DIMMER //
scr_mg_dimmer("step");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Teach me
target_teach = 1;
target_room = "vrw";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
vyv = view_yview - 32;

// Dimmer //
scr_mg_dimmer("draw");

// DIM THE BACKGROUND //
draw_set_alpha(alpha_dim);
draw_set_color(c_black);
draw_rectangle(view_xview-2, view_yview-2, view_xview+386, view_yview+242, false);
draw_set_alpha(1);

// Draw a music sheet //
draw_sprite_ext(s_mg_knocking_sheet, 0, view_xview + 192, vyv + 152 + y_position, 1, 1, 0, c_white, 0.8 * alpha);

// Dim the bottom of the sheet for the input icons //
draw_set_alpha(alpha * 0.25);
draw_set_color(c_black);
draw_rectangle(view_xview + 64, vyv + 200, view_xview + 320, vyv + 216, false);
draw_set_alpha(1);

// Draw your notes //
for (i = 0; i &lt; 10; i += 1) 
{
    dx = view_xview + 88 + i * 24;
    if (target_show)
    {
        dy = vyv + 140 + y_position + target_knock[i] * 16;
        draw_sprite_ext(s_mg_knocking_arrow, 4 + target_knock[i], dx, dy, 1, 1, 0, c_white, alpha);
    }
    if (knock_at_position[i] &gt;= 0)
    {
        dy = vyv + 140 + y_position + knock_at_position[i] * 16;
        draw_sprite_ext(s_mg_knocking_arrow, knock_at_position[i], dx, dy, knock_effect[i], knock_effect[i], 0, c_white, alpha);
    }
}
draw_set_alpha(1);

// Knock till ya drop //
if (target_teach == 0) { text1 = "INPUT:"; text2 = " The secret knock"; }
if (target_teach == 1) { text1 = "LISTEN:"; text2 = "  The secret knock"; }
dx = view_xview - x_position_text1 + 110;
draw_set_alpha(abs(1 - (abs(dx - (view_xview - x_goal_text1 + 110)) / 250)));
draw_set_font(global.fn_1);
draw_set_color(c_white);
draw_text(dx, vyv + 92, text1);
draw_set_color(c_red);
draw_text(view_xview + view_wview + x_position_text2 - 238, vyv + 92, text2);
draw_set_font(global.fn_2);
draw_set_alpha(1);

// Keys showcased //
for (i = 0; i &lt; 4; i += 1) 
{
    dx = view_xview + 144 + i * 32;
    dy = vyv + 208 + y_position;
    draw_sprite_ext(s_mg_knocking_arrow, i, dx, dy, 1, 1, 0, c_white, alpha);
    if (knock_last == i) draw_sprite_ext(s_mg_knocking_arrow, i, dx, dy, 1 + knock_last_cou, 1 + knock_last_cou, 0, c_white, 1);
}

// Flash effect //
draw_sprite_ext(s_effect_flash_overlay, 0, view_xview + 192, view_yview + 120, 1, 1, 0, c_white, alpha_flash);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,27</point>
    <point>27,27</point>
  </PhysicsShapePoints>
</object>
