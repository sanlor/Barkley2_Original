<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Deferred</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make jelly blob
event_inherited();
scr_entity_setMovementCollisionShape_circle(16);
scr_entity_setZHitbox(0, 16);
//scr_actor_setActorPushType(ACTOR_COLLISIONPUSH_NONE);
//collisionOne = 0;

splash = 0;
scaleY = 1;
z = 0;
rot = 0;
rotSpd = (5 + random(2.5)) * choose(1, -1);
for (i = 0; i &lt; 8; i += 1)
{
    jellyLen[i] = 6 + random(4);
    jellyDir[i] = (i * 45) - 5 + random(10);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
event_inherited();
//if (collisionOne == 0) 
//{
    //collisionOne = 1;
    //scr_collisionSystem_add_shape_semisolid(_sat_shape, z + hitbox_z_bottom, z + hitbox_z_top);
//}
depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Have a destination and choose steps
steps = 60 + random(15);

zDir = 180 + 30;
zLen = 20 + random(10);
zDirSpd = (180 - 30) / steps;

spd = point_distance(x, y, xDes, yDes) / steps;
dir = point_direction(x, y, xDes, yDes);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
//if (collisionOne == 0) exit;
event_inherited();
draw_set_colour_write_enable(1, 1, 1, 0);
z = lengthdir_y(zLen, zDir);
z = max(0, z);

draw_set_color(c_black);
draw_set_alpha(0.25);
draw_ellipse(x - 6, y - 4, x + 6, y + 4, 0);

draw_set_color(c_green);
draw_set_alpha(0.5);
//Draw back
draw_primitive_begin(pr_trianglefan);
draw_vertex(x, y - z);
for (i = 0; i &lt;= 8; i += 1)
{
    if (i == 8)
    {
        jx0 = x + lengthdir_x(jellyLen[0], jellyDir[0] + rot);
        jy0 = y + lengthdir_y(jellyLen[0] * scaleY, jellyDir[0] + rot) - z;
    }
    else
    {
        jx0 = x + lengthdir_x(jellyLen[i], jellyDir[i] + rot);
        jy0 = y + lengthdir_y(jellyLen[i] * scaleY, jellyDir[i] + rot) - z;
    }
    draw_vertex(jx0, jy0);
}
draw_primitive_end();

draw_set_alpha(0.66);
//Draw lines
for (i = 0; i &lt; 8; i += 1)
{
    jl0 = jellyLen[i] - 0.95;
    jx0 = x + lengthdir_x(jl0, jellyDir[i] + rot);
    jy0 = y + lengthdir_y(jl0 * scaleY, jellyDir[i] + rot) - z;
    if (i &lt; 7)
    {
        jx1 = x + lengthdir_x((jellyLen[i + 1] - 0.95), jellyDir[i + 1] + rot);
        jy1 = y + lengthdir_y((jellyLen[i + 1] - 0.95) * scaleY, jellyDir[i + 1] + rot) - z;
    }
    else
    {
        jx1 = x + lengthdir_x((jellyLen[0] - 0.95), jellyDir[0] + rot);
        jy1 = y + lengthdir_y((jellyLen[0] - 0.95) * scaleY, jellyDir[0] + rot) - z;
    }
    draw_line(jx0, jy0, jx1, jy1);
}
draw_set_alpha(1);
draw_set_colour_write_enable(1, 1, 1, 1);

if (paused() == 0)
{
    
    gox = lengthdir_x(spd * 60 * dt_sec() * global.zauberPozzoJelloSpeed, dir); // x +=
    goy = lengthdir_y(spd * 60 * dt_sec() * global.zauberPozzoJelloSpeed, dir); // y +=
    if (spd != 0)
    {
        movement_hit = scr_collision_move_contact_solid(gox, goy, COLLISION_NORMAL); //ONLY_SOLID);
        //if (movement_hit) spd = 0; //z = 0;
    }
    zDir += zDirSpd * 60 * dt_sec() * global.zauberPozzoJelloSpeed;
    rot += rotSpd * 60 * dt_sec() * global.zauberPozzoJelloSpeed;
}

if (z == 0)
{
    if (splash == 0)
    {
        spd = 0;
        //instance_create(x, y, oBioJelly1);
        //scr_collisionSystem_remove_shape_semisolid(_sat_shape);
        kid.active = 1;
        kid.x = x;
        kid.y = y;
        with (kid) event_user(2);
    }
    splash = 1;
    if (paused() == 0) scaleY = max(0, scaleY - (((1 / 15) * 60) * dt_sec()));
}

if (scaleY &lt;= 0) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
