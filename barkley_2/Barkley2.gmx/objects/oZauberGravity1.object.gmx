<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Deferred</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///particle that changes size based on proximity
event_inherited();
ox = x;
oy = y;
len = 64 + random(16);
dir = random(360);
dirSpd = -360 + random(180);
rot = random(360);
lif = 0.2 + random(0.1);
lifOrg = lif;
sx = x;
sy = y;
spd = 20;
xd = abs(ox - x);
yd = abs(oy - y);
pd = point_distance(ox, oy, x, y);
//dir = point_direction(x, y, ox, oy);
px = (1.0 / 128);
alp = 0;
prt = 6;
siz = 8 + random(8);
for (i = 0; i &lt; prt; i += 1)
{
    if (i &lt; 2)
    {
        xs[i] = px * (siz + random(siz / 2));
        ys[i] = px * (siz + random(siz / 2));
        col[i] = c_mental;
    }
    else
    {
        xs[i] = px * ((siz / 3) + random(siz / 4));
        ys[i] = px * ((siz / 3) + random(siz / 4));
        col[i] = merge_color(c_mental, c_black, .5);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw
//x = (ox - x) / 20;
//y = (oy - y) / 20;

x = dad.x + lengthdir_x((len / lifOrg) * lif, dir);
y = dad.y + lengthdir_y((len / lifOrg) * lif, dir);
dis = point_distance(x, y, ox, oy);

if (paused() == 0) 
{
    lif -= dt_sec();
    dir += dirSpd * dt_sec();
}
if (lif &lt;= 0) //point_distance(sx, sy, x, y) &gt;= pd) 
{ 
    if (instance_exists(master)) master.orbs += 1; 
    instance_destroy(); 
}
alp = abs(1 - (dis / pd));
alp = max(.1, alp);
//alp = 1; //added

//fvx += lengthdir_x((len / lifOrg) * lif, dir);
//fvy += lengthdir_y((len / lifOrg) * lif, dir);

scl = (1 - (alp / 2)) / 2;
spr = s_light_256; 
sub = 0; 
ap = alp; 
draw_set_colour_write_enable(1, 1, 1, 0);
draw_set_blend_mode(bm_add);
for (i = 0; i &lt; prt; i += 1)
{
    draw_sprite_ext(spr, sub, x, y, xs[i] * scl, ys[i] * scl, rot, col[i], ap); //,alp
}
draw_set_blend_mode(bm_normal);
draw_set_colour_write_enable(1, 1, 1, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
