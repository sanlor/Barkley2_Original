<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
aimCou = 0;
aimAlp = 0; //Changes on step
aimQal = 4; //quality
stx = -999;
sty = -999;
enx = -999;
eny = -999;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Depth
for (i = 0; i &lt; aimCou; i += 1) aim[i].visible = 0;
enx = -999;
//if (keyboard_check(vk_shift)) { x = o_hoopz.x; y = o_hoopz.y; depth = o_hoopz.depth; exit; }
if (instance_exists(o_hoopz) &amp;&amp; global.event == 0)
{
    if (o_hoopz.stance == scr_player_stance_gunmode || o_hoopz.stance == scr_player_stance_zauber) // GZ
    {
        var current = scr_statusEffect_getFromCombatActor(o_hoopz.id, statusEffect_wading);
        var swimmove = 0;
        if (current &gt; 0) swimmove = ds_map_find_value(current, "wadingDepthCurrent");
        with (o_hoopz) scr_player_draw_aimingLine(swimmove);
        if (o_hoopz.aimingDraw)
        {
            aimAlp = o_hoopz.aimingAlpha;
            stx = o_hoopz.from_x;
            sty = o_hoopz.from_y;
            enx = o_hoopz.to_x;
            eny = o_hoopz.to_y;
            var dis = point_distance(stx, sty, enx, eny);
            var dir = point_direction(stx, sty, enx, eny);
            var drx = stx;
            var dry = sty;
            h = 0;
            for (i = 0; i &lt; dis; i += aimQal)
            {
                var xsc = min(aimQal, dis - i);
                if (aimCou &lt;= h) { aim[h] = instance_create(0, 0, o_hoopz_aiming_draw); aimCou += 1; }
                aim[h].visible = 1;
                aim[h].x = drx;
                aim[h].y = dry;
                aim[h].image_alpha = ((point_distance(drx, dry, stx, sty) / dis) / 2) * aimAlp;
                aim[h].image_xscale = xsc;
                aim[h].image_angle = dir;
                aim[h].depth = -(aim[h].y + o_hoopz.heldVShift + 8);
                if (o_hoopz.stance == scr_player_stance_zauber)
                {
                    aim[h].image_blend = Zauber("color", o_hoopz.zauber_casting);
                    aim[h].image_yscale = 3;
                }
                else
                {
                    aim[h].image_blend = c_white;
                    aim[h].image_yscale = 3;
                }
                drx += lengthdir_x(aimQal, dir);
                dry += lengthdir_y(aimQal, dir);
                h += 1;
            }
            depth = -(y + o_hoopz.heldVShift + 9); // Dot Depth
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Aiming line
//if (keyboard_check(vk_shift) == 0) {
if (enx != -999) draw_sprite_ext(s_lazersight_dot, (current_time / 50) mod 2, enx, eny, 1, 1, 0, c_white, 1 * aimAlp);
/*} else {
if (instance_exists(o_hoopz))
{
    var current = scr_statusEffect_getFromCombatActor(o_hoopz.id, statusEffect_wading);
    var swimmove = 0;
    if (current &gt; 0)
    {
        swimmove = ds_map_find_value(current, "wadingDepthCurrent");
    }
    if (o_hoopz.stance == scr_player_stance_gunmode)
    {
        with (o_hoopz) scr_player_draw_aimingLine(swimmove);
        //show_debug_message("aiming line draw");
    }
} }*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
