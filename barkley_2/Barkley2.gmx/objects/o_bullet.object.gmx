<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_bull</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CombatAttackEntity</parentName>
  <maskName>mask_rect_4by4</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Inherit combatattackentity //
event_inherited();

superTrail = 0;         // Trail for the periodic/super shot //
matName = "";           // Material name for the gun //
stoneSkipping = 0;      // Stone skipping movement for a bullet // Must be init for Orichalcum
paintball = 0;          // Paintball effect when bullet impacts with a combat actor //
lastDmg = 0;            // ??? //
lastHitKilled = false;  // If bullet kills something, this is used to count up the kill periodic charge //
lobAngledSprite = false;// Angled sprite for vertically moving bullets // Z axis //
wallRicochet = 0;       // Richochet off walls //

// For making smoke on flames
smokeTimer = 0.04;
smokeCount = random(smokeTimer);

// Depth offset //
dny = 6;

// Gravity on the z axis //
gravity_z = 0;

// Size of the Z hitbox //
scr_entity_setZHitbox(-7, 3); // WAS -5 and 1 - Hits things below easily, and easily goes under things
scr_entity_setMovementCollisionShape_rectangle(3, 3);
scr_entity_setCollisionType(COLLISION_ONLY_SOLID);
scr_entity_setShadowSprite(sprite_index, image_index, 0, 0);

// TEST TEST TEST //
//scr_stats_setAttackStat(self.id, STAT_ATTACK_STAGGER, 100);
//scr_stats_setAttackStat(self.id, STAT_ATTACK_STAGGER_HARDNESS, STAGGER_HARDNESS_MEDIUM);

// Knockback
knockback_type = KNOCKBACKTYPE_MOVEMENT_DIRECTION;

// Call User Event 0 on hit
event_user_on_hit = 0;

weapon_from = NULL;

initDir = 0;
initSpd = 0;

specialShot = "";
superShot = false;

shotHits = 0;
shotDamage = 0;
delayShot = false;
bulletBurst = s_ricochet;
destinationDistance = -1; // For lobbing - flames in particular
ricochetSound = "ricochet";
checkHit = true;
image_speed = 0;

count = 0
distcount = 0;
show_hiteffect = true;

z = 12;
scr_entity_setZHitbox(0, 2);
move_z = 0;

throughWalls = 0;
rangeEndGrav = 0;
accel = 0;
maxspd = 48;
minspd = 6;
speedBonus = 1; //for rifles
lobDirection = 0;
lobGravity = 0;
dotline = 0;
dotlineAffix = false;
spiraldir = 10;

distlife = 128;
timelife = 128;

webshot = 0;

col = c_white;

amod = 1;

returning = false;
returned = false;

drawSprite = true;

useColorBlend = false;
colorBlend = c_white;
colorBasic = c_white;

specialBFG = "";
arrowShot = false;
flaregun = false;
rocketShot = false;
bfgShot = false;
bfgSparkTimer = 0;
bfgFiredDirection = 0;

franciumShot = false; ////bullet fired from francium gun
franciumScale = 0.01;
franciumMax = 1;
franciumSnd = scr_soundbank_pickSound("hoopzweap_francium_hum");

trailScale = 1;
trailAngle = 0;

motionBlur = false;
glowEffect = false;
drawWhiteOverlay = false;
overlayCol = c_white;
overlayAlpha = 1;
bullet_spriteTurn = true; ////bullet sprite follows movement direction;
hitHoopzIn = 0;

sparkleTimer = 1;
pow = 1;
alarm[0] = 1;
laserGen = 0;
shotSetup = false;

prefix2Has = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bullet destruction
// Digital //
// Leaves behind a fake laser that mimics the actual shot and fades away // A trail of sorts //
if(sprite_index == s_bull_digitalLaser)
{
     if(shotSetup)
     {
        ds_list_add(lstPoints,dx);ds_list_add(lstPoints,y-z);
        var fakelaser = instance_create(dx,dy,o_fakeLaser);
        fakelaser.lstPoints = lstPoints;
        fakelaser.shotWidth = shotWidth;
        fakelaser.shotOriginx = shotOriginx;
        fakelaser.shotOriginy = shotOriginy;
     }
}

// Effects for impacts with walls and enemies? //
if show_hiteffect
{
    // Combined power of all the elements in the shot // Used for weighing how powerful a shot was //
    pow =
    scr_stats_getAttackStat(id, STAT_ATTACK_DMG_NORMAL) + 
    scr_stats_getAttackStat(id, STAT_ATTACK_DMG_BIO) + 
    scr_stats_getAttackStat(id, STAT_ATTACK_DMG_CYBER) + 
    scr_stats_getAttackStat(id, STAT_ATTACK_DMG_MENTAL) + 
    scr_stats_getAttackStat(id, STAT_ATTACK_DMG_ZAUBER) + 
    scr_stats_getAttackStat(id, STAT_ATTACK_DMG_COSMIC);
   
    switch(sprite_index)
    {
        // Candy shot //
        // Creates a small sparkle upon impact // Custom impact sound //
        case s_bull_candyShot:        
            repeat(1+floor(pow/5))
            {
                var dst = 1 + random(pow/20);
                var dir = random(360);
                var ob = instance_create(x+lengthdir_x(dst,dir),y+lengthdir_y(dst,dir),o_FX);
                ob.z = z+1;
                ob.sprite_index = s_bullsparkle;
                var size = random(0.5)+0.5;
                ob.image_angle = random(360);
                ob.image_blend = choose(c_white,c_white,make_color_rgb(255,255,0));
                ob.image_xscale = size; ob.image_yscale = size;
                ob.image_speed = choose(1,0.5,0.25,0.2);
            }        
            audio_play_sound_at_xy("candy_impact", 0, 0, x, y);
            break;
    
        // Grass shot //
        // Creates some shred gunk upon impact //
        case s_bull_grass:
            var dr = point_direction(0,0,move_x,move_y);
            amnt = floor(1 + pow/12 + irandom(pow/6))
            repeat(amnt)
            {
                var sprng = random(amnt/2);
                var sppos = random(360);                
                obj = instance_create(x+lengthdir_x(sprng,sppos),y+lengthdir_y(sprng,sppos),o_papershredEffect);
                var tdir = dr - 20+random(40);
                var spdMd = 0.10+random(0.20);
                obj.move_x = lengthdir_x(move_dist*spdMd,tdir);
                obj.move_y = lengthdir_y(move_dist*spdMd,tdir);
                obj.z = z;
                obj.dny = dny;
                obj.image_blend = make_color_rgb(10,200,30);
            }            
        break;
        
        // No effect for plantain //
        case s_bull_plantain:            
            break;
        
        // Blood leaves behind puddles of blood //
        case s_bull_blood:
        case s_bull_bloodBFG:
            var bloodAmount = 1;           
            bloodAmount+= pow/10
            Puddle_Effect(x, y, base_z, min(8,bloodAmount), c_red);
            break;
            
        // Soiled leaves behind gunk puddles //
        case s_bull_soiled:
            var bloodAmount = 1;           
            bloodAmount+= pow/10
            Puddle_Effect(x, y, base_z, min(8,bloodAmount), make_color_rgb(154,14,179));
            break;
            
        // Teashot leaves behind puddles too //
        case s_bull_teashot:
            var bloodAmount = 1;           
            bloodAmount+= pow/5;
            //Smoke("puff",x,y,base_z,2+max(5,pow));
            Puddle_Effect(x, y, base_z, min(8,bloodAmount), make_color_rgb(88,38,65));
            break;
                      
        // Salt leaves behind salt // Custom impact sound //  
        case s_bull_salt:
            repeat(floor(2 + pow/8))
            {
                _ric = instance_create(x,y,o_casings);
                _ric.rot = image_angle;
                _ric.sprite_index = s_bull_salt;
                _ric.image_index = irandom(2);
                _ric.image_speed = 0;
                _ric.z = z;
                _ric.move_z /=3;
                _ric.move_x /=2;
                _ric.move_y /=2;
                _ric.scale = 1;
            }
            audio_play_sound_at_xy("hoopzweap_salt_impact", 0, 0, x, y);
            break;
        
        // In other cases, use a generic default effect //
        default:
            obj = instance_create(x,y,o_ricochet)
            obj.z = z;
            obj.sprite_index = bulletBurst;
            obj.image_angle = move_dir;
            obj.image_blend = c_white;
            obj.depth = depth;
            obj.image_xscale = image_xscale
            obj.image_yscale = image_yscale
            break;
    }   
}

// Silk leaves behind some webbing traps //
if(matName == "Silk")
{
    var _ob = instance_create(x,y,o_webbingTrap);
    _ob.parentPower = pow;
    if(pow&lt;15){_ob.sprite_index = s_bull_webbingSmall;}
    if(pow&gt;50){_ob.image_xscale *=2; _ob.image_yscale *=2;}
    else if(pow&gt;30){_ob.image_xscale *=1.5; _ob.image_yscale *=1.5;}
    audio_play_sound_at_xy("hoopzweap_silk_impact", 0, 0,x,y);
    _ob.timer = 30+pow*3;
    _ob.z = z;
}

// No idea what this check does ??? //
if(checkHit &amp;&amp; weapon_from != NULL)
{
    // Missed shot //
    if(shotHits==0)
    { ///didnt hit nobody? tell the gun about that
        weapon_from[? "pChargeMissed"] +=1;
    }
    
    // Shot landed //
    else
    {
        // Increase shots landed and damage dealt charging variables //
        weapon_from[? "pChargeHits"] += shotHits;   
        weapon_from[? "pChargeDamage"] += shotDamage;
    }
    
    // Shot killed something //
    if (lastHitKilled) {
        // Increase kills made charge variable //
        weapon_from[? "pChargeKilled"] += 1;
    }
}

// No idea about this check ??? //
if (checkHit or show_hiteffect) {
    // Seems like I hit something, make a sound for enemy AI to hear
    if (weapon_from != NULL) {
        scr_AI_hearing_makeSound(weapon_from, x, y, 100, 100);
    }
}

// Neon //
if(sprite_index==s_bull_neonGloworb)
{
    var explo = scr_fx_simple_ext(x, y, z, s_bull_neonGloworb, 0.75, image_xscale, image_yscale, 0, c_white, 1);
    explo.image_blend = image_blend;
    var scl = pow/30;
    explo.dny = dny+1;
    explo.image_xscale = scl;
    explo.image_yscale = scl;
    
    if(bfgShot)
    {
        var addAngle = initDir + 45;
        var _split = 4;
        
        for(var i =0; i&lt;_split; i+=1)
        {
            var spx = x - move_x*dt() + lengthdir_x(8,addAngle);
            var spy = y - move_y*dt() + lengthdir_y(8,addAngle);
            if(scr_collision_point_free(spx,spy,z,COLLISION_ONLY_SOLID))
            {
                var shard = scr_combat_cloneBullet(id);
                shard.x = spx;
                shard.y = spy;
                shard.z = z+2;
                
                scr_combat_bulletDmgmod(shard,0,0.4);

                shard.initDir = addAngle;
                
                with(shard)
                {
                    sprite_index = s_bull_neon;
                    scr_entity_setDirSpd(addAngle, 25);
                    dny = other.dny;
                    neon = true;
                    neonHue = other.neonHue;
                    neonSat = 0;
                    neonVal = 255;
                    neonSize = 0.2 + other.pow/60;
                    neonTrail = 3;
                    colorBlend = make_color_hsv(neonHue,neonSat,neonVal);
                    if(speedBonus&gt;1.2){speedBonus = 1.2};
                    shotSetup = true;
                    alarm[0] = 0;
                }
                shard.distlife = distlife/2;
                shard.timelife = timelife/2;
            }
            addAngle += 360/_split;
        }
    }   
    
    var explo = scr_fx_simple_ext(x, y, z, s_bull_neonGloworb, 1, image_xscale, image_yscale, 0, c_white, 1);
    var scl = pow/60;
    explo.image_xscale = scl;
    explo.dny = dny-1;
    explo.image_yscale = scl;
}

if(sprite_index == s_bull_offal || specialShot == "blood")
{
    var bloodAmount = 1;
    
    bloodAmount+= floor(pow/10 + irandom(pow/5));
    if(specialShot == "blood"){bloodAmount = bloodAmount*1.2+1;}
    Puddle_Effect(x, y, base_z, choose(2, 3), c_red);
    
    repeat(bloodAmount)
    {
        var dst = random(pow/10);
        if(specialShot == "blood"){dst += 1 + random(8);}
        var dir = random(360);
        
        var _ob = instance_create(x+lengthdir_x(dst,dir),y+lengthdir_y(dst,dir),o_effect_blooddrop);
        var scl = 0.1+random(0.3);
        var spray = 0;
        if(pow&gt;20){scl += random(0.2); spray += random(2);}
        _ob.image_xscale = scl;
        _ob.image_yscale = scl;
        _ob.z = z-1+irandom(2);
        _ob.move_z = 2 + random(4)+spray;
        _ob.gravity_z = 7;
        with(_ob)
        {
            scr_entity_setDirSpd(random(360), 1+ spray + random(3));
        }
    }
    
    if(flaregun || bfgShot || rocketShot)
    {
        var _shrapnel = 6;
        var _dmgSplit = 0.4;
        var _spd = 8;
        if(rocketShot){_shrapnel= 8; _dmgSplit = 0.3; _spd = 10;}
        if(bfgShot){_shrapnel=12; _dmgSplit = 0.5; _spd = 12;}
        
        if(specialShot == "blood"){_shrapnel *=1.5; _dmgSplit *=0.6;}
        var sAngle = 0;
        var sDist = 0;
        
        for(var i =0; i&lt;_shrapnel; i+=1)
        {
            sDist = 6+irandom(12);
            sAngle = irandom(360);
            var spx = x - move_x*dt() + lengthdir_x(sDist,sAngle);
            var spy = y - move_y*dt() + lengthdir_y(sDist,sAngle);
            
            if(scr_collision_point_free(spx,spy,z,COLLISION_ONLY_SOLID))
            {
                var spr = sprite_index;
                if(specialShot == "blood"){spr = s_bull_blood;}
                var pep = scr_shootShrapnel(id,spx,spy,max(16,z+random(4)),spr,sAngle,_spd-2+irandom(4),4+random(8),0.8,_dmgSplit);
                pep.lobGravity = 3;
                if(bfgShot)
                {
                    var pep = scr_shootShrapnel(id,spx,spy,max(16,z+random(4)),spr,sAngle,(_spd*2)-2+irandom(4),6+random(12),0.8,_dmgSplit/2);
                    pep.lobGravity = 3;
                    pep.distlife += 24; pep.timelife = 24;
                }
            }
        }
    }
}

if(sprite_index == s_bull_grass)
{
    if(flaregun || bfgShot || rocketShot)
    {
        var _shrapnel = 8;
        var _dmgSplit = 0.3;
        if(rocketShot){_shrapnel= 20; _dmgSplit = 0.2;}
        if(bfgShot){_shrapnel=40; _dmgSplit = 0.3;}
        var sAngle = 0;
        var sDist = 0;
        
        for(var i =0; i&lt;_shrapnel; i+=1)
        {
            sDist = 6+irandom(12);
            sAngle = irandom(360);
            var spx = x - move_x*dt() + lengthdir_x(sDist,sAngle);
            var spy = y - move_y*dt() + lengthdir_y(sDist,sAngle);
            
            if(scr_collision_point_free(spx,spy,z,COLLISION_ONLY_SOLID))
            {
                scr_shootShrapnel(id,spx,spy,max(16,z+random(4)),s_bull_grass,sAngle,8+irandom(8),10+random(20),0.8,_dmgSplit)
            }
        }
    }
}

if(sprite_index == s_bull_rubber)
{
    if(flaregun || bfgShot || rocketShot)
    {
        var _shrapnel = 3;
        var _dmgSplit = 0.3;
        if(rocketShot){_shrapnel= 5; _dmgSplit = 0.2;}
        if(bfgShot){_shrapnel=7; _dmgSplit = 0.3;}
        var sAngle = 0;
        var sDist = 0;
        sAngle = irandom(360);
        for(var i =0; i&lt;_shrapnel; i+=1)
        {
            sDist = 16;
            
            var spx = x - move_x*dt() + lengthdir_x(sDist,sAngle);
            var spy = y - move_y*dt() + lengthdir_y(sDist,sAngle);
            
            if(scr_collision_point_free(spx,spy,z,COLLISION_ONLY_SOLID))
            {
                var _bul = scr_shootShrapnel(id,spx,spy,max(16,z+4),s_bull_rubber,sAngle,20,0,0.8,_dmgSplit);
                _bul.wallRicochet = 2; _bul.lobGravity = 0;
            }
            sAngle += 360/_shrapnel;
        }
    }
}

if(sprite_index == s_bull_flamethrower)
{
    if(flaregun || bfgShot || rocketShot)
    {
        var _shrapnel = 12;
        var _dmgSplit = 0.1;
        var _spd = 10;
        if(rocketShot){_shrapnel= 16; _dmgSplit = 0.05; _spd = 15;}
        if(bfgShot){_shrapnel=24; _dmgSplit = 0.1; _spd = 22;}
        var sAngle = 0;
        var sDist = 0;
        
        sAngle = irandom(360);
        sDist = 10;
        for(var i =0; i&lt;_shrapnel; i+=1)
        {
            var spx = x - move_x*dt() + lengthdir_x(sDist,sAngle);
            var spy = y - move_y*dt() + lengthdir_y(sDist,sAngle);
            
            if(scr_collision_point_free(spx,spy,z,COLLISION_ONLY_SOLID))
            {
                var _bul = scr_shootShrapnel(id,spx,spy,max(12,z+random(4)),s_bull_flamethrower,sAngle-5+random(10),_spd-2+random(8),10+random(50),0.8,_dmgSplit);
                _bul.accel = -3; _bul.minspd = 2; _bul.rangeEndGrav = 0; _bul.lobGravity = 0;
                _bul.distlife = -1; _bul.timelife = 7;
                
                if(bfgShot)
                {
                    var _bul = scr_shootShrapnel(id,spx,spy,max(12,z+random(4)),s_bull_flamethrower,sAngle-5+random(10),_spd/2-2+random(8),10+random(50),0.8,_dmgSplit);
                    _bul.accel = -3; _bul.minspd = 2; _bul.rangeEndGrav = 0; _bul.lobGravity = 0;
                    _bul.distlife = -1; _bul.timelife = 7;
                }
                
            }
            
            sAngle += 360/_shrapnel;
        }
    }
}

if(sprite_index == s_bull_orichal)
{
    if(flaregun || bfgShot || rocketShot)
    {
        var _shrapnel = 4;
        var _dmgSplit = 0.5;
        if(rocketShot){_shrapnel= 8; _dmgSplit = 0.3;}
        if(bfgShot){_shrapnel=12; _dmgSplit = 0.4;}
        var sAngle = 0;
        var sDist = 0;
        sAngle = irandom(360);
        sDist = 12;
        for(var i =0; i&lt;_shrapnel; i+=1)
        {
            var spx = x - move_x*dt() + lengthdir_x(sDist,sAngle);
            var spy = y - move_y*dt() + lengthdir_y(sDist,sAngle);
            
            if(scr_collision_point_free(spx,spy,z,COLLISION_ONLY_SOLID))
            {
                var _bul = scr_shootShrapnel(id,spx,spy,max(16,z+2),s_bull_orichal,sAngle,15,30,1,_dmgSplit);
                _bul.wallRicochet = 2; _bul.lobGravity = 6;
            }
            
            sAngle += 360/_shrapnel;
        }
    }
}

if(sprite_index == s_bull_plasticBFG)
{
    repeat(9)
    {
        var shard = scr_combat_cloneBullet(id);
        shard.x = x;
        shard.y = y;
        shard.z = z;
        
        scr_combat_bulletDmgmod(shard,0,1/3);
        shard.initDir = move_dir + anglespray;
        
        with(shard)
        {
            sprite_index = s_bull_foam;
            rangeEndGrav = 4;
            lobGravity = 0;
            lobDirection = irandom(5);
            scr_entity_setDirSpd(initDir, 22);
        }
        shard.distlife = distlife*0.8;
        shard.timelife = timelife*0.8;
        
        anglespray+=40;
    }
}

if(sprite_index == s_bull_candyShot)   
    {     
    var squirts = 1;
    squirts+= 1+floor(pow/10);
    repeat(squirts)
        {
        var sprng = 1+random(pow/2);
        var sppos = random(360);
        var scl = 1;
        if(pow&lt;6){scl = 0.4;}
        else if(pow&lt;12){scl = 0.6;}
        else if(pow&lt;20){scl = 0.8;}
        var explo = scr_fx_simple_ext(x+lengthdir_x(sprng,sppos),y+lengthdir_y(sprng,sppos), z, s_bullsparkle, choose(1.5,2), choose(scl,-scl), choose(scl,-scl), 0, c_white, 1);
        }
        audio_play_sound_at_xy("candy_impact", 0, 0, x, y);
    }

if(sprite_index == s_bull_plantain)
{
    var squirts = 1;
    squirts+= 1+floor(pow/10);
    repeat(squirts)
    {
        var sprng = 1+random(pow/2);
        var sppos = random(360);
        var scl = 1;
        if(pow&lt;6){scl = 0.4;}
        else if(pow&lt;12){scl = 0.6;}
        else if(pow&lt;20){scl = 0.8;}
        var explo = scr_fx_simple_ext(x+lengthdir_x(sprng,sppos),y+lengthdir_y(sprng,sppos), z, s_bull_bananaBurst, choose(1.5,2), choose(scl,-scl), choose(scl,-scl), 0, c_white, 1);
    }
    audio_play_sound_at_xy("hoopzweap_plantain_impact", 0, 0,x,y);
    if(bfgShot)
    {
        anglespray = irandom(360);
        repeat(7)
        {
            var shard = scr_combat_cloneBullet(id);
            shard.x = x+lengthdir_x(16,anglespray);
            shard.y = y+lengthdir_y(16,anglespray);
            shard.z = max(z,10);
            
            scr_combat_bulletDmgmod(shard,0,1/2);
            shard.initDir = move_dir + anglespray;
            
            with(shard)
            {
                sprite_index = s_bull_plantain;
                rangeEndGrav = 5;
                lobGravity = 0;
                lobDirection = 0;
                scr_entity_setDirSpd(initDir, 16);
            }
            shard.distlife = distlife*0.8;
            shard.timelife = timelife*0.8;
            
            anglespray+=30+irandom(40);
        }
    }
}

if(sprite_index == s_bull_blaster)
{
    audio_play_sound_at_xy("hoopzweap_blaster_impact", 0, 0, x, y);
    _obj = instance_create(x,y-z,o_FX);
    _obj.sprite_index = s_bull_blasterBlast;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
    if(pow&lt;20){_obj.image_xscale = 0.8; _obj.image_yscale = 0.8;}
    if(pow&lt;12){_obj.image_xscale = 0.6; _obj.image_yscale = 0.6;}
    if(pow&lt;6){_obj.image_xscale = 0.4; _obj.image_yscale = 0.4;}
    
    if(bfgShot || rocketShot || flaregun)
    {
        ///var blast = instance_create(x, y, explodeObject);///scr_combat_cloneBullet(id);
    }
}

if(matName=="Itano" &amp;&amp; (flaregun || bfgShot || rocketShot))
{
    var _shrapnel = 4;
    var _dmgSplit = 0.5;
    
    if(rocketShot){_shrapnel= 6; _dmgSplit = 0.3;}
    if(bfgShot){_shrapnel=12; _dmgSplit = 0.4;}
    var sAngle = 0;
    var sDist = 0;
    sAngle = irandom(360);
    sDist = 12;
    for(var i =0; i&lt;_shrapnel; i+=1)
    {
        var spx = x - move_x*dt() + lengthdir_x(sDist,sAngle);
        var spy = y - move_y*dt() + lengthdir_y(sDist,sAngle);
        
        if(scr_collision_point_free(spx,spy,z,COLLISION_ONLY_SOLID))
        {
            var _bul = scr_shootShrapnel(id,spx,spy,max(16,z+2),s_bull_rocket,sAngle,15,30,1,_dmgSplit);
            _bul.enemySeek = enemySeek; _bul.enemyTarget = enemyTarget;
            _bul.enemySeekRange = enemySeekRange; _bul.enemySeekTime = enemySeekTime;
            _bul.enemySeekAccel =enemySeekAccel;
            _bul.explodeObject = o_explosion;
            _bul.explodeSprite = s_effect_explo_32;
            _bul.explodeDamageMod = 0.8;
            _bul.explodeOnGround = true;
            _bul.explodeOnTimeout = true;
            _bul.explodeOnWall = true;
            _bul.explodeOnEnemy = true;
            _bul.explodeOnEnemyProx = false;
            _bul.explodeGunType = explodeGunType;
            _bul.explodeDamage = pow*_dmgSplit;
            _bul.trailObject = o_explEffect;
            _bul.trailSprite = s_pixel; //effect_itanosmoke;
            _bul.trailAcc = 0;
            _bul.trailAmount = 1;
            _bul.trailInterval = 2;
        }
        
        sAngle += 360/_shrapnel;
    }
}

if (bfgShot &amp;&amp; !specialBFG)
{
    // Deal BFG cone damage
    scr_combat_weapon_bfg_damageCone(attack_from, bfgFiredDirection, id);
}

if(sprite_index == s_bull_tofu1 || sprite_index == s_bull_tofu2 || sprite_index == s_bull_tofu3 || sprite_index == s_bull_tofu4 || sprite_index == s_bull_tofu5)
{
    Puddle_Effect(x, y, base_z, choose(2, 3), make_color_rgb(238,234,229));
}

if(sprite_index == s_bull_polenta)
{
    Puddle_Effect(x, y, base_z, choose(2, 3), make_color_rgb(246,195,11));
}

// Special effects based on gun type or material
if(sprite_index == s_bull_bfg)
{
    var ef = scr_fx_simple_ext(x, y, z, s_bull_bfg_impact, 2, image_xscale, image_yscale, 0, c_white, 1);
    audio_play_sound_at_xy("hoopzweap_BFG_explode", 0, 0,x,y);
}   

if(sprite_index == s_bull_angelCore)
{
    var featherCount = 1;
    if(pow&gt;240){featherCount = 4+irandom(8);}
    else if(pow&gt;120){featherCount = 3+irandom(5);}
    else if(pow&gt;60){featherCount = 2+irandom(4);}
    else if(pow&gt;30){featherCount = 2+irandom(3);}
    else if(pow&gt;15){featherCount = 2+irandom(2);}
    else{featherCount = 2+irandom(1);}
    if(flaregun || bfgShot || rocketShot){featherCount = featherCount*2;}
    
    repeat(featherCount)
    {
        ob = instance_create(x-2+random(4),y-2+random(4),o_part_angelFeathers);
        ob.z = z; ob.move_z = 1+random(8);
        ob.move_dir = move_dir-60+random(120);
        ob.move_dist = 1+random(6);
        ob.move_x = lengthdir_x(ob.move_dist,ob.move_dir);
        ob.move_y = lengthdir_y(ob.move_dist,ob.move_dir);
        ob.image_index = median(irandom(image_index),0,9)
    }
    
    if(flaregun || bfgShot || rocketShot)
    {
        var _shrapnel = 5;
        var _dmgSplit = 0.3;
        if(rocketShot){_shrapnel= 7; _dmgSplit = 0.2;}
        if(bfgShot){_shrapnel=12; _dmgSplit = 0.3;}
        var sAngle = 0;
        var sDist = 0;
        sAngle = irandom(360);
        for(var i =0; i&lt;_shrapnel; i+=1)
        {
            sDist = 16;
            
            var spx = x - move_x*dt() + lengthdir_x(sDist,sAngle);
            var spy = y - move_y*dt() + lengthdir_y(sDist,sAngle);
            
            if(scr_collision_point_free(spx,spy,z,COLLISION_ONLY_SOLID))
            {
                var _bul = scr_shootShrapnel(id,spx,spy,max(16,z+4),s_bull_angelCore,sAngle,10,0,0.8,_dmgSplit);
                _bul.roaming = roaming/2;  _bul.lobGravity = 2;
                if(flaregun){_bul.lobGravity = 1;}
                _bul.distlife = max(64,distlife);
                _bul.timelife = max(120,timelife);
            }
            sAngle += 360/_shrapnel;
        }
    }
}

if(specialShot = "goo")
{
    var bloodAmount = 1;
            
    bloodAmount+= pow/8
    Puddle_Effect(x, y, base_z, min(4,bloodAmount), make_color_rgb(0,197,37));
    if(bfgShot)
    {
        
        var addAngle = irandom(180);
        var _split = 8;
        
        for(var i =0; i&lt;_split; i+=1)
        {
            var spx = x - move_x*dt() + lengthdir_x(16,addAngle);
            var spy = y - move_y*dt() + lengthdir_y(16,addAngle);
            if(scr_collision_point_free(spx,spy,z,COLLISION_ONLY_SOLID))
            {
                var shard = scr_combat_cloneBullet(id);
                shard.x = spx;
                shard.y = spy;
                shard.z = z+6;
                
                Puddle_Effect(x, y, base_z, min(2,bloodAmount/2), make_color_rgb(0,197,37));
                
                var dmgSplit = _split/2;
                
                scr_combat_bulletDmgmod(shard,0,1/dmgSplit);

                shard.initDir = addAngle;
                
                with(shard)
                {
                    sprite_index = s_bull_goo_med;
                    rangeEndGrav = 10;
                    lobGravity = 2;
                    scr_entity_setDirSpd(addAngle, 14);
                }
                shard.distlife = distlife*0.8;
                shard.timelife = timelife*0.8;
            }
            addAngle += 360/_split;
        }
    }
}     

if(specialShot == "ghost")
{
    var count = 1 + floor(pow /16) + irandom(pow/12);
    repeat(count)
    {
        var radius = pow / 3;
        var ob = instance_create(x-radius+random(radius*2),y-radius+random(radius*2),o_FX);
        ob.z = z - 2 + irandom(4)
        ob.sprite_index = s_bull_pearl_spiritSmall;
        ob.image_speed = choose(0.5,0.4,0.4,0.3,0.25,0.2);
        var scl = 1;
        if(pow&lt;20){ob.scl = 0.6+random(0.4);}
        if(pow&lt;10){ob.scl = 0.3+random(0.4);}
        if(pow&lt;5){ob.scl = 0.1+random(0.3);}
    }
    
    if(bfgShot || rocketShot)
    {
        var addAngle = irandom(180);
        var _split = 6;
        if(bfgShot){_split = 12;}
        for(var i =0; i&lt;_split; i+=1)
        {
            var spx = x - move_x*dt() + lengthdir_x(8,addAngle);
            var spy = y - move_y*dt() + lengthdir_y(8,addAngle);
            if(scr_collision_point_free(spx,spy,z,COLLISION_ONLY_SOLID))
            {
                var shard = scr_combat_cloneBullet(id);
                shard.x = spx;
                shard.y = spy;
                shard.z = z+2;
                
                var dmgSplit = _split/2;
                
                scr_combat_bulletDmgmod(shard,0,1/dmgSplit);

                shard.initDir = addAngle;
                
                with(shard)
                {
                    sprite_index = s_bull_pearl_ghostShot;
                    scr_entity_setDirSpd(addAngle, 16);
                }
                
                shard.wave += wave + 30;
                shard.waveAmp += waveAmp + 20;
                shard.throughWalls = 64;
                shard.enemyPierce = 3;
                shard.enemySeek += enemySeek+30;
                shard.enemySeekRange += enemySeekRange+64;
                shard.enemySeekRange += enemySeekRange+64;
                shard.enemySeekTime = enemySeekTime + 1;
                shard.distlife = distlife/2;
                shard.timelife = timelife/2;
            }
            addAngle += 360/_split;
        }
    }
}

if(sprite_index == s_bull_crystalshot)
{
    if(pow&gt;=2)
    {
            var _shrapnel = 5;
            var _dmgSplit = 0.3;
            var _dist = 48;
            if(flaregun){_shrapnel= 6; _dmgSplit = 0.4; _dist = 64;}
            if(rocketShot){_shrapnel= 8; _dmgSplit = 0.3; _dist = 80;}
            if(bfgShot){_shrapnel=12; _dmgSplit = 0.75; _dist = 120;}
            var sAngle = 0;
            var sDist = 0;
            sAngle = irandom(360);
            sDist = 12;
        
        var randangle = irandom(180);
        var addAngle = 0;
        
        for(var i =0; i&lt;_shrapnel; i+=1)
        {
            var curangle = randangle + addAngle;
            var spx = x - move_x*dt() + lengthdir_x(8,curangle);
            var spy = y - move_y*dt() + lengthdir_y(8,curangle);
            if(scr_collision_point_free(spx,spy,z,COLLISION_ONLY_SOLID))
            {
                var shard = scr_combat_cloneBullet(id);
                shard.x = spx;
                shard.y = spy;
                shard.z = max(10,z+2);
                
                shard.initDir = curangle;
                
                with(shard)
                {
                    sprite_index = s_bull_crystalshard;
                    scr_entity_setDirSpd(curangle, 15+irandom(10));
                }
                
                shard.distlife = _dist;
                shard.timelife = _dist*2;
                if(bfgShot &amp;&amp; i mod 3 == 1)
                {
                    scr_entity_setDirSpd(curangle, 10+irandom(5));
                    shard.distlife *= 0.7;
                    shard.sprite_index = s_bull_crystalshot;
                    scr_combat_bulletDmgmod(shard,-1,_dmgSplit);
                }
                else{scr_combat_bulletDmgmod(shard,-1,_dmgSplit/2);}
            }
            addAngle += 30+irandom(60);
        }
        audio_play_sound_at_xy("hoopzweap_crystal_explode", false, 10, x, y);
    }
    
    repeat(1+floor(pow/5))
    {
        var dst = 1 + random(pow/20);
        var dir = random(360);
        var ob = instance_create(x+lengthdir_x(dst,dir),y+lengthdir_y(dst,dir),o_FX);
        ob.z = z+1;
        ob.sprite_index = s_bullsparkle;
        var size = random(0.5)+0.5;
        ob.image_angle = random(360);
        ob.image_blend = choose(c_white,c_white,make_color_rgb(255,255,0));
        ob.image_xscale = size; ob.image_yscale = size;
        ob.image_speed = choose(1,0.5,0.25,0.2);
    }
    
}

if(sprite_index == s_bull_diamond)
{
    if(pow&gt;=2)
    {
        var addAngle = startAngle;
        for(var i =0; i&lt;4; i+=1)
        {
            var spx = x - move_x*dt() + lengthdir_x(8,addAngle);
            var spy = y - move_y*dt() + lengthdir_y(8,addAngle);
            if(scr_collision_point_free(spx,spy,z,COLLISION_ONLY_SOLID))
            {
                var shard = scr_combat_cloneBullet(id);
                shard.x = spx;
                shard.y = spy;
                shard.z = z+2;
                
                scr_combat_bulletDmgmod(shard,-1,1/5);
                
                shard.initDir = addAngle;
                
                with(shard)
                {
                    sprite_index = s_bull_diamondShard;
                    scr_entity_setDirSpd(addAngle, 30);
                }
                
                shard.distlife = distlife/2;
                shard.timelife = timelife/2;
            }
            addAngle += 90;
        }
    }
    
    repeat(1+floor(pow/5))
    {
        var dst = 1 + random(pow/20);
        var dir = random(360);
        var ob = instance_create(x+lengthdir_x(dst,dir),y+lengthdir_y(dst,dir),o_FX);
        ob.z = z+1;
        ob.sprite_index = s_bullsparkle;
        var size = random(0.5)+0.5;
        ob.image_angle = random(360);
        ob.image_blend = choose(c_white,c_white,make_color_rgb(255,255,0));
        ob.image_xscale = size; ob.image_yscale = size;
        ob.image_speed = choose(1,0.5,0.25,0.2);
    } 
}

if(specialShot = "paper")
{
    var dr = point_direction(0,0,move_x,move_y);
    amnt = floor(1 + pow/10 + irandom(pow/5))
    audio_play_sound_at_xy(scr_soundbank_pickSound("hoopzweap_origami_impact"), false, 10, x, y);
    repeat(amnt)
    {
        var sprng = random(amnt/2);
        var sppos = random(360);
        
        obj = instance_create(x+lengthdir_x(sprng,sppos),y+lengthdir_y(sprng,sppos),o_papershredEffect);
        var tdir = dr - 20+random(40);
        var spdMd = 0.20+random(0.40);
        obj.move_x = lengthdir_x(move_dist*spdMd,tdir);
        obj.move_y = lengthdir_y(move_dist*spdMd,tdir);
        obj.z = z;
        obj.dny = dny;
    }
    
    if(flaregun || bfgShot || rocketShot)
    {
        var _shrapnel = 4;
        var _dmgSplit = 0.5;
        var _spd = 6;
        if(rocketShot){_shrapnel= 8; _dmgSplit = 0.3; _spd = 8;}
        if(bfgShot){_shrapnel=12; _dmgSplit = 0.4; _spd = 10;}
        var sAngle = 0;
        var sDist = 0;
        
        sAngle = irandom(360);
        sDist = 12;
        for(var i =0; i&lt;_shrapnel; i+=1)
        {
            var spx = x - move_x*dt() + lengthdir_x(sDist,sAngle);
            var spy = y - move_y*dt() + lengthdir_y(sDist,sAngle);
            
            if(scr_collision_point_free(spx,spy,z,COLLISION_ONLY_SOLID))
            {
                var _bul = scr_shootShrapnel(id,spx,spy,max(12,z+random(4)),s_bull_paper,sAngle,_spd-1+random(2),10+random(20),0.8,_dmgSplit);
                _bul.accel = 1; _bul.minspd = 2;_bul.roaming = 50; _bul.rangeEndGrav = 2; _bul.lobGravity = 0.5;
                _bul.distlife += 16; _bul.timelife += 900;
            }
            
            sAngle += 360/_shrapnel;
        }
    }
}

if(specialShot = "bone")
{
    var _ric;
    _ric = instance_create(x,y,o_partburst);
    _ric.sprite_index = s_bull_bone;
    _ric.z = z;
    _ric.casingSound = "hoopzweap_bone_debris";
    _ric.bits = floor(image_index/4)+irandom(2);
    _ric.biggestsize = round(image_index*0.7);
    audio_play_sound_at_xy(scr_soundbank_pickSound("hoopzweap_bone_impact"), false, 10, x, y);
    with(_ric){event_user(7);}
    
    if(flaregun || bfgShot || rocketShot)
    {
        var _shrapnel = 6;
        var _dmgSplit = 0.5;
        if(rocketShot){_shrapnel= 12; _dmgSplit = 0.3;}
        if(bfgShot){_shrapnel=20; _dmgSplit = 0.4;}
        var sAngle = 0;
        var sDist = 0;
        
        for(var i =0; i&lt;_shrapnel; i+=1)
        {
            sDist = 6+irandom(12);
            sAngle = irandom(360);
            var spx = x - move_x*dt() + lengthdir_x(sDist,sAngle);
            var spy = y - move_y*dt() + lengthdir_y(sDist,sAngle);
            
            if(scr_collision_point_free(spx,spy,z,COLLISION_ONLY_SOLID))
            {
                scr_shootShrapnel(id,spx,spy,max(16,z+random(4)),s_bull_bone,sAngle,8+irandom(10),4+random(12),0.8,_dmgSplit)
            }
        }
    }  
}

if(sprite_index == s_bull_salt)
{
    if(flaregun || bfgShot || rocketShot)
    {
        var saltAmount = 1 + irandom(pow/6);
        if(bfgShot){saltAmount *=1.5;}
        
        repeat(saltAmount)
        {
            var angleRnd = irandom(360);
            var shard = scr_combat_cloneBullet(id);
            shard.x = x;
            shard.y = y;
            shard.z = z;
            
            scr_combat_bulletDmgmod(shard,0,1/4);
            shard.initDir = angleRnd;
            
            with(shard)
            {
                sprite_index = s_bull_salt;
                rangeEndGrav = 4;
                lobGravity = 2+random(2);
                lobDirection = irandom(90);
                scr_entity_setDirSpd(angleRnd, 4+pow/4 + irandom(10+pow/2));
            }
            shard.distlife = distlife/3;
            shard.timelife = timelife/3;
        }
    }
}

if(sprite_index == s_bull_junk)
{
    var _ric;
    _ric = instance_create(x,y,o_partburst);
    _ric.sprite_index = s_bull_junk;
    _ric.z = z;
    _ric.bits = floor(pow/5);
    _ric.casingSound = "hoopzweap_junk_debris";
    _ric.biggestsize = round(image_index*0.7);
    audio_play_sound_at_xy(scr_soundbank_pickSound("hoopzweap_junk_impact"), false, 10, x, y);
    with(_ric){event_user(7);}
    
    if(flaregun || rocketShot || bfgShot)
    {
        var junkAmount = 3 + irandom(pow/4);
        
        if(bfgShot){junkAmount *=1.5;}
        
        repeat(junkAmount)
        {
            var angleRnd = irandom(360);
            var spx = x - move_x*dt() + lengthdir_x(8,angleRnd);
            var spy = y - move_y*dt() + lengthdir_y(8,angleRnd);
            if(scr_collision_point_free(spx,spy,z,COLLISION_ONLY_SOLID))
            {
                var shard = scr_combat_cloneBullet(id);
                shard.x = spx;
                shard.y = spy;
                shard.z = z+2;
                
                var dmgSplit = junkAmount/3;
                
                scr_combat_bulletDmgmod(shard,0,1/dmgSplit);

                shard.initDir = angleRnd;
                
                with(shard)
                {
                    sprite_index = s_bull_junk;
                    rangeEndGrav = 10;
                    lobGravity = 2+random(2);
                    lobDirection = irandom(20);
                    move_z = 1;
                    scr_entity_setDirSpd(angleRnd, 5+pow/4 + irandom(20+pow/2));
                }
                shard.distlife = distlife/2;
                shard.timelife = timelife/2;
            }
        }
        
        if(bfgShot)
        {
            var addAngle = irandom(180);
            var _split = 8;
            
            for(var i =0; i&lt;_split; i+=1)
            {
                var spx = x - move_x*dt() + lengthdir_x(16,addAngle);
                var spy = y - move_y*dt() + lengthdir_y(16,addAngle);
                if(scr_collision_point_free(spx,spy,z,COLLISION_ONLY_SOLID))
                {
                    var shard = scr_combat_cloneBullet(id);
                    shard.x = spx;
                    shard.y = spy;
                    shard.z = z+2;
                    
                    var dmgSplit = _split/4;
                    
                    scr_combat_bulletDmgmod(shard,0,1/dmgSplit);
    
                    shard.initDir = addAngle;
                    
                    with(shard)
                    {
                        sprite_index = s_bull_junk;
                        rangeEndGrav = 10;
                        lobGravity = 3;
                        move_z = 1;
                        scr_entity_setDirSpd(addAngle, 25);
                    }
                    shard.distlife = distlife/2;
                    shard.timelife = timelife/2;
                }
                addAngle += 360/_split;
            }
        }   
    }
    
}

if(sprite_index == s_bull_foam)
{
    var _ric;
    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_foam;
    _ric.image_index = image_index;
    _ric.image_speed = 0;
    _ric.z = z;
    _ric.move_z /=2;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;
    audio_play_sound_at_xy(scr_soundbank_pickSound("hoopzweap_foamdart_impact"), false, 10, x, y);
    _ric.rotspd = random(30)*choose(1,0.5,0.25)*choose(1,-1);
}

if(sprite_index == s_bull_yggShot)
{
    if(bfgShot)// || rocketShot)
    {
        var gro = instance_create(x,y,o_yggGrowth);
        gro.z = 0;
        gro.sprite_index = s_bull_yggTree;
    }
    
    if(rocketShot)
    {
        var gro = instance_create(x,y,o_yggGrowth);
        gro.z = 0;
        gro.sprite_index = s_bull_yggPumpkin;
    }
}

if(sprite_index == s_bull_glass_light)
{
    var _ric;
    audio_play_sound_at_xy(scr_soundbank_pickSound("hoopzweap_glass_impact"), false, 10, x, y);
    repeat(floor(2 + pow/6))
    {
        _ric = instance_create(x,y,o_casings);
        _ric.rot = image_angle;
        _ric.sprite_index = s_bull_bone;
        _ric.image_index = irandom(2);
        _ric.image_speed = 0;
        _ric.z = z;
        _ric.move_z /=3;
        _ric.move_x /=2;
        _ric.move_y /=2;
        _ric.scale = 1;
    }
}

if(sprite_index == s_bull_stone_tiny)
{
    var _ric;

    repeat(3)
    {
    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_bone;
    _ric.image_index = irandom(2);
    _ric.image_speed = 0;
    _ric.z = z;
    _ric.move_z /=3;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;
    }
    audio_play_sound_at_xy(scr_soundbank_pickSound("hoopzweap_stone_impact"), false, 10, x, y);
}

if(sprite_index == s_bull_stone_small)
{
    var _ric;
    
    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_stone_tiny;
    _ric.image_index = irandom(4);
    _ric.image_speed = 0.2;
    _ric.z = z;
    _ric.move_z /=3;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;
    audio_play_sound_at_xy(scr_soundbank_pickSound("hoopzweap_stone_impact"), false, 10, x, y);
    repeat(2)
    {
    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_bone;
    _ric.image_index = irandom(2);
    _ric.image_speed = 0;
    _ric.z = z;
    _ric.move_z /=3;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;
    }
}

if(sprite_index = s_bull_chitin_egg)
{
    audio_play_sound_at_xy("hoopzweap_chitin_die",false,0,x,y);
    var previ = instance_place(x-6+random(12),y-6+random(12),o_chitinEgg_floor);
    if(previ != noone)
    {
        if(previ.parentPower&gt;pow*2){previ.parentPower += pow/6;}
        else{previ.parentPower += pow/3;}
    }
    else
    {
        var _ob = instance_create(x,y,o_chitinEgg_floor);
        _ob.parentPower = pow;
        _ob.image_index = image_index;
        _ob.z = z;
        _ob.guntype = guntype;
    }
}

if(sprite_index == s_bull_stone)
{
    var _ric;
    
    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_stone_small;
    _ric.image_index = irandom(4);
    _ric.image_speed = 0.2;
    _ric.z = z;
    _ric.move_z /=3;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;

    audio_play_sound_at_xy(scr_soundbank_pickSound("hoopzweap_stone_impact"), false, 10, x, y);
    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_stone_tiny;
    _ric.image_index = irandom(4);
    _ric.image_speed = 0.2;
    _ric.z = z;
    _ric.move_z /=3;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;
    
    repeat(2)
    {
    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_bone;
    _ric.image_index = irandom(2);
    _ric.image_speed = 0;
    _ric.z = z;
    _ric.move_z /=3;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;
    }
}
    
if(specialShot == "stone")
{
    if(flaregun || bfgShot || rocketShot)
    {
        var _shrapnel = 6;
        var _dmgSplit = 0.5;
        if(rocketShot){_shrapnel= 12; _dmgSplit = 0.3;}
        if(bfgShot){_shrapnel=20; _dmgSplit = 0.4;}
        var sAngle = 0;
        var sDist = 0;
        
        for(var i =0; i&lt;_shrapnel; i+=1)
        {
            sDist = 6+irandom(12);
            sAngle = irandom(360);
            var spx = x - move_x*dt() + lengthdir_x(sDist,sAngle);
            var spy = y - move_y*dt() + lengthdir_y(sDist,sAngle);
            
            if(scr_collision_point_free(spx,spy,z,COLLISION_ONLY_SOLID))
            {
                scr_shootShrapnel(id,spx,spy,max(16,z+random(4)),s_bull_stone,sAngle,8+irandom(8),4+random(10),0.7,_dmgSplit)
            }
        }
    }
}

if(sprite_index == s_bull_goo_tiny)
{
    _obj = instance_create(x,y-z,o_FX);
    _obj.sprite_index = s_bull_gooburst_tiny;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
    audio_play_sound_at_xy(scr_soundbank_pickSound("hoopzweap_rotten_impact"), false, 10, x, y);
}

if(sprite_index == s_bull_goo_small)
{
    _obj = instance_create(x,y-z,o_FX);
    _obj.sprite_index = s_bull_gooburst_small;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
    audio_play_sound_at_xy(scr_soundbank_pickSound("hoopzweap_rotten_impact"), false, 10, x, y);
}

if(sprite_index == s_bull_goo_med)
{
    _obj = instance_create(x,y-z,o_FX);
    _obj.sprite_index = s_bull_gooburst_med;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
    audio_play_sound_at_xy(scr_soundbank_pickSound("hoopzweap_rotten_impact"), false, 10, x, y);
}

if(sprite_index == s_bull_goo_large)
{
    _obj = instance_create(x,y-z,o_FX);
    _obj.sprite_index = s_bull_gooburst_large;
    _obj.image_speed = 0.25;
    audio_play_sound_at_xy(scr_soundbank_pickSound("hoopzweap_rotten_impact"), false, 10, x, y);
}


if(sprite_index == s_bull_stone_large)
{
    var _ric;
    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_stone;
    _ric.image_index = irandom(4);
    _ric.image_speed = 0.2;
    _ric.z = z;
    _ric.move_z /=3;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;
    audio_play_sound_at_xy(scr_soundbank_pickSound("hoopzweap_stone_impact"), false, 10, x, y);
    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_stone_small;
    _ric.image_index = irandom(4);
    _ric.image_speed = 0.2;
    _ric.z = z;
    _ric.move_z /=3;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;

    repeat(2)
    {
        _ric = instance_create(x,y,o_casings);
        _ric.rot = image_angle;
        _ric.sprite_index = s_bull_stone_tiny;
        _ric.image_index = irandom(4);
        _ric.image_speed = 0.2;
        _ric.z = z;
        _ric.move_z /=3;
        _ric.move_x /=2;
        _ric.move_y /=2;
        _ric.scale = 1;
    }
    
    repeat(3)
    {
    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_bone;
    _ric.image_index = irandom(2);
    _ric.image_speed = 0;
    _ric.z = z;
    _ric.move_z /=3;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;
    }
}

if(sprite_index == s_bull_francium)
{
    _ric = instance_create(x,y,o_flash);
    _ric.rot = choose(0,90,180,270);
    _ric.sprite_index = s_bull_franciumGone;
    _ric.image_index = 0;
    with(_ric){scr_entity_animation_setSpeed("default", 3);}
    _ric.z = z;
    _ric.move_z =0;
    _ric.move_x =0;
    _ric.move_y =0;
    _ric.gravity_z = 0;
    _ric.image_xscale = image_xscale;
    _ric.image_yscale = image_yscale;
}

if(sprite_index == s_bull_digitalLaser)
{
    _ric = instance_create(x,y,o_flash);
    _ric.rot = choose(0,90,180,270);
    _ric.sprite_index = s_bull_laserHit;
    _ric.image_index = 0;
    with(_ric){scr_entity_animation_setSpeed("default", 2);}
    _ric.z = z;
    _ric.move_z =0;
    _ric.move_x =0;
    _ric.move_y =0;
    _ric.gravity_z = 0;
    _ric.image_xscale = image_index/8;
    _ric.image_yscale = image_index/8;
    ///audio_play_sound_at_xy(scr_soundbank_pickSound("digital_impact"), false, 10, x, y);
}

if(sprite_index == s_bull_scrollWeapon)
{
    _ric = instance_create(x,y,o_flash);
    _ric.image_angle = image_angle;
    _ric.sprite_index = s_bull_scrollWeapon_Die;
    _ric.image_index = 0;
    with(_ric){scr_entity_animation_setSpeed("default", 2);}
    _ric.z = z;
    _ric.move_z =0;
    _ric.move_x =0;
    _ric.move_y =0;
    _ric.gravity_z = 0;
}

if(sprite_index == s_bull_spore)
{
    audio_play_sound_at_xy(scr_soundbank_pickSound("fungi_spore_grow_mushroom"), false, 10, x, y);
}

// Untamonium bullets //
if(sprite_index == s_bull_untamonium_tiny)
{
    _obj = instance_create(x,y-z,o_FX);
    _obj.sprite_index = s_bull_untamoniumburst_tiny;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
    audio_play_sound_at_xy(scr_soundbank_pickSound("hoopzweap_rotten_impact"), false, 10, x, y);
}

if(sprite_index == s_bull_untamonium_small)
{
    _obj = instance_create(x,y-z,o_FX);
    _obj.sprite_index = s_bull_untamoniumburst_small;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
    audio_play_sound_at_xy(scr_soundbank_pickSound("hoopzweap_rotten_impact"), false, 10, x, y);
}

if(sprite_index == s_bull_untamonium_med)
{
    _obj = instance_create(x,y-z,o_FX);
    _obj.sprite_index = s_bull_untamoniumburst_med;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
    audio_play_sound_at_xy(scr_soundbank_pickSound("hoopzweap_rotten_impact"), false, 10, x, y);
}

if(sprite_index == s_bull_untamonium_large)
{
    _obj = instance_create(x,y-z,o_FX);
    _obj.sprite_index = s_bull_untamoniumburst_large;
    _obj.image_speed = 0.25;
    audio_play_sound_at_xy(scr_soundbank_pickSound("hoopzweap_rotten_impact"), false, 10, x, y);
}
    
// Clear data. Do this last as above steps e.g. BFG may need data.
event_inherited();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Config stuff based on bullet type
superTrail = superShot; // GZ
superX = x;
superY = y;
image_xscale = 1;
image_yscale = 1;
pow =
    scr_stats_getAttackStat(id, STAT_ATTACK_DMG_NORMAL) + 
    scr_stats_getAttackStat(id, STAT_ATTACK_DMG_BIO) + 
    scr_stats_getAttackStat(id, STAT_ATTACK_DMG_CYBER) + 
    scr_stats_getAttackStat(id, STAT_ATTACK_DMG_MENTAL) + 
    scr_stats_getAttackStat(id, STAT_ATTACK_DMG_ZAUBER) + 
    scr_stats_getAttackStat(id, STAT_ATTACK_DMG_COSMIC);
//if (pow &lt; 0) { instance_destroy(); exit; }
//show_debug_message("o_bullet move_dir:" + string(move_dir));
initSpd = move_dist;
initDir = move_dir;

if(matName == "Silk")
{
    lobAngledSprite = true;
}

switch(sprite_index)
{
    // NORMAL BULLETS //
    case s_bull:
    image_blend = c_yellow
        if (!superShot)
        {
            sprite_index = s_physShot;
            motionBlur = true;
        }
        else
        {
            sprite_index = s_physShot;
            image_xscale = image_xscale*1.5;
            image_yscale = image_yscale*1.4;
        }
        break;
        
    ///NORMAL CROSSBOWS
    case s_bull_arrowHead:
        image_index = median(floor(pow/10),0,7);
        bullet_spriteTurn = true;
        break;
        
    // CANDY 
    case s_bull_candyShot:
        image_index = median(0,21,(pow/6)-2+irandom(4));
        if(speedBonus&gt;1.5){speedBonus = 1};
        image_yscale = choose(1,-1);
        image_angle = choose(0,90,180,270);
        bullet_spriteTurn = false;
        bulletSpin = choose(1,-1)*(5+irandom(20));        
        var dr = point_direction(0,0,move_x,move_y);
        break;            
        
    // STONE
    case s_bull_stone:
        specialShot = "stone";
        
        if(pow&gt;32){sprite_index = s_bull_stone_large;}
        else if (pow&gt;16){sprite_index = s_bull_stone;}
        else if (pow&gt;8){sprite_index = s_bull_stone_small;}
        else{sprite_index = s_bull_stone_tiny;}
        image_angle = choose(0,90,180,270);
        if(bfgShot)
        {
            sprite_index=s_bull_stone_moai; image_angle = 0;
            scr_entity_makeSoundEmitter();
            audio_play_sound_on_actor(id,"hoopzweap_stone_moai", false, 0);
        }
        image_xscale = 1;
        image_yscale = 1;
        bullet_spriteTurn = false;
        if(speedBonus&gt;1.2){speedBonus = 1.2};
        specialBFG = true;
        break;
        
    // CARBON
    case s_bull_carbon:
        if(pow&gt;32){image_index = 5;}
        else if (pow&gt;24){image_index = 4;}
        else if (pow&gt;18){image_index = 3;}
        else if (pow&gt;12){image_index = 2;}
        else if (pow&gt;6){image_index = 1;}
        else{image_index = 0;}
        lobAngledSprite = true;
        if(speedBonus&gt;1.5){speedBonus = 1.5};
        break;
        
    // MYTHRIL
    case s_bull_mythril:
        image_index = median(0,14,pow/6);
        image_xscale = 1;
        image_yscale = 1;
        lobAngledSprite = true;
        break;
        
    // BRONZE
    case s_bull_rusty:
        if(pow&gt;64){image_index = 8;}
        else if (pow&gt;48){image_index = 7;}
        else if (pow&gt;32){image_index = 6;}
        else if (pow&gt;24){image_index = 5;}
        else if (pow&gt;18){image_index = 4;}
        else if (pow&gt;12){image_index = 3;}
        else if (pow&gt;8){image_index = 2;}
        else if (pow&gt;4){image_index = 1;}
        else{image_index = 0;}
        if(speedBonus&gt;1.5){speedBonus = 1.5};
        lobAngledSprite = true;
        break;    
        
    // Foil
    case s_bull_foil:
        if(pow&gt;80){image_index = 9;}
        else if (pow&gt;64){image_index = 8;}
        else if (pow&gt;48){image_index = 7;}
        else if (pow&gt;32){image_index = 6;}
        else if (pow&gt;24){image_index = 5;}
        else if (pow&gt;18){image_index = 4;}
        else if (pow&gt;12){image_index = 3;}
        else if (pow&gt;8){image_index = 2;}
        else if (pow&gt;4){image_index = 1;}
        else{image_index = 0;}
        if(speedBonus&gt;1.5){speedBonus = 1.5};
        lobAngledSprite = true;
        image_yscale = choose(1,-1);
        break;
        
    // SALT
    case s_bull_salt:
        image_index = floor(min(19,pow))
        image_angle = choose(0,90,180,270);
        image_xscale = 1;
        image_yscale = 1;
        saltTrail = 1;
        if(speedBonus&gt;1.2){speedBonus = 1.2};
        break;
    
    // GLASS
    case s_bull_glass_light:
        if(pow&gt;80){image_index = 8;}
        else if (pow&gt;64){image_index = 7;}
        else if (pow&gt;48){image_index = 6;}
        else if (pow&gt;32){image_index = 5;}
        else if (pow&gt;24){image_index = 4;}
        else if (pow&gt;18){image_index = 3;}
        else if (pow&gt;12){image_index = 2;}
        else if (pow&gt;6){image_index = 1;}
        else{image_index = 0;}
        image_alpha = 0.6;
        lobAngledSprite = true;
        if(speedBonus&gt;1.5){speedBonus = 1.5};
        break;    
    
    // NEON
    case s_bull_neon:
        neon = true;
        neonHue = irandom(255);
        neonSat = 0;
        neonVal = 255;
        neonSize = 0.2 + pow/50;
        neonTrail = 3;
        colorBlend = make_color_hsv(neonHue,neonSat,neonVal);
        if(speedBonus&gt;1.2){speedBonus = 1.2};
        specialBFG = true;
        break;
        
    case s_bull_neonGloworb:
        neonHue = irandom(255);
        neonSat = 255;
        neonVal = 255;
        colorBlend = make_color_hsv(neonHue,neonSat,neonVal);
        if(speedBonus&gt;1.2){speedBonus = 1.2};
        useColorBlend = true;
        image_speed = 0;
        image_index = 1;
        
        var scl = pow/80;
        image_xscale = scl;
        image_yscale = scl;
        bullet_spriteTurn = false;
        specialBFG = true;
        break;
        
    // COPPER
    case s_bull_copper:
        if(pow&gt;80){image_index = 7;}
        else if (pow&gt;48){image_index = 6;}
        else if (pow&gt;32){image_index = 5;}
        else if (pow&gt;24){image_index = 4;}
        else if (pow&gt;18){image_index = 3;}
        else if (pow&gt;12){image_index = 2;}
        else if (pow&gt;6){image_index = 1;}
        else{image_index = 0;}
        if(speedBonus&gt;1.5){speedBonus = 1.5};
        lobAngledSprite = true;
        break;
        
    // BRASS
    case s_bull_brass:
        steamTimer = 5+pow/3;
        steamInterval = 4;
        steamStop = 10;
        if(pow&gt;80){image_index = 10;}
        else if (pow&gt;64){image_index = 9;}
        else if (pow&gt;46){image_index = 8;}
        else if (pow&gt;38){image_index = 7;}
        else if (pow&gt;30){image_index = 6;}
        else if (pow&gt;24){image_index = 5;}
        else if (pow&gt;18){image_index = 4;}
        else if (pow&gt;12){image_index = 3;}
        else if (pow&gt;8){image_index = 2;}
        else if (pow&gt;4){image_index = 1;}
        else{image_index = 0;}
        bullet_spriteTurn = false;
        if(speedBonus&gt;1.5){speedBonus = 1.5};
        Smoke("puff",x,y,z,2+max(5,pow));
        break;
        
    case s_bull_polenta:
        if(pow&gt;80){image_index = 10;}
        else if (pow&gt;64){image_index = 9;}
        else if (pow&gt;46){image_index = 8;}
        else if (pow&gt;38){image_index = 7;}
        else if (pow&gt;30){image_index = 6;}
        else if (pow&gt;24){image_index = 5;}
        else if (pow&gt;18){image_index = 4;}
        else if (pow&gt;12){image_index = 3;}
        else if (pow&gt;8){image_index = 2;}
        else if (pow&gt;4){image_index = 1;}
        else{image_index = 0;}
        if(speedBonus&gt;1.5){speedBonus = 1};
        lobAngledSprite = true;
        image_yscale = choose(1,-1);
        break;
        
    // FOAM
    case s_bull_foam:
        if(pow&gt;52){image_index = 4;}
        else if (pow&gt;32){image_index = 3;}
        else if (pow&gt;16){image_index = 2;}
        else if (pow&gt;8){image_index = 1;}
        else{image_index = 0;}
        image_xscale = 1;
        image_yscale = 1;
        if(speedBonus&gt;1.25){speedBonus = 1.25};
        if(bfgShot)
        {
            sprite_index = s_bull_plasticBFG;
            bullet_spriteTurn = false;
            anglespray = -90;
            spraytimer = 1;
            rangeEndGrav = 0;
        }
        else
        {
            lobAngledSprite = true;
        }
        specialBFG = true;
        break;
        
    // RUBBER
    case s_bull_rubber:
        if(pow&gt;48){image_index = 3;}
        else if (pow&gt;24){image_index = 2;}
        else if (pow&gt;12){image_index = 1;}
        else{image_index = 0;}
        if(speedBonus&gt;1.25){speedBonus = 1.25};
        lobAngledSprite = true;
        specialBFG = true;
        break;
        
    // BONE
    case s_bull_bone:
        specialShot = "bone";
        if(image_index==0)
        {
            image_index = 6 + median(0,11,floor(pow/5)-1+irandom(2));
            image_angle = choose(0,90,180,270);
            image_xscale = 1;
            image_yscale = 1;
        }
        
        bullet_spriteTurn = false;
        if(speedBonus&gt;1.2){speedBonus = 1.2};
        if(rocketShot){sprite_index = s_bull_boneRocket;}
        if(bfgShot)
        {
            boneTrail = 0.1;
            boneSpawnX = x;
            boneSpawnY = y;
            sprite_index = s_bull_boneBFG;
            tailLength = 0;
            tailPos = min(15,floor(pow/5));
            tailRemaining = floor(pow/5);
            if(wave&lt;20){wave = 20;}
            if(waveAmp&lt;20){waveAmp = 20;}
            
            bullet_spriteTurn = true;
        }
        specialBFG = true;
        break;
        
    case s_bull_antimatter:
        holeObj = instance_create(x,y,o_cosmichole);
        holeObj.radiusbase = 4 + floor(pow/3);
        holeObj.radiusShake = floor(pow/4);
        if(speedBonus&gt;1){speedBonus = 1};
        antimatterTrail = 0;
        drawSprite = false;
        scr_entity_setShadowVisible(false);
        break;
        
    // BRONZE
    case s_bull_bronze:
        if(pow&gt;64){image_index = 8;}
        else if (pow&gt;48){image_index = 7;}
        else if (pow&gt;32){image_index = 6;}
        else if (pow&gt;24){image_index = 5;}
        else if (pow&gt;18){image_index = 4;}
        else if (pow&gt;12){image_index = 3;}
        else if (pow&gt;8){image_index = 2;}
        else if (pow&gt;4){image_index = 1;}
        else{image_index = 0;}
        if(speedBonus&gt;1.5){speedBonus = 1.5};
        lobAngledSprite = true;
        break;    
        
    case s_bull_orichal:
        ///image_index = 6 + median(0,13,floor(pow/5)-1+irandom(2));
        //image_angle = 0;///choose(0,90,180,270);
        
        if (pow&gt;140){image_index = 14;}
        else if (pow&gt;100){image_index = 13;}
        else if (pow&gt;80){image_index = 12;}
        else if (pow&gt;70){image_index = 11;}
        else if (pow&gt;60){image_index = 10;}
        else if (pow&gt;50){image_index = 9;}
        else if (pow&gt;40){image_index = 8;}
        else if (pow&gt;33){image_index = 7;}
        else if (pow&gt;26){image_index = 6;}
        else if (pow&gt;20){image_index = 5;}
        else if (pow&gt;12){image_index = 4;}
        else if (pow&gt;7){image_index = 3;}
        else if (pow&gt;4){image_index = 2;}
        else{image_index = 1;}
        ricochetSound = "hoopzweap_orichalcum_bounce";
        wobbleAnim = 2;
        orichalnim = 1
        stoneSkipping = 3;
        orichalFrame = image_index;
        specialBFG = true;
        bullet_spriteTurn = false;
        if(speedBonus&gt;1.2){speedBonus = 1.2};
        break;
        
    case s_bull_chitin_egg:
        if(pow&gt;110){image_index = 18;}
        else if (pow&gt;100){image_index = 17;}
        else if (pow&gt;90){image_index = 16;}
        else if (pow&gt;80){image_index = 15;}
        else if (pow&gt;70){image_index = 14;}
        else if (pow&gt;60){image_index = 13;}
        else if (pow&gt;50){image_index = 12;}
        else if (pow&gt;45){image_index = 11;}
        else if (pow&gt;40){image_index = 10;}
        else if (pow&gt;35){image_index = 9;}
        else if (pow&gt;30){image_index = 8;}
        else if (pow&gt;25){image_index = 7;}
        else if (pow&gt;20){image_index = 6;}
        else if (pow&gt;15){image_index = 5;}
        else if (pow&gt;12){image_index = 4;}
        else if (pow&gt;9){image_index = 3;}
        else if (pow&gt;6){image_index = 2;}
        else if (pow&gt;3){image_index = 1;}
        else{image_index = 0;}
        bullet_spriteTurn = false;
        image_xscale = 1;
        image_yscale = 1;
        if(speedBonus&gt;1.2){speedBonus = 1.0};
        break;
        
    case s_bull_plantain:
        ///image_index = 6 + median(0,13,floor(pow/5)-1+irandom(2));
        //image_angle = 0;///choose(0,90,180,270);
        
        if(pow&gt;120){image_index = 13;}
        else if (pow&gt;100){image_index = 12;}
        else if (pow&gt;80){image_index = 11;}
        else if (pow&gt;70){image_index = 10;}
        else if (pow&gt;60){image_index = 9;}
        else if (pow&gt;50){image_index = 8;}
        else if (pow&gt;40){image_index = 7;}
        else if (pow&gt;33){image_index = 6;}
        else if (pow&gt;26){image_index = 5;}
        else if (pow&gt;20){image_index = 4;}
        else if (pow&gt;12){image_index = 3;}
        else if (pow&gt;7){image_index = 2;}
        else if (pow&gt;4){image_index = 1;}
        else{image_index = 0;}
        
        image_xscale = choose(1,-1);
        image_yscale = choose(1,-1);
        lobAngledSprite = true;
        bullet_spriteTurn = true;
        specialBFG = true;
        break;
        
    // JUNK
    case s_bull_junk:
        image_index = 7 + median(0,27,floor(pow/3)-1+irandom(2));
        image_angle = choose(0,90,180,270);
        image_xscale = 1;
        image_yscale = 1;
        bullet_spriteTurn = false;
        if(speedBonus&gt;1.2){speedBonus = 1.2};
        if(arrowShot)
        {
            sprite_index = s_bull_plunger;
            image_index = median(pow/12,0,3);
            bullet_spriteTurn = true;
        }
        specialBFG = true;
        break;
        
    // GOO
    case s_bull_goo_med:
        if(pow&gt;48){sprite_index = s_bull_goo_large;}
        else if (pow&gt;24){sprite_index = s_bull_goo_med;}
        else if (pow&gt;12){sprite_index = s_bull_goo_small;}
        else{sprite_index = s_bull_goo_tiny;}
        image_xscale = 1;
        image_yscale = 1;
        image_speed = 0.25;
        if(speedBonus&gt;1.2){speedBonus = 1.2};
        lobAngledSprite = true;
        break;
        
    case s_bull_goo_bfg:
        specialBFG = true;
        specialShot = "goo";
        var scl = 1;
        scl = median(0.5,2,pow / 40);
        image_speed = 0.25;
        image_xscale = scl;
        image_yscale = scl;
        specialBFG = true;
        break;
        
    ////PAPER
    case s_bull_paper:
        specialShot = "paper";
        playedPapersound = true;
        if(pow&gt;64){image_index = 5;}
        else if (pow&gt;48){image_index = 4;}
        else if (pow&gt;24){image_index = 3;}
        else if (pow&gt;12){image_index = 2;}
        else if (pow&gt;6){image_index = 1;}
        else{image_index = 0;}
        
        if(image_index&gt;=3){playedPapersound = false;}
        if(flaregun){sprite_index = s_bull_paperSpecial; image_index = 0;}
        if(rocketShot){sprite_index = s_bull_paperSpecial;image_index = 1;}
        if(bfgShot){sprite_index = s_bull_paperSpecial;image_index = 2; bullet_spriteTurn = false;}
        
        image_xscale = 1;
        image_yscale = 1;
        specialBFG = true;
        if(speedBonus&gt;1.2){speedBonus = 1.2};
        break;
        
    // GOLD //
    case s_bull_gold:
        image_index = median(0,14,pow/10);
        image_xscale = 1;
        image_yscale = 1;
        lobAngledSprite = true;
        break;
        
    // SILVER //
    case s_bull_silver:
        image_index = median(0,14,pow/10);
        image_xscale = 1;
        image_yscale = 1;
        lobAngledSprite = true;
        break;
         
    /// ITANO GUN's / ROCKET LAUNCHER
    case s_bull_rocket:
        trailScale = 1;
        trailAngle = choose(0,90,180,270);
        speedBonus = 1;
        if(pow&gt;96){image_index = 7;}
        else if (pow&gt;80){image_index = 6; trailScale = 0.9;}
        else if (pow&gt;64){image_index = 5; trailScale = 0.8;}
        else if (pow&gt;48){image_index = 4; trailScale = 0.6;}
        else if (pow&gt;32){image_index = 3; trailScale = 0.5;}
        else if (pow&gt;16){image_index = 2; trailScale = 0.4;}
        else if (pow&gt;8){image_index = 1; trailScale = 0.3;}
        else{image_index = 0;trailScale = 0.2;}
        image_xscale = 1;
        image_yscale = 1;
        
        if(matName=="Itano")
        {
            if(rocketShot)
            {
                if(pow&lt;50){image_index+=1;}else{sprite_index= s_bull_itanoRocket;}
            }
            if(bfgShot)
            {
                if(pow&lt;50){image_index+=2;}else{sprite_index= s_bull_itanoBFG;}
            }
        }
        lobAngledSprite = true;
        // Play a looping exhaust effect on rockets, create sound emitter for this.
        scr_entity_makeSoundEmitter();
        audio_play_sound_on_actor(id, "hoopzweap_rocket_exhaust", true, 10);
        break;    
        
    case s_bull_offal:
        speedBonus = 1;
        image_index = median(0,15,floor(pow / 8) - 2 + irandom(4));
        image_xscale = 1;
        image_yscale = choose(-1,1);
        specialBFG = true;
        bloodTrail = 1+irandom(6);
        break;
        
    case s_bull_blood:
        speedBonus = 1;
        specialShot = "blood";
        specialBFG = true;
        image_index = median(0,7,floor(pow / 12));
        image_xscale = 1;
        image_yscale = choose(-1,1);
        bloodTrail = 1+irandom(6);
        lobAngledSprite = true;
        if(bfgShot){sprite_index = s_bull_bloodBFG; image_speed = 0.1; image_yscale = 1; bullet_spriteTurn = false;}
        break;
        
    case s_bull_soiled:
        speedBonus = 1;
        image_index = median(0,7,floor(pow / 12));
        image_xscale = 1;
        image_yscale = choose(-1,1);
        bloodTrail = 1+irandom(6);
        break;    
        
    case s_bull_tofu1:
        if(pow&gt;64){sprite_index = s_bull_tofu5;}
        else if (pow&gt;32){sprite_index = s_bull_tofu4;}
        else if (pow&gt;16){sprite_index = s_bull_tofu3;}
        else if (pow&gt;8){sprite_index = s_bull_tofu2;}
        else {sprite_index = s_bull_tofu1;}
        image_angle = choose(0,90,180,270);
        image_speed = 0.25;
        image_xscale = 1;
        image_yscale = 1;
        bullet_spriteTurn = false;
        if(speedBonus&gt;1.2){speedBonus = 1;};
        break;
    
    case s_bull_grass:
        if (pow&gt;80){image_index = 14;}
        else if (pow&gt;72){image_index = 13;}
        else if (pow&gt;64){image_index = 12;}
        else if (pow&gt;56){image_index = 11;}
        else if (pow&gt;48){image_index = 10;}
        else if (pow&gt;40){image_index = 9;}
        else if (pow&gt;32){image_index = 8;}
        else if (pow&gt;26){image_index = 7;}
        else if (pow&gt;20){image_index = 6;}
        else if (pow&gt;16){image_index = 5;}
        else if (pow&gt;12){image_index = 4;}
        else if (pow&gt;8){image_index = 3;}
        else if (pow&gt;4){image_index = 2;}
        else if (pow&gt;2){image_index = 1;}
        image_xscale = 1;
        image_yscale = choose(1,-1);
        grassTimer = 0.2;
        specialBFG = true;
        lobAngledSprite = true;
        if(speedBonus&gt;1.2){speedBonus = 1.2};
        break;
        
    case s_bull_brainshot:
        if(speedBonus&gt;1){speedBonus = 1};
        antimatterTrail = 0;
        drawSprite = true;
        scr_entity_setShadowVisible(false);
        specialShot = "brain";
        
        pulseObj = instance_create(x,y,o_pulseEffect);
        pulseObj.radiusbase = 4 + floor(pow/3);
        pulseObj.radiusShake = floor(pow/4);
        
        
        if (pow&gt;80){image_index = 14;}
        else if (pow&gt;72){image_index = 13;}
        else if (pow&gt;64){image_index = 12;}
        else if (pow&gt;56){image_index = 11;}
        else if (pow&gt;48){image_index = 10;}
        else if (pow&gt;40){image_index = 9;}
        else if (pow&gt;32){image_index = 8;}
        else if (pow&gt;26){image_index = 7;}
        else if (pow&gt;20){image_index = 6;}
        else if (pow&gt;16){image_index = 5;}
        else if (pow&gt;12){image_index = 4;}
        else if (pow&gt;8){image_index = 3;}
        else if (pow&gt;4){image_index = 2;}
        else if (pow&gt;2){image_index = 1;}
        specialBFG = true;
        break;
    
        
    ///FUNGUS GUN's
    case s_bull_spore:
        if(pow&gt;45){image_index = 9; scr_entity_setZHitbox(0-10, 2+10);}
        else if (pow&gt;38){image_index = 8; scr_entity_setZHitbox(0-8, 2+8);}
        else if (pow&gt;32){image_index = 7;scr_entity_setZHitbox(0-6, 2+6);}
        else if (pow&gt;26){image_index = 6;scr_entity_setZHitbox(0-4, 2+4);}
        else if (pow&gt;20){image_index = 5;scr_entity_setZHitbox(0-3, 2+3);}
        else if (pow&gt;14){image_index = 4;scr_entity_setZHitbox(0-3, 2+3);}
        else if (pow&gt;9){image_index = 3;scr_entity_setZHitbox(0-2, 2+2);}
        else if (pow&gt;5){image_index = 2;scr_entity_setZHitbox(0-1, 2+1);}
        else if (pow&gt;2){image_index = 1;scr_entity_setZHitbox(0-1, 2);}
        else{image_index = 0;}
        image_angle = choose(0,90,180,270);
        image_xscale = 1;
        image_yscale = 1;
        hitHoopzIn = 5;
        ricochetSound = "";
        bullet_spriteTurn = false;
        if(speedBonus&gt;1.2){speedBonus = 1.2};
        specialBFG = true;
        break;
        
    case s_bull_magma:
        if(pow&gt;132){image_index = 21;}
        else if (pow&gt;128){image_index = 20;}
        else if (pow&gt;120){image_index = 19;}
        else if (pow&gt;112){image_index = 18;}
        else if (pow&gt;104){image_index = 17;}
        else if (pow&gt;96){image_index = 16;}
        else if (pow&gt;88){image_index = 15;}
        else if (pow&gt;80){image_index = 14;}
        else if (pow&gt;72){image_index = 13;}
        else if (pow&gt;64){image_index = 12;}
        else if (pow&gt;56){image_index = 11;}
        else if (pow&gt;48){image_index = 10;}
        else if (pow&gt;40){image_index = 9;}
        else if (pow&gt;32){image_index = 8;}
        else if (pow&gt;26){image_index = 7;}
        else if (pow&gt;20){image_index = 6;}
        else if (pow&gt;16){image_index = 5;}
        else if (pow&gt;12){image_index = 4;}
        else if (pow&gt;8){image_index = 3;}
        else if (pow&gt;4){image_index = 2;}
        else if (pow&gt;2){image_index = 1;}
        else{image_index = 0;}
        if(!shotSetup)
        {
            magmaCoolDelay = 6;
            magmacooldown = 24;
            if(bfgShot){magmaCoolDelay = 12;}
            if(rocketShot){magmaCoolDelay = 10;}
            if(flaregun){magmaCoolDelay = 8;}
        }
        Smoke("customcolor",make_color_rgb(10,5,8),make_color_rgb(46,30,40),make_color_rgb(115,50,70),0)
        var smk = Smoke("puff",x,y,z,max(4,pow*1.5));
        Smoke("init",0,0,0,0);
        if(speedBonus&gt;1.2){speedBonus = 1.2};
        image_xscale = 1;
        image_yscale = choose(1,-1);
        bullet_spriteTurn = true;
        lobAngledSprite = true;
        specialBFG = true;
        break;
        
    //////MERCURY
    case s_bull_mercury:
        //show_debug_message("o_bullet move_dir:" + string(move_dir));
        if(pow&gt;12 &amp;&amp; choose(true,false)) ///split 2
        {
            var splitAmnt = (20+random(60) )/100;
            var splt = scr_combat_cloneBullet(id);
            scr_combat_bulletDmgmod(id,0,1-splitAmnt);
            scr_combat_bulletDmgmod(splt,0,splitAmnt);
            //with(splt){scr_entity_setDirSpd(90,20);}
            //show_debug_message("o_bullet splt.move_dir0:" + string(splt.move_dir));
            with(splt){scr_entity_setDirSpd(other.move_dir-10+irandom(20),other.move_dist);}
            splt.initDir = splt.move_dir;
            pow = pow*(1-splitAmnt);
        }
        
        if(pow&gt;6 &amp;&amp; choose(true,false,false)) ///split 1
        {
            var splitAmnt = (30+random(50) )/100;
            var splt = scr_combat_cloneBullet(id);
            scr_combat_bulletDmgmod(id,0,1-splitAmnt);
            scr_combat_bulletDmgmod(splt,0,splitAmnt);
            //with(splt){scr_entity_setDirSpd(90,20);}
            //show_debug_message("o_bullet splt.move_dir1:" + string(splt.move_dir));
            with(splt){scr_entity_setDirSpd(other.move_dir-10+irandom(20),other.move_dist);}
            splt.initDir = splt.move_dir;
            pow = pow*(1-splitAmnt);
        }
    
        if(speedBonus&gt;1.5){speedBonus = 1};
        bullet_spriteTurn = true;
        image_index = median(0,16,pow/5);
        if(pow&gt;2.5){image_index+=1;}
        break;
        
    ///DIGITAL
    case s_bull_digitalLaser:
        shotOriginx = dx;
        shotOriginy = y-z;
        lstPoints = ds_list_create();
        shotWidth = 1+floor(pow/12);
        speedBonus = 2;
        laserCol = c_red;
        laserTrail = 8;
        trailLength = 16;
        specialBFG = true;
        if(rocketShot){shotWidth += 4 + shotWidth/2;}
        if(bfgShot){shotWidth += 6 + shotWidth;}
        break;
        
    ///PEARL SHOT
    case s_bull_pearl_ghostShot:
        image_speed = 0.25;
        //image_xscale = pow / 50;
        image_yscale = image_xscale*choose(1,-1);
        
        if(pow&gt;80){sprite_index = s_bull_pearl_ghostMound;}
        else if(pow&gt;64){sprite_index =s_bull_pearl_ghostShot;}
        else if(pow&gt;48){sprite_index =s_bull_pearl_ghostShot;}
        else if(pow&gt;36){sprite_index = s_bull_pearl_skullShot;}
        else if(pow&gt;24){sprite_index = s_bull_pearl_handShot;}
        else if(pow&gt;12){sprite_index = s_bull_pearl_eyeShot;}
        else if(pow&gt;6){sprite_index = s_bull_pearl_lilGhost;}
        else{sprite_index = s_bull_pearl_tinyGhost;} 
        specialBFG = true;
        specialShot = "ghost";
        ghostTrail = 0;
        throughWalls = 10;
        bullet_spriteTurn = true;
        
        if(!bfgShot &amp;&amp; !rocketShot)
        {
            enemySeek += 4;
            enemySeekRange = 64;
            enemySeekTime = 0.5;
        }
               
        //sparktrail = 3
        if(speedBonus&gt;1.25){speedBonus = 1};
        break;
        
    ///LEAD SHOT
    case s_bull_lead:
        if (pow&gt;120){image_index = 14;}
        else if (pow&gt;100){image_index = 13;}
        else if (pow&gt;90){image_index = 12;}
        else if (pow&gt;80){image_index = 11;}
        else if (pow&gt;70){image_index = 10;}
        else if (pow&gt;60){image_index = 9;}
        else if (pow&gt;50){image_index = 8;}
        else if (pow&gt;40){image_index = 7;}
        else if (pow&gt;30){image_index = 6;}
        else if (pow&gt;24){image_index = 5;}
        else if (pow&gt;18){image_index = 4;}
        else if (pow&gt;12){image_index = 3;}
        else if (pow&gt;8){image_index = 2;}
        else if (pow&gt;4){image_index = 1;}
        else{image_index = 0;}
        bullet_spriteTurn = false;
        stoneSkipping = -1; ///roll when hit the ground
        if(speedBonus&gt;1.25){speedBonus = 1.25};
        break;
        
    /// FRANCIUM
    case s_bull_francium:
        mask_index = s_bull_francium
        motionBlur = true;
        image_xscale = 1;
        image_yscale = 1;
        image_speed = 0.2;
        franciumMax = 1;
        if(pow&lt;3){franciumMax = 0.06;}
        else if(pow&lt;6){franciumMax = 0.1;}
        else if(pow&lt;12){franciumMax = 0.2;}
        else if(pow&lt;18){franciumMax = 0.3;}
        else if(pow&lt;24){franciumMax = 0.4;}
        else if(pow&lt;30){franciumMax = 0.5;}
        else if(pow&lt;40){franciumMax = 0.6;}
        else if(pow&lt;50){franciumMax = 0.7;}
        else if(pow&lt;60){franciumMax = 0.8;}
        else if(pow&lt;70){franciumMax = 0.9;}
        else if(pow&lt;80){franciumMax = 1;}
        else if(pow&lt;100){franciumMax = 1.1;}
        else if(pow&lt;120){franciumMax = 1.2;}
        else if(pow&lt;140){franciumMax = 1.3;}
        else if(pow&lt;180){franciumMax = 1.4;}
        else if(pow&lt;220){franciumMax = 1.5;}
        else if(pow&lt;240){franciumMax = 1.6;}
        else if(pow&lt;260){franciumMax = 1.7;}
        else if(pow&lt;280){franciumMax = 1.8;}
        else if(pow&lt;300){franciumMax = 1.9;}
        else{franciumMax = 2;}
        
        image_angle = choose(0,90,180,270);
        shadow_visible = false;
        show_hiteffect = false;
        franciumScale = 0.01;
        image_xscale = franciumMax*franciumScale;
        image_yscale = franciumMax*franciumScale;
        bullet_spriteTurn = false;
        if(speedBonus&gt;1.2){speedBonus = 1.2};
        if (!audio_is_playing_ext(franciumSnd))
        {
            scr_entity_makeSoundEmitter();
            audio_play_sound_on_actor(id,franciumSnd, true, 0);
        }
        break;
        
    case s_bull_scrollWeapon:
        image_speed = 0;
        scr_entity_setZHitbox(0-10, 2+10);
        break;
        
    case s_bull_flamethrower:
        specialBFG = true;
        
        if (superShot) {
            drawWhiteOverlay = true;
        }
        break;
        
    case s_bull_spFlame:
        
        break;
        
    case s_bull_bfg:
        mask_index = mask_disk_20by20;
        bfgFiredDirection = move_dir;
        scr_entity_makeSoundEmitter();
        audio_play_sound_on_actor(id,"hoopzweap_BFG_shot", 0, 0);
        break;
        
    case s_bull_adamant:
        if(speedBonus&gt;1.2){speedBonus = 1.2;}
        lobAngledSprite = true;
        image_index = median(0,27,median(0,27,floor(pow/3)) - 2 + irandom(4));
        break;
        
    case s_bull_tin:
        bullet_spriteTurn = false;
        if(bfgShot &amp;&amp; rocketShot &amp;&amp; flaregun)
        {
            sprite_index = s_bull_tincan;
            image_speed = 0.2;
            
        }
        
    case s_bull_cobalt:
        if(speedBonus&gt;1.2){speedBonus = 1.5;}
        
        if (pow&gt;90){image_index = 10;}
        else if (pow&gt;76){image_index = 9;}
        else if (pow&gt;64){image_index = 8;}
        else if (pow&gt;52){image_index = 7;}
        else if (pow&gt;40){image_index = 6;}
        else if (pow&gt;30){image_index = 5;}
        else if (pow&gt;18){image_index = 4;}
        else if (pow&gt;12){image_index = 3;}
        else if (pow&gt;8){image_index = 2;}
        else if (pow&gt;4){image_index = 1;}
        else{image_index = 0;}
        lobAngledSprite = true;
        break;
    
    case s_bull_angelCore:
        image_xscale = 1;
        image_yscale = 1;
        if(speedBonus&gt;1.2){speedBonus = 1; accel = accel*2; move_dist= (move_dist+1)*2;}
        
        bullet_spriteTurn = false;
        wingSprite = noone;
        wingFrame = 0;
        if(pow&gt;200){image_index = 13;}
        else if (pow&gt;160){image_index = 12;}
        else if (pow&gt;140){image_index = 11;}
        else if (pow&gt;120){image_index = 10;}
        else if (pow&gt;96){image_index = 9;}
        else if (pow&gt;84){image_index = 8;}
        else if (pow&gt;72){image_index = 7;}
        else if (pow&gt;60){image_index = 6;}
        else if (pow&gt;48){image_index = 5;}
        else if (pow&gt;36){image_index = 4;}
        else if (pow&gt;24){image_index = 3;}
        else if (pow&gt;12){image_index = 2;}
        else if (pow&gt;6){image_index = 1;}
        else{image_index = 0;}
        
        if(image_index==0){wingSprite=s_bull_angel_tiny;}
        else if(image_index&lt;=2){wingSprite=s_bull_angel_small;}
        else if(image_index&lt;=4){wingSprite=s_bull_angel_medium;}
        else if(image_index&lt;=6){wingSprite=s_bull_angel_large;}
        else if(image_index&lt;=8){wingSprite=s_bull_angel_huge;}
        else {wingSprite=s_bull_angel_giant;}
        
        var featherCount = 1;
        if(pow&gt;240){featherCount = 3+irandom(6);}
        else if(pow&gt;120){featherCount = 2+irandom(4);}
        else if(pow&gt;60){featherCount = 1+irandom(3);}
        else if(pow&gt;30){featherCount = 1+irandom(2);}
        else if(pow&gt;15){featherCount = 1+irandom(1);}
        else{featherCount = 1;}
        
        if(bfgShot){featherCount = featherCount*2; sprite_index = s_bull_angelBFG; image_index = 0; wingSprite = noone;}
        
        specialShot = "angel";
        
        featherInterval = 10;
        featherNext = irandom(featherInterval);
        
        repeat(featherCount)
        {
            ob = instance_create(x-2+random(4),y-2+random(4),o_part_angelFeathers);
            ob.z = z; ob.move_z = 1+random(8);
            ob.move_dir = move_dir-30+random(60);
            ob.move_dist = 1+random(10);
            ob.move_x = lengthdir_x(ob.move_dist,ob.move_dir);
            ob.move_y = lengthdir_y(ob.move_dist,ob.move_dir);
            ob.image_index = median(irandom(image_index),0,9)
        }
        specialBFG = true;
        break;
        
    //////SINEW
    case s_bull_sinew:
        if (pow&gt;96){image_index = 12;}
        else if (pow&gt;72){image_index = 11;}
        else if (pow&gt;64){image_index = 10;}
        else if (pow&gt;56){image_index = 9;}
        else if (pow&gt;48){image_index = 8;}
        else if (pow&gt;40){image_index = 7;}
        else if (pow&gt;32){image_index = 6;}
        else if (pow&gt;24){image_index = 5;}
        else if (pow&gt;18){image_index = 4;}
        else if (pow&gt;12){image_index = 3;}
        else if (pow&gt;6){image_index = 2;}
        else if (pow&gt;3){image_index = 1;}
        else{image_index = 0;}
        image_yscale = choose(1,-1);
        bullet_spriteTurn = true;
        lobAngledSprite = true;
        sinewparts = 0.2;
        break;
        
    case s_bull_orb:
        shotOriginx = dx;
        shotOriginy = y-z;
        lstPoints = ds_list_create();
        shotWidth = 1+floor(pow/14);
        turnTimer = 32;
        speedBonus = 2;
        laserTrail = 8;
        trailLength = 24;
        speedBonus = 1;
        switch(laserGen)
        {
            case 0: laserCol = c_white; break;
            case 1: laserCol = make_color_rgb(136,249,157); break;
            case 2: laserCol = make_color_rgb(0,255,0); break;
            case 3: laserCol = make_color_rgb(3,201,40); ; break;
            case 4: laserCol = make_color_rgb(55,165,73); break;
            case 5: laserCol = make_color_rgb(65,127,71); break;
            default: laserCol = make_color_rgb(56,100,62); break;
        }
        drawSprite = false;
        break;
        
    /////BLASTER
    case s_bull_blaster:
        if (pow&gt;80){image_index = 9;}
        else if (pow&gt;60){image_index = 8;}
        else if (pow&gt;50){image_index = 7;}
        else if (pow&gt;40){image_index = 6;}
        else if (pow&gt;30){image_index = 5;}
        else if (pow&gt;20){image_index = 4;}
        else if (pow&gt;12){image_index = 3;}
        else if (pow&gt;8){image_index = 2;}
        else if (pow&gt;4){image_index = 1;}
        else{image_index = 0;}
        image_yscale = choose(1,-1);
        bullet_spriteTurn = true;
        specialBFG = true;
        if(speedBonus&gt;1){speedBonus = 1};
        lobAngledSprite = true;
        break;
        
        scr_entity_makeSoundEmitter();
        audio_play_sound_on_actor(id,"hoopzweap_blaster_impact", true, 0);
        
    ////YGGDRASIL
    case s_bull_yggShot:
        if (pow&gt;48){image_index = 7;}
        else if (pow&gt;32){image_index = 6;}
        else if (pow&gt;24){image_index = 5;}
        else if (pow&gt;18){image_index = 4;}
        else if (pow&gt;12){image_index = 3;}
        else if (pow&gt;8){image_index = 2;}
        else if (pow&gt;4){image_index = 1;}
        else{image_index = 0;}
        plantInterval = max(0.1,(7-pow/10)/6);
        plantNext = random(plantInterval);
        plantSize = 5+pow;
        if(speedBonus&gt;1.2){speedBonus = 1};
        specialBFG = true;
        lobAngledSprite = true;
        break;
        
    // CHOBHAM
    case s_bull_chobham:
        if(pow&gt;64){image_index = 8;}
        else if (pow&gt;48){image_index = 7;}
        else if (pow&gt;32){image_index = 6;}
        else if (pow&gt;24){image_index = 5;}
        else if (pow&gt;18){image_index = 4;}
        else if (pow&gt;12){image_index = 3;}
        else if (pow&gt;8){image_index = 2;}
        else if (pow&gt;4){image_index = 1;}
        else{image_index = 0;}
        lobAngledSprite = true;
        if(speedBonus&gt;1.5){speedBonus = 1.5};
        break;
        
    case s_bull_frankincense:
        if (pow&gt;96){image_index = 12;}
        else if (pow&gt;72){image_index = 11;}
        else if (pow&gt;64){image_index = 10;}
        else if (pow&gt;56){image_index = 9;}
        else if (pow&gt;48){image_index = 8;}
        else if (pow&gt;40){image_index = 7;}
        else if (pow&gt;32){image_index = 6;}
        else if (pow&gt;24){image_index = 5;}
        else if (pow&gt;18){image_index = 4;}
        else if (pow&gt;12){image_index = 3;}
        else if (pow&gt;6){image_index = 2;}
        else if (pow&gt;3){image_index = 1;}
        else{image_index = 0;}
        image_yscale = choose(1,-1);
        bullet_spriteTurn = true;
        
        steamTimer = 4+pow/3;
        steamInterval = 4;
        steamStop = 6;
        lobAngledSprite = true;
        Smoke("puff",x,y,z,2+max(5,pow));
        break;
        
    case s_bull_myrrh:
        if (pow&gt;96){image_index = 12;}
        else if (pow&gt;72){image_index = 11;}
        else if (pow&gt;64){image_index = 10;}
        else if (pow&gt;56){image_index = 9;}
        else if (pow&gt;48){image_index = 8;}
        else if (pow&gt;40){image_index = 7;}
        else if (pow&gt;32){image_index = 6;}
        else if (pow&gt;24){image_index = 5;}
        else if (pow&gt;18){image_index = 4;}
        else if (pow&gt;12){image_index = 3;}
        else if (pow&gt;6){image_index = 2;}
        else if (pow&gt;3){image_index = 1;}
        else{image_index = 0;}
        lobAngledSprite = true;
        image_yscale = choose(1,-1);
        bullet_spriteTurn = true;
        break;
        
    case s_bull_crystalshot:
        if(pow&gt;160){image_index = 15;}
        else if (pow&gt;140){image_index = 14;}
        else if (pow&gt;120){image_index = 13;}
        else if (pow&gt;100){image_index = 12;}
        else if (pow&gt;80){image_index = 11;}
        else if (pow&gt;70){image_index = 10;}
        else if (pow&gt;60){image_index = 9;}
        else if (pow&gt;50){image_index = 8;}
        else if (pow&gt;42){image_index = 7;}
        else if (pow&gt;36){image_index = 6;}
        else if (pow&gt;30){image_index = 5;}
        else if (pow&gt;24){image_index = 4;}
        else if (pow&gt;18){image_index = 3;}
        else if (pow&gt;12){image_index = 2;}
        else if (pow&gt;6){image_index = 1;}
        else{image_index = 0;}
        image_xscale = choose(1,-1);
        image_yscale = choose(1,-1);
        bullet_spriteTurn = false;
        specialBFG = true;

        scr_entity_makeSoundEmitter();
        audio_play_sound_on_actor(id,"hoopzweap_crystal_bullet", true, 0);
        
        break;
        
    case s_bull_crystalshard:
        if (pow&gt;48){image_index = 10;}
        else if (pow&gt;40){image_index = 9;}
        else if (pow&gt;32){image_index = 8;}
        else if (pow&gt;24){image_index = 7;}
        else if (pow&gt;20){image_index = 6;}
        else if (pow&gt;16){image_index = 5;}
        else if (pow&gt;12){image_index = 4;}
        else if (pow&gt;8){image_index = 3;}
        else if (pow&gt;4){image_index = 2;}
        else if (pow&gt;2){image_index = 1;}
        else{image_index = 0;}
        image_yscale = choose(1,-1);
        bullet_spriteTurn = true;
        break;
        
    case s_bull_diamond:
    case s_bull_diamondShard:
        if (pow&gt;100){image_index = 10;}
        else if (pow&gt;80){image_index = 9;}
        else if (pow&gt;60){image_index = 8;}
        else if (pow&gt;50){image_index = 7;}
        else if (pow&gt;40){image_index = 6;}
        else if (pow&gt;32){image_index = 5;}
        else if (pow&gt;24){image_index = 4;}
        else if (pow&gt;16){image_index = 3;}
        else if (pow&gt;10){image_index = 2;}
        else if (pow&gt;5){image_index = 1;}
        else{image_index = 0;}
        image_xscale = 1;
        image_yscale = 1;
        bullet_spriteTurn = false;
        if(sprite_index==s_bull_diamondShard){bullet_spriteTurn = true;}
        else{image_angle = startAngle;}
        break;
        
    /////IMAGINARY
    case emptySprite:
        drawSprite = false;
        break;
        
    case s_bull_pinataShot:
        image_index = median(0,21,(pow/6)-2+irandom(4));
        if(speedBonus&gt;1.5){speedBonus = 1};
        image_yscale = choose(1,-1);
        image_angle = choose(0,90,180,270);
        bullet_spriteTurn = false;
        bulletSpin = choose(1,-1)*(5+irandom(20));
        
        var dr = point_direction(0,0,move_x,move_y);
        amnt = floor(1 + pow/20 + irandom(pow/10))
        repeat(amnt)
        {
            var sprng = random(amnt/2);
            var sppos = random(360);
            
            obj = instance_create(x+lengthdir_x(sprng,sppos),y+lengthdir_y(sprng,sppos),o_papershredEffect);
            var tdir = dr - 20+random(40);
            var spdMd = 0.25+random(0.50);
            obj.move_x = lengthdir_x(move_dist*spdMd,tdir);
            obj.move_y = lengthdir_y(move_dist*spdMd,tdir);
            obj.z = z;
            obj.move_friction = 0.1;
            obj.gravity_z = 1;
            obj.dny = dny;
            obj.image_blend = make_color_hsv(irandom(255),220,255);
        }
        
        break;
        
    case s_bull_teashot:
        if (pow&gt;60){image_index = 5;}
        else if (pow&gt;40){image_index = 4;}
        else if (pow&gt;20){image_index = 3;}
        else if (pow&gt;10){image_index = 2;}
        else if (pow&gt;4){image_index = 1;}
        bullet_spriteTurn = true;
        steamTimer = 5+pow/3;
        steamInterval = 4;
        steamStop = 3;
        speedBonus = 1;
        break;
        
    case s_bull_flyshot:
        flyflutter = 0;
        flyBaseframe = 0;
        if (pow&gt;40){flyBaseframe = 8;}
        else if (pow&gt;20){flyBaseframe = 6;}
        else if (pow&gt;10){flyBaseframe = 4;}
        else if (pow&gt;4){flyBaseframe = 2;}
        bullet_spriteTurn = true;
        speedBonus = 1;
        break;
        
    case s_bull_aerogel:
        if(speedBonus&gt;1.5){speedBonus = 1};
        bullet_spriteTurn = false;
        image_index = median(0,17,pow/6);
        if(pow&gt;3){image_index +=1;}
        image_alpha = 0.3;
        break;
        
    // Untamonium
    case s_bull_untamonium_med:
        if(pow&gt;48){sprite_index = s_bull_untamonium_large;}
        else if (pow&gt;24){sprite_index = s_bull_untamonium_med;}
        else if (pow&gt;12){sprite_index = s_bull_untamonium_small;}
        else{sprite_index = s_bull_untamonium_tiny;}
        image_xscale = 1;
        image_yscale = 1;
        image_speed = 0.25;
        if(speedBonus&gt;1.2){speedBonus = 1.2};
        lobAngledSprite = true;
        break;
        
    case s_bull_untamonium_bfg:
        //specialBFG = true;
        //specialShot = "goo";
        var scl = 1;
        scl = median(0.5,2,pow / 70);
        image_speed = 0.25;
        image_xscale = scl;
        image_yscale = scl;
        specialBFG = true;
        break;
}

if(webshot == 1)
{
    strand = scr_combat_cloneBullet(id);
    strand.x = x-2+irandom(4);
    strand.y = y-2+irandom(4);
    strand.z = z;
    var powangle = pow/5
    var curangle = move_dir + (5+powangle+irandom(powangle)) * choose(1,-1)
    
    scr_stats_setAttackStat(strand, STAT_ATTACK_DMG_NORMAL, scr_stats_getAttackStat(id, STAT_ATTACK_DMG_NORMAL)/2 - 1);
    scr_stats_setAttackStat(strand, STAT_ATTACK_DMG_BIO, scr_stats_getAttackStat(id, STAT_ATTACK_DMG_BIO)/2 - 1);
    scr_stats_setAttackStat(strand, STAT_ATTACK_DMG_CYBER, scr_stats_getAttackStat(id, STAT_ATTACK_DMG_CYBER)/2 - 1);
    scr_stats_setAttackStat(strand, STAT_ATTACK_DMG_MENTAL, scr_stats_getAttackStat(id, STAT_ATTACK_DMG_MENTAL)/2 - 1);
    scr_stats_setAttackStat(strand, STAT_ATTACK_DMG_ZAUBER, scr_stats_getAttackStat(id, STAT_ATTACK_DMG_ZAUBER)/2 - 1);
    scr_stats_setAttackStat(strand, STAT_ATTACK_DMG_COSMIC, scr_stats_getAttackStat(id, STAT_ATTACK_DMG_COSMIC)/2 - 1);
    
    scr_stats_setAttackStat(strand, STAT_ATTACK_KNOCKBACK, scr_stats_getAttackStat(id, STAT_ATTACK_KNOCKBACK)/2 - 1);
    strand.initDir = curangle;
    
    strandlength = pow/40;
    strandThick = 0.5+pow/30;
    
    strand.strandlength = strandlength/2;
    strand.strandThick = strandThick;
    strand.webshot = 2;
    with(strand)
    {
        scr_entity_setDirSpd(curangle, other.move_dist);
    }
    
    strand.distlife = distlife;
    strand.timelife = timelife;
}

shotSetup = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if paused() exit;

// Dotline //
if dotlineAffix = true then 
    {
    if dotline &lt; 1 then dotline += dt();
    if dotline &gt;= 1 then
        {
        move_dir += choose(1, 0, -1) * 45; 
        dotline = 0;
        if timelife &lt; 1000 then timelife += 25;
        if distlife &lt; 1000 then distlife += 25;
        effect_bungle = instance_create(x, y, o_effect_generic_animateOnce);
        effect_bungle.sprite_index = s_splash;
        effect_bungle.image_alpha = 0.25;
        effect_bungle.z = z;
        }
    }
    
// Hit ground
if (z &lt;= base_z)
{
    if(sprite_index==s_bull_orichal)
    {
        Puddle_Effect(x, y, base_z, min(8,pow/10), make_color_rgb(0,65,0));
    }

    // Stone Skipping Affix (Bungling) makes the bullet bounce a few times //
    if stoneSkipping &gt; 0 and move_z &lt;= 0 then
        {
        effect_bungle = instance_create(x, y, o_effect_generic_animateOnce);
        effect_bungle.sprite_index = s_splash;
        effect_bungle.image_alpha = 0.5;
        move_z = (1+stoneSkipping) * 5 + irandom(5);
        move_dir += choose(1, -1) * irandom(20); 
        move_dist *= 0.9;
        stoneSkipping -= 1;
        wobbleAnim = 4;
        timelife += 30;
        distlife += 30;
        z = 5;
        if(ricochetSound != "")
        {audio_play_sound_at_xy(scr_soundbank_pickSound(ricochetSound), false, 10, x, y);}

        }
    else if(stoneSkipping==-1)
    {////-1 means roll on the ground when land
        move_z = 0; z = base_z;
    }
    else// We are done bouncing off the ground //
        {
        event_user(1);
        if (!instance_exists(id)) {
            exit;
        }
    }
}

if(lobGravity != 0) 
{
    move_z -= lobGravity * dt();
}

// Distance fade and bullet timeout
if ((distcount + (4*move_dist*dt()) &gt; distlife &amp;&amp; distlife != -1) ||
    (count + dt() &gt; timelife &amp;&amp; timelife != -1))
{
    if (!returning || returned)
    {
        amod -= (amod*0.05)*dt();
    }
}

move_dist += accel * dt();
if (move_dist&gt;maxspd) {move_dist = maxspd;}
if (move_dist&lt;minspd) {move_dist = minspd;}

if(!franciumShot)
{
    move_dist *= speedBonus;
}

count += dt();
distcount += abs(move_dist * dt());

scr_entity_setDirSpd(move_dir, move_dist);

// Also move according to offset
var hitwall = scr_collision_move_contact_solid(move_x_offset * dt(), move_y_offset * dt(), collision_check);
movement_hit = movement_hit or hitwall;
if (hitwall) {
    movement_hit_vx = __vx;
    movement_hit_vy = __vy;
    show_debug_message("Normal: " + string(point_direction(0,0,movement_hit_vx,movement_hit_vy)))
}

// Returning bullets - no longer gives ammo, hurts player
if(returning &amp;&amp; returned) ////returning bullets give back ammo when hoopz touches em
{
    move_x_offset = 0;
    move_y_offset = 0;
    
    if(returned)
    {
        var _chk;
        _chk = instance_place(x,y,o_hoopz);
        if(_chk != noone &amp;&amp; weapon_from != NULL)
        {
            weapon_from[? "pCurAmmo"] += weapon_from[? "pAmmoCost"] / weapon_from[? "pShots"]; ///ammo returned is based on ammo cost per shot / number of bullets launched per shot
            if (weapon_from[? "pCurAmmo"]&gt;weapon_from[? "pMaxAmmo"]) weapon_from[? "pCurAmmo"] = weapon_from[? "pMaxAmmo"];
            show_hiteffect = false;
            event_user(5);
            if (!instance_exists(id)) {
                exit;
            }
        }
    }
}

if (rangeEndGrav != 0 &amp;&amp; distcount+48 &gt; distlife)
{
    if (!returning || returned)
    {
        lobGravity = rangeEndGrav;
    }
}
            

// Check for wall collisions
if (scr_entity_collidedLastStep(self))
{
    
    if (throughWalls&gt;0) {
        throughWalls -= move_dist * dt();
    }
    else {
        event_user(2);
        if (!instance_exists(id)) {
            exit;
        }
    }
}
else if (((distcount &gt; distlife &amp;&amp; distlife != -1) ||
        (count &gt; timelife &amp;&amp; timelife != -1)) &amp;&amp;
        !delayShot) {
    if (!returning || returned)
    {
        show_hiteffect = false;
        event_user(5);
        instance_destroy();
        exit;
    }
    else
    {
        // Trigger the returning bullet!
        distcount = -96;
        count = 3;
        returned = true;
        amod = 1;
        
        scr_entity_setMoveXY(-move_x, -move_y);
        hitHoopzIn = 0.1;
        
        initDir = (initDir + 180) mod 360;
    }
}

if (franciumShot)
{
    mask_index = s_bull_francium;
}


exit; // Below no longer applies, all bullets have hoopz as target
if (hitHoopzIn &gt; 0)
{
    hitHoopzIn -= dt();
    if (hitHoopzIn &lt;= 0)
    {
        ds_list_add(target_list, o_hoopz);
        hitHoopzIn = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var prev_x = x;
var prev_y = y;

event_inherited();
if paused() exit;

var x_delta = x - prev_x;
var y_delta = y - prev_y;

// Step with STEP_PRECISION pixels per step and carefully look for collisions along the way
// This occurs *after* movement has already occurred - I am looking backwards to see what I
// just hit along the way.
var STEP_PRECISION = 2;

if (abs(x_delta) + abs(y_delta) &gt; STEP_PRECISION) {
    var left   = min(bbox_left, bbox_left  - x_delta);
    var right  = max(bbox_right, bbox_right - x_delta);
    var top    = min(bbox_top, bbox_top  - y_delta);
    var bottom = max(bbox_bottom, bbox_bottom - y_delta);
    
    if (collision_rectangle(left, top, right, bottom, CombatActor, true, true)) {
    
        // Find potential targets near travel path
        var potentialTargets = ds_list_create();
        with (CombatActor) {
            if (collision_rectangle(left, top, right, bottom, id, true, false)) {
                ds_list_add(potentialTargets, id);
            }
        }
        
        // Exit early if no potential targets along path
        if (ds_list_size(potentialTargets) == 0) {
            ds_list_destroy(potentialTargets);
            exit;
        }
    
        // Step with STEP_PRECISION and look for collisions with potential targets-
        x = prev_x;
        y = prev_y;
        var dir = point_direction(0, 0, x_delta, y_delta);
        var dist = point_distance(0, 0, x_delta, y_delta);
        var steps = ceil(dist/STEP_PRECISION);
        var xstep = x_delta / steps;
        var ystep = y_delta / steps;
        for (var step = 0; step &lt; steps; step++) {
            for (var i = 0; i &lt; ds_list_size(potentialTargets); i++) {
                var enemyId = potentialTargets[| i];
                if (place_meeting(x, y, enemyId)) {
                    // A hit. Perform collision event.
                    event_perform(ev_collision, enemyId);
                    // If I have collided and been destroyed, exit.
                    if (!instance_exists(id)) {
                        ds_list_destroy(potentialTargets);
                        exit;
                    }
                }
            }
        
            x += xstep;
            y += ystep;
        }
        
        ds_list_destroy(potentialTargets);
    }
}

// Move towards magnetic things //
if instance_exists(o_magnetic_target) then
    {
    var magnet = instance_nearest(x, y, o_magnetic_target);
    if distance_to_object(magnet) &lt;= 96 then
        {
        if point_direction(x, y, magnet.x, magnet.y) &lt; move_dir then 
            {
            move_dir += 3;
            scr_entity_setDirSpd(move_dir, move_dist);
            }
        else if point_direction(x, y, magnet.x, magnet.y) &gt; move_dir then 
            {
            move_dir -= 3;
            scr_entity_setDirSpd(move_dir, move_dist);
            }
        }
    }
    

// Special effects for some bullet sprites

if(specialShot=="paper")
{
    if(!playedPapersound &amp;&amp; (distcount&gt;distlife/4 || count&gt;timelife/4))
    {
        playedPapersound = true;
        audio_play_sound_at_xy(scr_soundbank_pickSound("hoopzweap_origami_fly"), false, 10, x, y);
    }
}
switch (sprite_index) {
    case s_bull_scrollWeapon:
        image_index = clamp(image_index + dt(), 0, 4);
        break;
    
    case s_bull_bfg:
        image_index += dt()*1.5;
        bfgSparkTimer -= dt();
        while (bfgSparkTimer &lt;= 0) {
            bfgSparkTimer += 0.8;
            //gunfx_bfg_spark(id); // TODO: Reactivate when have proper spark FX
        }
        break;
        
    case s_bull_flamethrower:
    case s_bull_spFlame:
        if (destinationDistance != -1)
        {
            //show_debug_message("lob flame");
            //var progress = point_distance(x, y, destinationX, destinationY) / destinationDistance;
            //progress = abs(progress - 1);
            image_index = clamp((distcount / destinationDistance) * 7, 0, 6);
        }
        else if (timelife != 0) {
            image_index = clamp((count / timelife) * 7, 0, 6);
        }
        smokeCount -= dt_sec() / ((image_index / 3) + 1);
        while (smokeCount &lt;= 0)
        {
            Smoke("color", c_black, 0.5);
            var xpq = (image_index * 1.5) + 3;
            Smoke("puff", x - xpq + random(xpq * 2), y - xpq + random(xpq * 2), z - 2 - random(5), 2 + (image_index * 3) + random(8));
            Smoke("color", c_white);
            smokeCount += smokeTimer;
        }
        break;
        
    case s_bull_neon:
        if(shotSetup)
        {
            image_xscale = neonSize;
            image_yscale = neonSize;
            motionBlur = false;
            neonTrail -= move_dist * dt();
            if (neonTrail&lt;=0)
            {
                neonTrail = 1;
                var _tlbit = instance_create(x,y,o_neonEffect);
                _tlbit.z = z;
                _tlbit.image_xscale = neonSize;
                _tlbit.image_yscale = neonSize;
                _tlbit.image_angle = 180+move_dir;
                _tlbit.neonSize = neonSize;
                _tlbit.neonHue = neonHue;
                _tlbit.neonSat = neonSat;
                _tlbit.neonVal = neonVal;
            }
        }
        break;
        
    case s_bull_digitalLaser:
        if(shotSetup)
        {
            laserTrail -= move_dist * dt();
            if(move_dist==0){laserTrail -= 32*dt();}
            if (laserTrail&lt;=0)
            {
                laserTrail = 8;
                var testPts = lstPoints;
                ds_list_add(lstPoints,x); ds_list_add(lstPoints,y - z);
                if(ds_list_size(lstPoints)&gt;trailLength*2)
                {ds_list_delete(lstPoints,0); ds_list_delete(lstPoints,0);}
            }
        }
        break;
        
    case s_bull_orb:
        if(shotSetup)
        {
            turnTimer -= move_dist*dt();
            laserTrail -= move_dist * dt();
            if(move_dist==0){laserTrail -= 32*dt();}
            if (laserTrail&lt;=0)
            {
                laserTrail = 6;
                ds_list_add(lstPoints,dx);ds_list_add(lstPoints,dy);
                if(ds_list_size(lstPoints)&gt;trailLength*2)
                {ds_list_delete(lstPoints,0); ds_list_delete(lstPoints,0);}
            }
            
            if(turnTimer&lt;=0)
            {
                
                turnTimer = 20 + irandom(16);
                move_dir = move_dir + choose(1,-1)*(40+irandom(40));
                scr_entity_setDirSpd(move_dir, move_dist);
                
                if(irandom(3)&lt;=1 &amp;&amp; pow &gt;2)
                {
                    var shard = scr_combat_cloneBullet(id);
                    shard.x = x;
                    shard.y = y;
                    shard.z = z;
                    var curangle = move_dir + choose(1,-1)*(30+random(20));
                    scr_stats_setAttackStat(shard, STAT_ATTACK_DMG_NORMAL, scr_stats_getAttackStat(id, STAT_ATTACK_DMG_NORMAL)/2 - 1);
                    scr_stats_setAttackStat(shard, STAT_ATTACK_DMG_BIO, scr_stats_getAttackStat(id, STAT_ATTACK_DMG_BIO)/2 - 1);
                    scr_stats_setAttackStat(shard, STAT_ATTACK_DMG_CYBER, scr_stats_getAttackStat(id, STAT_ATTACK_DMG_CYBER)/2 - 1);
                    scr_stats_setAttackStat(shard, STAT_ATTACK_DMG_MENTAL, scr_stats_getAttackStat(id, STAT_ATTACK_DMG_MENTAL)/2 - 1);
                    scr_stats_setAttackStat(shard, STAT_ATTACK_DMG_ZAUBER, scr_stats_getAttackStat(id, STAT_ATTACK_DMG_ZAUBER)/2 - 1);
                    scr_stats_setAttackStat(shard, STAT_ATTACK_DMG_COSMIC, scr_stats_getAttackStat(id, STAT_ATTACK_DMG_COSMIC)/2 - 1);
                    
                    scr_stats_setAttackStat(shard, STAT_ATTACK_KNOCKBACK, scr_stats_getAttackStat(id, STAT_ATTACK_KNOCKBACK)/2 - 1);
                    shard.initDir = curangle;
                    
                    with(shard)
                    {
                        sprite_index = s_bull_orb;
                        laserGen = other.laserGen+1;
                        scr_entity_setDirSpd(curangle, other.move_dist);
                    }
                    
                    shard.distlife = distlife/2;
                    shard.timelife = timelife/2;
                }
                
            }
        }
        break;
        
    case s_bull_pearl:
        motionBlur = false;
        if(image_index&lt;9)
        {
            sparktrail -= move_dist * dt();
            if(move_dist==0){laserTrail -= 32*dt();}
            if (sparktrail&lt;=0)
            {
                sparktrail = 6;
                ob = instance_create(x,y,o_FX);
                ob.z = z;
                ob.sprite_index = sprite_index;
                ob.leaveCorpse = false;
                ob.image_speed = 0.5;
                ob.image_index = image_index + 1;
            }
        }
        break;
        
    case s_bull_orichal:
        //orichalnim = 1
        //orichalFrame = image_index;
        if(wobbleAnim&gt;1){wobbleAnim-=0.05*dt();}else{wobbleAnim = 1;}
        orichalnim +=0.1*dt()*wobbleAnim;
        if(orichalnim&gt;=6){orichalnim-=6;}
        show_debug_message("Orichal anim:"+string(orichalnim));
        switch(floor(orichalnim))
        {
            case 0: image_index = orichalFrame-1;
            case 1: image_index = orichalFrame;
            case 2: image_index = orichalFrame+1;
            case 3: image_index = orichalFrame+2;
            case 4: image_index = orichalFrame+1;
            case 5: image_index = orichalFrame;
        }
        break;
        
    case s_bull_angelCore:
        if(shotSetup)
        {
            if(floor(wingFrame==0))
            {
                featherNext -= move_dist * dt();
                if(move_dist==0){laserTrail -= 32*dt();}
                if (featherNext&lt;=0)
                {
                    featherNext = featherInterval;
                    ob = instance_create(x,y,o_part_angelFeathers);
                    ob.z = z;
                    ob.image_index = median(image_index*0.7-irandom(6),0,9)
                }
            }
        }
        break;
        
    case s_bull_offal:
    case s_bull_blood:
    case s_bull_bloodBFG:
    case s_bull_soiled:
        if(shotSetup)
        {
            bloodTrail -= move_dist * dt();
            if(move_dist==0){bloodTrail -= 32*dt();}
            var basemove = 2;
            if(specialShot == "blood"){basemove = 0.5;}
            if (bloodTrail&lt;=0)
            {
                bloodTrail = max(2,14 - pow/10);
                
                
                var _ob = instance_create(x,y,o_effect_fluidDrop);
                var scl = 0.1+random(0.3);
                _ob.image_xscale = scl;
                _ob.image_yscale = scl;
                _ob.color = c_red;
                if(sprite_index==s_bull_soiled){_ob.color = make_color_rgb(154,14,179);}
                _ob.z = z-1+irandom(2);
                _ob.move_z = basemove + random(basemove*2);
                _ob.gravity_z = 7;
                with(_ob)
                {
                    scr_entity_setDirSpd(random(360), 0.5 + random(2));
                }
                
                if(pow&gt;20)
                {
                    if(random(100)&lt;pow)
                    {
                        var _ob = instance_create(x,y,o_effect_fluidDrop);
                        var scl = 0.2+random(0.4);
                        _ob.image_xscale = scl;
                        _ob.image_yscale = scl;
                        _ob.color = c_red;
                        if(sprite_index==s_bull_soiled){_ob.color = make_color_rgb(154,14,179);}
                        _ob.z = z-1+irandom(2);
                        _ob.move_z = basemove +1 + random(basemove*3);
                        _ob.gravity_z = 7;
                        with(_ob)
                        {
                            scr_entity_setDirSpd(random(360), 1 + random(3));
                        }
                    }
                    
                    if(random(200)&lt;pow)
                    {
                        var _ob = instance_create(x,y,o_effect_fluidDrop);
                        var scl = 0.3+random(0.4);
                        _ob.image_xscale = scl;
                        _ob.image_yscale = scl;
                        _ob.color = c_red;
                        if(sprite_index==s_bull_soiled){_ob.color = make_color_rgb(154,14,179);}
                        make_color_rgb(154,14,179);
                        _ob.z = z-1+irandom(2);
                        _ob.move_z = basemove + random(basemove*3);
                        _ob.gravity_z = 7;
                        with(_ob)
                        {
                            scr_entity_setDirSpd(random(360), 1 + random(2));
                        }
                    }
                }
            }
        }
        break;
        
    case s_bull_magma: ///magma cools down mid-flight
        if(shotSetup)
        {
            magmacooldown -= move_dist * dt();
            if(move_dist==0){magmacooldown -= 32*dt();}
            if (magmacooldown&lt;=0)
            {
                magmacooldown = magmaCoolDelay;
                scr_stats_setAttackStat(id, STAT_ATTACK_DMG_NORMAL,scr_stats_getAttackStat(id, STAT_ATTACK_DMG_NORMAL)*0.95-1);
                scr_stats_setAttackStat(id, STAT_ATTACK_DMG_BIO,scr_stats_getAttackStat(id, STAT_ATTACK_DMG_BIO)*0.95-1);
                scr_stats_setAttackStat(id, STAT_ATTACK_DMG_CYBER,scr_stats_getAttackStat(id, STAT_ATTACK_DMG_CYBER)*0.95-1);
                scr_stats_setAttackStat(id, STAT_ATTACK_DMG_MENTAL,scr_stats_getAttackStat(id, STAT_ATTACK_DMG_MENTAL)*0.95-1);
                scr_stats_setAttackStat(id, STAT_ATTACK_DMG_ZAUBER,scr_stats_getAttackStat(id, STAT_ATTACK_DMG_ZAUBER)*0.95-1);
                scr_stats_setAttackStat(id, STAT_ATTACK_DMG_COSMIC,scr_stats_getAttackStat(id, STAT_ATTACK_DMG_COSMIC)*0.95-1);
                
                pow =
                scr_stats_getAttackStat(id, STAT_ATTACK_DMG_NORMAL) + 
                scr_stats_getAttackStat(id, STAT_ATTACK_DMG_BIO) + 
                scr_stats_getAttackStat(id, STAT_ATTACK_DMG_CYBER) + 
                scr_stats_getAttackStat(id, STAT_ATTACK_DMG_MENTAL) + 
                scr_stats_getAttackStat(id, STAT_ATTACK_DMG_ZAUBER) + 
                scr_stats_getAttackStat(id, STAT_ATTACK_DMG_COSMIC);
                if(pow&gt;132){image_index = 21;}
                else if (pow&gt;128){image_index = 20;}
                else if (pow&gt;120){image_index = 19;}
                else if (pow&gt;112){image_index = 18;}
                else if (pow&gt;104){image_index = 17;}
                else if (pow&gt;96){image_index = 16;}
                else if (pow&gt;88){image_index = 15;}
                else if (pow&gt;80){image_index = 14;}
                else if (pow&gt;72){image_index = 13;}
                else if (pow&gt;64){image_index = 12;}
                else if (pow&gt;56){image_index = 11;}
                else if (pow&gt;48){image_index = 10;}
                else if (pow&gt;40){image_index = 9;}
                else if (pow&gt;32){image_index = 8;}
                else if (pow&gt;26){image_index = 7;}
                else if (pow&gt;20){image_index = 6;}
                else if (pow&gt;16){image_index = 5;}
                else if (pow&gt;12){image_index = 4;}
                else if (pow&gt;8){image_index = 3;}
                else if (pow&gt;4){image_index = 2;}
                else if (pow&gt;2){image_index = 1;}
                else{image_index = 0;}
                
                if(pow&gt;3)
                {
                    Smoke("customcolor",make_color_rgb(10,5,8),make_color_rgb(46,30,40),make_color_rgb(115,50,70),0)
                    Smoke("puff",x-2+irandom(4),y-2+irandom(4),z-1+irandom(2),max(2,pow));
                    Smoke("init",0,0,0,0);
                }
            }
        }
        break;
}

// Update image angle
if (bullet_spriteTurn) image_angle = move_dir;
    
////sparkles
if(shotSetup)
{
    switch(sprite_index)
    {
        case s_bull_boneBFG:
            if(boneTrail&gt;0){boneTrail-=dt();}
            else
            {
                boneTrail = 0.1;
                if(tailRemaining&gt;0)
                {
                    var shardCount = 1;
                    var sideshardImg;
                    var sideshardSpread;
                    var sideshardAngle;
                    sideshardImg[0] = 7;
                    sideshardSpread[0] = 0;
                    sideshardAngle[0]=0;
                    
                    if(tailLength&gt;0)
                    {
                        switch(tailPos)
                        {
                            case 0: sideshardImg[0] = 5; break;
                            case 1: sideshardImg[0] = 5; break;
                            case 2: sideshardImg[0] = 6; break;
                            case 3: sideshardImg[0] = 7; break;
                            case 4: sideshardImg[0] = 8; if(tailPos &lt; tailRemaining){tailPos+=1;} break;
                            case 5: sideshardImg[0] = 9; break;
                            case 6: sideshardImg[0] = 9; shardCount = 2;
                                sideshardImg[1] = 12; sideshardSpread[1] = 8; sideshardAngle[1]=00;
                                break;
                            case 7: sideshardImg[0] = 10; shardCount = 3;
                                sideshardImg[1] = 14; sideshardSpread[1] = 16; sideshardAngle[1]=00;
                                sideshardImg[2] = 15; sideshardSpread[2] = 28; sideshardAngle[2]=00;
                                break;
                            case 8: sideshardImg[0] = 9; shardCount = 2;
                                sideshardImg[1] = 16; sideshardSpread[1] = 4; sideshardAngle[1]=90;
                                break;
                            case 9: sideshardImg[0] = 9; shardCount = 2;
                                sideshardImg[1] = 16; sideshardSpread[1] = 8; sideshardAngle[1]=90;
                                break;
                            case 10: sideshardImg[0] = 9; shardCount = 2;
                                sideshardImg[1] = 16; sideshardSpread[1] = 8; sideshardAngle[1]=90;
                                break;
                            case 11: sideshardImg[0] = 9; shardCount = 2;
                                sideshardImg[1] = 16; sideshardSpread[1] = 8; sideshardAngle[1]=90;
                                break;
                            case 12:
                                sideshardImg[0] = 10; shardCount = 5;
                                sideshardImg[1] = 14; sideshardSpread[1] = 16; sideshardAngle[1]=0;
                                sideshardImg[2] = 13; sideshardSpread[2] = 24; sideshardAngle[2]=0;
                                sideshardImg[3] = 12; sideshardSpread[3] = 32; sideshardAngle[3]=0;
                                sideshardImg[4] = 11; sideshardSpread[4] = 38; sideshardAngle[4]=0;
                                break;
                            case 13: sideshardImg[0] = 16; sideshardAngle[0]=0; shardCount = 2;
                                sideshardImg[1] = 12; sideshardSpread[1] = 8; sideshardAngle[1]=00;
                                break;
                            case 14: sideshardImg[0] = 16; sideshardAngle[0]=180; break;
                            default: sideshardImg[0] = 16; break;
                        }
                    }
                    
                    for(var _i=0; _i&lt;shardCount; _i+=1)
                    {
                        var shard = scr_combat_cloneBullet(id);
                        
                        shard.x = boneSpawnX + lengthdir_x(sideshardSpread[_i],initDir-90);
                        shard.y = boneSpawnY + lengthdir_y(sideshardSpread[_i],initDir-90);
                        shard.sprite_index = s_bull_bone;
                        shard.image_index = sideshardImg[_i];
                        shard.image_angle = image_angle + sideshardAngle[_i];
                        shard.z = z; shard.specialShot = "bone"; shard.alarm[0] = 0;
                        shard.wave = wave; shard.waveAmp = waveAmp;
                        scr_combat_bulletDmgmod(shard,0,1/8);
                        shard.initDir = initDir;
                        shard.distlife = distlife; shard.timelife = timelife;
                        with(shard){scr_entity_setDirSpd(initDir, other.move_dist);}
                        
                        if(_i!=0)
                        {
                            shard = scr_combat_cloneBullet(id);
                            shard.x = boneSpawnX + lengthdir_x(sideshardSpread[_i],initDir+90);
                            shard.y = boneSpawnY + lengthdir_y(sideshardSpread[_i],initDir+90);
                            shard.sprite_index = s_bull_bone;
                            shard.image_index = sideshardImg[_i];
                            shard.image_xscale = -1;
                            shard.image_angle = image_angle - sideshardAngle[_i];
                            shard.z = z; shard.specialShot = "bone"; shard.alarm[0] = 0;
                            shard.wave = wave; shard.waveAmp = waveAmp;
                            scr_combat_bulletDmgmod(shard,0,1/8);
                            shard.initDir = initDir;
                            shard.distlife = distlife; shard.timelife = timelife;
                            with(shard){scr_entity_setDirSpd(initDir, other.move_dist);}
                        }
                    }                    
                    tailLength+=1; tailPos-=1; tailRemaining-=1;
                }
            }
            break;
            
        // Shine and shimmer on the bullets //
        case s_bull_silver:
        case s_bull_gold:
        case s_bull_crystalshot:
        case s_bull_crystalshard:
        case s_bull_diamond:
        case s_bull_diamondShard:
            if(sparkleTimer&gt;0){sparkleTimer-=dt();}
            else
            {
                var dst = 1 + random(pow/20);
                var dir = random(360);
                var ob = instance_create(x+lengthdir_x(dst,dir),y+lengthdir_y(dst,dir),o_FX);
                ob.z = z+1;
                ob.sprite_index = s_bullsparkle;
                var size = random(0.5)+0.5;
                ob.image_angle = random(360);
                ob.image_blend = choose(c_white,c_white,make_color_rgb(255,255,0));
                ob.image_xscale = size; ob.image_yscale = size;
                ob.image_speed = choose(1,0.5,0.25,0.2);
                
                var dst = 1 + random(pow/20)/2;
                var dir = random(360);
                var ob = instance_create(x+lengthdir_x(dst,dir),y+lengthdir_y(dst,dir),o_FX);
                ob.z = z;
                ob.sprite_index = s_bullsparkle;
                var size = random(0.25)+0.5;
                ob.image_angle = random(360);
                ob.image_blend = choose(c_white,make_color_rgb(255,255,0));
                ob.image_xscale = size; ob.image_yscale = size;
                ob.image_speed = choose(1,0.5,0.25,0.2);
                
                sparkleTimer = 0.1 +random(2-median(2,0,pow/50));
            }
            break;
            
        // Grass shred effect //
        case s_bull_grass:
            if(grassTimer&gt;0){grassTimer-=dt();}
            else
            {
                grassTimer = random(0.3)+0.3;
                var dr = point_direction(0,0,move_x,move_y);
                amnt = floor(1 + pow/25 + irandom(pow/15))
                repeat(amnt)
                {
                    var sprng = random(amnt/2);
                    var sppos = random(360);
                    
                    obj = instance_create(x+lengthdir_x(sprng,sppos),y+lengthdir_y(sprng,sppos),o_papershredEffect);
                    var tdir = dr - 20+random(40);
                    var spdMd = 0.10+random(0.20);
                    obj.move_x = lengthdir_x(move_dist*spdMd,tdir);
                    obj.move_y = lengthdir_y(move_dist*spdMd,tdir);
                    obj.z = z;
                    obj.dny = dny;
                    obj.image_blend = make_color_rgb(10,200,30);
                }
            }
            break;
            
        case s_bull_brainshot:
            if(instance_exists(pulseObj))
            {
                pulseObj.x = x;
                pulseObj.y = y;
                pulseObj.z = z;
                pulseObj.radiusbase = 4 + floor(pow/3);
                pulseObj.timerShrink = 1;
                pulseObj.shrinkSpd = 4;
            }
            break;
            
        case s_bull_antimatter:
            if(instance_exists(holeObj))
            {
                holeObj.x = x;
                holeObj.y = y;
                holeObj.z = z;
                holeObj.radiusbase = 4 + floor(pow/3);
                holeObj.timerShrink = 1;
                holeObj.shrinkSpd = 4;
            
                antimatterTrail+= dt();
                if(antimatterTrail&gt;0.2)
                {
                    antimatterTrail =0;
                    var newhole = instance_create(x,y,o_cosmichole);
                    with(newhole){scr_entity_setDirSpd(random(360),0.5+random(1));}
                    newhole.move_friction = 0.01;
                    newhole.z = z;
                    newhole.shrinkSpd = 2;
                    newhole.radiusbase = holeObj.radiusbase*0.9;
                    newhole.timerShrink = 1;
                }
            }
            break;
            
        case s_bull_sinew:
            if(sinewparts&gt;0){sinewparts-=dt();}
            else
            {
                sinewparts = random(0.3)+0.3;
                var dr = point_direction(0,0,move_x,move_y);
                amnt = floor(1 + pow/40 + irandom(pow/30))
                repeat(amnt)
                {
                    var sprng = random(amnt/2);
                    var sppos = random(360);
                    
                    obj = instance_create(x+lengthdir_x(sprng,sppos),y+lengthdir_y(sprng,sppos),o_papershredEffect);
                    var tdir = dr - 20+random(40);
                    var spdMd = 0.10+random(0.20);
                    obj.move_x = lengthdir_x(move_dist*spdMd,tdir);
                    obj.move_y = lengthdir_y(move_dist*spdMd,tdir);
                    obj.z = z;
                    obj.dny = dny;
                    obj.image_blend = choose(make_color_rgb(138,33,33),make_color_rgb(198,14,30),make_color_rgb(246,38,71));
                }
            }
            break;
            
        case s_bull_plasticBFG:
            if(spraytimer&gt;0){spraytimer-=dt();}
            else
            {
                spraytimer+=0.4;
                
                var shard = scr_combat_cloneBullet(id);
                shard.x = x;
                shard.y = y;
                shard.z = z;
                
                scr_combat_bulletDmgmod(shard,0,1/8);
                shard.initDir = move_dir + anglespray;
                
                with(shard)
                {
                    sprite_index = s_bull_foam;
                    rangeEndGrav = 4;
                    lobGravity = 1+random(1);
                    lobDirection = irandom(5);
                    scr_entity_setDirSpd(initDir, 16);
                }
                shard.distlife = distlife/2;
                shard.timelife = timelife/2;
                
                anglespray+=20;
            }
            break;
            
        case s_bull_tin:
            image_angle += 15;
            break;
            
        case s_bull_salt:
            if(bfgShot || rocketShot)
            {
                if(saltTrail&gt;0){saltTrail-=dt();}
                else
                {
                    saltTrail += 0.5+random(1);
                    var saltAmount = 1 + irandom(pow/10);
                    if(bfgShot){saltAmount *=1.5;}
                    
                    repeat(saltAmount)
                    {
                        var angleRnd = irandom(360);
                        var shard = scr_combat_cloneBullet(id);
                        shard.x = x;
                        shard.y = y;
                        shard.z = z;
                        
                        scr_combat_bulletDmgmod(shard,0,1/5);
                        shard.initDir = angleRnd;
                        
                        with(shard)
                        {
                            sprite_index = s_bull_salt;
                            rangeEndGrav = 4;
                            lobGravity = 2+random(2);
                            lobDirection = irandom(90);
                            scr_entity_setDirSpd(angleRnd, 2+pow/8 + irandom(5+pow/4));
                        }
                        shard.distlife = distlife/2;
                        shard.timelife = timelife/2;
                    }
                }
            }
            break;
            
        case s_bull_pearl_lilGhost:
        case s_bull_pearl_eyeShot:
        case s_bull_pearl_handShot:
        case s_bull_pearl_skullShot:
        case s_bull_pearl_ghostShot:
        case s_bull_pearl_bigSkull:
        case s_bull_pearl_ghostMound:
            if(ghostTrail&lt;0.8)
            {
                ghostTrail+=dt();
            }
            else
            {
                ghostTrail = irandom(0.3);
                var ghostcount = 1 + irandom(pow/20);
                repeat(ghostcount)
                {
                    var radius = pow / 6;
                    var ob = instance_create(x-radius+random(radius*2),y-radius+random(radius*2),o_FX);
                    ob.z = z - 2 + irandom(4)
                    ob.sprite_index = s_bull_pearl_spiritSmall;
                    ob.image_speed = choose(0.5,0.4,0.4,0.3,0.25,0.2);
                    var scl = 1;
                    if(pow&lt;20){ob.scl = 0.6+random(0.4);}
                    if(pow&lt;10){ob.scl = 0.3+random(0.4);}
                    if(pow&lt;5){ob.scl = 0.1+random(0.3);}
                    ob.image_xscale = choose(1,-1)*scl;
                    ob.image_yscale = scl;
                }
            }
            break;
            
        case s_bull_yggShot:
            if(plantSize&gt;0)
            {
                if(plantNext&gt;0){plantNext-=dt();}
                else
                {
                    while(plantNext&lt;=0)
                    {
                        plantNext += plantInterval;
                        plantSize -=1;
                        var posShift = 4+plantSize/12;
                        var gro = instance_create(x-posShift+irandom(posShift*2),y-posShift+irandom(posShift*2),o_yggGrowth);
                        gro.z = 0;
                        var powvari = random(1 + plantSize/2 + random(plantSize));
                        
                        if(powvari&gt;0)
                        {
                            if(powvari&lt;10)
                            {
                                gro.sprite_index = choose(s_bull_yggClover1,s_bull_yggClover2,s_bull_yggClover3,s_bull_yggHerb1,s_bull_yggHerb2,s_bull_yggWhiteFlwr1);
                            }
                            else if(powvari&lt;20)
                            {
                                gro.sprite_index = choose(s_bull_yggVine1,s_bull_yggVine2,s_bull_yggWhiteFlwr2,s_bull_yggWhiteFlwr3,s_bull_yggWhiteFlwrBed1);
                            }
                            else if(powvari&lt;30)
                            {
                                gro.sprite_index = choose(s_bull_yggFlower1,s_bull_yggFlower2,s_bull_yggFlower3,s_bull_yggFlower4,s_bull_yggFlower5);
                            }
                            else
                            {
                                gro.sprite_index = choose(s_bull_yggWhiteFlwrBed2,s_bull_yggGrass,s_bull_yggFern1,s_bull_yggFern2,s_bull_yggFern3,s_bull_yggFern4,s_bull_yggFern5,s_bull_yggVine3);
                            }
                            
                        }
                    }
                    
                }
            }
            break;
            
        case s_bull_brass:
        case s_bull_frankincense:
            if(steamTimer&gt;0)
            {
                if(steamInterval&gt;0){steamInterval-=dt()*10}
                {
                    steamTimer-=steamStop*dt();
                    Smoke("puff",x,y,z,steamTimer);
                    steamInterval = 6;
                }
            }
            break;
            
        case s_bull_teashot:
            if(steamTimer&gt;0)
            {
                if(steamInterval&gt;0){steamInterval-=dt()*10}
                {
                    steamTimer-=steamStop*dt();
                    Smoke("customcolor",make_color_rgb(88,38,65),make_color_rgb(109,56,32),make_color_rgb(133,77,47),0)
                    Smoke("puff",x-2+irandom(4),y-2+irandom(4),z-1+irandom(2),max(2,pow));
                    Smoke("init",0,0,0,0);
                    steamInterval = 6;
                }
            }
            break;
            
        case s_bull_candyShot:
            image_angle+=bulletSpin*dt();
            break;
            
        case s_bull_pinataShot:
            image_angle+=bulletSpin*dt();
            break;
            
        case s_bull_untamonium:
            image_index += 4 * dt_sec();
            break;
    }
}

if (sound_emitter != NULL){audio_emitter_position(sound_emitter, x, y, z);}

//  Update shadow //
scr_entity_setShadowSprite(sprite_index, image_index, 0, 0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hit a wall
exit; // ALL BULLETS ARE oADV BULLET NOW
show_debug_message("o_bullet: event_user 2");
// Get collision normal
var wallcoll_dir = point_direction(0, 0, movement_hit_vx, movement_hit_vy);

if(wallRicochet&gt;0)
{
    // Ricochet off wall
    wallRicochet-=1;
    
    if(ricochetSound != "")
    {audio_play_sound_at_xy(scr_soundbank_pickSound(ricochetSound), false, 10, x, y);}
    
    timelife += 30;
    distlife += 20;
    
    if(ricochetRandom)
    {
        scr_entity_setDirSpd(wallcoll_dir - 90 + random(180), move_dist * 0.8);
    }
    else
    {
        var vec1 = scr_entity_movement_getHitWallVector();
        var vec2 = vector_reflection(-move_x, -move_y, vec1[0], vec1[1]);
        scr_entity_setMoveXY(vec2[0] * 0.8, vec2[1] * 0.8);
        vec1 = 0;
        vec2 = 0;
    }
    distcount = distcount/2;
    initDir = move_dir;
    
    // Ricochet hit effect
    var obj = instance_create(x,y,o_ricochet);
    obj.z = z;
    obj.sprite_index = bulletBurst;
    obj.image_angle = wallcoll_dir - 180;
    obj.image_blend = c_white;
    obj.depth = depth;
    obj.image_xscale = image_xscale * .6;
    obj.image_yscale = image_yscale * .6;
}
else
{
    // explode on wall for o_advbullet
    scr_entity_setDirSpd(wallcoll_dir - 180, move_dist);
    instance_destroy();
}


exit;
// Get collision normal
var wallcoll_dir = point_direction(0, 0, movement_hit_vx, movement_hit_vy);

// Set the direction of the ricochet effect
scr_entity_setDirSpd(wallcoll_dir - 180, move_dist);

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// bullet hits the ground;

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// NO LONGER DOES THIS WITH RICCOCHET
shotHits +=1;
shotDamage += lastDmg;

lastDmg = 0;

instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
event_inherited();
if (superTrail)
{
    j = 0;
    while (dx != superX || dy != superY) || j &gt; 200
    {
        superX = Goto(superX, dx, j);
        superY = Goto(superY, dy, j);
        spk = instance_create(superX, superY, oZauberSparkle); //o_effect_zhangConfetti);
        spk.z = z;
        if (prefix2Has) spk.color = prefix2Color;
        with (spk) event_user(0);
        j += 2;
    }
}

if(arrowShot &amp;&amp; drawSprite)
{
    var arwfrm = median(floor(pow / 10),0,6);
    scr_draw_motionblur(s_bull_arrowBase,arwfrm,dx,dy,image_xscale,image_yscale,move_dir,colorBlend,image_alpha*amod,move_dir, move_dist, 6, 20);
    show_debug_message(string(move_dir));
}

if(lobAngledSprite)
{
    image_angle = point_direction(0,0,move_x,move_y-move_z);
}

if(shotSetup)
{
    if(sprite_index ==s_bull_digitalLaser || sprite_index==s_bull_orb )
    {
        var pxnb = ds_list_size(lstPoints);
        draw_set_color(laserCol);
        if(pxnb&gt;2)
        {
            var sizeStay = 0;
            var lcurSize = shotWidth;
            var prevlx = ds_list_find_value(lstPoints,pxnb-2);
            var prevly = ds_list_find_value(lstPoints,pxnb-1);
            
            for(i=pxnb-4; i&gt;=0; i-=2)
            {
                ptx = ds_list_find_value(lstPoints,i);
                pty = ds_list_find_value(lstPoints,i+1);
                
                if(lcurSize&gt;0)
                {
                    scr_draw_line(ptx,pty,prevlx,prevly,lcurSize);
                    draw_sprite_ext(s_bull_laserJunction,0,ptx,pty,lcurSize/16,lcurSize/16,0,draw_get_color(),1);
                }
                prevlx = ptx;
                prevly = pty;
                
                sizeStay+=1;
                if(sizeStay&gt;12){lcurSize = floor(lcurSize*0.9); lcurSize-=1;}
            }
            
            //if(lcurSize&gt;0)
           // {
            //    scr_draw_line(shotOriginx,shotOriginy,prevlx,prevly,lcurSize);
           // }
        }
        else
        {
            scr_draw_line(shotOriginx,shotOriginy,dx,dy,shotWidth);
        }
    }

    if(sprite_index ==s_bull_angelCore )
    {
        draw_sprite_ext(wingSprite,wingFrame,dx,dy,image_xscale,image_yscale,image_angle,image_blend,image_alpha*amod);
        wingFrame += 0.1*move_dist*dt();
    }
    
    if(webshot&gt;0)
    {
        var px = dx+lengthdir_x(min(distcount,move_dist*strandlength),move_dir+180);
        var py = dy+lengthdir_y(min(distcount,move_dist*strandlength),move_dir+180);
        scr_draw_line(dx,dy,px,py,strandThick);
        if(webshot==1 &amp;&amp; instance_exists(strand)){scr_draw_line(dx,dy,strand.dx,strand.dy,strandThick);}
    }

    
    if(sprite_index = s_bull_glass_light)
    {
        draw_sprite_ext(s_bull_glass,-1,dx,dy,image_xscale,image_yscale,image_angle,image_blend,image_alpha*amod*0.4);
    }
    
}

if(sprite_index == s_bull_flyshot)
{
    flyflutter += 2*dt();
    if(flyflutter&gt;=2){flyflutter-=2;}
    image_index = flyBaseframe +flyflutter;
}

if(sprite_index == s_bull_spFlame || useColorBlend)
{
    image_blend = colorBlend;
    switch(matName == "Bone")
    {
        case "Bone":
            overlayCol = c_white;
            drawWhiteOverlay = true;
            overlayAlpha = 1;
            break;
        case "Carbon":
            overlayCol = c_black;
            drawWhiteOverlay = true;
            overlayAlpha = 1;
            break;
    }
}

if(drawSprite)
{
    
    if (sprite_exists(sprite_index))
    {
        // Draw some bullets with motion blur
        if (motionBlur){
            scr_draw_motionblur(sprite_index,-1,dx,dy,image_xscale,image_yscale,image_angle,colorBasic,image_alpha*amod,
                                move_dir, move_dist, 6, 20);
        }
        else // Draw others regularly
        {
            draw_sprite_ext(sprite_index,-1,dx,dy,image_xscale,image_yscale,image_angle,colorBasic,image_alpha*amod);
        }
        
        // Draws white overlay on bullet to make it white, e.g. flame supershot
        if (glowEffect)
        {
            drawWhiteOverlay = true;
            overlayAlpha = max(abs(sin(current_time / 30)) - 0.3, 0);
            overlayCol = c_white;
        }   
        
        if(drawWhiteOverlay)   
        {
            draw_set_blend_mode(bm_add);
            d3d_set_fog(true, overlayCol, 0, 0);
            draw_sprite_ext(sprite_index,-1,dx,dy,image_xscale,image_yscale,image_angle,overlayCol,image_alpha*amod*overlayAlpha);
            d3d_set_fog(false, overlayCol, 0, 0);
            draw_set_blend_mode(bm_normal);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,2</point>
    <point>4,4</point>
  </PhysicsShapePoints>
</object>
