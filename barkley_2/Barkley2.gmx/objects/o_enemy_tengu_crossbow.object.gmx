<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sTenguCrossbowMap</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_enemygroup_cybergremlins</parentName>
  <maskName>mask_rect_16by16</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////you get all the default variables from EnemyCombatActor
event_inherited();
//mask_types

soundReload = "hoopz_reloadcrossbow";
soundCrossbow = "hoopzweap_crossbow";
soundDie = "cGremlinSmall_death";
soundHurt = "cGremlinSmall_grunt";
soundAlert = "cGremlinSmall_alert";

mask=irandom_range(0,11);

// Jetpaxxer vars
scr_entity_setCollisionType(COLLISION_ONLY_SOLID);
jetpack_bob = 0; // Sine wave for bobbing at top

// Enemy stats
scr_enemyDB_statsGet(enemyBuild);

// Enemy configurations
scr_entity_setZHitbox(0, 24);
ailmentTotem_define(id, 0, 0, 0, 0);

anim = 0;
animSpd = 0.2;
animStrike = 0;

pType = choose(0,0,irandom(3));

weaponType = choose(0,1,2,3,4,5);
armTypeR = choose(0,0,1,2);
armTypeL = choose(armTypeR,armTypeR,0,1,2);

deathSound = soundDie;
damageSound = soundHurt;

// On being hit event
scr_stats_hook_onHit_userEvent(8);

// Ammo
scr_AI_ammo_set("bolt", 1)

// Passive and active states
var guard = scr_AI_addPassiveState(scr_AI_passive_guard);
ds_map_replace(guard, "sndAlertSound", soundAlert);

activeApproach = scr_AI_addActiveState(scr_AI_active_approach);
activeCircle = scr_AI_addActiveState(scr_AI_active_circle);
activeCircle[? "switchAddMaxDist"] = 80;
activeCircle[? "switchPriority"] = 10;
activeRetreat = scr_AI_addActiveState(scr_AI_active_retreat);
activeRetreat[? "switchPriority"] = 20;
activeRetreat[? "switchDisablePush"] = true;

// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// Explosive Shot
var shot = scr_AI_addAction(scr_AI_action_shot);
shot[? "burst"] = 1;
shot[? "burstRnd"] = 0;
shot[? "motion"] = 10;
shot[? "precision"] = 6;
shot[? "beforeTime"] = 5;
shot[? "afterTime"] = 4.5;
shot[? "gunRange"] = 4;
shot[? "bulletZ"] = z+64;
shot[? "sndAttackWarn"] = ""; //attacking scream (desperate)
shot[? "sndAttackStrike"] = soundCrossbow;
shot[? "bulletObject"] =  o_enemyAttack_bulletTengu;
shot[? "bulletSprite"] = s_bull_arrow;
AI_util_action_setDamage(shot, 1, 0, 0, 1, 10, 50, STAGGER_HARDNESS_SOFT);

// Aim and shoot
attack_aim_shoot = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_active_aimandshoot);
attack_aim_shoot[? "action"] = action; 
action[? "action"] = shot;

attack_aim_shoot[? "distMin"] = 70; 
attack_aim_shoot[? "distMax"] = 160;
attack_aim_shoot[? "cooldownTime"] = 30; 
attack_aim_shoot[? "cooldownTimeRnd"] = 15;
attack_aim_shoot[? "prepTime"] = 3;
attack_aim_shoot[? "rechargeTime"] = 5;
attack_aim_shoot[? "ammoType"] = "bolt";


// Tri Shot
var tri_shot = scr_AI_addAction(scr_AI_action_tri_shot);
tri_shot[? "burst"] = 1;
tri_shot[? "burstRnd"] = 0;
tri_shot[? "precision"] = 0;
tri_shot[? "beforeTime"] = 3;
tri_shot[? "afterTime"] = 4.5;
tri_shot[? "dmg"] = 14;
tri_shot[? "gunRange"] = 4;
tri_shot[? "bulletZ"] = z+64;
tri_shot[? "sndAttackWarn"] = ""; //attacking scream (desperate)
tri_shot[? "sndAttackStrike"] = soundCrossbow;
tri_shot[? "bulletObject"] =  o_enemyAttack_bulletTengu;
tri_shot[? "bulletSprite"] = s_bull_arrow;

// Aim and Tri-shoot
tri_shoot = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_active_aimandshoot);
tri_shoot[? "action"] = action; 
action[? "action"] = tri_shot;

tri_shoot[? "distMin"] = 40; 
tri_shoot[? "distMax"] = 120;
tri_shoot[? "cooldownTime"] = 20; 
tri_shoot[? "cooldownTimeRnd"] = 0;
tri_shoot[? "prepTime"] = 3;
tri_shoot[? "rechargeTime"] = 5;
tri_shoot[? "ammoType"] = "bolt";

// Reload
attack = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_action_tengu_reload);
attack[? "action"] = action; 

action[? "beforeTime"] = 7;
action[? "afterTime"] = 3;
action[? "attackName"] = "reload";
action[? "dmg"] = 0;
action[? "burst"] = 1;
action[? "burstRnd"] = 0;
action[? "gunRange"] = 8;
action[? "sndAttackWarn"] = soundReload; //attacking scream (desperate)
action[? "sndAttackStrike"] = ""; // Never plays
attack[? "predicate"] = predicate_AI_hasNoAmmo;
attack[? "distMin"] = 1;
attack[? "distMax"] = 320;
attack[? "rechargeTime"] = 10;




//Initiate Animation Entities
scr_entity_animation_new("body");
scr_entity_animation_new("mask");
_body_offset=0;
_mask_offset=0;
damaged =0;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if paused() exit;

//Reduce damaged variable if higher than 0
if damaged &gt;0 {damaged -=1*dt();}

// Jetpack behaviour
if (AI_stateTopType == AI_STATETYPE_PASSIVE) {
    // Slowly descend
    move_z = -1;
} 

else if (AI_stateTopType == AI_STATETYPE_ACTION &amp;&amp; a_attackName=="reload") {
    // Quickly raus down to floor level during charge
    if (z &gt; 0 &amp;&amp; a_attackState=="before") {
        move_z = -20;
    } else {
        move_z = 0;
    } 

} 

else if (AI_stateTopType == AI_STATETYPE_ACTION) {
    // Quickly raus down to floor level during charge
    if (z &gt; 0 &amp;&amp; move_dist &gt; 0) {
        move_z = -20;
    } else {
        move_z = 0;
    } 

} 



else {
    // Ascend
    move_z = 4;
    
    // Cap height
    var max_z = global.settingEnemyFlyHeight - (sin(jetpack_bob) * 4);
    z = min(z, max_z);
    jetpack_bob += .6 * dt();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gib me like a gremlin
var _obj;

var repeats = 3 + irandom(3);
repeat(repeats) {
    _obj = instance_create(x,y,o_FX);
    _obj.z = z + random(hitbox_z_top);
    _obj.sprite_index = s_fx_bloodBurst;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y-4,o_gibs);
    _obj.z = z + 16;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 0;
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y+4,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 1;
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 2;
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 3;
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create feathers on hit
var atk = argument_attackId;
for (i=0; i&lt;irandom_range(4,8); i++)
{
_obj = instance_create(x,y,o_FX);
_obj.sprite_index = s_tengu_feather;
_obj.image_index = irandom(6);
_obj.image_angle = choose(0,90,180,270);
_obj.image_speed=random_range(0.5,0.75);
_obj.speed = random_range(1,4);
_obj.friction = random_range(0.2,0.5);
_obj.x = atk.x;
_obj.y = atk.y;
_obj.depth = -99999;
}
if mask&gt;-1
    {
    var lose_mask = choose(0,0,1);
    if lose_mask==1
        {
        _obj = instance_create(x,y,o_FX);
        _obj.sprite_index = s_tengu_mask;
        _obj.image_index = mask;
        _obj.image_angle = choose(0,90,180,270);
        _obj.image_speed=0;
        _obj.z=z+16;
        _obj.move_z = 12;
        _obj.gravity_z = 18;
        _obj.depth = -99999;
        _obj.life_span=35;
        _obj.lifeCount=true;
        mask=-1;
        }
    }
//Set me as being damaged, so I can show my damage frame
damaged = 2;

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

var _col,pt2x,pt2y,pt3x,pt3y,_hScale,_frm,_hoff,_hFrm;
_col = image_blend;

_frm = 0;
_img = 0;
_hScale = 1;
_hoff = 0;
_hFrm = 0;

_aFrmR = 0;
_aFrmL = 0;

_body_offset = pType*4;
_head_offset = 0;
_rightarm_offset = armTypeR*10+1;
_leftarm_offset = armTypeL*10+1;

_dirdir = ((faceDir+360)mod 360) div 90;
_odir = ((faceDir+360)mod 360);

switch(_dirdir)
{
    case 0: _hScale = -1; _body_offset = pType*4+ 6;_rightarm_offset = armTypeR*10+5; _leftarm_offset = armTypeL*10+5; _head_offset =2; break;
    case 1: _hScale = 1; _body_offset = pType*4+ 6;_rightarm_offset = armTypeR*10+5; _leftarm_offset = armTypeL*10+5; _head_offset =2; break;
    case 2: _hScale = -1; _body_offset = pType*4; _rightarm_offset = armTypeR*10; _leftarm_offset = armTypeL*10; _head_offset=0; break;
    case 3: _hScale = 1; _body_offset = pType*4; _rightarm_offset = armTypeR*10; _leftarm_offset = armTypeL*10; _head_offset=0;   break;
}


draw_set_alpha(1);
if attack_aim_shoot[? "ammo"] == 1
    {
    scr_entity_animation_setSpeed("body", 1);
    scr_entity_animation_setRange("body", 0, 7);
    }
else if attack_aim_shoot[? "ammo"] == 0
    {
    scr_entity_animation_setSpeed("body", 1);
    scr_entity_animation_setRange("body", 22, 7);
    }
    
if(a_attackName=="shot")
    {
    scr_entity_animation_setSpeed("body", 1);
    scr_entity_animation_setRange("body", 8, 14);
    }
    
if(a_attackName=="reload")
    {
    scr_entity_animation_setSpeed("body", 1);
    scr_entity_animation_setRange("body", 29, 14);
    }

if(damaged&gt;0)
    {
    scr_entity_animation_setSpeed("body", 0);
    scr_entity_animation_setRange("body", 45, 0);
    scr_entity_animation_setFrame("body",0);
    }

// Torso and mask
DrawStripExt(s_tengu_crossbow,scr_entity_animation_getImage("body"),dx,dy-16,_hScale,1,0,_col,1);
//draw_sprite_ext(s_cgremlin_rocket_head,scr_entity_animation_getImage("head"),dx,dy-6+_hoff,_hScale,1,0,_col,1);

if mask &gt;-1
    {
    var offset_mask=0;
    var offset_check=floor(scr_entity_animation_getFrame("body"));
    /*
    if(offset_check ==0 || offset_check==3 || offset_check==7 || offset_check==10 || offset_check==14 || offset_check==18 || offset_check==22 || offset_check==25 || offset_check==31 || offset_check==42) {offset_mask=0;}
    else if(offset_check ==1 || offset_check==8 || offset_check==11 || offset_check==15 || offset_check==19 || offset_check==23 || offset_check==24 || offset_check==30 || offset_check==41 || offset_check==43) {offset_mask=1;}
    else if(offset_check ==2 || offset_check==9 || offset_check==17 || offset_check==24 || offset_check==30 || offset_check==43 || offset_check==45) {offset_mask=2;}
    else if(offset_check == 4 || offset_check==6 || offset_check==12 || offset_check==19 || offset_check==21 || offset_check==26 || offset_check==28) {offset_mask=-2;}
    */
    if a_attackName != "reload"
    {
    if(offset_check ==0 || offset_check==3) {offset_mask=0;}
    else if(offset_check ==1) {offset_mask=1;}
    else if(offset_check ==2) {offset_mask=2;}
    else if(offset_check ==4 || offset_check==6) {offset_mask=-2;}
    else if(offset_check ==5) {offset_mask=-4;}
    }
    else
    {
    if(offset_check ==0) {offset_mask=1;}
    else if(offset_check ==1) {offset_mask=2;}
    else if(offset_check ==2) {offset_mask=-1;}
    else if(offset_check ==4) {offset_mask=6;}
    else if(offset_check ==5) {offset_mask=7;}
    else if(offset_check ==6) {offset_mask=5;}
    else if(offset_check ==7) {offset_mask=4;}
    else if(offset_check ==8) {offset_mask=2;}
    }
    draw_sprite_ext(s_tengu_mask,mask,dx+(_hScale*6),dy-14+offset_mask,_hScale,1,0,_col,1);
    }

combatActor_draw_post();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>14,18</point>
    <point>14,14</point>
  </PhysicsShapePoints>
</object>
