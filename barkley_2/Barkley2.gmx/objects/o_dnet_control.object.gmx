<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000020</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// DEBUG thing //
randomize()

x = view_xview[0];
y = view_yview[0];
totHei = 0;
global.dnet_thread_script = "";
global.dnet_vspace = 10;

backgroundObj = instance_create(x,y,o_dnet_background);

// DEBUG //
//scr_savedata_put("clock.time", 24); 
//ClockTime("update");

// Dwarfnet size //
dnet_width = 384;
dnet_height = 240;
top_height = 35; // Height of controls + title bar
use_height = dnet_height - top_height; // Usable height
slider_lock = -1;
slider_y = 0;
event = "";
pointer_x = dnet_width / 2;
pointer_y = dnet_height / 2;

// Get the music prior to Dwarfnet and then stop the music //
global.music_return = global.bgm_current_music;
audio_set_bgm_instant("mus_blankTEMP");
global.dnet_music = 0;

// The ol' pointer //
//instance_create(view_xview + 192, view_yview + 120, o_pointer);

// Music stuff //
timer_music_check = 10;
current_track = irandom(8);
for (i = 0; i &lt; 9; i += 1) dnet_music[i] = "mus_dnet_track" + string(i + 1);

// Grafix //
statusbar_image = 0;
statusbar_button_set = 0;  
pappy_button_set = 0;
scr_quest_set_state("dwarfnet_skin_system", irandom(3));


// Set the font //
draw_set_font(global.fn_dnet);

// Title //
o_dnet_control.dnet_title_current = "Willkommen bei den DwarfNet Foren!";
o_dnet_control.dnet_title_previous = "Willkommen bei den DwarfNet Foren!";
o_dnet_control.dnet_title_bamboozle = "Gumpus..."
global.dnet_color_variation = 0;
global.dnet_music = dnet_music[current_track];

// Buttons //
xsp = 20; // Xspace between buttons
butWid = 13;
butHei = 12;
butAmt = 6;
for (i = 0; i &lt; butAmt; i += 1)
{
    butLef[i] = 6 + (i * xsp);
    butTop[i] = 4;
    butSub[i] = i;
    butHov[i] = 0;
    butPrs[i] = 0;
}
butLef[5] = dnet_width - 20;
butNam[0] = "Home";
butNam[1] = "Rules";
butNam[2] = "Pappy";
butNam[3] = "Chat";
butNam[4] = "Settings";
butNam[5] = "Disconnect";

button_hover_slider = false;

// The Apps //
instance_create(x, y, o_dnet_app);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Remove all Dnet stuff //
Dnet("purge", o_dnet_app);
Dnet("purge", o_dnet_poll);
Dnet("purge", o_dnet_post);
Dnet("purge", o_dnet_image);
Dnet("purge", oDnetElement);
Dnet("purge", o_dnet_thread);

// Set music back to waht it was //
audio_set_bgm_instant(global.music_return);
audio_stop_sound_ext(global.dnet_music);
global.cursor_visible = true;
global.event = false;
with(backgroundObj){instance_destroy();}
with(ustation)
{
    Utility("input",1);
    Utility("go back");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Freeze game, get cursor
global.event = true;
if (scr_input_getInputType() == KEYINPUT_KEYBOARD_MOUSE)
{
    pointer_x = o_curs.x;
    pointer_y = o_curs.y;
}
else event_user(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEBUG CLOCKTIME CHANGES REMOVE
if keyboard_check_pressed(vk_f1) then global.clockHours -= 1;
if keyboard_check(vk_f2) then global.clockMinutes -= 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
event = "step";
event_user(10);

// ---------------------------------------------------------------------------------------- //
// ---------------------------------------------------------------------------------------- //
// ---------------------------------------- GRAFIX ---------------------------------------- //
var bonk = scr_quest_get_state("dwarfnet_skin_system");
statusbar_image = bonk;
statusbar_button_set = bonk;
pappy_button_set = bonk;
    
// ---------------------------------------------------------------------------------------- //
// ---------------------------------------------------------------------------------------- //
// ---------------------------------------- MUSIC ----------------------------------------- //
// Music check //
if timer_music_check &gt; 0 then
    {
    // Tick down //
    timer_music_check -= dt();
    
    // Event //
    if timer_music_check &lt;= 0 then
        {
        // Timer reset //
        timer_music_check = 10;
        
        // If music is not playing, put in a new tune //
        if !audio_is_playing_ext(dnet_music[current_track]) and !audio_is_playing_ext(global.dnet_music) then
            {
            // Music //
            current_track += irandom(7) + 1;
            if current_track &gt; 8 then current_track -= 8;
            global.dnet_music = dnet_music[current_track];
            audio_play_sound_at_xy(global.dnet_music, false, 10, x, y)
            }
        }
    }
    
// ---------------------------------------------------------------------------------------- //
// --------------------------------- BUTTONS ---------------------------------------------- //
// ---------------------------------------------------------------------------------------- //
var vx = view_xview[0];
var vy = view_yview[0];

for (i = 0; i &lt; butAmt; i += 1)
{
    butHov[i] = Dnet("pointer",x-vx + butLef[i], y-vy + butTop[i], x-vx + butLef[i] + butWid, y-vy + butTop[i] + butHei);
    if (butPrs[i] &gt; 0) butPrs[i] -= 1;
    if (MiniKeyPress("action"))
    {
        if (butHov[i])
        {
            butPrs[i] = 5;
            if (o_dnet_app.dnet_app == -1) o_dnet_control.dnet_title_bamboozle = o_dnet_control.dnet_title_current;
            o_dnet_app.dnet_app_selected = i;
            o_dnet_app.activate_app = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Slider
sldX = x + dnet_width - 10;
sld = 0;
var vx = view_xview[0];
var vy = view_yview[0];

if (instance_exists(o_dnet_post))
{
    totHei = 0;
    o_dnet_control.totHei += global.dnet_vspace;
    with (o_dnet_poll) o_dnet_control.totHei += height + global.dnet_vspace;
    with (o_dnet_post) o_dnet_control.totHei += height + global.dnet_vspace;
    with (o_dnet_image) o_dnet_control.totHei += height + 3;
    with (oDnetElement) o_dnet_control.totHei += height + 3;
    sld = 1;
}
else if (instance_exists(o_dnet_thread))
{
    totHei = (instance_number(o_dnet_thread) * o_dnet_thread.height) + ((instance_number(o_dnet_thread) + 1) * global.dnet_vspace);
    totHei -= 1;
    sld = 1;
}
else slider_y = 0;

if (sld)
{
    sldHei = (o_dnet_control.use_height / totHei) * o_dnet_control.use_height;
    if (event == "draw") draw_sprite_ext(s_dnet_scrollbar, statusbar_image, sldX, y+top_height, 1, use_height, 0, c_white, 1);
    if (totHei &gt; use_height)
    {
        if (event == "step" &amp;&amp; slider_lock == -1)
        {
            var mov = (o_dnet_thread.height + global.dnet_vspace);
            if (mouse_wheel_up()) slider_y -= (o_dnet_control.use_height / totHei) * mov;
            if (mouse_wheel_down()) slider_y += (o_dnet_control.use_height / totHei) * mov;
            slider_y = clamp(slider_y, 0, use_height - sldHei);
        }
        if (Dnet("pointer", sldX-vx, top_height + slider_y-vy, sldX + 10-vx, y+top_height + slider_y + sldHei-vy) || slider_lock != -1) sldHov = 1; 
        else sldHov = 0;
        if (event == "draw") MiniSprite9(sDNETSlider, (statusbar_image * 2) + sldHov, sldX, y+top_height + slider_y, 10, sldHei, 1, c_white, 1);
        if (MiniKeyPress("action") || slider_lock != -1)
        {
            if (slider_lock == -1 &amp;&amp; sldHov) slider_lock = pointer_y - slider_y;
            if (slider_lock != -1) slider_y = pointer_y - slider_lock;
        }
        if (MiniKeyPress("action", 1) == 0) slider_lock = -1;
        slider_y = clamp(slider_y, 0, use_height - sldHei);
        
        ///hold UP or DOWN to scroll as well
        if (MiniKeyPress("up",1)==1)
        {
            slider_y-=1;
            clamp(slider_y, 0, use_height - sldHei);
        }
        if (MiniKeyPress("down",1)==1)
        {
            slider_y+=1;
            clamp(slider_y, 0, use_height - sldHei);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mouse
ysp = 12 * dt();
xsp = 16 * dt();
if (MiniKeyPress("up", 1)) pointer_y -= ysp;
if (MiniKeyPress("down", 1)) pointer_y += ysp;
if (MiniKeyPress("left", 1)) pointer_x -= xsp;
if (MiniKeyPress("right", 1)) pointer_x += xsp;
pointer_x = clamp(pointer_x, 0, dnet_width);
pointer_y = clamp(pointer_y, 0, dnet_height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Leave a thread //
Dnet("purge", o_dnet_post);
Dnet("purge", o_dnet_poll);
Dnet("purge", o_dnet_image);
Dnet("purge", oDnetElement);
with o_dnet_thread visible = true;
o_dnet_control.dnet_title_current = o_dnet_control.dnet_title_previous;
scrolling_position = 0;
scrolling_lock = false;
slider_grabbed = false;
slider_position = 0;  

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cursor
draw_sprite(sDNETCursor, MiniKeyPress("action", 1), x+pointer_x,y+pointer_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Statusbar
// Set font //
draw_set_font(global.fn_dnet);
draw_set_alpha(1);

// Statusbar //
draw_sprite_ext(s_dnet_statusbar, statusbar_image, x, y, dnet_width, 1, 0, c_white, 1);

// Title //
DnetText(x + 10, y + 20, o_dnet_control.dnet_title_current, dnet_width - 20);

// Time
draw_set_halign(1);
draw_text(floor(dnet_width / 2), 4, "12:34");
draw_set_halign(0);

// Draw buttons
for (i = 0; i &lt; butAmt; i += 1)
{
    var sub = (butSub[i] * 3) + (statusbar_button_set * 18);
    if (butPrs[i]) sub += 2;
    else if (butHov[i]) sub += 1;
    draw_sprite(s_dnet_button_status, sub, x + butLef[i], y + butTop[i]);
}

// Slider
event = "draw";
event_user(10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
