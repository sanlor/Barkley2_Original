<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_mg_fishing_lure</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// SETUP //
event_inherited();

// Start at specific z height
z = 20;

// Lure stats //
gravity_z = o_mg_fishing_control.lureWeight[o_mg_fishing_control.lureIndex];
aerodynamics = o_mg_fishing_control.lureAero[o_mg_fishing_control.lureIndex];

// Technical stuff //
reel = 0;
reel_bonus = 0;
alpha = 1;
color = c_white;
rotation = 0;
rotation_goal = 0;
value = 0;
timer_hooked_spooked = 0;
lure_fall_sound = false;
fast_reel = 0;

// Sound //
audio_play_sound_at_xy("fishing_lure_cast", false, 10, view_xview + 192, view_yview + 120);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Inheritance //
event_inherited();
if (o_mg_fishing_control.escape) exit;
if (o_mg_fishing_control.guplur) exit;
if (paused()) exit;

// Start falling //
if move_z &gt; -2 and move_z &lt; 2 and lure_fall_sound = false then
    {
    lure_fall_sound = true;
    audio_play_sound_at_xy("fishing_lure_fall", false, 10, view_xview + 192, view_yview + 120);
    }

// Touchdown //
if move_z &lt;= 0 and z &lt;= 0 and reel = 0 then
    {
    // Stop all motion and align to z height zero //
    z = 0;
    move_x = 0;
    move_y = 0;
    move_z = 0;
    gravity_z = 0;
    
    // Become transparent and lose the shadow // Start reeling in //
    alpha = 0.3;
    color = make_color_rgb(50, 50, 50);
    reel = 1;
    shadow_radius = 0;
    
    // Rotation //
    rotation = 225 + choose(1, -1) * 30;
    rotation_goal = 225;
    
    // Splash fx //
    splash_fx = scr_fx_simple(x, y, z, s_effect_splash_small);
    splash_fx.image_speed = dt();
    splash_fx.dny = splash_fx.y + 99;
    audio_play_sound_at_xy("splash_out", false, 10, view_xview + 192, view_yview + 120);
    }
else if z &gt; 0 then
    {
    // Rotate while in midair //
    rotation = move_z;
    
    // Move while in midair //
    if MiniKeyHeld("up") then y -= dt_sec() * (50 + (10 * aerodynamics));
    else if MiniKeyHeld("down") then y += dt_sec() * (50 + (10 * aerodynamics));
    if MiniKeyHeld("left") then x -= dt_sec() * (50 + (10 * aerodynamics));
    else if MiniKeyHeld("right") then x += dt_sec() * (50 + (10 * aerodynamics));
    
    // Boundaries //
    if x &lt; o_cinema0.x then x = o_cinema0.x;
    if x &gt; o_cinema2.x then x = o_cinema2.x;
    if y &lt; o_cinema1.y then y = o_cinema1.y;
    if y &gt; o_cinema3.y then y = o_cinema3.y;
    }
    
// Reel in //
if reel &gt; 0 then
    {
    // Bubbles //
    if irandom(100) &lt;= 4 then 
        {
        wfx = instance_create(x + choose(1, -1) * irandom(12), y + choose(1, -1) * irandom(12), o_mg_fishing_bubble);   
        wfx.depth = depth - 8;
        }
    
    // Make reeling faster //
    if timer_hooked_spooked &lt;= 0 then
        {
        // Reel in faster //
        if !instance_exists(o_mg_fishing_battle_fish) then
            {
            if MiniKeyPress("action") and reel_bonus &lt; (4 + (aerodynamics * 0.5)) and reel != 2 then 
                {
                fast_reel = 3;
                reel_bonus += 2 + (aerodynamics * 0.5);
                audio_stop_sound_ext("sn_fishingreel01");
                audio_stop_sound_ext("sn_fishingreelfast01");
                audio_play_sound_at_xy("sn_fishingreelfast01", false, 0, view_xview + 192, view_yview + 120);
                repeat (3)
                    {
                    wfx = instance_create(x + choose(1, -1) * irandom(12), y + choose(1, -1) * irandom(12), o_mg_fishing_bubble);   
                    wfx.depth = depth - 8;
                    }
                }
            
            // Normal reeling sound //
            if reel_bonus &lt;= 0 then
                { 
                if !audio_is_playing_ext("sn_fishingreel01") then audio_play_sound_at_xy("sn_fishingreel01", false, 0, view_xview + 192, view_yview + 120);                
                }
            }
            
        if (reel == 1)
        {
        if (MiniKeyHeld("action")) scr_entity_animation_set(o_cts_hoopz, "fishingReel");
        else scr_entity_animation_set(o_cts_hoopz, "fishingIdle");
        }
        // Move back to player //
        dir = point_direction(x, y, o_cts_hoopz.x, o_cts_hoopz.y);
        move_x = lengthdir_x(4 - reel + reel_bonus, dir);
        move_y = lengthdir_y(4 - reel + reel_bonus, dir);
        
        // Reel bonus //
        if reel_bonus &gt; 0 then 
            {
            reel_bonus -= dt();
            rotation_goal = point_direction(x, y, o_cts_hoopz.x, o_cts_hoopz.y);
            }
        
        // Rotate //
        if rotation &lt; rotation_goal then rotation += 2;
        if rotation &gt; rotation_goal then rotation -= 2;
        
        // Small effect on lure movement during reeling //
        if MiniKeyHeld("up") then y -= dt_sec() * 10;
        else if MiniKeyHeld("down") then y += dt_sec() * 10;
        if MiniKeyHeld("left") then x -= dt_sec() * 10;
        else if MiniKeyHeld("right") then x += dt_sec() * 10;
        
        // Reach player //
        if distance_to_object(o_cts_hoopz) &lt;= 24 then 
            {
            if reel = 2 then 
                {
                o_mg_fishing_control.mode = "catch";
                o_mg_fishing_control.timer_catch = 7;
                o_mg_fishing_control.music = 0;
                }
            else o_mg_fishing_control.timer_setup = 7;
            with o_mg_fishing_battle_fish instance_destroy();
            with o_mg_fishing_battle_player instance_destroy();
            audio_stop_sound_ext("sn_fishingreel01");
            audio_stop_sound_ext("sn_fishingreelfast01");
            audio_stop_sound_ext("sn_fishbattlelosing01")
            audio_stop_sound_ext("sn_fishbattlelosing02")
            instance_destroy();
            }
        }
    }
    
// Catch fish //
if place_meeting(x, y, o_mg_fishing_fish) and reel = 1 then
    {
    // Get hooked //
    o_mg_fishing_control.music = 0;
    audio_play_sound_at_xy("fishing_fish_hooked", false, 10, view_xview + 192, view_yview + 120);
    audio_stop_sound_ext("sn_fishingreel01");
    audio_stop_sound_ext("sn_fishingreelfast01");
    fsh = instance_nearest(x, y, o_mg_fishing_fish);
    with (fsh) 
    {
        hooked = true;
        other.value = value;
        timer_hooked_spooked = 8;
    }
    timer_hooked_spooked = 8;
    reel = 2;
    alpha = 0;  
    
    // Small splash //
    splash_fx = scr_fx_simple(x, y, z, s_effect_splash_small);
    splash_fx.image_speed = dt();
    splash_fx.dny = splash_fx.y + 99;  
    
    // Start battle //
    o_mg_fishing_control.timer_battle = 8;
    
    // Battle data //
    o_mg_fishing_control.fish_gun = fsh.gun;
    o_mg_fishing_control.fish_value = value;
    o_mg_fishing_control.lure_value = o_mg_fishing_control.lureCatch[o_mg_fishing_control.lureIndex];
    }
    
// Hooked and Spooked //
if timer_hooked_spooked &gt; 0 then
    {
    // Tick down //
    timer_hooked_spooked -= dt();
    
    // Motionless //
    move_x = 0;
    move_y = 0;
    
    // Battle music //
    if timer_hooked_spooked &lt;= 0 then o_mg_fishing_control.music = 2;
    }
    
// Fast reel sound stop //
if fast_reel &gt; 0 then 
    {
    fast_reel -= dt();
    if fast_reel &lt;= 0 then audio_stop_sound_ext("sn_fishingreelfast01");
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Guplur prevent
if (o_mg_fishing_control.guplur == 0) event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
draw_sprite_ext(sprite_index, o_mg_fishing_control.lureIndex, dx, dy, 1, 1, rotation, color, alpha);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
