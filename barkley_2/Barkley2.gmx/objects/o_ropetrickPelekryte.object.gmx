<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create

with (o_pelekryte01)
{
    scr_event_interactive_deactivate();
}

// Create rope
orx = o_ropeindianPelekryte.x;
ory = o_ropeindianPelekryte.y - 11;

ropAmt = 0;
rpx = orx;
rpy = ory;
pth = pRopePelekryte;
pthSpd = 0.03; // time for rope to go up
pthPos = 0;
pthBeg = 0;
pthCou = 0;
act = 1;

if (instance_exists(o_ropeindian01)) { o_ropeindian01.objRop = id; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (act == 1)
{
    pthCou += dt_sec();
    while (pthCou &gt; pthSpd)
    {
        while (pthPos &lt; 1)
        {
            pthPos += 0.001;
            rnx = orx + path_get_x(pth, pthPos);
            rny = ory + path_get_y(pth, pthPos);
            if (point_distance(rpx, rpy, rnx, rny) &gt; 1.5) break;
        }
        if (pthPos &gt;= 1) { act = 2; pthPos = 1; exit; }
        rpd = point_direction(rpx, rpy, rnx, rny);
        event_user(0);
        rpx = rnx;
        rpy = rny;
        pthCou -= pthSpd;
    }
}
else if (act == 2)
{
    pthCou += dt_sec();
    while (pthCou &gt; pthSpd)
    {
        pthBeg += 1;
        //ropAmt -= 1;
        if (pthBeg &gt;= ropAmt) instance_destroy();
        pthCou -= pthSpd;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make rope chunk
ind = ropAmt;
ropLef[ind] = rpx;
ropTop[ind] = rpy;
ropDir[ind] = rpd;
ropPos[ind] = pthPos;
ropAmt += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
alt = floor(ropAmt / 2) mod 2;
alp = 1;
for (i = pthBeg; i &lt; ropAmt; i += 1)
{
    if (ropPos[i] &gt;= 0.8) alp = abs((ropPos[i] - 0.8) - 0.2) * 5; else alp = 1;
    draw_sprite_ext(sRope, alt, ropLef[i], ropTop[i], 1, 1, ropDir[i], c_white, alp);
    alt = !alt;
}
// Pelekryte
pelPos = max(0.13, pthPos);
pkx = orx + path_get_x(pth, pelPos);
pky = ory + path_get_y(pth, pelPos);
if (pthPos &gt;= 0.8) alp = abs((pthPos - 0.8) - 0.2) * 5; else alp = 1;
if (act == 3) alp = 0;
draw_sprite_ext(s_pelekryte01, 0, pkx, pky, 1, 1, 0, c_white, alp);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
