<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>icon_camera</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Allows disabled to start, _follow can be null.
_enabled = false;
_follow = NULL;
_move_x = NULL;
_move_y = NULL;
_camera_speed = NULL;
_frame_objects = NULL;
_frame_object[0] = NULL;
_frame_object[1] = NULL;
_frame_object[2] = NULL;
_frame_object[3] = NULL;

shiftstop = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make sure the camera is always inbounds. If set, follows an entity. 
/// Does not move if paused.
if (instance_exists(ustation) == 0)
{
    if paused() exit;
}

// Debug code shouldn't be here?
//if (keyboard_check_pressed(vk_shift) and keyboard_check(vk_control)) {
//    shiftstop = !shiftstop;
//}
//if (shiftstop) exit;

var target_x = NULL;
var target_y = NULL;
var distance = NULL;
if (_frame_objects != NULL)
{
    camX = 0;
    camY = 0;
    if (_frame_objects == 1)
        scr_event_camera_frame(_frame_object[0]);
    else if (_frame_objects == 2)
        scr_event_camera_frame(_frame_object[0], _frame_object[1]);
    else if (_frame_objects == 3)
        scr_event_camera_frame(_frame_object[0], _frame_object[1], _frame_object[2]);
    else if (_frame_objects == 4)
        scr_event_camera_frame(_frame_object[0], _frame_object[1], _frame_object[2], _frame_object[3]);
    
    //Get target from camera frame script
    target_x = camX;
    target_y = camY;
    distance = _camera_speed * dt();
}
else if (_follow != NULL) {
    if (instance_exists(_follow) == 0) exit;
    target_x = _follow.camera_target_x;
    target_y = _follow.camera_target_y - _follow.z;
    distance = _follow.camera_speed * dt();
}
else if (_move_x != NULL and _move_y != NULL) {
    target_x = _move_x;
    target_y = _move_y;
    distance = _camera_speed * dt();
}
if (target_x != NULL and target_y != NULL and distance != NULL) {
    if (point_distance(x, y, target_x, target_y) &lt;= distance) {
        x = target_x;
        y = target_y;
    } else {
        var dir = point_direction(x, y, target_x, target_y);
        x += cos(degtorad(dir)) * distance;
        y -= sin(degtorad(dir)) * distance;
    }
}

// y = view_yview + hudY + (sprite_get_height(s_hud_bar) * abs(1 - hudHide));
if (_enabled) 
{
    view_xview[0] = round(x - SCREEN_WIDTH / 2);
    view_yview[0] = round(y - SCREEN_HEIGHT / 2);
    if (instance_exists(o_room_unbound)) exit;
    if (instance_exists(o_hud) == 0)
    {
        vem = room_height - SCREEN_HEIGHT;
    }
    else
    {
        vem = room_height - SCREEN_HEIGHT + (sprite_get_height(s_hud_bar) * abs(o_hud.hudHide));
    }
    view_xview[0] = round(min(max(x - SCREEN_WIDTH/2, 0), room_width - SCREEN_WIDTH));
    view_yview[0] = round(min(max(y - SCREEN_HEIGHT/2, 0), vem));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
