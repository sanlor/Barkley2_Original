<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_junkbot_larm_chainsaw</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_enemy_junkbot_part_arm</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

attach_height = 14;
height = 16;

scr_entity_animation_define("arm", sprite_index, 0, 8, 0);

sawTimer = 0;
sawAttackTimer = 0;
sawMask = s_junkbot_larm_chainsaw_mask;
sawAttackObject = noone;

soundSaw = scr_soundbank_pickSound("junkbot_chainsaw");
soundId = NULL;

action = scr_AI_action_junkbot_chainsaw; // Action to add

actionConf = ds_map_create(); // Action configuration map
actionConf[? "part"] = id;
actionConf[? "duration"] = 20;
AI_util_action_setDamage(actionConf, 0, .4, 0, 0, 5, 50, STAGGER_HARDNESS_SOFT);

attackConf = ds_map_create(); // Attack configuration map
attackConf[? "distMax"] = 40;
attackConf[? "cooldownTime"] = 30;
attackConf[? "cooldownTimeRnd"] = 5;
attackConf[? "rechargeTime"] = 5;
attackConf[? "rechargeTimeRnd"] = 0;
attackConf[? "coneAngleMin"] = 0;
attackConf[? "coneAngleMax"] = 180;
attackConf[? "distMax"] = 80;


shotx = x;
shoty = y;
shotz = 0;
shotdir = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (sawAttackObject != noone and instance_exists(sawAttackObject)) {
    with (sawAttackObject) {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if paused() exit;

sawTimer -= dt();

if (sawTimer &gt; 0) {
    if (sawAttackObject == noone or !instance_exists(sawAttackObject)) {
        sawAttackObject = instance_create(parent.x, parent.y, o_enemyAttack_melee_static);
        sawAttackObject.attack_from = id;
        sawAttackObject.mask_index = sawMask;
        sawAttackObject.knockback_type = KNOCKBACKTYPE_SPECIFIED_DIRECTION;
        AI_util_action_attackEntityDamageFromAction(self.id, actionConf, sawAttackObject, STAT_ATTACK_DMG_NORMAL);
        ds_list_copy(sawAttackObject.target_list, parent.target_list);
    }
    sawAttackObject.x = parent.x;
    sawAttackObject.y = parent.y;
    sawAttackObject.z = parent.z;
    var faceDir = ((parent.headDir + 360 + 22.5) mod 360) div 45;
    sawAttackObject.image_index = faceDir;
    sawAttackObject.knockback_dir = faceDir * 45 + 180;
    
    sawAttackTimer -= dt();
    if (sawAttackTimer &lt;= 0) {
        ds_list_clear(sawAttackObject.hit_list);
        sawAttackTimer += 1;
    }
    if (soundId == NULL) {
        soundId = audio_play_sound_on_actor(id, soundSaw, true, 100);
    }
} else {
    if (sawAttackObject != noone and instance_exists(sawAttackObject)) {
        with (sawAttackObject) {
            instance_destroy();
        }
    }
    sawAttackObject = noone;
    if (soundId != NULL) {
        audio_stop_sound(soundId);
        soundId = NULL;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Called by junkbot to draw part

if (parent != noone and instance_exists(parent)) {
    var sprDirLook = (parent.headDir+22.5+360) mod 360;
    sprite = scr_entity_animation_getSpriteIndex("arm");
    image = scr_entity_animation_imageByRatio("arm", sprDirLook, 360);
    var dx = parent.dx + (x - parent.x);
    var dy = parent.dy + ((y-z) - (parent.y - parent.z));
    if (sawTimer &gt; 0) {
        dx += 1 - random(2);
        dy += 1 - random(2);
    }
    draw_sprite(sprite, image, dx, dy);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
