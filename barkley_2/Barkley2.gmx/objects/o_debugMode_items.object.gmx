<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2100000</depth>
  <persistent>0</persistent>
  <parentName>o_debugMode</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>COLUMN_CANDY_X = 10;
COLUMN_CANDY_Y = 200;
COLUMN_CANDYADD_X   = 200;
COLUMN_CANDYSCHEM_X = 250;

//COLUMN_ZAUBER_X = 400;
//COLUMN_ZAUBER_Y = 200;
//COLUMN_ZAUBERADD_X = 590;
//COLUMN_ZAUBERSCHEM_X = 640;

COLUMN_ITEM_X = 800; //800
COLUMN_ITEM_Y = 40;
COLUMN_ITEM_ADD_X = 990;
COLUMN_ITEM_SUB_X = 1040;

COLUMN_POCKET_X = 40;
COLUMN_POCKET_Y = 40;
COLUMN_POCKET_W = 16; // Block size

list_candy = ds_list_create();
var candyList = scr_items_db_getAllItemsOfType(ITEMTYPE_CANDY);
for (var i = 0; i &lt; ds_list_size(candyList); i++) {
    var candy = candyList[| i];
    var name = candy[? "name"];
    ds_list_add(list_candy, name);
}

/*
list_zauber = ds_list_create();
var zauberList = scr_items_db_getAllItemsOfType(ITEMTYPE_ZAUBER);
for (var i = 0; i &lt; ds_list_size(zauberList); i++) {
    var zauber = zauberList[| i];
    var name = zauber[? "name"];
    ds_list_add(list_zauber, name);
}
*/

list_item = global.dslItemName;

// Variables for button being hovered
button_hovered = false;
button_add = false;
button_schem = false;
button_candy = NULL_STRING;
button_zauber = NULL_STRING;
button_item = NULL_STRING;
button_n = 0;
button_column = "candy";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var cx = o_curs.x + view_xview; // Cursor X in-game
var cy = o_curs.y + view_yview; // Cursor Y in-game
var csx = o_curs.x * global.screen_scale; // Cursor X on-screen
var csy = o_curs.y * global.screen_scale; // Cursor Y on-screen

// Determine which button is being hovered
button_hovered = false;

// Candy buttons - Add
if (csx &gt;= COLUMN_CANDYADD_X &amp;&amp; csx &lt; COLUMN_CANDYADD_X + 50 &amp;&amp;
    csy &gt;= COLUMN_CANDY_Y &amp;&amp; csy &lt; COLUMN_CANDY_Y + 12*ds_list_size(list_candy)) {
    
    n = ((csy - COLUMN_CANDY_Y) / 12) div 1;
    button_column = "candy";
    button_candy = ds_list_find_value(list_candy, n);
    if (button_candy != NULL_STRING) {
        button_add = true;
        button_schem = false;
        button_hovered = true;
    }
}

// Candy buttons - Schematic
if (csx &gt;= COLUMN_CANDYSCHEM_X &amp;&amp; csx &lt; COLUMN_CANDYSCHEM_X + 100 &amp;&amp;
    csy &gt;= COLUMN_CANDY_Y &amp;&amp; csy &lt; COLUMN_CANDY_Y + 12*ds_list_size(list_candy)) {
    
    n = ((csy - COLUMN_CANDY_Y) / 12) div 1;
    button_column = "candy";
    button_candy = ds_list_find_value(list_candy, n);
    if (button_candy != NULL_STRING and !Candy("recipe has", button_candy)) {
        button_add = false;
        button_schem = true;
        button_hovered = true;
    }
}


// Zauber buttons
/*
if (csx &gt;= COLUMN_ZAUBERADD_X &amp;&amp; csx &lt; COLUMN_ZAUBERADD_X + 50 &amp;&amp;
    csy &gt;= COLUMN_ZAUBER_Y &amp;&amp; csy &lt; COLUMN_ZAUBER_Y + 12*ds_list_size(list_zauber)) {
    
    n = ((csy - COLUMN_ZAUBER_Y) / 12) div 1;
    button_column = "zauber";
    button_zauber = ds_list_find_value(list_zauber, n);
    if (button_zauber != NULL_STRING) {
        button_add = true;
        button_schem = false;
        button_hovered = true;
    }
}

if (csx &gt;= COLUMN_ZAUBERSCHEM_X &amp;&amp; csx &lt; COLUMN_ZAUBERSCHEM_X + 100 &amp;&amp;
    csy &gt;= COLUMN_ZAUBER_Y &amp;&amp; csy &lt; COLUMN_ZAUBER_Y + 12*ds_list_size(list_zauber)) {
    
    n = ((csy - COLUMN_ZAUBER_Y) / 12) div 1;
    button_column = "zauber";
    button_zauber = ds_list_find_value(list_zauber, n);
    if (button_zauber != NULL_STRING and !//scr_schematics_zaubers_has(button_zauber)) {
        button_add = false;
        button_schem = true;
        button_hovered = true;
    }
}
*/

// Item Add
if (csx &gt;= COLUMN_ITEM_ADD_X &amp;&amp; csx &lt; COLUMN_ITEM_ADD_X + 50 &amp;&amp;
    csy &gt;= COLUMN_ITEM_Y &amp;&amp; csy &lt; COLUMN_ITEM_Y + 12*ds_list_size(list_item)) {
    
    n = ((csy - COLUMN_ITEM_Y) / 12) div 1;
    button_column = "item";
    button_item = ds_list_find_value(list_item, n);
    if (button_item != NULL_STRING) {
        button_add = true;
        button_schem = false;
        button_hovered = true;
    }
}

// Item Subtract
if (csx &gt;= COLUMN_ITEM_SUB_X &amp;&amp; csx &lt; COLUMN_ITEM_SUB_X + 50 &amp;&amp;
    csy &gt;= COLUMN_ITEM_Y &amp;&amp; csy &lt; COLUMN_ITEM_Y + 12*ds_list_size(list_item)) {
    
    n = ((csy - COLUMN_ITEM_Y) / 12) div 1;
    button_column = "item";
    button_item = ds_list_find_value(list_item, n);
    if (button_item != NULL_STRING) {
        button_add = false;
        button_schem = false;
        button_hovered = true;
    }
}

if (mouse_check_button_pressed(mb_left)) {
    if (button_hovered) {
        // Do a thing
        audio_play_sound_ext("sn_talk1", 100, false);
        if (button_column == "candy") {
            // Jerkin
            if (button_add) {
                var did = scr_items_add(scr_items_db_getCopyOfItem(button_candy));
                show_debug_message("o_debugMode did = " + string(did));
                event_user(0);
            } else {
                Candy("recipe add", button_candy);
            }
        }
        else if (button_column == "item") {
            if (button_add) {
                //if (Item("have", button_item) == 0) 
                Item("gain", button_item, 1);
            } else {
                if (Item("have", button_item) &gt;= 1) Item("lose", button_item, 1);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

// Draw title
draw_set_font(global.fn_1)
draw_text(2, 2,  "ITEMS");

var i, s;

// Draw headers
draw_set_font(global.fn_1);    
draw_text(COLUMN_CANDY_X, COLUMN_CANDY_Y - 20, "CANDY");
//draw_text(COLUMN_ZAUBER_X, COLUMN_ZAUBER_Y - 20, "ZAUBER");
draw_text(COLUMN_ITEM_X, COLUMN_ITEM_Y - 20, "ITEM");

draw_set_font(global.fn_2);

// Candy menu
for (var i = 0; i &lt; ds_list_size(list_candy); i++) {
    s = ds_list_find_value(list_candy, i);

    draw_set_color(c_white);
    draw_text(COLUMN_CANDY_X, COLUMN_CANDY_Y + 12*i,  string_upper(s));
    draw_text(COLUMN_CANDYADD_X,   COLUMN_CANDY_Y + 12*i, "ADD");
    if (Candy("recipe has", s)) draw_set_colour(c_gray);
    draw_text(COLUMN_CANDYSCHEM_X, COLUMN_CANDY_Y + 12*i, "SCHEMATIC");
    draw_set_colour(c_white);
}

// Zauber menu
/*
for (var i = 0; i &lt; ds_list_size(list_zauber); i++) {
    s = ds_list_find_value(list_zauber, i);

    draw_set_color(c_white);
    draw_text(COLUMN_ZAUBER_X, COLUMN_ZAUBER_Y + 12*i,  string_upper(s));
    draw_text(COLUMN_ZAUBERADD_X,   COLUMN_ZAUBER_Y + 12*i, "ADD");
    if (//scr_schematics_zaubers_has(s)) draw_set_colour(c_gray);
    draw_text(COLUMN_ZAUBERSCHEM_X, COLUMN_ZAUBER_Y + 12*i, "SCHEMATIC");
    draw_set_colour(c_white);
}
*/

// Item menu
for (var i = 0; i &lt; ds_list_size(list_item); i++) {
    s = ds_list_find_value(list_item, i);
    has = Item("have", s);
    if (has &gt; 0) draw_set_color(c_white); else draw_set_colour(c_gray);
    draw_text(COLUMN_ITEM_X,     COLUMN_ITEM_Y + 12*i, string_upper(s));
    if (has &gt; 0) draw_set_colour(c_gray);
    draw_text(COLUMN_ITEM_ADD_X, COLUMN_ITEM_Y + 12*i, "ADD");
    if (has == 0) draw_set_colour(c_gray);
    draw_text(COLUMN_ITEM_SUB_X, COLUMN_ITEM_Y + 12*i, "SUBTRACT");
    if (has &gt; 0) draw_set_color(c_white); else draw_set_colour(c_gray);
    draw_text(COLUMN_ITEM_SUB_X + 70, COLUMN_ITEM_Y + 12*i, "x" + string(Item("count", s)));
    draw_set_colour(c_white);
}

// Draw hovered button (if any)
if (button_hovered) {
    draw_set_colour(c_red);
    if (button_column == "candy") {
        if (button_add) {
            draw_text(COLUMN_CANDYADD_X,   COLUMN_CANDY_Y + 12*n, "ADD");
        } else {
            draw_text(COLUMN_CANDYSCHEM_X, COLUMN_CANDY_Y + 12*n, "SCHEMATIC");
        }
    }
    /*
    if (button_column == "zauber") {
        if (button_add) {
            draw_text(COLUMN_ZAUBERADD_X,   COLUMN_ZAUBER_Y + 12*n, "ADD");
        } else {
            draw_text(COLUMN_ZAUBERSCHEM_X, COLUMN_ZAUBER_Y + 12*n, "SCHEMATIC");
        }
    }
    */
    if (button_column == "item") 
    {
        if (button_add) draw_text(COLUMN_ITEM_ADD_X, COLUMN_ITEM_Y + 12*n, "ADD");
        else draw_text(COLUMN_ITEM_SUB_X, COLUMN_ITEM_Y + 12*n, "SUBTRACT");
    }
}


// Draw pocket squares
var px = COLUMN_POCKET_X;
var py = COLUMN_POCKET_Y;
var pw = COLUMN_POCKET_W;

draw_set_colour(c_red);
repeat (Jerkin("pockets")) {
    draw_rectangle(px, py, px+pw-1, py+pw-1, true);
    px += pw;
}

// Draw items in pockets
draw_set_colour(c_white);
px = COLUMN_POCKET_X;
var items = scr_items_getAll();
for (var i = 0; i &lt; ds_list_size(items); i++) {
    var item = items[| i];
    var type = item[? "type"];
    if (type == ITEMTYPE_CANDY)
    {
        Candy("draw name", item[? "name"], px + (pw/2), py + (pw/2), 1, 1, 0, c_white, 1);
        px += pw;
    }
    /*else if (type == ITEMTYPE_ZAUBER) {
        var spr = assetOrNull(item[? "sprite"], asset_sprite);
        if (spr != NULL) {
            var img = item[? "image"];
            draw_sprite(spr, img, px + (pw/2), py + (pw/2));
        }
        px += pw;
    }*/
}

draw_set_color(c_white);
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
