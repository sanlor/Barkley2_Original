<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_beetleborg</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>EnemyCombatActor</parentName>
  <maskName>mask_disk_20by20</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////you get all the default variables from EnemyCombatActor
event_inherited();

// SOUND
deathSound = "cGremlinSmall_death";
soundAlert = "cGremlinSmall_alert";
damageSound = "cGremlinSmall_grunt";

// Enemy stats
scr_enemyDB_statsGet(enemyBuild);

// Flying stuff
flying = false;
flying_sine = 0;
flying_height = 16;
scr_entity_setZHitbox(-16, 32);
scr_path_setWalldist(32);
scr_path_setMovementType(scr_path_movementType_thrusters);
scr_path_setLookaheadDist(20);
scr_stats_knockback_setKnockbackHandler(scr_stats_knockbackHandler_pinball)
combatActor_setRenderSurfSize(64);

ailmentTotem_define(self.id, 0, 0, 0, 0);
wlkSpd = 20;
wlk = 0;

// Open up when attacking
opened = 0;

// Inside core
core_spin = 0;

// Aggro
scr_AI_aggro_configure(120, 200, 800);

// Enemy configurations
gravity_z = 0;


// Passive and active states
var guard = scr_AI_addPassiveState(scr_AI_passive_guard);
var active = scr_AI_addActiveState(scr_AI_active_approach_thrusters);
active[? "thrustStr"] = 1.6
active[? "friction"] = .35
active[? "maxSpeed"] = 25
active[? "maxSpeedPath"] = 12

ds_map_replace(guard, "sndAlertSound",soundAlert);


// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// Static field
attack = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_action_extendedAOEAttack);
attack[? "action"] = action; 

action[? "dmg"] = 0; // No additional damage
action[? "sndAttackStrike"] = "general_impact";
action[? "beforeTime"] = 1.5;
action[? "duringTime"] = 15;
action[? "afterTime"] = 2;
action[? "attackObject"] = o_enemyAttack_aoe_ruinedDrone_electricalField;
action[? "stagger"] = 100;

attack[? "distMax"] = 48;
attack[? "cooldownTime"] = 20;//50; 
attack[? "cooldownTimeRnd"] = 0;//20;
attack[? "rechargeTime"] = 0;
attack[? "rechargeTimeRnd"] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle bouncing
event_inherited();
if paused() exit;

scr_entity_bounceOnCollide(0.75);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if paused() exit;

// Determine if flying
if (move_dist == 0 and AI_stateTopType == AI_STATETYPE_PASSIVE) {
    flying = false;
}
else {
    flying = true;
}

if (flying) {
    // Determine height target
    flying_targetheight = flying_height + sin(flying_sine) * 4; // was 7
    flying_sine += 1 * dt(); //0.4
    // Move towards it
    if (flying_targetheight &lt; z) move_z -= .4 * dt();
    if (flying_targetheight &gt; z) move_z += .4 * dt();
    // Apply Z friction
    if (move_z &lt; 0) move_z = min(0, move_z + .1 * dt());
    if (move_z &gt; 0) move_z = max(0, move_z - .1 * dt());
}

else {
    // Move to ground
    if (z &gt; 0.5) move_z = max(-.5, move_z - .3 * dt());
}

// Open up during attacks
if (AI_stateTopType == AI_STATETYPE_ACTION) {
    opened = min(12, opened + 6 * dt());
}
else if (flying) {
    opened = max(2, opened - 6 * dt());
}
else {
    opened = max(0, opened - 6 * dt());
}

// Core spin
core_spin += .8 * dt();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death
scr_fx_explosion_spawn_at(x, y, z, 7);
    
var debris = irandom(2) + 5;
repeat (debris) {
    var gib = instance_create(x + 8 - random(16),y + 8 - random(16),o_gibs);
    gib.sprite_index = s_enemyDeath_parts;
    gib.image_index = irandom(sprite_get_number(s_enemyDeath_parts)-1);
    gib.z = z + 4 + random(32);
    gib.timer = 600;
    gib.move_z = 12 + random(16);
    gib.bloodburst = noone;
    gib.splatSound = "junkbot_death_partclink";
    gib.rot = 0;
    
    with gib {
        scr_entity_setDirSpd(random(360), 4 + random(24));
        scr_entity_setShadowSprite(sprite_index, image_index, 0, 0);
    }
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

wlk += wlkSpd * dt_sec();

if (x &gt; xprevious) xsc = 1; else xsc = -1;
draw_sprite_ext(s_beetleborg, 4 + (wlk mod 4), dx, dy, xsc, 1, 0, c_white, 1);

combatActor_draw_post();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
