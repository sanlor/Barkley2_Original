<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_cinema_marker_0</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //
image_speed = 0;
occupied = false;
dwarf_occupation = false;

// While he waiting game is still active, create proles to fill every spot //
if Quest("mortgageOver") == 0 then
    {
    me = string(object_get_name(object_index))
    switch (me)
        {
        case "o_mg_wait_spot02":
            prole = instance_create(x, y, o_mortageProle);
            prole.target_spot = o_mg_wait_spot03;
            prole._last_direction = UP;
        break;
        case "o_mg_wait_spot03":
            prole = instance_create(x, y, o_mortageProle);
            prole.target_spot = o_mg_wait_spot04;
            prole._last_direction = UP;
        break;
        case "o_mg_wait_spot04":
            prole = instance_create(x, y, o_mortageProle);
            prole.target_spot = o_mg_wait_spot05;
            prole._last_direction = UP;
        break;
        case "o_mg_wait_spot05":
            prole = instance_create(x, y, o_mortageProle);
            prole.target_spot = o_mg_wait_spot06;
            prole._last_direction = RIGHT;
        break;
        case "o_mg_wait_spot06":
            prole = instance_create(x, y, o_mortageProle);
            prole.target_spot = o_mg_wait_spot07;
            prole._last_direction = DOWN;
        break;
        case "o_mg_wait_spot07":
            prole = instance_create(x, y, o_mortageProle);
            prole.target_spot = o_mg_wait_spot08;
            prole._last_direction = DOWN;
        break;
        case "o_mg_wait_spot08":
            prole = instance_create(x, y, o_mortageProle);
            prole.target_spot = o_mg_wait_spot09;
            prole._last_direction = DOWN;
        break;
        case "o_mg_wait_spot09":
            prole = instance_create(x, y, o_mortageProle);
            prole.target_spot = o_mg_wait_spot10;
            prole._last_direction = DOWN;
        break;
        case "o_mg_wait_spot10":
            prole = instance_create(x, y, o_mortageProle);
            prole.target_spot = o_mg_wait_spot11;
        break;
        case "o_mg_wait_spot11":
            prole = instance_create(x, y, o_mortageProle);
            prole.target_spot = o_mg_wait_spot12;
        break;
        case "o_mg_wait_spot12":
            prole = instance_create(x, y, o_mortageProle);
            prole.target_spot = o_mg_wait_spot13;
        break;
        case "o_mg_wait_spot13":
            prole = instance_create(x, y, o_mortageProle); // x - 4 was here //
            prole.target_spot = o_mg_wait_spot13;
            prole.my_processing_time = 100;
            prole.vikingstad_animation = prole.my_processing_time - 20;
            prole._last_direction = UP;
        break;    
        }
    }
    
// Waiting game is done and dusted so there is just two dwarfs forever in the line, preventing you from doing the minigame again //
else
    {
    me = string(object_get_name(object_index))
    switch (me)
        {
        case "o_mg_wait_spot12":
            prole = instance_create(x, y, o_mortageProle);
            prole.target_spot = o_mg_wait_spot13;
            prole.my_processing_time = 1000;
        break;
        case "o_mg_wait_spot13":
            prole = instance_create(x, y, o_mortageProle);
            prole.target_spot = o_mg_wait_spot13;
            prole.my_processing_time = 1000;
            prole._last_direction = UP;
            scr_entity_animation_set(prole, ANIMATION_IDLE_UP);
        break;    
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if paused() exit;

// Occupy spot //
if place_meeting(x, y, Actor) then
    {
    image_index = 1;
    occupied = true;
    }
else
    {
    image_index = 0;
    occupied = false;
    }
    
// Dwarf occupy spot //
if place_meeting(x, y, o_mortageProle) then
    {
    image_index = 1;
    dwarf_occupation = true;
    }
else
    {
    image_index = 0;
    dwarf_occupation = false;
    }



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
