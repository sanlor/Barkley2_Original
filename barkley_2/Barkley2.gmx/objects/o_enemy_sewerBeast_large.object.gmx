<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_sewerBeast_large</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>EnemyCombatActor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////you get all the default variables from EnemyCombatActor
event_inherited();

// Enemy stats
scr_enemyDB_statsGet(enemyBuild);

// Enemy configurations
scr_entity_setZHitbox(0, global.settingEnemyBigHeight);
ailmentTotem_define(self.id, 0, 0, 0, 0);

anim = 0;
animSpd = 0.1;
animStrike = 0;

jumpheight = 0;

deathSound = "sewerbeast_death";
damageSound = "sewerbeast_hit";

headBobX = 0;
headBobY = 0;

var conf, attack, guard;

// Passive and active states
guard = scr_AI_addPassiveState(scr_AI_passive_guard);
guard[? "sndAlertSound"] = "sewerbeast_alert";

// Active state in water
activeMoveTowardsLand = scr_AI_addActiveState(scr_AI_active_moveTowardsLand);
activeMoveTowardsLand[? "switchPredicate"] = predicate_AI_isWading;

// Active state on land
activeApproach = scr_AI_addActiveState(scr_AI_active_approach);
activeApproach[? "switchPredicate"] = predicate_AI_isNotWading;

activeHangback = scr_AI_addActiveState(scr_AI_active_hangback);
activeHangback[? "switchPriority"] = 10;
activeHangback[? "switchRemoveMaxDist"] = 150;
activeHangback[? "switchAddMaxDist"] = 110;
activeHangback[? "switchPredicate"] = predicate_AI_isNotWading;

// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// Jump action
var jump = scr_AI_addAction(scr_AI_action_jump);
jump[? "jumpHeightBase"] = 45;

activeMoveTowardsLand[? "jumpAction"] = jump;


// Shot (land)
attack = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_action_shot);
attack[? "action"] = action; 

action[? "motion"] = 22;
action[? "motionRnd"] = 6;
action[? "precision"] = 30;
action[? "trackingSpd"] = 18;
action[? "beforeTime"] = 3;
action[? "afterTime"] = 3;
action[? "burst"] = 2;
action[? "burstRnd"] = 1;
action[? "gunRange"] = 22;
action[? "gunFlashShow"] = false;
action[? "bulletObject"] = o_enemyAttack_bullet_oozeSpit;
action[? "sndAttackWarn"] = "sewerbeast_warn";
action[? "sndAttackStrike"] = "sewerbeast_spit";
AI_util_action_setDamage(action, 5, 0, 0, 1, 10, 150, STAGGER_HARDNESS_SOFT);
AI_util_action_setAttackScript(action, scr_AI_attackScript_addMalnourished);

attack[? "distMin"] = 20;
attack[? "distMax"] = 140;
attack[? "cooldownTime"] = 20; 
attack[? "cooldownTimeRnd"] = 20;
attack[? "predicate"] = predicate_AI_isNotWading;


// Slash (land)
attack = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_action_slash);
attack[? "action"] = action; 

AI_util_action_setDamage(action, 5, 1, 0, 0, 40, 50, STAGGER_HARDNESS_MEDIUM);
action[? "dmg"] = 10;
action[? "maskDirs"] = 360;
action[? "mask"] = s_sewerBeast_slash;
action[? "range"] = 12;
action[? "beforeTime"] = 4;
action[? "damageTime"] = 2;
action[? "afterTime"] = 3;
action[? "beforeSpeed"] = 1;
action[? "damageSpeed"] = 0;
action[? "afterSpeed"] = 0;
action[? "sndAttackWarn"] = "sewerbeast_warn";
action[? "sndAttackWarn"] = "sewerbeast_whip";

attack[? "distMin"] = 20;
attack[? "distMax"] = 124;
attack[? "cooldownTime"] = 15; 
attack[? "cooldownTimeRnd"] = 5;
attack[? "predicate"] = predicate_AI_isNotWading;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create animations
scr_entity_animation_new("head");

// Water shadow
scr_entity_animation_define("water", s_watershadow_large, 0, 4, 0.5);

// Tentacles
scr_entity_animation_define("tentacles", s_sewerBeast_large, 8, 5, 0.6);

scr_entity_animation_define("swipe_before", s_sewerBeast_slash, 0, 4, 0);
scr_entity_animation_define("swipe_damage", s_sewerBeast_slash, 4, 2, 0);
scr_entity_animation_define("swipe_after", s_sewerBeast_slash, 6, 2, 0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if paused() exit;

scr_entity_setShadowVisible(predicate_AI_isNotWading(id));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gibbing

var _obj,_reps;

_obj = instance_create(x,y,o_FX);
_obj.sprite_index = s_fx_bloodBurst;
_obj.image_speed = 0.25;
_obj.image_angle = choose(0,90,180,270);

_reps = 0;
var repeats = 3 + irandom(3);
repeat(repeats)
{
    _obj = instance_create(x-6+random(12),y-6+random(12),o_FX);
    _obj.z = z + random(hitbox_z_top);
    _obj.sprite_index = s_fx_bloodBurst;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
    _reps +=1;
    _obj.delay = _reps*2;
}

_obj = instance_create(x,y,o_gibs);
_obj.sprite_index = s_sewerBeast_large;
_obj.shadow_radius = 5;
_obj.bloodburst = s_catfish_bloodsmall;
_obj.image_index = irandom(11);
    
if(random(1)&gt;0.2)
{
    _obj = instance_create(x,y-4,o_gibs);
    _obj.sprite_index = s_sewerBeast_slash;
    _obj.bloodburst = s_fx_bloodBurst;
    _obj.shadow_radius = 5;
    _obj.image_index = choose(0,1,2,3,6,7);
}

if(random(1)&gt;0.2)
{
    _obj = instance_create(x,y+4,o_gibs);
    _obj.sprite_index = s_sewerBeast_slash;
    _obj.bloodburst = s_fx_bloodBurst;
    _obj.shadow_radius = 5;
    _obj.image_index = choose(0,1,2,3,6,7);
}

if(random(1)&gt;0.2)
{
    _obj = instance_create(x-8,y,o_gibs);
    _obj.sprite_index = s_sewerBeast_slash;
    _obj.bloodburst = s_fx_bloodBurst;
    _obj.shadow_radius = 5;
    _obj.image_index = choose(0,1,2,3,6,7);
}

if(random(1)&gt;0.2)
{
    _obj = instance_create(x+8,y,o_gibs);
    _obj.sprite_index = s_sewerBeast_slash;
    _obj.bloodburst = s_fx_bloodBurst;
    _obj.shadow_radius = 5;
    _obj.image_index = choose(0,1,2,3,6,7);
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

var headImage = ((faceDir +380) mod 360) div 45
var tentacleImage;
var headBob = 0;

if (scr_actor_isWading(id)) {
    
    // In water, draw water shadow
    var sprite = scr_entity_animation_getSpriteIndex("water");
    var image = scr_entity_animation_getImage("water");
    draw_sprite(sprite, image, dx, dy)
    
    // Draw head
    switch(floor(image))
    {
        case 0: headBob = 5; break;
        case 1: headBob = 8; break;
        case 2: headBob = 6; break;
        case 3: headBob = 3; break;
    }
    draw_sprite_ext(s_sewerBeast_large,headImage,dx,dy-headBob,1,1,0,image_blend,1);
    
} else {
    // On land, draw full body
    
    // Draw tentacles
    var jumpheight = z - base_z;
    if(jumpheight &lt;= 1)
    {
        scr_entity_animation_setSpeed("head", 1);
        scr_entity_animation_setRange("head", 0, 4);
        anim = scr_entity_animation_getImage("head");
        
        if(a_walking)///tentacle animations
        {
            tentacleImage = anim + 12;
            switch(floor(anim))
            {
                case 0: headBob = 10; break;
                case 1: headBob = 16; break;
                case 2: headBob = 12; break;
                case 3: headBob = 6; break;
            }
        }
        else
        {
            tentacleImage = anim + 8;
            headBob = 0;
        }
        
        draw_sprite_ext(s_sewerBeast_large,tentacleImage,dx,dy,1,1,0,image_blend,1);
    }
    else
    {
        if(jumpheight&gt;32){tentacleImage = 16;}
        else if (jumpheight&gt;24){tentacleImage = 14;}
        else if (jumpheight&gt;16){tentacleImage = 13;}
        else if (jumpheight&gt;8){tentacleImage = 12;}
        else{tentacleImage = 15;}
    
        draw_sprite_ext(s_sewerBeast_large,tentacleImage,dx,dy,1,1,0,image_blend,1); 
    }
    
    // Swipe attack
    if(a_attackName == "slash") {
        var image;
        switch(a_attackState)
        {
            case "before":
                image = scr_entity_animation_imageByRatio("swipe_before", I_atk_slsh_timer, I_atk_slsh_intBefore);
                break;
                
            case "damage":
                image = scr_entity_animation_imageByRatio("swipe_damage", I_atk_slsh_timer, I_atk_slsh_intDamage);
                break;
            
            case "after":
                image = scr_entity_animation_imageByRatio("swipe_after", I_atk_slsh_timer, I_atk_slsh_intAfter);
                break;
        }
        var swipe_x = dx + lengthdir_x(12, faceDir);
        var swipe_y = dy + lengthdir_y(12, faceDir);
        draw_sprite_ext(s_sewerBeast_slash, image, swipe_x, swipe_y, 1, 1, faceDir, c_white, 1);
    }
    
    // Draw head
    draw_sprite_ext(s_sewerBeast_large,headImage,dx,dy-headBob,1,1,0,image_blend,1);
}

combatActor_draw_post();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>43,32</point>
    <point>43,43</point>
  </PhysicsShapePoints>
</object>
