<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_bball</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-10000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //
orx = view_xview[0] + (SCREEN_WIDTH / 2);
ory = view_yview[0] + (SCREEN_HEIGHT / 2);
x = orx;
y = ory;
direction = 90;
length = 96;
length_goal = 64;
timer_length = 20;

twe = 0;

tax = 312;
tay = 280;

skip = 1;

intro_pause = 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set camera
var current_camera = Camera();
current_camera.x = x;
current_camera.y = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End step
if (skip) { skip = 0; exit; }
view_xview[0] = round(x - SCREEN_WIDTH / 2);
    view_yview[0] = round(y - SCREEN_HEIGHT / 2);
    if (instance_exists(o_room_unbound)) exit;
    if (instance_exists(o_hud) == 0)
    {
        vem = room_height - SCREEN_HEIGHT;
    }
    else
    {
        vem = room_height - SCREEN_HEIGHT + (sprite_get_height(s_hud_bar) * abs(o_hud.hudHide));
    }
    view_xview[0] = round(min(max(x - SCREEN_WIDTH/2, 0), room_width - SCREEN_WIDTH));
    view_yview[0] = round(min(max(y - SCREEN_HEIGHT/2, 0), vem));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Pause //
if paused() exit;

// Start spinning after intro //
if intro_pause &gt; 0 then intro_pause -= dt();
else
    {
    x = (orx * abs(twe - 1)) + (tax * twe);
    y = (ory * abs(twe - 1)) + (tay * twe);
    twe = clamp(twe + (dt_sec() / 4), 0, 1);
    
    //(room_width / 2) +
    //(room_height / 2) +
    // Spin around //
    x += lengthdir_x(length, direction) * twe;
    y += lengthdir_y(length / 2, direction) * twe;
    direction += 40 * dt_sec(); //0.5;
    
    // Change length //
    if length &gt; length_goal then length -= 20 * dt_sec(); //0.1;
    else if length &lt; length_goal then length += 20 * dt_sec(); //0.1;
    
    // Length goal change //
    if timer_length &gt; 0 then
        {
        // Tick down //
        timer_length -= dt();
        
        // Event //
        if timer_length &lt;= 0 then
            {
            length_goal = irandom(64) + 48;
            timer_length = 20 + irandom(20);
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
