<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_tengu_diver</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>EnemyCombatActor</parentName>
  <maskName>mask_rect_16by16</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
event_inherited();
scr_enemyDB_statsGet(enemyBuild);
scr_entity_setZHitbox(0, 24);
scr_stats_hook_onHit_userEvent(8);
scr_entity_setMovementCollisionShape_circle(12); // added
ailmentTotem_define(id, 0, 16, 24, 32);
scr_entity_setCollisionType(COLLISION_ONLY_SOLID);
jetpack_bob = 0; // Sine wave for bobbing at top
damaged = 0; // For showing damaged sprite

// Sound
screamSound = "cGremlinSmall_scream";
attackSound = "general_impact";
alertSound = "cGremlinSmall_alert";
deathSound = "cGremlinSmall_death";
damageSound = "cGremlinSmall_grunt";

// States
var guard = scr_AI_addPassiveState(scr_AI_passive_guard);
ds_map_replace(guard, "sndAlertSound", alertSound);
activeApproach = scr_AI_addActiveState(scr_AI_active_approach);
activeCircle = scr_AI_addActiveState(scr_AI_active_circle);
activeCircle[? "switchAddMaxDist"] = 80;
activeCircle[? "switchPriority"] = 10;
activeRetreat = scr_AI_addActiveState(scr_AI_active_retreat);
activeRetreat[? "switchPriority"] = 20;
activeRetreat[? "switchDisablePush"] = true;

// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// Charge
ai_charge = scr_AI_addAction(scr_AI_action_tackle);
Attack("assign", ai_charge, "charge", 0.5, 0.5, 0.5, 0.0, 0.0, 0.0);
ai_charge[? "attackName"] = "dive";
ai_charge[? "windupTime"] = 0.5;
ai_charge[? "tackleTime"] = 10;
ai_charge[? "afterTime"] = 10;
ai_charge[? "sndAttackWarn"] = screamSound;
ai_charge[? "sndAttackStrike"] = attackSound;
attack = scr_AI_switch_standard("new_attack", conf);
attack[? "action"] = ai_charge; 
attack[? "distMax"] = 260;
attack[? "cooldownTime"] = 20; 
attack[? "cooldownTimeRnd"] = 20;

// ACRO TIME
deviate = 1;
time0 = AI_decisionFrequency;
time1 = ai_charge[? "windupTime"];
time2 = ai_charge[? "tackleTime"];
time3 = ai_charge[? "afterTime"];

// Animation
scr_entity_animation_new("body");
scr_entity_animation_new("mask");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
event_inherited();
if paused() exit;

// ACRO TIME
deviate = scr_stats_getEffectiveStat(id, STAT_BASE_AGILE) / scr_stats_getBaseStat(id, STAT_BASE_AGILE);
AI_decisionFrequency = time0 / deviate;
ai_charge[? "windupTime"] = time1 / deviate;
ai_charge[? "tackleTime"] = time2 / deviate;
ai_charge[? "afterTime"] = time3 / deviate;

//Reduce damaged variable if higher than 0
if (damaged &gt; 0) damaged -= 1 * dt();

// Jetpack behaviour
if (AI_stateTopType == AI_STATETYPE_PASSIVE) {
    // Slowly descend
    move_z = -1;
} else if (AI_stateTopType == AI_STATETYPE_ACTION) {
    // Quickly raus down to floor level during charge
    if (z &gt; 0 &amp;&amp; move_dist &gt; 0) {
        move_z = -20;
    } else {
        move_z = 0;
    }
} else {
    // Ascend
    move_z = 4;
    
    // Cap height
    var max_z = global.settingEnemyFlyHeight - (sin(jetpack_bob) * 4);
    z = min(z, max_z);
    jetpack_bob += .6 * dt();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gibs
var _obj;

var repeats = 3 + irandom(3);
repeat(repeats) {
    _obj = instance_create(x,y,o_FX);
    _obj.z = z + random(hitbox_z_top);
    _obj.sprite_index = s_fx_bloodBurst;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y-4,o_gibs);
    _obj.z = z + 16;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 0;
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y+4,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 1;
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 2;
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 3;
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Drop feathers on attack
var atk = argument_attackId;
for (i=0; i&lt;irandom_range(4,8); i++)
{
_obj = instance_create(x,y,o_FX);
_obj.sprite_index = s_tengu_feather;
_obj.image_index = irandom(6);
_obj.image_angle = choose(0,90,180,270);
_obj.image_speed=random_range(0.5,0.75);
_obj.speed = random_range(1,4);
_obj.friction = random_range(0.2,0.5);
_obj.x = atk.x;
_obj.y = atk.y;
_obj.depth = -99999;
}

//Set me as being damaged, so I can show my damage frame
damaged = 2;

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
event_inherited();

var _col = image_blend;
_dir = ((faceDir + 360) mod 360) div 90;
_hScale = 1;
if (_dir == 1 || _dir == 2) _hScale = -1;

scr_entity_animation_setSpeed("body", 1);
scr_entity_animation_setRange("body", 0, 7);

if (a_attackName == "dive")
{
    scr_entity_animation_setSpeed("body", 0);
    scr_entity_animation_setRange("body", 7, 0);
    scr_entity_animation_setFrame("body", 0);
}

if (damaged &gt; 0)
{
    scr_entity_animation_setSpeed("body", 0);
    scr_entity_animation_setRange("body", 8, 0);
    scr_entity_animation_setFrame("body", 0);
}

draw_sprite_ext(s_tengu_diver, scr_entity_animation_getImage("body"), dx, dy, _hScale, 1, 0, _col, 1);

combatActor_draw_post();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>14,18</point>
    <point>14,14</point>
  </PhysicsShapePoints>
</object>
