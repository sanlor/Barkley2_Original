<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_HoopzDeathGrayscale</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2510001</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //
depth = -2510001;
image_speed = 0;

// 0 = A, 1 = B , 2 = C, 3 = O, 4 = 10w-30, 5 = Corn Syrup
bld = Quest("playerCCBloodType");
if (bld == 0) { petCol = c_fuchsia; fntCol = c_aqua; }
else if (bld == 1) { petCol = c_aqua; fntCol = c_orange; }
else if (bld == 2) { petCol = c_lime; fntCol = c_gray; }
else if (bld == 3) { petCol = c_red; fntCol = merge_color(c_orange, c_gray, 0.5); }
else if (bld == 4) { petCol = c_white; fntCol = c_green; }
else { petCol = c_yellow; fntCol = c_white; }

if (BodySwap() == "prison") sprite_index = sHoopzPrisonDeadGreyscale;

// Alphas //
alpha_wading = 1;
alpha_goal = 1;
alpha = 1;
alpha_screen_goal = 1;
alpha_screen = 0;
alpha_haiku[0] = 0;
alpha_haiku_goal[0] = 0;
alpha_haiku[1] = 0;
alpha_haiku_goal[1] = 0;
alpha_haiku[2] = 0;
alpha_haiku_goal[2] = 0;

// Timers //
timer_start_delay = 10;
timer_move_to_center = 0;
timer_chill_at_center = 0;
timer_move_to_respawn_xy = 0;
timer_fade_in = 0;

timer_haiku_appear = 20;
timer_haiku_disappear = 80;
timer_destroy = 0;

timer_deathstar = 5;
timer_deathstar_remove = 72;

timer_end = 0;
timer_create_respawn = 0;

timer_junklord = 0;
timer_junklord_respawn = 0;
timer_music_set = 5;

// Set the rest of it //
deathstar_end = false;
rectangles = 0;
draw_at_center = false;
draw_at_hoopz = true;
return_color = false;
haiku_line = 0;
junklord = false;
distance = 0;

// Persistent //
with o_hoopz persistent = true;

// Music //
audio_set_bgm("mus_blankTEMP");
global.bgm_disable = true;

// Haikus //
haiku_index = irandom(13);

haiku[0, 0] = "A fond memory";
haiku[0, 1] = "Passes like a gentle breeze";
haiku[0, 2] = "As my heart draws still";

haiku[1, 0] = "A collection of";
haiku[1, 1] = "memories and thoughts and dreams;";
haiku[1, 2] = "That is all I was";

haiku[2, 0] = "Living essence spills;";
haiku[2, 1] = "Ebbing tides on a bank that";
haiku[2, 2] = "falls forever dry";

haiku[3, 0] = "Petals fall like rain";
haiku[3, 1] = "I close my eyes one last time";
haiku[3, 2] = "And feel their caress";

haiku[4, 0] = "A refreshing mist";
haiku[4, 1] = "Cooling my descent to Hell;";
haiku[4, 2] = "A final comfort";

haiku[5, 0] = "From my breast spills forth";
haiku[5, 1] = "The essence that sustains me";
haiku[5, 2] = "And a cleft Mars Bar";

haiku[6, 0] = "A bolt of lightning!";
haiku[6, 1] = "A brief reprieve from the dark;";
haiku[6, 2] = "Gone from whence it came";

haiku[7, 0] = "So little can one";
haiku[7, 1] = "human hope to achieve in";
haiku[7, 2] = "but a single life";

haiku[8, 0] = "I recall the taste";
haiku[8, 1] = "of ripe plums from the orchard";
haiku[8, 2] = "as I fall asleep";

haiku[9, 0] = "I raise my hand to";
haiku[9, 1] = "run my fingers through the clouds";
haiku[9, 2] = "as my soul ascends";

haiku[10, 0] = "My eyes shed no tears";
haiku[10, 1] = "For I already knew the";
haiku[10, 2] = "ending of this tale";

haiku[11, 0] = "I had hoped to see";
haiku[11, 1] = "Mount Fuji in the autumn";
haiku[11, 2] = "Before my time came";

haiku[12, 0] = "An old shepherd plays";
haiku[12, 1] = "A sweet pipe melody to";
haiku[12, 2] = "mark the coming spring";

haiku[13, 0] = "An unmarked gravestone";
haiku[13, 1] = "tells neither truths nor fiction;";
haiku[13, 2] = "neither names nor deeds";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.event = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Paused //
if paused() exit;

alpha_wading = Goto(alpha_wading, 1, dt_sec());

// Start delay //
if timer_start_delay &gt; 0 then timer_start_delay -= dt();    
else
    {
    // Set the music //
    if timer_music_set &gt; 0 then
        {
        // Tick down //
        timer_music_set -= dt();
        
        // Event //
        if timer_music_set &lt;= 0 then
            {
            if junklord = false then audio_play_sound_at_xy("mus_castlesong3_kabukideath", false, 10, x, y);
            }
        }
    
    // Rectangles close in to form the black screen //
    if rectangles &lt; 120 then 
        {
        // Tick down //
        rectangles += 8;
        
        // Event //
        if rectangles &gt;= 120 then 
            {
            // Round my position and get the position ratio //
            round(x);
            round(y);            
            xgoof = x - view_xview;
            ygoof = y - view_yview;
            
            // Move to the center of the screen in 2 seconds //
            orx = x - view_xview;
            ory = y - view_yview;
            
            //distanceX = abs(x - dex);
            //distanceY = abs(y - dey);
            timer_move_to_center = 20;
            draw_at_hoopz = false;
            room_goto(r_deathscreen01);
            x = xgoof;
            y = ygoof;
            }
        }
    
    // Move to center of the screen //
    if timer_move_to_center &gt; 0 then
        {
        // Tick down //
        timer_move_to_center -= dt();
        
        var pro = timer_move_to_center / 20; // 0-1 value
        pro = abs(pro - 1);
        
        // Move to the center //
        if (junklord) { dex = 192; dey = 100; }
        else { dex = 192; dey = 170; }
        dfx = dex - orx;
        dfy = dey - ory;
        x = view_xview + orx + (dfx * pro);
        y = view_yview + ory + (dfy * pro);
        
        // Event //
        if timer_move_to_center &lt;= 0 then
            {
            // Snap to the center //
            if junklord = false then 
                {
                x = view_xview + 192;
                y = view_yview + 170;
                timer_chill_at_center = 80;
                }
            else
                {
                x = view_xview + 192;
                y = view_yview + 100;
                timer_junklord = 10;
                }
            draw_at_center = true;
            with o_hoopz persistent = false;
            speed = 0;
            }
        }
        
    // Junklord case //
    if timer_junklord &gt; 0 then
        {
        // Tick down //
        timer_junklord -= dt();
        
        // Event //
        if timer_junklord &lt;= 0 then Cinema("run", o_gbl_junklord01.script);           
        }
        
    // Junklord respawn //
    if timer_junklord_respawn &gt; 0 then
        {
        // Tick down //
        timer_junklord_respawn -= dt();
        alpha_goal = -0.5;
        
        // Event //
        if timer_junklord_respawn &lt;= 0 then 
            {
            with o_hoopz scr_player_respawn();
            if (BodySwap() == "prison") 
            {
                BodySwap("hoopz", 0);
                sprite_index = s_HoopzDeathGrayscale;
            }
            timer_fade_in = 25;            
            x = view_xview + 192;
            y = view_yview + 100;  
            timer_move_to_respawn_xy = 1;  
            draw_at_center = false; 
            alpha_goal = 1;
            }            
        }
        
    // Stay in the center during the Haikus //
    if timer_chill_at_center &gt; 0 then
        {
        // Tick down //
        timer_chill_at_center -= dt();
        
        // Event //
        if timer_chill_at_center &lt;= 0 then 
            {
            // Move to the center of the new room //
            x = view_xview + 192;
            y = view_yview + 170;  
            
            // Begin moving towards hoopz //
            distance = distance_to_point(o_hoopz.x - 3, o_hoopz.y - 2);
            timer_move_to_respawn_xy = 20;  
            draw_at_center = false;         
            }
        }
        
    // Move to the respawn XY coordinates //
    if timer_move_to_respawn_xy &gt; 0 then
        {
        // Tick down //
        timer_move_to_respawn_xy -= dt();
        
        // Move to the respawn point //
        move_towards_point(o_hoopz.x - 3, o_hoopz.y - 2, distance * (dt_sec() / 2));
        
        // Event //
        if timer_move_to_respawn_xy &lt;= 0 then
            {
            // Snap to Hoopz //
            x = o_hoopz.x - 3;
            y = o_hoopz.y - 2;
            speed = 0;
            
            // Flag for setting color return on //
            return_color = true;
            
            // Fade in again //
            timer_fade_in = 10;
            }
        }
        
    // Fade in //
    if timer_fade_in &gt; 0 then
        {
        // Tick down //
        timer_fade_in -= dt();
        
        // Event //
        if timer_fade_in &lt;= 0 then 
            {
            alpha_screen = 1
            alpha_screen_goal = 0;
            timer_create_respawn = 20;
            }
        }
    
    // Alpha actions //
    if timer_create_respawn &gt; 0 then
        {
        // Tick down //
        timer_create_respawn -= dt();
        
        // Event //
        if timer_create_respawn &lt;= 0 then 
            {
            instance_create(x, y, o_gbl_respawn01); 
            timer_end = 3;
            }
        }
        
    // End //
    if timer_end &gt; 0 then
        {
        // Tick down //
        timer_end -= dt();
        
        // Event //
        if timer_end &lt;= 0 then 
            {
            global.bgm_disable = false;
            instance_destroy();             
            }      
        }
  
    // Deathstars //
    if junklord = false then
        {
        if deathstar_end = false then   
            {
            // Make deathstars //
            if timer_deathstar &gt; 0 then 
                {
                // Tick down //
                timer_deathstar -= dt();
                
                // Event //
                if timer_deathstar &lt;= 0 then
                    {
                    // Spam the effects //
                    repeat (irandom(1) + 1)
                        {
                        star = instance_create(view_xview + irandom(384), view_yview - irandom(5) - 1, o_effect_deathstar);
                        star.depth = depth - 1;
                        star.image_blend = petCol;
                        }
                        
                    // Reset timer //
                    timer_deathstar = irandom(1) + 1;
                    }
                }
            }
            
        // Remove deathstars //
        if timer_deathstar_remove &gt; 0 then
            {
            // Tick down //
            timer_deathstar_remove -= dt();
            
            // Event //
            if timer_deathstar_remove &lt;= 0 then deathstar_end = true;
            }
              
            // Haiku timer //
            if timer_haiku_appear &gt; 0 then
                {
                // Tick down //
                timer_haiku_appear -= dt();
                
                // Event //
                if timer_haiku_appear &lt;= 0 then 
                    {
                    alpha_haiku_goal[haiku_line] = 1;
                    haiku_line += 1;
                    timer_haiku_appear = 10;
                    }
                }
            
        // Haiku timer //
        if timer_haiku_disappear &gt; 0 then
            {
            // Tick down //
            timer_haiku_disappear -= dt();
            
            // Event //
            if timer_haiku_disappear &lt;= 0 then 
                {
                alpha_haiku_goal[0] = 0;
                alpha_haiku_goal[1] = 0;
                alpha_haiku_goal[2] = 0;
                }      
            }
        }

    // Hide hoopz until further notice //
    if instance_exists(o_hoopz) then o_hoopz.visible = false;
    
    // Animation: turn grey //
    if image_index &lt; 9 then image_index += dt();
    
    // Animation: stop animation for a bit //
    else if image_index &gt;= 9 and image_index &lt; 10 and return_color = false then
        {
        image_speed = 0;
        image_index = 9;       
        }
        
    // Animation: recolor //
    else if image_index &lt; 18 and return_color = true then image_index += dt();
        
    // Animation: stop animation at the end //
    else if image_index &gt;= 18 then
        {
        image_speed = 0;
        image_index = 19;
        }
    
    // Hoopz alpha //
    alpha = Goto(alpha, alpha_goal, dt_sec() * 1.5);
    
    // Screen alpha //
    if alpha_screen &gt;= 0 and alpha_screen &lt;= 1 then
        {
        if alpha_screen &gt; alpha_screen_goal then alpha_screen -= dt_sec() * 2.5;
        else if alpha_screen &lt; alpha_screen_goal then alpha_screen += dt_sec() * 2;
        }
        
    // Haiku alpha //
    for (i=0; i&lt;3; i+=1;)
        {
        alpha_haiku[i] = Goto(alpha_haiku[i], alpha_haiku_goal[i], dt_sec() * 1.25);
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Junklord case // Resumes the death sequence after the cutscene //
timer_junklord_respawn = 12;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = r_logo or room = r_logo_debug then instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Black backdrop rectangle shutters //
draw_set_alpha(alpha_screen);
draw_set_color(c_black);
draw_rectangle(view_xview - 2, view_yview - 2, view_xview + 386, view_yview + rectangles, false);
draw_rectangle(view_xview - 2, view_yview + 241 - rectangles, view_xview + 386, view_yview + 242, false);

// Center draw //
if draw_at_hoopz = true then draw_sprite_ext(sprite_index, image_index, o_hoopz.x, o_hoopz.y, image_xscale, image_yscale, image_angle, image_blend, alpha * alpha_wading)
else if draw_at_center = false then draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, alpha * alpha_wading);
else 
    {
    if junklord = false then draw_sprite_ext(sprite_index, image_index, view_xview + 192, view_yview + 170, image_xscale, image_yscale, image_angle, image_blend, alpha * alpha_wading);
    else draw_sprite_ext(sprite_index, image_index, view_xview + 192, view_yview + 100, image_xscale, image_yscale, image_angle, image_blend, alpha * alpha_wading);
    }

// Haiku //
draw_set_color(fntCol); //make_color_rgb(0, 255, 255));
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_font(global.fn_1);
draw_set_alpha(alpha_haiku[0]);
draw_text(view_xview + 192, view_yview + 70, haiku[haiku_index, 0]);
draw_set_alpha(alpha_haiku[1]);
draw_text(view_xview + 192, view_yview + 90, haiku[haiku_index, 1]);
draw_set_alpha(alpha_haiku[2]);
draw_text(view_xview + 192, view_yview + 110, haiku[haiku_index, 2]);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
