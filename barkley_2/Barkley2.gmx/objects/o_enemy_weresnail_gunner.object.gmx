<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_weresnail</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>EnemyCombatActor</parentName>
  <maskName>s_weresnail_mask_head</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////you get all the default variables from EnemyCombatActor
event_inherited();

// Enemy stats
scr_enemyDB_statsGet(enemyBuild);

// Enemies //
//scr_AI_targetList_addTarget(o_ally_caravan_gunner);
//scr_AI_targetList_addTarget(o_ally_caravan_brawler );
//scr_AI_targetList_addTarget(o_ally_caravan_zaubermancer);

// Enemy configurations
scr_entity_setZHitbox(0, 22);

anim = 0;
animSpd = 0.2;
animStrike = 0;

pType = choose(0,irandom(3));

deathSound = "weresnail_death";
damageSound = "weresnail_hurt";

// Create shell
shell = instance_create(x, y, o_enemy_weresnail_shell);
shell.parent = id;
scr_actor_setActorPushType(ACTOR_COLLISIONPUSH_NONE);
with shell scr_actor_setActorPushType(ACTOR_COLLISIONPUSH_IMMOBILE);


var conf, attacks, attack, guard;
guard = scr_AI_addPassiveState(scr_AI_passive_automaticAggro);
guard[? "sndAlertSound"] = "weresnail_battlecry";

scr_AI_addActiveState(scr_AI_active_approach);
activeHangback = scr_AI_addActiveState(scr_AI_active_hangback);
activeHangback[? "switchPriority"] = 10;
activeHangback[? "switchRemoveMaxDist"] = 150;
activeHangback[? "switchAddMaxDist"] = 110;
activeHangback[? "trackSpeed"] = 4; 


// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// Pattern shot
var shot = scr_AI_addAction(scr_AI_action_patternshot);
shot[? "beforeTime"] = 6;
shot[? "afterTime"] = 2; ////time after each shot
shot[? "gunRange"] = 12;
shot[? "shotCount"] = 4;
shot[? "shotSpread"] = 70;
shot[? "sndAttackWarn"] = "weresnail_warn"; //attacking scream (desperate)
shot[? "sndAttackStrike"] = "weresnail_shoot";
AI_util_action_setDamage(shot, 1, 0, 0, 1, 10, 100, STAGGER_HARDNESS_SOFT);

// Aim and shoot
attack = scr_AI_switch_standard("new_attack", conf);
var action = scr_AI_addAction(scr_AI_active_aimandshoot);
attack[? "action"] = action;
action[? "action"] = shot; 

attack[? "distMin"] = 30;
attack[? "distMax"] = 150;
attack[? "cooldownTime"] = 20; 
attack[? "cooldownTimeRnd"] = 15;
attack[? "prepTime"] = 3;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create animations

// Swim
scr_entity_animation_new("swim");
scr_entity_animation_setSpriteIndex("swim", s_weresnail_swim);
scr_entity_animation_setRange("swim", 0, 1);

// Emerge
scr_entity_animation_new("emerge");
scr_entity_animation_setSpriteIndex("emerge", s_werecroc_swim);
scr_entity_animation_setRange("emerge", 0, 9);

// Stand
scr_entity_animation_new("stand");
scr_entity_animation_setSpriteIndex("stand", s_weresnail);
scr_entity_animation_setRange("stand", 0, 1);

// Walk
scr_entity_animation_new("walk");
scr_entity_animation_setSpriteIndex("walk", s_weresnail);
scr_entity_animation_setRange("walk", 2, 4);
scr_entity_animation_setSpeed("walk", 0.9);

// Stagger
scr_entity_animation_new("stagger");
scr_entity_animation_setSpriteIndex("stagger", s_weresnail);
scr_entity_animation_setRange("stagger", 1, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if paused() exit;

// Set hitbox mask
var _dirdir = ((faceDir+360)mod 360) div 90;
switch (_dirdir) {
    case 0: image_index = 3; break;
    case 1: image_index = 2; break;
    case 2: image_index = 1; break;
    case 3: image_index = 0; break;
    default: image_index = 0; break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _obj;

var repeats = 3 + irandom(3);
repeat(repeats) {
    _obj = instance_create(x,y,o_FX);
    _obj.z = z + random(hitbox_z_top);
    _obj.sprite_index = s_fx_bloodBurst;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

var _col,pt2x,pt2y,pt3x,pt3y,_img,_hScale,_frm,_hoff,_hFrm,_showLArm,_showRArm;
_col = image_blend;

_frm = 0;
_img = 0;
_hScale = 1;
_hoff = 0;
_hFrm = 0;

_aFrmR = 0;
_aFrmL = 0;

_showLArm = true;
_showRArm = true;

_img = s_cgremlin_small_gibs;

if(a_attackName == "stagger")
{
    _frm = pType*24+9;
}
else
{
    if(a_attackName == "shot")
    {
        switch(I_atk_shot_state)
        {
            case "before":
                 var imgratio = I_atk_shot_timer/I_atk_shot_intBefore;
                _frm = pType*24+4+3*imgratio;
                break;
            
            case "attack":
                _frm = pType*24+8;
                break;
            
            case "after":
                var imgratio = I_atk_shot_timer/I_atk_shot_intAfter;
                if(imgratio&lt;0.4){_frm = pType*24+8;}
                else{_frm = pType*24+7;}
                break;
        }
    }
    else if(a_walking)
    {
        _frm = floor(pType*24 + (anim mod 4));

    }    
    else
    {
        _frm = pType*24+4;
    }
}

_dirdir = ((faceDir+360)mod 360) div 90;
_odir = ((faceDir+360)mod 360);

switch(_dirdir)
{
    case 0: _hScale = -1; _frm += 12; break;
    case 1: _hScale = 1; _frm += 12; break;
    case 2: _hScale = -1; break;
    case 3: _hScale = 1; break;
}


draw_set_alpha(1);


if((_odir&gt;=180 &amp;&amp; _showRArm) || (_odir&lt;180 &amp;&amp; _showLArm))
{
    _fr = _aFrmL;
}

draw_sprite_ext(s_weresnail,_frm,dx,dy,_hScale,1,0,_col,1);

if((_odir&gt;=180 &amp;&amp; _showLArm) || (_odir&lt;180 &amp;&amp; _showRArm))
{
    _fr = _aFrmR;
    
}

combatActor_draw_post();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>19,18</point>
    <point>20,20</point>
  </PhysicsShapePoints>
</object>
