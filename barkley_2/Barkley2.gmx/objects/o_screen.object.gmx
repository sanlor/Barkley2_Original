<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-310000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
s_scanTime = shader_get_uniform(shader_crt_pass1_tolinear, "u_time");
s_yOffset = shader_get_uniform(shader_crt_pass2_toscreen, "u_yOffset");
surf_pass1 = NULL;
surf_pass2 = NULL;
surf_pass3 = NULL;
tim = 0;

global.screen_buffer = -1;
global.screen_buffer_nohud = -1;

//application_surface_draw_enable(false);
if (surface_get_width(application_surface) != SCREEN_WIDTH ||
    surface_get_height(application_surface) != SCREEN_HEIGHT) {
    surface_resize(application_surface, SCREEN_WIDTH, SCREEN_HEIGHT);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (surface_get_width(application_surface) != SCREEN_WIDTH ||
    surface_get_height(application_surface) != SCREEN_HEIGHT) {
    surface_resize(application_surface, SCREEN_WIDTH, SCREEN_HEIGHT);
}
display_set_gui_maximise();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_rendermode_reset()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw screen surface and post-processing FX
pillarbox = 1;
if (pillarbox == 0)
{
    display_set_gui_maximise();
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_set_blend_mode(bm_normal);
    
    var xscale = display_get_gui_width()/SCREEN_WIDTH;
    var yscale = display_get_gui_height()/SCREEN_HEIGHT;
}
else
{
    display_set_gui_maximise();
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_set_blend_mode(bm_normal);
    
    var yscale = display_get_gui_height()/SCREEN_HEIGHT;
    var xscale = yscale; //display_get_gui_width()/SCREEN_WIDTH;
    var xof = floor((display_get_gui_width() - (SCREEN_WIDTH * xscale)) / 2);
    display_set_gui_maximise(1, 1, xof, 0);
    draw_clear(c_black);
    if (global.scanlines)
        draw_shader_cyber(application_surface, 0, 0, xscale, yscale);
    else
        draw_surface_ext(application_surface, 0, 0, xscale, yscale, 0, c_white, 1);
    scr_draw_post();
}

// Prevent weird "ghosting" rendering bug
draw_clear(c_black);

var doSkipEffect = 0;
if (global.DELTA_TIME_MOD &gt; 1 &amp;&amp; global.event) doSkipEffect = 1;

// Render screen
if (global.scanlines)
{
    /*var u_yOffset;
    if (yscale &lt;= 2 and yscale &gt; 1) {
        u_yOffset = 0.0;
    } else {
        u_yOffset = 0.2/240.0;
    }
    draw_shader_crt(application_surface, 0, 0, xscale, yscale, u_yOffset);
    */
    draw_shader_cyber(application_surface, 0, 0, xscale, yscale);
} else if (doSkipEffect == 0) {
    // Draw game without CRT shader
    draw_surface_ext(application_surface, 0, 0, xscale, yscale, 0, c_white, 1);
}

/// Cinema skip effect
if (doSkipEffect == 1)
{
    shader_set(shader_skip);
    shader_set_uniform_f(shader_get_uniform(shader_skip, "argRan"), random(1));
    shader_set_uniform_f(shader_get_uniform(shader_skip, "argTim"), tim mod 1);
    shader_set_uniform_f(shader_get_uniform(shader_skip, "scrWid"), 384.0);
    shader_set_uniform_f(shader_get_uniform(shader_skip, "scrHei"), 240.0);
    shader_set_uniform_f(shader_get_uniform(shader_skip, "scrScl"), xscale);
    tim += dt_sec();
    draw_surface_ext(application_surface, 0, 0, xscale, yscale, 0, c_white, 1);
    shader_reset();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw final graphics on screen
// Draw Cursor
var cursExists = instance_exists(o_curs);
var cursVisible = global.cursor_visible;
if (cursExists and cursVisible) {
    ////toggleCursor is a debug feature to toggle the cursor manually with *. Code is in debugmode object
    if (o_curs.visible &amp;&amp; o_curs.toggleCursor &amp;&amp; global.keyinput_type == KEYINPUT_KEYBOARD_MOUSE) {
        with o_curs {
            if !paused() {
                // Motion Blur
                for(i=0;i&lt;dist;i+=1;) {
                    dx = lerp(xprevious,x,i/dist);
                    dy = lerp(yprevious,y,i/dist);
                    draw_sprite_ext(sprite_index,image_index,
                        (view_xview+dx) div 1, (view_yview+dy) div 1, 
                        min(2*i/dist,1), min(2*i/dist,1), 0, image_blend, (i/dist - 0.5)); 
                }
            }
            // Cursor proper     
            if (quickmenu2() == 1 &amp;&amp; o_curs.frame &lt; 4) //draw quick menu cursor
            {
                draw_sprite_ext(s_curs2,o_curs.frame,
                    (view_xview+x) div 1, (view_yview+y) div 1, 
                    1, 1, 0, c_white, (1-random(.2)*global.cursor_fx)); //used to be image_blend
            }
            else
            {
                draw_sprite_ext(sprite_index,image_index,
                    (view_xview+x) div 1, (view_yview+y) div 1, 
                    1, 1, 0, image_blend, (1-random(.2)*global.cursor_fx));
            }
        }
    }
}

scr_screenSurface_makeBuffer()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_screenSurface_makeBufferNoHud()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
