<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_casing</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
casingSound = "";
bouncecount = 0;
scr_math_dirDistToVector(random(360), 18);
move_x = __vx;
move_y = __vy;
move_z = 12 + random(12)

gravity_z = 9;
move_friction = 0.06;
scr_entity_setMovementCollisionShape_rectangle(2,2);

collision_check = COLLISION_ONLY_SOLID;

dny = 5;

rot = 0;
rotspd = 0;
timer = 60;
col = c_white;



timermove = 3;
timerdelete = 20;
dummy = 0; // When 1, this processes no code and just draws
setup = true;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
if (dummy) exit;
// When landing
if (z &lt;= base_z + 0.1 &amp;&amp; move_z &lt;= 0)
{
    if(sprite_index == s_plantainPeel)
    {
        var ob = instance_create(x,y,o_plantainPeel);
        ob.image_index = image_index;
        ob.image_xscale = image_xscale;
        instance_destroy();
    }
    
    if (not scr_collision_point_free(x, y, z, COLLISION_WADING))
    {
        var fx = scr_fx_simple(x, y, z, s_effect_SludgeDrip);
        with fx scr_entity_animation_setSpeed(ANIMATION_DEFAULT, 1.5);
        fx.image_xscale = scale;
        fx.image_yscale = scale;
        instance_destroy();
    }
    else
    {
        // If move_z is too small, stop bouncing
        if (move_z &gt; -8 || bouncecount &gt;= 6)
        {
            z = base_z;
            move_z = 0;
            move_x = 0;
            move_y = 0;
            gravity_z = 0;
            timerdelete -= dt();
            if (timerdelete &lt;= 0) 
            {
                if (global.bulletCasings == 0) instance_destroy();
                else event_user(0);
            }
        }
        else
        {
            move_z = -move_z/2;
            rot = rot -45 + random(90);
            rotspd = -20+random(40);
            scr_math_dirDistToVector(random(360), point_distance(0, 0, move_x, move_y) * .6)
            move_x = __vx;
            move_y = __vx;
            rot = (rot + rotspd) mod 360;
            if(casingSound != "" &amp;&amp; bouncecount &lt;2)
            {
                var _snd = audio_play_sound_at_ext(scr_soundbank_pickSound(casingSound),x,y,0,AUDIO_FALLOFF_REF,AUDIO_FALLOFF_MAX,AUDIO_FALLOFF_FACTOR,false,90);
                if (_snd != -1)
                {
                    audio_sound_pitch(_snd,1+random(0.4));
                    audio_sound_gain_ext(_snd,0.3+random(0.8),0);
                }
            }
            bouncecount += 1;
        }
    }
}

rot = (rot + rotspd*dt()) mod 360;
if (rotspd &gt; 3) { 
    rotspd -= 3 * dt();
}
else if (rotspd &lt; -3) {
    rotspd += 3 * dt();
}
else {
    rotspd=0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
if (dummy) exit;
if(setup)
{
    if(sprite_index == s_plantainPeel)
    {
        image_index = irandom(image_number-1);
        image_xscale = choose(1,-1);
        image_yscale = 1;
        scale = 1;
        audio_play_sound_at_xy("hoopzweap_plantain_spawn",false,90,x,y);
    }
    setup = false;
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set to dummy casing to save processing
// Saves on collisions checks and step code
x = dx;
y = dy;
image_speed = 0;
image_xscale = scale;
image_yscale = scale;
image_angle = rot;
image_blend = col;
ds_list_add(global.dslCasings, id);
if (ds_list_size(global.dslCasings) &gt; global.bulletCasings)
{
    with (ds_list_find_value(global.dslCasings, 0)) { if (object_index == o_casings) instance_destroy(); }
    ds_list_delete(global.dslCasings, 0);
}
dummy = 1;
//show_debug_message("casing depth: " + string(depth) + " - dummy depth: " + string(obj.depth));
//instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
if (dummy) { draw_self(); exit; }
event_inherited();

draw_sprite_ext(sprite_index, -1, dx, dy, scale, scale, rot, col, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>5,2</point>
    <point>6,6</point>
  </PhysicsShapePoints>
</object>
