<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_curs</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-300000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
c[0] = make_color_rgb(49,185,225);
c[1] = c_red;
c[2] = make_color_rgb(49,185,225);
image_blend = c[0];
image_speed = 0;
dist = 0;
xp = x;
yp = y;
halo = 0.625;
hover = 0;

toggleCursor = true;

//
frame = 0;
scale = 1;

shoot_frame = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
            if (live_call()) return live_result;

// Position //
x = global.curs_x;
y = global.curs_y;

// Location in the previous frame //
xp = xprevious;
yp = yprevious;

// Distance to the location in the previous frame //
dist = point_distance(xp, yp, x, y);
// If Quickmenu doesnt exist, do this //
if (quickmenu2() == 0)
    {
    // If there is no pause and no menus, proceed from this //
    if !paused() then 
        {
        // Animation stuff //
        image_index = 0;
        sprite_index = s_curs;
        image_blend = c_white;
        
        // If hover = true use 3rd image in the spritesheet //
        if hover image_index = 2;
        
        // If normal hoopz exists, proceed //
        if instance_exists(o_hoopz) then
            {
            // If gun is drawn //
            if (!scr_player_getGunHolstered()) 
                {
                // Become the gun cursor //
                sprite_index = s_curs_gunmode;
                image_blend = c_white; // c_red;
                
                // When shooting, play the cursor animation //
                shoot_frame = clamp(shoot_frame - dt()*2, 0, 2);
                image_index = ceil(shoot_frame);
                }
            }
        }
    
    // If there is a pause or a menu, become normal white cursor //    
    if paused() then image_blend = c_white;        
    }

// If pointer object exists, hide self //
if instance_exists(o_pointer) then visible = false;
else visible = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Don't Draw
/*draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, 0, c_white, 1);
draw_set_alpha(1);
draw_set_color(c_white);
draw_text(x + 24, y - 16, "Cursor");
draw_text(x + 24, y + 16, global.curs_y);
draw_text(x + 24, y, global.curs_x);
if instance_exists(o_pointer) then
    {
    draw_text(x + 64, y + 16, "Pointer");
    draw_text(x + 64, y, o_pointer.x);
    draw_text(x + 64, y + 16, o_pointer.y);
    }  */

drawn = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>3,3</point>
    <point>3,3</point>
  </PhysicsShapePoints>
</object>
