<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2100000</depth>
  <persistent>0</persistent>
  <parentName>o_debugMode</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
//cyb jet, dur wiz, exp rat, sm cat, kob sml / lrg / phl, ten nor
scl = display_get_gui_width() / 384; //384 / 240

//List of enemies, add string of name of object to add enemy
for (i = 0; i &lt; Enemy("amount"); i += 1) lstObj[i] = Enemy("name", i);

lstAmt = i;
lstSel = 0;
lstPos = 0; //Position to start scroll
lstShw = 20; //Amount of records to show
lstWid = 90; //Width of list
lstScrLck = 0;
lstScrSiz = (240 / lstAmt) * lstShw;
lstScrPos = (240 / lstAmt) * lstPos;

//Builds
bldSel = 0;
bldAct = -1;
for (i = 0; i &lt; lstAmt; i += 1)
{
    lstNam[i] = string_replace(lstObj[i], "o_enemy_", "");
}

//Box locations
i = 0;
xpp = 98;
//Box makers - GLAMP - Base and LVL
dx = ((lstWid + 8 + 2) * 1);
dy = ((64 + 4) * 1);
dy += 12 * 1; // Skip Stat - Value line
repeat (2) { boxX[i] = dx + (60 * 1); boxY[i] = dy; dy += 12 * 1; i += 1; }
dy += 12 * 1; // Skip total hp line
repeat (10) { boxX[i] = dx + (60 * 1); boxY[i] = dy; dy += 12 * 1; i += 1; }

// Resistances
dx = ((lstWid + 8 + 2) * 1) + (xpp * 1);
dy = ((64 + 4) * 1);
dy += 12 * 1; // Skip Stat - Value line
repeat (5) { boxX[i] = dx + (40 * 1); boxY[i] = dy; dy += 12 * 1; i += 1; }
dx = ((lstWid + 8 + 2) * 1) + 100;
dy = ((64 + 4) * 1);
dy += 12 * 1; // Skip Stat - Value line
repeat (5) { boxX[i] = dx + (65 * 1); boxY[i] = dy; dy += 12 * 1; i += 1; }

// Drops
dx = ((lstWid + 8 + 2) * 1) + (xpp * 2);
dy = ((64 + 4) * 1);
dy += 12 * 1; // Skip Stat - Value line
repeat (13) { boxX[i] = dx + (60 * 1); boxY[i] = dy; dy += 12 * 1; i += 1; }


boxAct = -1;

//Assign box names, look above to see creation order
boxNam[00] = "hp";
boxNam[01] = "guts";
// Space in code
boxNam[02] = "luck";
boxNam[03] = "agile";
boxNam[04] = "might";
boxNam[05] = "piety";
boxNam[06] = "speed";
boxNam[07] = "weight";
boxNam[08] = "resistance_normal";
boxNam[09] = "resistance_knockback";
boxNam[10] = "resistance_stagger";
boxNam[11] = "wtc";

// Resistances - 10
i = 12;
boxNam[i] = "resistance_bio"; i += 1;
boxNam[i] = "resistance_cyber"; i += 1;
boxNam[i] = "resistance_cosmic"; i += 1;
boxNam[i] = "resistance_zauber"; i += 1;
boxNam[i] = "resistance_mental"; i += 1;
boxNam[i] = "vuln_bio"; i += 1;
boxNam[i] = "vuln_cyber"; i += 1;
boxNam[i] = "vuln_cosmic"; i += 1;
boxNam[i] = "vuln_zauber"; i += 1;
boxNam[i] = "vuln_mental"; i += 1;

// Drop Values - 13
i = 22;
boxNam[i] = "gunsdrop"; i += 1;
boxNam[i] = "generic"; i += 1;
boxNam[i] = "bio"; i += 1;
boxNam[i] = "cyber"; i += 1;
boxNam[i] = "mental"; i += 1;
boxNam[i] = "cosmic"; i += 1;
boxNam[i] = "zauber"; i += 1;
boxNam[i] = "automatic"; i += 1;
boxNam[i] = "mounted"; i += 1;
boxNam[i] = "pistols"; i += 1;
boxNam[i] = "projectile"; i += 1;
boxNam[i] = "rifles"; i += 1;
boxNam[i] = "shotguns"; i += 1;

// IMPORTANT - Tells me how many values to save
boxAmt = i; 

//Load current selected enemy
event_user(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save when closing
//show_message("instance destroy = " + keyboard_string);
event_user(0); //Unfocus
lstSelPrv = lstSel;
event_user(1); //Save
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls
paused(true);
scl = display_get_gui_width() / 384;
vx = 0;
vy = 0;

moy = window_mouse_get_y(); //mouse_y;

lstSelPrv = lstSel;
lstPosPrv = lstPos;

////////// LISTBOX //////////
doMov = 0;
doPos = 0;
if (keyboard_check(vk_up)) 
{
    keyboard_clear(vk_up);
    doMov = -1;
}
if (keyboard_check(vk_down)) 
{
    keyboard_clear(vk_down);
    doMov = +1;
}

if (mouse_wheel_up()) doPos = -1;
if (mouse_wheel_down()) doPos = +1;

if (scr_mouse_area(vx, vy, vx + (lstWid * scl), vy + (240 * scl)) &amp;&amp; lstScrLck == 0)
{
    if (mouse_check_button(mb_left)) 
    { 
        mouse_clear(mb_left);
        event_user(0);
        lstSel = lstPos + floor(moy / (12 * scl));
    }
}

if (keyboard_check_pressed(vk_enter)) {
    event_user(0);
}

lstSel = clamp(lstSel + doMov, 0, lstAmt - 1);
if (doMov != 0)
{
    if (lstSel &lt; lstPos) lstPos = lstSel;
    if (lstSel &gt;= lstPos + lstShw) lstPos = lstSel - lstShw + 1;
}
lstPos = clamp(lstPos + doPos, 0, lstAmt - lstShw);

//Get scrollbar size
lstScrSiz = (240 / lstAmt) * lstShw;
lstScrPos = (240 / lstAmt) * lstPos;
if (scr_mouse_area(vx + (lstWid * scl), vy, vx + (lstWid * scl) + (8 * scl), vy + (240 * scl))  || lstScrLck == 1)
{
    if (mouse_check_button(mb_left) || lstScrLck == 1)
    {
        if (lstScrLck == 0) { event_user(0); lstScrY = moy; lstPosOrg = lstPos; }
        lstScrLck = 1;
        lstPos = lstPosOrg - floor((lstScrY - moy) / (6 * scl));
    }
}
if (mouse_check_button(mb_left) == 0) lstScrLck = 0;

lstPos = clamp(lstPos + doPos, 0, lstAmt - lstShw); //doubled

if (lstSel != lstSelPrv)
{
    event_user(1); //Save lstSelPrv
    bldSel = 0;
    event_user(2); //Load new enemy
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load JSON to DS Map
if (file_exists(working_directory + "\enemyDB.json") == 0)
{
    show_debug_message("enemyDB: No enemyDB.json, using blank map.");
    ds_map_clear(global.enemyDB);
}
else
{
    show_debug_message("enemyDB: Loaded enemyDB.json");
    var fil = file_text_open_read(working_directory + "\enemyDB.json");
    var str = "";
    while (file_text_eof(fil) == 0) { str += file_text_readln(fil); }
    file_text_close(fil);
    global.enemyDB = json_decode(str);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save to JSON
var fil = file_text_open_write(working_directory + "\enemyDB.json");
file_text_write_string(fil, json_encode(global.enemyDB));
file_text_close(fil);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load single enemy from DB
objNam = lstNam[lstSel];
if (ds_map_exists(global.enemyDB, objNam))
{
    dsm = ds_map_find_value(global.enemyDB, objNam);
    bldNam[0] = ds_map_find_value(dsm, "name");
    bldNam[1] = ds_map_find_value(dsm, "build 1");
    bldNam[2] = ds_map_find_value(dsm, "build 2");
    bldNam[3] = ds_map_find_value(dsm, "build 3");
    for (h = 0; h &lt; 4; h += 1)
    {
        if (h == 0) nam = "default";
        else nam = bldNam[h];
        if (nam != "")
        {
            dsb = ds_map_find_value(dsm, nam);
            for (i = 0; i &lt; boxAmt; i += 1) 
            {
                if (ds_map_exists(dsb, boxNam[i]))
                {
                    //show_debug_message("enemyEditor: loaded " + string(boxNam[i]))
                    boxVal[h, i] = ds_map_find_value(dsb, boxNam[i]);
                }
                else // Default value
                {
                    //show_debug_message("enemyEditor: cant load " + string(boxNam[i]));
                    boxVal[h, i] = "0";
                }
            }
        }
        else // When enemy doesn't exist in DB, give default all 0
        {
            for (i = 0; i &lt; boxAmt; i += 1) 
            {
                if (h == 0) boxVal[h, i] = "0";
                else boxVal[h, i] = "";
            }
        }
    }
}
else
{
    //Create blank if enemy is not in DB (new enemy, no JSON file)
    bldNam[0] = "Enemy " + string(lstSel);
    bldNam[1] = "";
    bldNam[2] = "";
    bldNam[3] = "";
    for (h = 0; h &lt; 4; h += 1) //One for each build
    {
        for (i = 0; i &lt; boxAmt; i += 1) 
        {
            if (h == 0) boxVal[h, i] = "0";
            else if (h == 270) boxVal[h, i] = "default";
            else boxVal[h, i] = "";
        }
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save single enemy into DB
objNam = lstNam[lstSelPrv];
if (ds_map_exists(global.enemyDB, objNam))
{
    dsm = ds_map_find_value(global.enemyDB, objNam);
    ds_map_clear(dsm);
}
else
{
    dsm = ds_map_create();
    ds_map_add_map(global.enemyDB, objNam, dsm);
}

ds_map_add(dsm, "name", bldNam[0]);
ds_map_add(dsm, "build 1", bldNam[1]);
ds_map_add(dsm, "build 2", bldNam[2]);
ds_map_add(dsm, "build 3", bldNam[3]);
for (h = 0; h &lt; 4; h += 1)
{
    if (h == 0) nam = "default";
    else nam = bldNam[h];
    if (nam != "")
    {
        if (ds_map_exists(dsm, nam)) 
        {
            dsb = ds_map_find_value(dsm, nam);
            ds_map_clear(dsb);
        }
        else
        {
            dsb = ds_map_create();
            ds_map_add_map(dsm, nam, dsb);
        }
        for (i = 0; i &lt; boxAmt; i += 1)
        {
            //show_debug_message(boxNam[i] + " = " + boxVal[h, i]);
            ds_map_add(dsb, boxNam[i], boxVal[h, i]);
        }
    }
}

event_user(5); //Save to JSON
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Values &amp; Unfocus
if (boxAct != -1) 
{
    if (boxAct == 270) {
        // Drplist
        //boxVal[bldSel, boxAct] = keyboard_string;
    } else {
        // Value
        val = "";
        for (pos = 1; pos &lt;= string_length(keyboard_string); pos += 1) 
        {
           ltr = string_char_at(keyboard_string, pos);
           if ((ord(ltr) &gt;= 48 &amp;&amp; ord(ltr) &lt;= 57) || ltr == ".") val += ltr
        }
        edt = 1;
        if (bldSel == 0 &amp;&amp; val == "") edt = 0; //if (real(val) &lt; 0) edt = 0;
        if (edt == 1) boxVal[bldSel, boxAct] = val;
    }
}
if (bldAct != -1) 
{
    val = keyboard_string;
    edt = 1;
    if (val == "name") edt = 0;
    if (val == "build 1") edt = 0;
    if (val == "build 2") edt = 0;
    if (val == "build 3") edt = 0;
    if (bldAct == 0) { if (val == "") edt = 0; }
    if (edt == 1) bldNam[bldAct] = val;
}

lstScrLck = 0;
bldAct = -1;
boxAct = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy instance so it saves
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vx = 0;
vy = 0;
draw_sprite_ext(s_1, 0, vx, vy, 384 * scl, 240 * scl, 0, c_ltgray, 1);
draw_set_halign(0);
draw_set_color(c_white);

//Draw enemy
dx = vx + (100 * scl);
dy = vy + (2 * scl);
draw_sprite_ext(s_1, 0, dx, dy, 64 * scl, 64 * scl, 0, c_fuchsia, 1);
draw_sprite_ext(s_enemy_editor, lstSel, dx, dy, scl, scl, 0, c_white, 1);

//Draw enemy name and 3 builds below
dx = vx + (166 * scl);
dy = vy + (0 * scl);
draw_set_font(global.fn_1o);
draw_set_color(c_black);
for (i = 0; i &lt; 4; i += 1)
{
    if (scr_mouse_area(dx, dy + (2 * scl), dx + (216 * scl), dy + ((2 + 16) * scl)) &amp;&amp; lstScrLck == 0)
    {
        if (mouse_check_button(mb_left)) 
        { 
            mouse_clear(mb_left); 
            event_user(0); 
            bldAct = i; 
            bldSel = i; 
            keyboard_string = bldNam[i];
        }
    }
    if (i &gt; 0) txt = "BUILD: "; else txt = "";
    if (bldAct == i) 
    {
        draw_sprite_ext(s_1, 0, dx, dy + (2 * scl), 216 * scl, 16 * scl, 0, c_red, 1);
        draw_text_transformed(dx + (1 * scl), dy, txt + keyboard_string + "|", scl, scl, 0);
    }
    else 
    {
        if (bldSel == i) draw_sprite_ext(s_1, 0, dx, dy + (2 * scl), 216 * scl, 16 * scl, 0, c_yellow, 1);
        draw_text_transformed(dx + (1 * scl), dy, txt + bldNam[i], scl, scl, 0);
    }
    dy += 16 * scl;
}

//Draw GLAMP (BASE) (LEVEL), 
dx = vx + ((lstWid + 8 + 2) * scl);
dy = vy + ((64 + 4) * scl);
draw_set_font(global.fn_smallc);
draw_text_transformed(dx + (0 * scl), dy, "Stat", scl, scl, 0);
draw_text_transformed(dx + ((40 + 16) * scl), dy, "Value", scl, scl, 0);
draw_set_color(c_white);
dy += 12 * scl;
draw_text_transformed(dx, dy, "HP", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Guts", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Total HP    " + string(real(boxVal[bldSel, 0]) + (real(boxVal[bldSel, 1]) * 5)), scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Luck", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Acrobatic", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Might", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Piety", scl, scl, 0); dy += 12 * scl;
// Move straight on to...
draw_text_transformed(dx, dy, "Speed", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Weight", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Defense", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Res.Knock", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Res.Stagg", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Wait Time", scl, scl, 0); dy += 12 * scl;

// Next panel - Resistances
dx += xpp * scl;
dy = vy + ((64 + 4) * scl);
draw_set_color(c_black);
draw_text_transformed(dx + (0 * scl), dy, "Element", scl, scl, 0);
draw_text_transformed(dx + ((40) * scl), dy, "Res", scl, scl, 0);
draw_text_transformed(dx + ((40 + 32 - 7) * scl), dy, "Vuln", scl, scl, 0);

draw_set_color(c_white);
dy += 12 * scl;
draw_text_transformed(dx, dy, "Bio", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Cyber", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Cosmic", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Zauber", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Mental", scl, scl, 0); dy += 12 * scl;

// Debug attacks
draw_set_color(c_black);
dy += 12 * scl;
for (o = 0; o &lt; 4; o += 1)
{
    db0 = Enemy("debug" + string(o), lstSel);
    if (db0 != "")
    {
        //draw_sprite_ext(s_1, 0, dx, dy, 80 * scl, 16 * scl, 0, c_gray, 1);
        draw_text_transformed(dx, dy, db0, scl, scl, 0);
        var dmg = Attack("calculate", db0, boxVal[bldSel, 1], boxVal[bldSel, 2], boxVal[bldSel, 3], boxVal[bldSel, 4], boxVal[bldSel, 5], boxVal[bldSel, 7], boxVal[bldSel, 6]);
        draw_text_transformed(dx + 120, dy, string(dmg), scl, scl, 0);
        dy += 12 * scl;
    }
}

// Next panel - Drplist
dx += xpp * scl;
dy = vy + ((64 + 4) * scl);
draw_set_color(c_black);
draw_text_transformed(dx + (0 * scl), dy, "Drop", scl, scl, 0);
draw_text_transformed(dx + ((40 + 16) * scl), dy, "Value", scl, scl, 0);
draw_set_color(c_white);
dy += 12 * scl;
draw_text_transformed(dx, dy, "Gunsdrop", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Generic", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Bio", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Cyber", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Mental", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Kosmic", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Zauber", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Automatic", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Mounted", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Pistols", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Projectile", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Rifles", scl, scl, 0); dy += 12 * scl;
draw_text_transformed(dx, dy, "Shotguns", scl, scl, 0); dy += 12 * scl;

///Draw boxes
draw_set_halign(1);
for (i = 0; i &lt; boxAmt; i += 1)
{
    dx = vx + (boxX[i] * scl);
    dy = vy + (boxY[i] * scl) - scl; // was +1 scl
    
    var w = 20;
    if (i == 270) w = 100; // Drplist name
    
    if (scr_mouse_area(dx, dy, dx + (w * scl), dy + (10 * scl)))
    {
        //draw_text_transformed(mouse_x + (20 * scl), mouse_y, boxNam[i], scl, scl, 0);
        if (mouse_check_button(mb_left)) 
        { 
            mouse_clear(mb_left); 
            event_user(0); 
            boxAct = i;
            boxOne = 0;
            keyboard_string = boxVal[bldSel, i]; 
            if (i == 270) {
                keyboard_string = get_string("Enter drplist name", keyboard_string);
                event_user(0); 
            }
        }
    }
    
    if (boxAct == i) 
    {
        if (keyboard_string != boxVal[bldSel, i] &amp;&amp; boxOne == 0)
        {
            keyboard_string = string_delete(keyboard_string, 1, string_length(boxVal[bldSel, i]));
            boxOne = 1;
        }
        if (string_length(keyboard_string) &gt; 4) keyboard_string = string_copy(keyboard_string, 1, 4);
        
        draw_sprite_ext(s_1, 0, dx, dy, w * scl, 10 * scl, 0, c_red, 1);
        draw_text_transformed(dx + ((w/2) * scl), dy + (2 * scl), keyboard_string, scl, scl, 0); 
    }
    else 
    {
        draw_sprite_ext(s_1, 0, dx, dy, w * scl, 10 * scl, 0, c_gray, 1);
        draw_text_transformed(dx + ((w/2) * scl), dy + (2 * scl), boxVal[bldSel, i], scl, scl, 0); 
    }
    
    dy += 12 * scl;
}
draw_set_halign(0);

////////// Draw listbox //////////
draw_set_font(global.fn_smallc);
dx = vx;
dy = vy;
draw_set_color(c_black);
for (i = lstPos; i &lt; lstPos + lstShw; i += 1)
{
    if (i &gt;= lstAmt) break;
    //Alternating color
    if (i mod 2 == 0) draw_sprite_ext(s_1, 0, dx, dy, lstWid * scl, 12 * scl, 0, merge_color(c_gray, c_ltgray, 0.5), 1);
    else draw_sprite_ext(s_1, 0, dx, dy, lstWid * scl, 12 * scl, 0, c_ltgray, 1);
    if (lstSel == i) draw_sprite_ext(s_1, 0, dx, dy, lstWid * scl, 12 * scl, 0, c_yellow, 1);
    draw_text_transformed(dx + (2 * scl), dy + (2 * scl), lstNam[i], scl, scl, 0);
    dy += 12 * scl;
}

////////// Draw scrollbar //////////
draw_sprite_ext(s_1, 0, vx + ((lstWid + 0) * scl), vy, 1 * scl, 240 * scl, 0, c_black, 1);
draw_sprite_ext(s_1, 0, vx + ((lstWid + 7) * scl), vy, 1 * scl, 240 * scl, 0, c_black, 1);
draw_sprite_ext(s_1, 0, vx + ((lstWid + 1) * scl), vy + (lstScrPos * scl), 6 * scl, lstScrSiz * scl, 0, c_yellow, 1);

///Draw mouse
draw_set_color(c_black);
draw_circle(window_mouse_get_x(), window_mouse_get_y(), scl * 2, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="33">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DISABLED - Return build types
exit;
objNam = lstNam[lstSel];
builds = scr_enemyDB_builds(objNam);
str = "";
for (i = 0; i &lt; array_length_1d(builds); i += 1)
{
    str += builds[i] + ", ";
}
show_message("Enemy &gt;" + scr_enemyDB_name(objNam) + "&lt; has " + string(i) + " build(s). They are: " + str);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
