<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_mg_diving_bubble_spawn</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Pause //
if paused() then exit;

// Get inked //
if instance_exists(o_mg_diving_player) then
    {
    if distance_to_object(o_mg_diving_player) &lt;= 300 then
        {
        // Big Bubble //
        bigBubble -= dt_sec();
        if (bigBubble &lt;= 0)
        {
            bigBubble = lerp(bigBubbleMin, bigBubbleMax, random(1));
            bubble = instance_create(x + (x_speed / 2), y + (y_speed / 2), o_mg_diving_bubble_big);
            if (instance_exists(bubble))
            {
                if (abs(y_speed) &gt; 0) bubble.x += - 8 + random(16);
                else bubble.y += - 8 + random(16);
                bubble.x_speed = x_speed * (random(1) + 2);
                bubble.y_speed = y_speed * (random(1) + 2);
                with (bubble) event_user(0);
            }
        }
        
        // Tick down //
        spawn += dt_sec();
        
        // Ink //
        while (spawn &gt; 1 / bubblesPerSecond)
            {
            spawn -= 1 / bubblesPerSecond;
            bubble = instance_create(x + (x_speed / 2), y + (y_speed / 2), o_mg_diving_bubble);
            if (instance_exists(bubble))
            {
                if (abs(y_speed) &gt; 0) bubble.x += - 8 + random(16);
                else bubble.y += - 8 + random(16);
                bubble.x_speed = x_speed * (random(2) + 0.5);
                bubble.y_speed = y_speed * (random(2) + 0.5);
                with (bubble) event_user(0);
            }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup
bubblesPerSecond = 25;
spawn = 0;
x_speed = 0;
y_speed = 0;

bigBubbleMin = 4;
bigBubbleMax = 6;
bigBubble = lerp(bigBubbleMin, bigBubbleMax, random(1));

// Direction
if place_free(x, y + 8) then y_speed = 2;
else if place_free(x, y - 8) then y_speed = -2;
else if place_free(x + 8, y) then x_speed = 2;
else if place_free(x - 8, y) then x_speed = -2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>3,3</point>
    <point>3,3</point>
  </PhysicsShapePoints>
</object>
