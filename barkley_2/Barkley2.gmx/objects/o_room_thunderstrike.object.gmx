<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_thunderstrikeControl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Boom //
timer_strike = 0;
timer_position = 5;
xpos = irandom_range(64, room_width-64);
height = irandom_range(160, room_height - 96);
thunder_effect = 0;
thunder_distance = 0;
indicator_alpha = 0;
indicator_image_index = 0;
alpha = 0;
alpha2 = 0;

border_top = 0 + 64;
border_bottom = room_height - 96;
border_left = 64;
border_right = room_width - 64;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Pause //
if paused() then exit;

// Thunder exists? //
if instance_exists(o_effect_rain) then
    {
    if o_effect_rain.thunder = false then instance_destroy();
    }

// Position //
if timer_position &gt; 0 then
    {
    // Tick down //
    timer_position -= dt();
    
    // Event //
    if timer_position &lt;= 0 then
        {
        // Position of the strike //
        xpos = irandom_range(border_left, border_right);
        height = irandom_range(border_top, border_bottom);
        timer_strike = 10 + irandom(10);
        }
    }

// Strike //
if timer_strike &gt; 0 then
    {
    // Tick down //
    timer_strike -= dt();
    
    // Indicator //
    if indicator_alpha &lt; 0.75 then indicator_alpha += 0.05;
    
    // Event //
    if timer_strike &lt;= 0 then
        {
        // Variable for the thunder light effect //
        thunder_effect = 10;
        
        // Next thunder strike //
        timer_position = 15 + irandom(15);
        
        // Effect shit //
        if instance_exists(PlayerCombatActor) then
            {
            with PlayerCombatActor
                {
                other.thunder_distance = distance_to_point(other.xpos, other.height);
                }
            }
        else thunder_distance = irandom(500);
        
        // Create the thunder //
        thunder_object = instance_create(xpos, height, o_enemyAttack_thunderstrike);
        thunder_object.my_control = id;
        audio_play_sound_at_xy("thunder", false, 15, xpos, height);
        effect = instance_create(xpos, height - 16, o_effect_generic_animateOnce);
        effect.sprite_index = s_effect_thunder_strike_ground;
        indicator_alpha = 0;
        }
    }
    
// Indicator // 
if indicator_image_index &lt; 10 then indicator_image_index += 0.5;
else indicator_image_index = 0;
   
// Thunder light effect //
if thunder_effect &gt; 0 then thunder_effect -= 1;

// Alpha //
if alpha &gt; 0 then alpha -= 0.1;
if alpha2 &gt; 0 then alpha2 -= 0.1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Thunder //
draw_set_color(c_white);
if thunder_distance &lt; 250 then thunder_distance = 0;
else if thunder_distance &gt;= 250 then thunder_distance = 0.1;
else if thunder_distance &gt;= 350 then thunder_distance = 0.15;
else if thunder_distance &gt;= 450 then thunder_distance = 0.2;
else thunder_distance = 0.3;
switch (thunder_effect)
    {
    case 8: alpha = 0.4 + random(0.2) - thunder_distance; alpha2 = 0.2 - thunder_distance / 2; break;
    case 6: alpha = 0.5 + random(0.2) - thunder_distance; alpha2 = 0.2 - thunder_distance / 2; break;
    case 1: alpha = 0.2 + random(0.1) - thunder_distance; alpha2 = 0.1 - thunder_distance / 2; break;
    }
draw_sprite_ext(s_effect_flash_overlay, 0, view_xview + 192, view_yview + 120, 1, 1, 0, c_white, alpha2);
draw_set_alpha(alpha);
draw_rectangle(view_xview - 2, view_yview - 2, view_xview + 386, view_yview + 242, false);
draw_set_alpha(1);

// Indicator //
if timer_strike &gt; 0 then
    {
    if height &gt;= view_yview and height &lt;= view_yview + 210 then draw_sprite_ext(s_effect_firefly_light, indicator_image_index, xpos, view_yview, 1, 1, 0, c_white, indicator_alpha);
    else draw_sprite_ext(s_effect_firefly_light, indicator_image_index, xpos, view_yview, 1, 1, 0, c_white, indicator_alpha * 0.5);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
