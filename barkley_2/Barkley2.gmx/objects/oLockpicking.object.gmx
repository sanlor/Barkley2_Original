<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
textRotatePick = "Rotate Pick";
textRotateLock = "Rotate Lock";
textLockpicksLeft = "Lockpicks Left: ";
lockpickItem = "Lock Pick"; // Name of item representing lockpick
textLockLevel = "Lock Level: ";

soundOpening = "sn_debug_one"; // Sound when lock is opening
soundStuck = "sn_debug_two"; // Sound when lock is stuck at a point
soundBreak = "sn_debug_three"; // Sound when pick breaks
soundOpen = "sn_debug_four"; // Sound it makes when unlocked

skillLevel = 0;
skillName[0] = "Peon";
skillHotspot[0] = 0.33;
skillSweetspot[0] = 0.25;
skillName[1] = "Serf";
skillHotspot[1] = 0.3;
skillSweetspot[1] = 0.25;
skillName[2] = "Peasant";
skillHotspot[2] = 0.25;
skillSweetspot[2] = 0.25;
skillName[3] = "Slave";
skillHotspot[3] = 0.2;
skillSweetspot[3] = 0.2;
skillName[4] = "King";
skillHotspot[4] = 0.15;
skillSweetspot[4] = 0.15;

//o_curs.toggleCursor = false;

Border("generate", 0, SCREEN_WIDTH + 48, 63);

sldStt = 1; // Direction of the state
sld = 1; // When 0, all elements are in full view
ald = abs(sld - 1);
sldSpd = 0.33; // Time in seconds it takes to slide into view

cancelled = 0;
unlocked = 0;
unlockedWait = 1;
lckYOff = 215;
lckStt = 0;
lck = 0;
lckSpd = 0.33;
lckPct = 0;

pckRot = 0;
pckHel = 100;

// Pick break
pckRep = 0;
pckBrk = 0;
pckBrkSpd = 0.33;
pckRepSpd = 0.5;
pckBrkRot = 0;
pckBrkX = 0;
pckBrkY = 0;
pckBrkDesX = -64;
pckBrkDesY = 200;
pckBrkDesRot = 120;
pckRotPct = 0;

// Tension wrench
tenPct = 1;

// Shake
shk = 0;

alpBgn = 0.75; // Alpha of darkness
debug = 0;

event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Resume event
o_curs.toggleCursor = true;
global.event = false;
if (instance_exists(oCinema))
{
    with (oCinema)
    {
        Cinema("next line");
        Cinema("process");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Freeze game
global.event = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
vrx = view_xview[0]; vry = view_yview[0];
if (sldStt == 0) sld += dt_sec() / sldSpd; 
else sld -= dt_sec() / sldSpd;
sld = clamp(sld, 0, 1);
ald = abs(sld - 1);

if (unlocked &gt; 0)
{
    if (unlockedWait &gt; 0)
    {
        unlockedWait -= dt_sec();
        exit;
    }
    sldStt = 0;
    if (sld == 1)
    {
        Quest("lockpick", 1);
        instance_destroy();
    }
    exit;
}

if (cancelled &gt; 0)
{
    sldStt = 0;
    if (sld == 1)
    {
        Quest("lockpick", 0);
        instance_destroy();
    }
    exit;
}

if (sldStt == 1 &amp;&amp; sld &lt; 1 &amp;&amp; tenPct &gt; 0)
{
    tenPct -= dt_sec() / sldSpd; 
    tenPct = clamp(tenPct, 0, 1);
    exit;
}
if (sldStt == 0 &amp;&amp; sld &gt; 0)// &amp;&amp; tenPct &lt; 1)
{
    tenPct += dt_sec() / sldSpd; 
    tenPct = clamp(tenPct, 0, 1);
    exit;
}
if (pckBrk != 0) 
{
    pckBrk += dt_sec() / pckBrkSpd; 
    if (pckBrk &gt;= 1)
    {
        pckRep = 0.001;
        pckBrk = 0;
    }
    exit;
}
if (pckRep != 0)
{
    pckRep += dt_sec() / pckRepSpd; 
    if (pckRep &gt;= 1)
    {
        pckRep = 0;
        pckHel = 100;
    }
    exit;
}

// Pick
if (MiniKeyPress("cancel"))
{
    cancelled = 1;
    exit;
}
if (MiniKeyPress("action", 1) == 0)
{
    if (global.keyinput_type == KEYINPUT_GAMEPAD)
    {
        if (MiniKeyPress("left", 1)) pckRot += dt_sec() * 90;
        if (MiniKeyPress("right", 1)) pckRot -= dt_sec() * 90;
        if (pckRot &gt; 180) pckRot = 180;
        if (pckRot &gt; 270) pckRot = 0;
        if (pckRot &lt; 0) pckRot = 0;
    }
    else
    {
        pckRot = point_direction(vrx + (SCREEN_WIDTH / 2), vry + (SCREEN_HEIGHT / 2), mouse_x, mouse_y);
        if (pckRot &gt; 180 &amp;&amp; pckRot &lt;= 270) pckRot = 180;
        if (pckRot &gt; 270) pckRot = 0;
    }
}
pckRotPct = abs((pckRot / 180) - 1);

// Calculate percent
lckPct = 0;
if (pckRotPct &gt;= hotSpo - ((hotSwe * hotWid) / 2) &amp;&amp; pckRotPct &lt;= hotSpo + ((hotSwe * hotWid) / 2))
{
    lckPct = 100;
}
else if (pckRotPct &gt;= hotSpo - (hotWid / 2) &amp;&amp; pckRotPct &lt;= hotSpo + (hotWid / 2)) 
{
    if (pckRotPct &gt; hotSpo)
    {
        tmpLow = hotSpo + ((hotSwe * hotWid) / 2);
        tmpHig = hotSpo + (hotWid / 2);
        tmpDif = tmpHig - tmpLow;
        lckPct = abs(1 - ((pckRotPct - tmpLow) / tmpDif)) * 100;
    }
    if (pckRotPct &lt; hotSpo)
    {
        tmpLow = hotSpo - ((hotSwe * hotWid) / 2);
        tmpHig = hotSpo - (hotWid / 2);
        tmpDif = tmpHig - tmpLow;
        lckPct = abs(1 - ((pckRotPct - tmpLow) / tmpDif)) * 100;
    }
}

// Lock
if (MiniKeyPress("action", 1) &amp;&amp; Item("count", lockpickItem) &gt; 0) lckStt = 1; else lckStt = 0;
shk = 0;
if (lckStt == 1) 
{
    if (lck == 1 &amp;&amp; lckPct == 100) 
    {
        audio_stop_sound_ext(soundOpening);
        audio_play_sound_ext(soundOpen, 10, 0);
        unlocked = 1;
    }
    else if (lck &lt; lckPct / 100) 
    {
        audio_stop_sound_ext(soundStuck);
        if (audio_is_playing_ext(soundOpening) == 0) audio_play_sound_ext(soundOpening, 10, 0);
        lck += dt_sec() / lckSpd;
    }
    else 
    {
        audio_stop_sound_ext(soundOpening);
        if (audio_is_playing_ext(soundStuck) == 0) audio_play_sound_ext(soundStuck, 10, 0);
        pckHel -= dt_sec() * 75 + (dt_sec() * (abs(lckPct - 100) * 1)); 
        shk = 1;
        if (pckHel &lt; 0)
        {
            shk = 0;
            event_user(0);
        }
    }
}
else lck -= dt_sec() / lckSpd;
lck = clamp(lck, 0, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Choose a pick hotspot
hotWid = skillHotspot[skillLevel];
hotSwe = skillSweetspot[skillLevel]; // Area of hotspot that is unlockable
hotSpo = (hotWid / 2) + random(1 - hotWid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Break pick
audio_stop_sound_ext(soundOpening);
audio_stop_sound_ext(soundStuck);
audio_play_sound_ext(soundBreak, 10, 0);
Item("lose", lockpickItem);
pckBrkDesX = -64 + irandom(128);
pckBrkDesY = 240 + irandom(64);
pckBrkDesRot = (20 + irandom(20)) * choose(1, -1);
pckBrk = 0.001;
pckBrkSpd = 0.33 + random(0.1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
//if (keyboard_check(vk_shift)) debug = 1; else debug = 0;
vrx = view_xview[0]; vry = view_yview[0];
draw_sprite_ext(s1x1, 0, vrx, vry, SCREEN_WIDTH, SCREEN_HEIGHT, 0, c_black, alpBgn * ald);

//drx += 64;
//draw_text(drx, dry, "Exit");

// draw pick
shkRot = -(shk * 3) + (shk * random(6));
lckRot = -(lck * 90);
//90 - ((mouse_x / SCREEN_WIDTH) * 180);
lckX = vrx + (SCREEN_WIDTH / 2);
lckY = vry + (SCREEN_HEIGHT / 2) - (sld * lckYOff);
draw_sprite(sLockpicking, 0, lckX, lckY);
draw_sprite_ext(sLockpicking, 1, lckX, lckY + (lckRot / 90), 1, 1, lckRot, c_white, 1);
pckX = lckX + lengthdir_x(9, 90 + lckRot);
pckY = lckY + lengthdir_y(9, 90 + lckRot);
if (pckRep != 0)
{
    if (Item("count", lockpickItem) &gt; 0) draw_sprite_ext(sLockpick, 0, pckX, pckY - (abs(1 - pckRep) * 200), 1, 1, pckRot, c_white, 1);
}
else if (pckBrk == 0)
{
    if (Item("count", lockpickItem) &gt; 0) draw_sprite_ext(sLockpick, 0, pckX, pckY, 1, 1, pckRot + shkRot, c_white, 1);
}
else
{
    draw_sprite_ext(sLockpick, 1, pckX, pckY, 1, 1, pckRot, c_white, 1);
    pckBrkAbs = abs(pckBrk - 1);
    draw_sprite_ext(sLockpick, 2, pckX + (pckBrkX * pckBrkAbs) + (pckBrkDesX * pckBrk), 
        pckY + (pckBrkY * pckBrkAbs) + (pckBrkDesY * pckBrk), 1, 1, 
        pckRot + (pckBrkDesRot * pckBrk), c_white, 1);
}
tenX = lckX + lengthdir_x(-9, 90 + lckRot);
tenY = lckY + lengthdir_y(-9, 90 + lckRot);
draw_sprite_ext(sLockpickTension, 0, tenX + (tenPct * 200), tenY + (lckRot / 90) + (tenPct * 150), 1, 1, lckRot + shkRot, c_white, 1);

// DEBUG start
if (debug)
{
    debWid = SCREEN_WIDTH - 16;
    debHei = 8;
    debX = vrx + 8;
    debY = vry + 8;
    draw_sprite_ext(s1x1, 0, debX, debY, debWid, debHei, 0, c_black, 1);
    draw_sprite_ext(s1x1, 0, debX + 1, debY + 1, debWid - 2, debHei - 2, 0, c_white, 1);
    
    // Sweet spot
    debWix = debWid - 4;
    draw_sprite_general(s1x1, 0, 0, 0, 1, 1, debX + 1 + ((hotSpo - (hotWid / 2)) * debWix), debY + 1,
        ((hotWid / 2) - ((hotWid * hotSwe) / 2)) * debWix, debHei - 2, 0, c_lime, c_black, c_black, c_lime, 1);
    draw_sprite_general(s1x1, 0, 0, 0, 1, 1, debX + 1 + ((hotSpo + (hotWid * hotSwe) / 2) * debWix), debY + 1,
        ((hotWid / 2) - ((hotWid * hotSwe) / 2)) * debWix, debHei - 2, 0, c_black, c_lime, c_lime, c_black, 1);
    draw_sprite_general(s1x1, 0, 0, 0, 1, 1, debX + 1 + ((hotSpo - ((hotWid * hotSwe) / 2)) * debWix), debY + 1,
        (hotWid * hotSwe) * debWix, debHei - 2, 0, c_blue, c_blue, c_blue, c_blue, 1);
    
    // Indicator
    draw_sprite_ext(s1x1, 0, debX + 1 + (pckRotPct * (debWid - 4)), debY + 1, 2, debHei - 2, 0, c_red, 1);
    
    scr_font(global.fn_7ocs, c_white, 1);
    draw_text(vrx + (SCREEN_WIDTH / 2), vry + 18, "PICK HEALTH: " + string(pckHel) + "%");
    
    // pckRotPct
    draw_text(vrx + (SCREEN_WIDTH / 2), vry + 18 + 10, "UNLOCK: " + string(lckPct) + "%");
}
// DEBUG end

// Border
scr_font(global.fn_7ocs, c_white, 0);
dry = vry + SCREEN_HEIGHT + 1 - (ald * 29); // was 28
Border("draw", 0, vrx - 24, dry);
if (global.keyinput_type == KEYINPUT_GAMEPAD)
{
    drx = vrx + 20; dry = dry + 13;
    draw_sprite_ext(sLockpickIcons, 2, drx - 20, dry - 5, 1, 1, 0, c_ltgray, 1);
    draw_text(drx, dry, textRotatePick);
    drx += 48 + 20;
    draw_sprite_ext(sLockpickIcons, 3, drx - 20, dry - 5, 1, 1, 0, c_ltgray, 1);
    draw_text(drx, dry, textRotateLock);
}
else
{
    drx = vrx + 33; dry = dry + 13;
    draw_sprite_ext(sLockpickIcons, 0, drx - 32, dry - 5, 1, 1, 0, c_ltgray, 1);
    draw_text(drx, dry, textRotatePick);
    drx += 52 + 24;
    draw_sprite_ext(sLockpickIcons, 1, drx - 24, dry - 5, 1, 1, 0, c_ltgray, 1);
    draw_text(drx, dry, textRotateLock);
}
// Other side
scr_font(global.fn_7ocs, c_white, 2);
drx = vrx + SCREEN_WIDTH - 6;
draw_text(drx, dry, textLockpicksLeft + string(Item("count", lockpickItem)));
drx -= 78;
draw_text(drx, dry, textLockLevel + skillName[skillLevel]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
