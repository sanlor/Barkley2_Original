<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_mg_booty_hoopz_spinning</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2510000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //
scr_entity_animation_set(o_bootySlayer01, "stop");
scr_entity_animation_set(o_animeBulldog01, "stop");
o_cts_hoopz.image_alpha = 0;
o_hoopz.image_alpha = 0;

instance_create(0, 0, o_mg_booty_camera);

// Minigame active //
active = false;

// Image and alpha stuff //
image_alpha = 0.25;
image_speed = 0;
alpha_score = 0;
alpha_score_goal = 0;
alpha_toot = 0;
alpha_text_finish = 0;
alpha_countdown = 0;
alpha_press_to_continue = 0;

// Timers //
timer_prepare = 10;
timer_start_countdown = 0;
timer_start_lights = 0;
timer_end = 0;
timer_score = -1;
timer_score_prepare = 0;
timer_score_tally_1 = 0;
timer_score_tally_2 = 0;
timer_score_tally_3 = 0;
timer_sounds_playing = 0;

// Misc //
score_tally_titles = -1;
mg_start_countdown_text = -1;
hoopz_spinning_animation = 1;
scale_text_finish = 0;
scale_countdown = 0.8;
text_countdown = "";

//gz added
color = c_dkgray;
color2 = c_dkgray;

// Sound throttle, too many sounds used to crash the game, now its throttled a bit //
sounds_playing = 0;
sounds_playing_timer = 0;

// Score tally sequence and texts //
results_count = -1;
results_titles = 0;
results_title[0] = "Adoration";
results_title[1] = "Toot Intensity";
results_title[2] = "Variety";
results_title[3] = "Booty Quotient";

// Rank title given at end, 0 worst title, 5 is the best //
ranking[0] = "Toot failure";
ranking[1] = "Toot amateur";
ranking[2] = "Toot dork";
ranking[3] = "Toot hobbyist";
ranking[4] = "Toot slammer";
ranking[5] = "Tootlord";

// These are for score tallying //
reward_from_minigame = 0;
buttons_pressed = 0;
variety_total = 0;

// Adoration system variables //
adoration = 15;
adoration_lights = 45;
adoration_bonus = 0;
adoration_bonus_alpha = 0;
adoration_decay_timer = 300;

// Event timer, you only have 30 seconds //
clock_timer_second = 30;
clock_timer_minute = 0;
clock_timer_tick = 10;

// Color for the UI //
red = irandom(150);
green = irandom(150);
blue = irandom(150);
goal_red = 255;
goal_green = 255;
goal_blue = 255;

// Toots //
make_a_toot = false;
toot_index = 0;
for (i=0; i&lt;40; i+=1;) toot_points[i] = 5 - irandom(5);
sound_index[0] = "sn_enemy_cybergremlin_atk01";
sound_index[1] = "sn_enemy_cybergremlin_atk02";
sound_index[2] = "sn_enemy_cybergremlin_atk03";
sound_index[3] = "sn_enemy_cybergremlin_grunt01";
sound_index[4] = "sn_enemy_cybergremlin_grunt02";
sound_index[5] = "sn_enemy_cybergremlin_grunt03";
sound_index[6] = "sn_enemy_cybergremlin_grunt04";
sound_index[7] = "sn_enemy_cybergremlin_battlecry01";
sound_index[8] = "sn_enemy_cybergremlin_battlecry02";
sound_index[9] = "sn_enemy_cybergremlin_atk01";
sound_index[10] = "sn_enemy_duergar_atk01";
sound_index[11] = "sn_enemy_duergar_atk02";
sound_index[12] = "sn_enemy_duergar_grunt01";
sound_index[13] = "sn_enemy_duergar_grunt02";
sound_index[14] = "sn_enemy_duergar_grunt03";
sound_index[15] = "sn_enemy_cybergremlin_scream01";
sound_index[16] = "sn_enemy_cybergremlin_scream02";
sound_index[17] = "sn_enemy_cybergremlin_death01";
sound_index[18] = "sn_enemy_cybergremlin_death02";
sound_index[19] = "sn_enemy_cybergremlin_death03";
sound_index[20] = "sn_enemy_brainmenace_atk01";
sound_index[21] = "sn_enemy_brainmenace_atk02";
sound_index[22] = "sn_enemy_brainmenace_atk03";
sound_index[23] = "sn_generic_metalres01";
sound_index[24] = "sn_cow_moo3";
sound_index[25] = "sn_powerdown01";
sound_index[26] = "sn_bubblepop03";
sound_index[27] = "sn_busted03";
sound_index[28] = "sn_godless03";
sound_index[29] = "sn_enemy_babyalien_swipe01";
sound_index[30] = "sn_utilitycursor_buttondisabled01";
sound_index[31] = "sn_cursor_select01";
sound_index[32] = "sn_bb_orchit";
sound_index[33] = "sn_bonedebris04";
sound_index[34] = "sn_katsuFlourish01";
sound_index[35] = "sn_pdt_muere";
sound_index[36] = "sn_pdt_wilhelm01";
sound_index[37] = "sn_pdt_alert01";
sound_index[38] = "sn_squish5";
sound_index[39] = "sn_dwarf_agree01";
/*
sound_index[23] = "sn_bb_apple";
//sound_index[24] = "sn_bb_trapshit";

//sound_index[25] = "sn_bb_stimulating";
sound_index[25] = "sn_bb_stimulating";
sound_index[26] = "sn_bb_airhorn";
sound_index[27] = "sn_bb_awooga";
sound_index[28] = "sn_bb_chimp";
sound_index[29] = "sn_bb_coffee";
sound_index[30] = "sn_bb_damn";
sound_index[31] = "sn_bb_deathscream";
sound_index[32] = "sn_bb_foghorn";
sound_index[33] = "sn_bb_hawk";
sound_index[34] = "sn_bb_laugh";
sound_index[35] = "sn_bb_llama";
sound_index[36] = "sn_bb_orchit";
sound_index[37] = "sn_bb_partyhorn";
sound_index[38] = "sn_bb_snarl";
sound_index[39] = "sn_bb_siren";
*/

// Allowed keys on keyboard //
allowed_keys[0] = ord('A');
allowed_keys[1] = ord('B');
allowed_keys[2] = ord('C');
allowed_keys[3] = ord('D');
allowed_keys[4] = ord('E');
allowed_keys[5] = ord('F');
allowed_keys[6] = ord('G');
allowed_keys[7] = ord('H');
allowed_keys[8] = ord('I');
allowed_keys[9] = ord('J');
allowed_keys[10] = ord('K');
allowed_keys[11] = ord('L');
allowed_keys[12] = ord('M');
allowed_keys[13] = ord('N');
allowed_keys[14] = ord('O');
allowed_keys[15] = ord('P');
allowed_keys[16] = ord('Q');
allowed_keys[17] = ord('R');
allowed_keys[18] = ord('S');
allowed_keys[19] = ord('T');
allowed_keys[20] = ord('U');
allowed_keys[21] = ord('V');
allowed_keys[22] = ord('W');
allowed_keys[23] = ord('X');
allowed_keys[24] = ord('Y');
allowed_keys[25] = ord('Z');
allowed_keys[26] = vk_numpad0;
allowed_keys[27] = vk_numpad1;
allowed_keys[28] = vk_numpad2;
allowed_keys[29] = vk_numpad3;
allowed_keys[30] = vk_numpad4;
allowed_keys[31] = vk_numpad5;
allowed_keys[32] = vk_numpad6;
allowed_keys[33] = vk_numpad7;
allowed_keys[34] = vk_numpad8;
allowed_keys[35] = vk_numpad9;
allowed_keys[36] = vk_delete;
allowed_keys[37] = vk_space;
allowed_keys[38] = vk_subtract;
allowed_keys[39] = vk_add;

// Variety bonus off for each button, using the buttons in the minigame activates this, and gives you bonus points //
for (i=0; i&lt;40; i+=1;) variety[i] = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///go back to dialog with result
scr_entity_animation_set(o_bootySlayer01, "default");
scr_entity_animation_set(o_animeBulldog01, "default");

with (o_mg_booty_camera) instance_destroy();

// EVENT ENDS //
global.event = false;

// Reset music //
audio_stop_sound_ext("mus_tnn_jockjam");
Music("queue", "mus_tnn_bootylectro");

o_hoopz.image_alpha = 1;

// Continue the bootybass event // And check if you won or lost //
if (reward_from_minigame &gt; 128) Quest("booty_just_won", 1);
else Quest("booty_just_lost", 1);
with (o_stonewallBootyDaimyoJackson01) Cinema("run", script);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set event to true to freeze camera
global.event = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Bootybass is on wooooo //
if paused() exit;

// Minigame prep //
if timer_prepare &gt; 0 then
    {
    // Tick down //
    timer_prepare -= dt();
    
    // Event //
    if timer_prepare &lt;= 0 then
        {
        // Make dimmed lights for a second //
        o_mg_booty_surface.no_lights = true;
        timer_start_lights = 5;
        
        // Countdown //
        timer_start_countdown = 15;
        
        // Light mode //
        o_mg_booty_surface.light_mode = 1;
        with o_mg_booty_surface event_user(0);
        }
    }

// Minigame start light shit, put the lights back on //
if timer_start_lights &gt; 0 then
    {
    // Tick down //
    timer_start_lights -= dt();
        
    // End //
    if timer_start_lights &lt;= 0 then o_mg_booty_surface.no_lights = false; // 330
    } 

// Minigame start countdown, minigame starts after //
if timer_start_countdown &gt; 0 then
    {
    // Tick down //
    timer_start_countdown -= dt();
    
    // Event //
    if timer_start_countdown &lt;= 0 then
        {
        // This is the countdown shown on the screen //
        if mg_start_countdown_text &lt; 4 then
            {
            timer_start_countdown = 10;
            mg_start_countdown_text += 1;
            switch (mg_start_countdown_text)
                {
                case 4: active = true; break;
                case 3: text_countdown = "GO"; alpha_countdown = 1; scale_countdown = 1.8; hoopz_spinning_animation = 1 break;
                case 2: text_countdown = "1"; alpha_countdown = 1; scale_countdown = 1.8; event_user(0); break;
                case 1: text_countdown = "2"; alpha_countdown = 1; scale_countdown = 1.8; break;
                case 0: text_countdown = "3"; alpha_countdown = 1; scale_countdown = 1.8; break;
                }
            }
        }
    }
    
// Sounds playing timer //
if timer_sounds_playing &gt; 0 then
    {
    // Tick down //
    timer_sounds_playing -= dt();
    
    // Event //
    if timer_sounds_playing &lt;= 0 then
        {
        sounds_playing -= 1;
        if sounds_playing &gt; 0 then timer_sounds_playing = 7;
        }
    }

// Slam some toots //
if active = true then
    {        
    // TOOTS //
    if sounds_playing &lt; 8 then
        {
        // Keyboard tooting //
        for (i=0; i&lt;40; i+=1;) 
            {
            if keyboard_check_pressed(allowed_keys[i]) then 
                {
                make_a_toot = true;
                toot_index = i;
                i = 40;
                }
            }
        
        // Gamepad toots //
        if gamepad_button_check_pressed(0, gp_face1) then
            {
            make_a_toot = true;
            if gamepad_button_check(0, gp_padu) then toot_index = 0;
            else if gamepad_button_check(0, gp_padd) then toot_index = 1;
            else if gamepad_button_check(0, gp_padr) then toot_index = 2;
            else if gamepad_button_check(0, gp_padl) then toot_index = 3;
            else toot_index = 4;
            }
        if gamepad_button_check_pressed(0, gp_face2) then
            {
            make_a_toot = true;
            if gamepad_button_check(0, gp_padu) then toot_index = 5;
            else if gamepad_button_check(0, gp_padd) then toot_index = 6;
            else if gamepad_button_check(0, gp_padr) then toot_index = 7;
            else if gamepad_button_check(0, gp_padl) then toot_index = 8;
            else toot_index = 9;
            }
        if gamepad_button_check_pressed(0, gp_face3) then
            {
            make_a_toot = true;
            if gamepad_button_check(0, gp_padu) then toot_index = 10;
            else if gamepad_button_check(0, gp_padd) then toot_index = 11;
            else if gamepad_button_check(0, gp_padr) then toot_index = 12;
            else if gamepad_button_check(0, gp_padl) then toot_index = 13;
            else toot_index = 14;
            }
        if gamepad_button_check_pressed(0, gp_face4) then
            {
            make_a_toot = true;
            if gamepad_button_check(0, gp_padu) then toot_index = 15;
            else if gamepad_button_check(0, gp_padd) then toot_index = 16;
            else if gamepad_button_check(0, gp_padr) then toot_index = 17;
            else if gamepad_button_check(0, gp_padl) then toot_index = 18;
            else toot_index = 19;
            }
        if gamepad_button_check_pressed(0, gp_shoulderl) then
            {
            make_a_toot = true;
            if gamepad_button_check(0, gp_padu) then toot_index = 20;
            else if gamepad_button_check(0, gp_padd) then toot_index = 21;
            else if gamepad_button_check(0, gp_padr) then toot_index = 22;
            else if gamepad_button_check(0, gp_padl) then toot_index = 23;
            else toot_index = 24;
            }
        if gamepad_button_check_pressed(0, gp_shoulderr) then
            {
            make_a_toot = true;
            if gamepad_button_check(0, gp_padu) then toot_index = 25;
            else if gamepad_button_check(0, gp_padd) then toot_index = 26;
            else if gamepad_button_check(0, gp_padr) then toot_index = 27;
            else if gamepad_button_check(0, gp_padl) then toot_index = 28;
            else toot_index = 29;
            }
        if gamepad_button_check_pressed(0, gp_shoulderlb) then
            {
            make_a_toot = true;
            if gamepad_button_check(0, gp_padu) then toot_index = 30;
            else if gamepad_button_check(0, gp_padd) then toot_index = 31;
            else if gamepad_button_check(0, gp_padr) then toot_index = 32;
            else if gamepad_button_check(0, gp_padl) then toot_index = 33;
            else toot_index = 34;
            }
        if gamepad_button_check_pressed(0, gp_shoulderrb) then
            {
            make_a_toot = true;
            if gamepad_button_check(0, gp_padu) then toot_index = 35;
            else if gamepad_button_check(0, gp_padd) then toot_index = 36;
            else if gamepad_button_check(0, gp_padr) then toot_index = 37;
            else if gamepad_button_check(0, gp_padl) then toot_index = 38;
            else toot_index = 39;
            }
        }
        
    // Play the toot //
    if make_a_toot = true then
        {
        // More sounds //
        sounds_playing += 1;
        if timer_sounds_playing &lt;= 0 then timer_sounds_playing = 3.6;
        
        // Buttons //
        buttons_pressed += 1;
        
        // Variety //
        variety[toot_index] = true;
        
        // Toot alpha effect //
        alpha_toot += (adoration_bonus + 5) / 10 * 0.25; 
        
        // Play toot //
        audio_play_sound_ext(sound_index[toot_index], 2, false);
        
        // Add adoration //
        adoration_bonus = toot_points[toot_index];
        adoration += adoration_bonus;
        
        // No spamming the same key for points //
        if toot_points[toot_index] &gt; -5 then toot_points[toot_index] -= 1;
        
        // Effects //
        adoration_bonus_alpha = 1;
        
        // Limit adoration to 100 //
        if adoration &gt; 100 then adoration = 100;
        if adoration &lt; 0 then adoration = 0;

        // Text popup //
        popup = instance_create(-100, -100, o_mg_booty_effect_text);
        popup.text = adoration_bonus + 5;
        
        // No more toots //
        make_a_toot = false;
        }
        
    // Adoration decay //
    if adoration &gt; 0 then
        {
        // Timer //
        if adoration_decay_timer &gt; 0 then
            {
            // Tick down //
            adoration_decay_timer -= dt();
            
            // Decay //
            if adoration_decay_timer &lt;= 0 then
                {
                adoration -= 1;
                if adoration &gt;= 90 then adoration_decay_timer = 10;
                else if adoration &gt;= 80 then adoration_decay_timer = 13;
                else if adoration &gt;= 70 then adoration_decay_timer = 16;
                else if adoration &gt;= 60 then adoration_decay_timer = 19;
                else if adoration &gt;= 50 then adoration_decay_timer = 22;
                else if adoration &gt;= 40 then adoration_decay_timer = 25;
                else if adoration &gt;= 30 then adoration_decay_timer = 28;
                else if adoration &gt;= 20 then adoration_decay_timer = 31;
                else if adoration &gt;= 10 then adoration_decay_timer = 34;
                else if adoration &gt;= 0 then adoration_decay_timer = 37;
                }
            }
        }
        
    // Timer //
    if clock_timer_tick &gt; 0 then
        {
        // Tick down //
        clock_timer_tick -= dt();
        
        // Second down //
        if clock_timer_tick &lt;= 0 then
            {
            clock_timer_tick = 10;
            if clock_timer_second &gt; 0 then clock_timer_second -= 1;
            else 
                {
                if clock_timer_minute &gt; 0 then
                    {
                    clock_timer_minute -= 1;
                    clock_timer_second = 59;
                    }
                else
                    {
                    // Clock runs out //
                    for (i=0; i&lt;40; i+=1;)
                        {
                        audio_stop_sound_ext(sound_index[i]);
                        }
                        
                    // TURN MUSIC OFF //
                    Music("queue", "mus_blankTEMP");
                    active = false;
                    timer_score_prepare = 35;
                    alpha_text_finish = 1;
                    scale_text_finish = 0.5;
                    clock_timer_tick = 0;
                    }
                }
            }
        }
        
    // Adoration bonus alpha //
    if adoration_bonus_alpha &gt; 0 then adoration_bonus_alpha -= 0.015;
        
    // Adoration bonus lights //
    if adoration_lights &gt; 0 then
        {
        // Tick down //
        adoration_lights -= dt();
        
        // Show some lights //
        if adoration_lights &lt;= 0 then
             {
             adoration_lights = 50 + irandom(20);
             if adoration &lt;= 35 then 
                {
                repeat (4)
                    {
                    light = instance_create(48 + irandom(room_width - 48), 48 + irandom(room_height - 48), o_mg_booty_light);
                    light.image_alpha = 0.1;
                    light.light_type = 0;
                    }
                }
             else if adoration &lt;= 65 then 
                {
                repeat (10)
                    {
                    light = instance_create(48 + irandom(room_width - 48), 48 + irandom(room_height - 48), o_mg_booty_light);
                    light.image_alpha = 0.1;
                    light.light_type = 0;
                    }
                }
             else if adoration &lt;= 100 then 
                {
                repeat (16)
                    {
                    light = instance_create(48 + irandom(room_width - 48), 48 + irandom(room_height - 48), o_mg_booty_light);
                    light.image_alpha = 0.1;
                    light.light_type = 0;
                    }
                }
             }
        }
    }
    
// Move to the end of the minigame, the score tally //
if timer_score_prepare &gt; 0 then
    {
    // Tick down //
    timer_score_prepare -= dt();
    
    // Remove crazy texts //
    with o_mg_booty_effect_text alpha -= 0.1;
    
    // Scale the text //
    if scale_text_finish &lt; 2 then scale_text_finish += 0.05;
    
    // Alpha //
    if alpha_text_finish &gt; 0 and timer_score_prepare &lt;= 20 then alpha_text_finish -= 0.01;
    
    // Event //
    if timer_score_prepare &lt;= 0 then 
        {
        // In case DT sucks, set the end values here //
        with o_mg_booty_effect_text instance_destroy();
        scale_text_finish = 2;
        alpha_text_finish = 0;
        timer_score = 5;
        //hoopz_spinning_animation = 1;
        
        // Count up the variety total bonus for score tally //
        for (i=0; i&lt;40; i+=1;) 
            {
            if variety[i] = true then variety_total += 1;
            }
        }
    }
    
// Count all the points // Adoration //
if timer_score_tally_1 &gt; 0 then    // 160 130 100
    {
    // Tick down //
    timer_score_tally_1 -= dt();
    
    // Event //
    if timer_score_tally_1 &lt;= 0 then
        {
        // Convert adoration to points // If none left, move on //
        if adoration &gt; 0 then
            {
            adoration -= 1;
            reward_from_minigame += 2;
            if adoration = 0 then timer_score_tally_1 = 10;
            else timer_score_tally_1 = 0.3;
            if !audio_is_playing_ext("sn_bb_scoretally") then audio_play_sound_ext("sn_bb_scoretally", 1, false);
            }
        else timer_score_tally_2 = 5;
        }
    }
    
// Count all the points // Number of buttons pressed total //    
if timer_score_tally_2 &gt; 0 then    // 160 130 100
    {
    // Tick down //
    timer_score_tally_2 -= dt();
    
    // Event //
    if timer_score_tally_2 &lt;= 0 then
        {  
        // Convert buttons pressed to points //
        if buttons_pressed &gt; 0 then
            {
            buttons_pressed -= 1;
            reward_from_minigame += 1;
            if buttons_pressed = 0 then timer_score_tally_2 = 10;
            else timer_score_tally_2 = 0.3;
            if !audio_is_playing_ext("sn_bb_scoretally") then audio_play_sound_ext("sn_bb_scoretally", 1, false);
            }
        else timer_score_tally_3 = 5;
        }
    }
        
// Count all the points // Variety of buttons pressed //    
if timer_score_tally_3 &gt; 0 then    // 160 130 100
    {
    // Tick down //
    timer_score_tally_3 -= dt();
    
    // Event //
    if timer_score_tally_3 &lt;= 0 then
        { 
        // Convert variety of buttons presses to points //
        if variety_total &gt; 0 then
            {
            variety_total -= 1;
            reward_from_minigame += 3;
            if variety_total = 0 then timer_score_tally_3 = 10;
            else timer_score_tally_3 = 0.3;
            if !audio_is_playing_ext("sn_bb_scoretally") then audio_play_sound_ext("sn_bb_scoretally", 1, false);
            }
        else
            {
            // Title is given //
            results_titles = 5;
            audio_play_sound_ext("sn_bb_fanfare", 1, false);
            }
        } 
    }   
    
// Score tally preparations, titles going up //
if timer_score &gt; 0 then
    {
    // Tick down //
    timer_score -= dt();
    
    // Alpha //
    alpha_score_goal = 1;
    
    // Woop //
    results_count = 0;
    
    // Show things //
    if timer_score &lt;= 0 then
        {
        score_tally_titles += 1;
        if score_tally_titles &lt; 4 then timer_score = 6.6
        else timer_score = 12;
        switch (score_tally_titles)
            {
            case 0: results_titles = 1; audio_play_sound_ext("sn_bb_scoretally", 1, false); break;
            case 1: results_titles = 2; audio_play_sound_ext("sn_bb_scoretally", 1, false); break;
            case 2: results_titles = 3; audio_play_sound_ext("sn_bb_scoretally", 1, false); break;
            case 3: results_titles = 4; audio_play_sound_ext("sn_bb_scoretally", 1, false); break;
            case 4: timer_score_tally_1 = 10; break;
            }
        }
    }

// After the score has been tallied //
if results_titles &gt;= 5 then 
    {
    // Show que to end the minigame //
    if alpha_press_to_continue &lt; 1 and timer_end &lt;= 0 then alpha_press_to_continue += 0.01;
    
    // Exit this mess //
    if alpha_press_to_continue &gt;= 1 and scr_input_check_pressed(KEYID_ANYKEY, PLAYER1) = true then
        {
        if timer_end = 0 then 
            {
            timer_end = 25;
            with o_mg_booty_surface event_user(4);
            }
        }
    }
    
// Minigame end, the final end //
if timer_end &gt; 0 then
    {
    // Tick down //
    timer_end -= dt();
    
    // Alphas //
    alpha_score_goal = 0;
    alpha_press_to_continue -= 0.1;
    
    // Event //
    if timer_end &lt;= 0 then
        {
        with o_mg_booty_surface event_user(3);
        instance_destroy();
        }
    }
    
// Countdown scale //
if scale_countdown &lt; 8 then scale_countdown += 0.5;
    
// Alphas //   
if alpha_score &lt; alpha_score_goal then alpha_score += 0.1;
if alpha_score &gt; alpha_score_goal then alpha_score -= 0.1;
if alpha_toot &gt; 0 then alpha_toot -= 0.05;
if alpha_countdown &gt; 0 then alpha_countdown -= 0.025;

// Color red //
if red &lt; goal_red then red += 15;
if red &gt; goal_red then red -= 10;
if red &gt; 255 then red = 255;
if red &lt; 0 then red = 0;
if red = goal_red then
    {
    if goal_red = 0 then goal_red = 255;
    else if goal_red = 255 then goal_red = 0;
    }
    
// Color green //
if green &lt; goal_green then green += 20;
if green &gt; goal_green then green -= 10;
if green &gt; 255 then green = 255;
if green &lt; 0 then green = 0;
if green = goal_green then
    {
    if goal_green = 0 then goal_green = 255;
    else if goal_green = 255 then goal_green = 0;
    }
    
// Color Blue //
if blue &lt; goal_blue then blue += 10;
if blue &gt; goal_blue then blue -= 10;
if blue &gt; 255 then blue = 255;
if blue &lt; 0 then blue = 0;
if blue = goal_blue then
    {
    if goal_blue = 0 then goal_blue = 255;
    else if goal_blue = 255 then goal_blue = 0;
    }
    
// Mix colors //
color = make_color_rgb(255 -red, 255 - green, 255 - blue);
color2 = make_color_rgb(red, green, blue);

// SPIN //
if active = true then image_index += 0.15;
else image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Play music
audio_play_sound_ext("mus_tnn_jockjam", 0, false);
//Music("queue", "mus_tnn_jockjam")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Spinning //
if hoopz_spinning_animation &gt;= 1 then draw_sprite_ext(sprite_index, image_index, 383, 168, 1, 1, 0, c_white, 1);

// Draw background bar for the rhytm mess //
if active = true then
    {
    // Toot alpha effect //
    draw_sprite_ext(s_effect_flash_overlay, 0, view_xview + 192, view_yview + 120, 1, 1, 0, c_white, alpha_toot);
    
    // Info bar BG //
    draw_set_alpha(0.4);
    draw_set_color(c_black);
    draw_rectangle(view_xview - 2, view_yview + 4, view_xview + 386, view_yview + 24, false);
    draw_rectangle(view_xview - 2, view_yview + 8, view_xview + 386, view_yview + 20, false);
    
    // Adoration bar BG //
    draw_rectangle(view_xview - 2, view_yview + 28, view_xview + 386, view_yview + 48, false);
    draw_rectangle(view_xview - 2, view_yview + 32, view_xview + 386, view_yview + 44, false);
    
    // Public opinion title //
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_set_font(global.fn_2);
    draw_text(view_xview + 8, view_yview + 10, "Public opinion:");
    
    // Timer title //
    draw_text(view_xview + 290, view_yview + 10, "Time:");
    
    // Adoration level title //
    draw_set_color(make_color_rgb(40, 200, 255));
    draw_text(view_xview + 8, view_yview + 34, "Adoration:");
    
    // Values //
    if adoration &lt;= 20 then
        {
        draw_set_color(c_red);
        draw_text(view_xview + 110, view_yview + 10, "You stink!");
        }
    else if adoration &lt;= 40 then
        {
        draw_set_color(c_orange);
        draw_text(view_xview + 110, view_yview + 10, "Mediocre");
        }
    else if adoration &lt;= 60 then
        {
        draw_set_color(c_yellow);
        draw_text(view_xview + 110, view_yview + 10, "Interesting...!");
        }
    else if adoration &lt;= 80 then
        {
        draw_set_color(c_green);
        draw_text(view_xview + 110, view_yview + 10, "Whoa!!!");
        }
    else if adoration &lt;= 100 then
        {
        draw_set_color(color);
        draw_text(view_xview + 110, view_yview + 10, "SUPERB!!");
        }
        
    // Timer time //
    draw_set_color(c_yellow);
    draw_text(view_xview + 340, view_yview + 10, "0" + string(clock_timer_minute));
    draw_text(view_xview + 355, view_yview + 10, ":");
    if clock_timer_second &gt; 9 then draw_text(view_xview + 360, view_yview + 10, string(clock_timer_second));
    else
        {
        draw_text(view_xview + 360, view_yview + 10, "0" + string(clock_timer_second));
        }
        
    // Adoration bar //
    draw_set_color(make_color_rgb(40, 40, 40));
    draw_rectangle(view_xview + 110, view_yview + 34, view_xview + 310, view_yview + 42, false);
    draw_set_color(color);
    draw_rectangle(view_xview + 110, view_yview + 34, view_xview + 110 + (adoration / 100) * 200, view_yview + 42, false);
    
    // Adoration bonus //
    draw_set_font(global.fn_1);
    draw_set_alpha(adoration_bonus_alpha);
    draw_set_color(color2);
    if adoration_bonus &gt;= 0 then draw_text(view_xview + 8, view_yview + 64, "Adoration +" + string(adoration_bonus) + "!");
    else draw_text(view_xview + 8, view_yview + 64, "Adoration " + string(adoration_bonus) + "!");
    }
    
// Countdown //
draw_set_font(global.fn_1);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_alpha(alpha_countdown);
draw_set_color(color);
draw_text_transformed(view_xview + 192, view_yview + 120, text_countdown, scale_countdown, scale_countdown, 10);
draw_set_font(global.fn_2);
    
// Finish //
draw_set_font(global.fn_1);
draw_set_halign(fa_left);
draw_set_valign(fa_center);
draw_set_alpha(alpha_text_finish);
draw_set_color(c_red);
strWid = string_width("F I N I S H !") * 4;
draw_text_transformed(view_xview + 192 - (strWid / 2), view_yview + 120, "F I N I S H !", 4, 4, 0);
//draw_sprite_ext(s_mg_booty_finish, 0, view_xview + 192, view_yview + 120, scale_text_finish, scale_text_finish, 0, c_white, alpha_text_finish);

draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(c_black);

// Count the results //
if results_count &gt; -1 then
    {
    // Dim background a bit //
    draw_set_alpha(0.5);
    draw_set_color(c_black);
    draw_rectangle(view_xview - 2, view_yview - 2, view_xview + 386, view_yview + 242, false);
    
    // Text alpha //
    draw_set_alpha(alpha_score);
    
    // Titles //
    draw_set_color(c_white);
    if results_titles &gt;= 1 then draw_text(view_xview + 64, view_yview + 44, results_title[0]);
    if results_titles &gt;= 2 then draw_text(view_xview + 64, view_yview + 68, results_title[1]);
    if results_titles &gt;= 3 then draw_text(view_xview + 64, view_yview + 92, results_title[2]);
    if results_titles &gt;= 4 then draw_text(view_xview + 64, view_yview + 124, results_title[3]);
    
    // Numbers //
    draw_set_color(c_red);
    if results_titles &gt;= 1 then draw_text(view_xview + 320, view_yview + 44, adoration);
    if results_titles &gt;= 2 then draw_text(view_xview + 320, view_yview + 68, buttons_pressed);
    if results_titles &gt;= 3 then draw_text(view_xview + 320, view_yview + 92, variety_total);
    if results_titles &gt;= 4 then draw_text(view_xview + 320, view_yview + 124, reward_from_minigame);
    
    // Ranking //
    if results_titles &gt;= 5 then
        {
        draw_set_color(color);
        draw_set_halign(fa_center);
        if reward_from_minigame &lt;= 25 then draw_text_transformed(view_xview + 192, view_yview + 158, ranking[0], 2, 2, 0);
        else if reward_from_minigame &lt;= 75 then draw_text_transformed(view_xview + 192, view_yview + 158, ranking[1], 2, 2, 0);
        else if reward_from_minigame &lt;= 128 then draw_text_transformed(view_xview + 192, view_yview + 158, ranking[2], 2, 2, 0);
        else if reward_from_minigame &lt;= 200 then draw_text_transformed(view_xview + 192, view_yview + 158, ranking[3], 2, 2, 0);
        else if reward_from_minigame &lt;= 300 then draw_text_transformed(view_xview + 192, view_yview + 158, ranking[4], 2, 2, 0);
        else draw_text_transformed(view_xview + 192, view_yview + 158, ranking[5], 2, 2, 0);
        }
        
    // Draw lines //
    draw_set_color(make_color_rgb(140, 240, 255));
    draw_line(view_xview + 48, view_yview + 116, view_xview + 348, view_yview + 116);
    draw_line(view_xview + 48, view_yview + 118, view_xview + 348, view_yview + 118);
    
    // Press to continue //
    draw_set_alpha(alpha_press_to_continue);
    draw_set_color(c_white);
    
    // Back to normal font //
    draw_set_font(global.fn_2);
    draw_text(view_xview + 192, view_yview + 220, "Press button to continue");
    draw_set_halign(fa_left);
    }
    
// Back to normal font //
draw_set_font(global.fn_2);

// Set alpha to normal //
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>28,21</point>
    <point>28,28</point>
  </PhysicsShapePoints>
</object>
