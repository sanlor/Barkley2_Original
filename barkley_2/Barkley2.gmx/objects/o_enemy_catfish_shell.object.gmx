<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_catfish_shell</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_enemygroup_catfish</parentName>
  <maskName>mask_disk_16by16</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
event_inherited();
scr_enemyDB_statsGet(enemyBuild);
scr_entity_setZHitbox(0, 48);
scr_entity_setMovementCollisionShape_circle(14);
ailmentTotem_define(self.id, 0, 0, 0, 0);
invulnerable = 1;

anim = 0;
animSpd = 0.2;
animStrike = 0;

alertSound = "catfishsmall_alert";
deathSound = "catfishsmall_death";
damageSound = "catfishsmall_grunt";

// Create shell
shell = instance_create(x, y, o_enemy_catfish_shell_shell);
shell.parent = id;
scr_actor_setActorPushType(ACTOR_COLLISIONPUSH_NONE);
with (shell) scr_actor_setActorPushType(ACTOR_COLLISIONPUSH_IMMOBILE);

// Passive and active states
var ark, conf, guard;
guard = scr_AI_addPassiveState(scr_AI_passive_guard);
ds_map_replace(guard, "sndAlertSound", alertSound);
conf = scr_AI_addActiveState(scr_AI_active_approach);

// This makes Catfish keep distance from target
ai_hangBack = scr_AI_addActiveState(scr_AI_active_hangback);
ai_hangBack[? "switchPriority"] = 10;
ai_hangBack[? "switchRemoveMaxDist"] = 100;
ai_hangBack[? "switchAddMaxDist"] = 50;
ai_hangBack[? "pauseTime"] = 20;
ai_hangBack[? "pauseTimeRnd"] = 10;
ai_hangBack[? "switchPredicate"] = predicate_AI_isNotWading;

//ai_pause = scr_AI_addActiveState(scr_AI_active_pause);
//ai_pause[? "switchPriority"] = 10;
//ai_pause[? "switchPredicate"] = predicate_AI_isNotWading;

// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// ACRO TIME
time0 = AI_decisionFrequency;
deviate = 1;

//Initiate Animation Entities
Animation("define", "catfish_stand", s_catfish_small, 0, 1, 0);
Animation("define", "catfish_walk", s_catfish_small, 0, 5, 0.3);
scr_entity_animation_setSpeedPerPixel("catfish_walk", 1/10);
_default_offset=0;

exit;
Animation("define", "catfish_stand", s_catfish_small, 0, 1, 0);
Animation("define", "catfish_walk", s_catfish_small, 1, 4, 0.3);
scr_entity_animation_setSpeedPerPixel("catfish_walk", 1/10);
Animation("define", "catfish_jump", s_catfish_small, 5, 1, 0);
Animation("define", "catfish_stagger", s_catfish_small, 5, 1, 0);
Animation("define", "catfish_shot_before", s_catfish_small, 6, 5, 1);
Animation("define", "catfish_shot_attack", s_catfish_small, 11, 1, 1);
Animation("define", "catfish_shot_after", s_catfish_small, 11, 2, 1);
Animation("define", "water", s_watershadow_medium, 0, 4, 0.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
event_inherited();

// ACRO TIME
deviate = scr_stats_getEffectiveStat(id, STAT_BASE_AGILE) / scr_stats_getBaseStat(id, STAT_BASE_AGILE);
AI_decisionFrequency = time0 / deviate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///On death execute the following...
var _obj, _dx, _dy;
repeat (3) //Until there are "gibs" made, use a bunch of blood splatter for killing
{
    _dx = x - 8 + floor(random(16));
    _dy = y - 8 + floor(random(16));
    _obj = instance_create(_dx, _dy, o_FX);
    _obj.sprite_index = s_fx_bloodBurst;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
event_inherited();

var _col,_hScale,_frm;
_col = image_blend;

_dirdir = ((faceDir+360)mod 360) div 90;

switch(_dirdir)
{
    case 0: _hScale = -1; _default_offset= 5; break;
    case 1: _hScale = 1; _default_offset= 5; break;
    case 2: _hScale = -1; _default_offset=0; break;
    case 3: _hScale = 1; _default_offset=0; break;
}
if (a_walking == 1) image = scr_entity_animation_getImage("catfish_walk");
else image = scr_entity_animation_getImage("catfish_stand");
draw_sprite_ext(sprite_index, image + _default_offset, dx, dy, _hScale, 1, 0, _col, 1);

combatActor_draw_post();

/*
image = scr_entity_animation_getImage("catfish_walk");
        }
        else
        {
            image = scr_entity_animation_getImage("catfish_stand");
        }
    }
    
    var sprite = scr_entity_animation_getSpriteIndex("catfish_stand");
    draw_sprite_ext(sprite,image,dx,dy,_hScale,1,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>45,55</point>
    <point>45,45</point>
  </PhysicsShapePoints>
</object>
