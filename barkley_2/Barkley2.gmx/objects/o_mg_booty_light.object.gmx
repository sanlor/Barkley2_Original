<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_mg_booty_light_orbit</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //
setup_light = 1;
light_type = -1;
light_size = 0;
light_size_goal = 0;
image_alpha = 0;
image_alpha_goal = 0.5;

hsp = 0;
vsp = 0;
spd = 0;
imgSpd = 0;
image_speed = 0;
spdMod = 1.8 + random(0.4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Pause //
if paused() then exit;

// Setup //
if (setup_light)
{
    setup_light = false;
    event_user(0);
}

// Alpha changing //
if image_alpha &gt; image_alpha_goal and image_alpha_goal &lt;= 0 then image_alpha -= 3 * dt_sec() * spdMod;
if image_alpha &lt; image_alpha_goal and image_alpha_goal &gt; 0 then image_alpha += 3 * dt_sec() * spdMod;
if image_alpha &lt;= 0 and image_alpha_goal = 0 then instance_destroy();

// LIGHT ADORATION //
if (light_type == 0)
    {
    // Orbit //
    x = (view_xview+view_wview/2) + lengthdir_x(length, direction);
    y = (view_yview+view_hview/2) + lengthdir_y(length, direction);
    direction += (dir_speed * 60) * dt_sec() * spdMod;
    
    // Alpha out //
    if start &gt; 0 then   
        {
        // Tick down //
        start -= dt_sec() * 60 * spdMod;
        if image_alpha &lt; 0.75 then image_alpha += ((0.01 + random(0.01)) * 60) * dt_sec() * spdMod;
        }
    else
        {
        if image_alpha &gt; 0 then image_alpha -= ((0.005 + random(0.005)) * 60)  * dt_sec() * spdMod;
        else instance_destroy();
        }
    }
    
// LIGHT CROSS //
else if light_type = 1 then
    {
    // Limits //
    if x &lt; (room_width / 2) - 60 then hsp += 0.1 dt_sec();        
    if x &gt; (room_width / 2) + 60 then hsp -= 0.1 dt_sec();
    if y &lt; (room_height / 2) - 60 then vsp += 0.1 dt_sec();        
    if y &gt; (room_height / 2) + 60 then vsp -= 0.1 dt_sec();
    image_angle += 60 * dt_sec() * spdMod;
    if hsp &gt; 2 then hsp = 2;
    if hsp &lt; -2 then hsp = -2;
    if vsp &gt; 2 then vsp = 2;
    if vsp &lt; -2 then vsp = -2;
    }
    
// LIGHT FLASH //
else if light_type = 2 then
    {
    // Spotlights //
    if spotlight &gt; 0 then
        {
        // Tick down //
        spotlight -= dt();
        image_alpha -= (0.025 * 60) * dt_sec() * spdMod;
        
        // Move em //
        if spotlight &lt;= 0 then
            {
            x = irandom(room_width - 128) + 64;
            y = irandom(room_width - 128) + 64;
            spotlight = 5;
            }
        }
    }
    
// LIGHT HYACINTH //
else if light_type = 3 then
    {
    // Bootybass effect //
    image_blend = make_color_rgb(60, 255, 10);
    image_alpha = 0.5;
    image_alpha_goal = 0.5;
    var lgt = id;
    with (o_hyacinth01)
    {
        var curAni = ANIMATION_DEFAULT;
        var frm = scr_entity_animation_getImage(curAni);
        lgt.image_index = frm;
    }
    }
    
// LIGHT ORBIT //
else if light_type = 4 then
    {
    // Orbit //
    x = room_width/2 + lengthdir_x(length, direction);
    y = room_height/2 + lengthdir_y(length, direction);
    direction += 120 * dt_sec() * spdMod;    
    
    // Length chance //
    if (length &lt; length_goal) length += 60 * dt_sec() * spdMod;
    else if (length &gt; length_goal) length -= 60 * dt_sec() * spdMod;
        
    // Length control //
    if length_goal = 0 then 
        {
        if length &lt;= length_goal then length_goal = 200;
        }
    else if length_goal = 200 then 
        {
        if length &gt;= length_goal then length_goal = 0;
        }
    }
    
// LIGHT PATTERN //
else if light_type = 5 then 
    {
    image_angle -= 60 * dt_sec() * spdMod;
    if light_size &lt; light_size_goal and light_size_goal = 1.5 then light_size += (0.01 * 60) * dt_sec() * spdMod;
    if light_size &gt; light_size_goal and light_size_goal = -1.5 then light_size -= (0.1 * 60) * dt_sec() * spdMod;
    if light_size &gt;= light_size_goal and light_size_goal = 1.5 then light_size_goal = -light_size_goal;
    if light_size &lt;= light_size_goal and light_size_goal = -1.5 then light_size_goal = -light_size_goal;
    }

// LIGHT STAR //
else if light_type = 6 then
    {
    // Limits //
    if x &lt; 16 then 
        {
        hsp = -hsp;
        x = 17;
        }
    if x &gt; room_width-16 then 
        {
        hsp = -hsp;
        x = room_width-17;
        }
    if y &lt; 16 then 
        {
        vsp = -vsp;
        y = 17;
        }
    if y &gt; room_height-16 then 
        {
        vsp = -vsp;
        y = room_height-17;
        }
    image_angle += 120 * dt_sec() * spdMod;
    
    // Boost into a direction //
    if boost &gt; 0 then
        {
        // Tick down //
        boost -= dt();
        
        // Boost //
        if boost &lt;= 0 then
            {
            spd = 5;
            direction = irandom(360);
            boost = 10;
            }
        }
        
    // Color //
    image_blend = color;
    
    // Red color //
    if red &gt; red_goal then red -= 60 * dt_sec() * spdMod;
    if red &lt; red_goal then red += 60 * dt_sec() * spdMod;
    if red = red_goal then
        {
        if red_goal = 0 then red_goal = 150;
        else red_goal = 0;
        }
        
    // Blue color //
    if blue &gt; blue_goal then blue -= 60 * dt_sec() * spdMod;
    if blue &lt; blue_goal then blue += 60 * dt_sec() * spdMod;
    if blue = blue_goal then
        {
        if blue_goal = 0 then blue_goal = 175;
        else blue_goal = 0;
        }
        
    // Mix them together //
    color = make_color_rgb(red, irandom(10), blue);
    }

// LIGHT TV2 //
if light_type = 8 then
    {
    // Stick to the host yo //
    image_index = host.image_index;
    }
    
// stuff
x += hsp * 60 * dt_sec() * spdMod;
y += vsp * 60 * dt_sec() * spdMod;
x += lengthdir_x(spd * 60 * dt_sec() * spdMod, direction);
y += lengthdir_y(spd * 60 * dt_sec() * spdMod, direction);
image_index += imgSpd * 20 * dt_sec() * spdMod;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //

// Adoration //
if light_type = 0 then
    {
    sprite_index = s_mg_booty_light_adoration;
    image_alpha = 0;
    image_alpha_goal = 0.15;
    image_speed = 0.2 + random(0.25);
    image_blend = o_mg_booty_minigame.color;    
    length = irandom(128) + 64;
    direction = irandom(360);
    dir_speed = irandom(6) - irandom(6);
    start = 30;
    }
    
// Cross //
else if light_type = 1 then
    {
    sprite_index = s_mg_booty_light_cross;
    image_alpha = 0.0;
    image_alpha_goal = 0.4;
    image_blend = make_color_rgb(255, 20, 100);
    direction = irandom(360);
    spd = 2;
    hsp = choose(2, -2);
    vsp = choose(2, -2);
    }
    
// Flash //
else if light_type = 2 then
    {
    sprite_index = s_mg_booty_light_flash;
    image_alpha = 0.2;
    image_alpha_goal = 0.4;
    if image_blend = c_white then image_blend = make_color_rgb(255, 40, 120);
    imgSpd = 0.25;
    spotlight = 10;
    }
    
// Hyacinth //
else if light_type = 3 then
    {
    sprite_index = s_mg_booty_light_hyacinth;
    image_alpha = 0;
    image_alpha_goal = 0.5;
    image_blend = make_color_rgb(60, 255, 10);    
    //image_speed = 0.2;
    //image_index = image_number-1;
    var lgt = id;
    with (o_hyacinth01)
    {
        var curAni = ANIMATION_DEFAULT;
        var frm = scr_entity_animation_getImage(curAni);
        lgt.image_index = frm;
    }
    }
    
// Orbit //
else if light_type = 4 then
    {
    sprite_index = s_mg_booty_light_orbit;
    image_alpha = 0;
    image_alpha_goal = 0.25;
    image_blend = make_color_rgb(20, 240, 80);
    length_goal = 200;
    length = irandom(100);
    }
    
// PATTERN //
else if light_type = 5 then
    {
    sprite_index = s_mg_booty_light_pattern; 
    image_alpha = 0;
    image_alpha_goal = 0.8;
    light_size = -1;
    light_size_goal = 1.5;
    imgSpd = 0.3;
    image_blend = make_color_rgb(255, 20, 10);
    }
    
// Star //    
else if light_type = 6 then
    {
    sprite_index = s_mg_booty_light_star;
    image_alpha = 0;
    image_alpha_goal = 0.5;
    image_blend = make_color_rgb(50, 200, 10);
    direction = irandom(360);
    speed = 0;
    friction = 0.1;
    boost = 5 + instance_number(o_mg_booty_light) * 5;
    red = 50;
    red_goal = 0;
    blue = 0;
    blue_goal = 175;
    color = make_color_rgb(red, irandom(50), blue);
    }  
    
// TV 1 //    
else if light_type = 7 then
    {
    sprite_index = s_mg_booty_light_tv;
    image_alpha = 0;
    image_alpha_goal = 0.4;
    image_blend = make_color_rgb(100, 255, 255);
    imgSpd = 0.2;
    }
    
// TV 2 //
else if light_type = 8 then
    {
    sprite_index = s_mg_booty_light_tv2;
    image_alpha = 0;
    image_alpha_goal = 0.5;
    image_blend = make_color_rgb(255, 100, 100);
    image_speed = 0;
    host = instance_nearest(x, y, o_mg_booty_tv2);
    }
    
// Visible //
visible = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Necessary, trust me //
draw_set_blend_mode(bm_add);
if (light_type == 5) draw_sprite_ext(sprite_index, image_index, x, y, light_size, light_size, image_angle, image_blend, image_alpha);
else draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>64,64</point>
    <point>64,64</point>
  </PhysicsShapePoints>
</object>
