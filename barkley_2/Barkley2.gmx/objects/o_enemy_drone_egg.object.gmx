<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEnemyDroneEgg</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>EnemyCombatActor</parentName>
  <maskName>mask_rect_16by16</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
event_inherited();
scr_enemyDB_statsGet(enemyBuild);
scr_entity_setZHitbox(0, 24);
combatActor_setRenderSurfSize(128);
ailmentTotem_define(self.id, -5, 20, 0, 40);
scr_path_setMovementType(scr_path_movementType_8way);
scr_path_setWalldist(12+random(10));

facDir = 0;
basSub = 0;
xsc = 1;
ysc = 1;
wlkSpd = 4; // 4 frames a second
wlkInd = 0;
shkSpd = 8;
shkInd = 0;
shkXin = 0;
shkYin = 0;
anim = 0;
animSpd = 0.2;
animStrike = 0;

deathSound = "junkbot_death";
damageSound = "junkbot_hurt";
//hook_hitfx = enemy_hitfx_cgremlins;

// Passive and active states
var guard = scr_AI_addPassiveState(scr_AI_passive_guard);

activeApproach = scr_AI_addActiveState(scr_AI_active_approach);
activeCircle = scr_AI_addActiveState(scr_AI_active_circle);
activeCircle[? "switchAddMaxDist"] = 80;
activeCircle[? "switchPriority"] = 10;
activeRetreat = scr_AI_addActiveState(scr_AI_active_retreat);
activeRetreat[? "switchPriority"] = 20;
activeRetreat[? "switchDisablePush"] = true;

// Movement
var movement = scr_AI_movement_init(scr_AI_movementType_standard);
movement[? "dirOffsetMax"] = 40;
activeApproach[? "walkScript"] = movement;
activeCircle[? "walkScript"] = movement;
activeRetreat[? "walkScript"] = movement;

ds_map_replace(guard, "sndAlertSound", "junkbot_alert");

// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// Charge
attack = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_action_charge);
Attack("assign", action, "stun", 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
attack[? "action"] = action; 
action[? "sndAttackWarn"] = "junkbot_attack";
action[? "sndAttackStrike"] = "junkbot_shot";
action[? "doRetreat"] = true; 
attack[? "distMax"] = 90;
attack[? "cooldownTime"] = 25; 
attack[? "cooldownTimeRnd"] = 30;
attack[? "rechargeTime"] = 5;
attack[? "rechargeTimeRnd"] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if paused() exit;

if(a_attackName=="slash") {
    switch(a_attackState)
    {
        case "before": animStrike+=1; break;
        case "attack": animStrike =0; break;
        case "after": animStrike+=1; break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Death FX
scr_fx_explosion_spawn_at(x, y, z, 2);
if Quest("factoryEggs") &lt; 1 then 
    {
    Quest("factoryEggs", 1);
    scr_entity_animation_set(o_fct_eggComputer01, "error");  
    }

var debris = irandom(6) + 3;
repeat (debris) {
    var gib = instance_create(x + 8 - random(16),y + 8 - random(16),o_gibs);
    gib.sprite_index = s_enemyDeath_parts;
    gib.image_index = irandom(sprite_get_number(s_enemyDeath_parts)-1);
    gib.z = z + 4 + random(32);
    gib.timer = 600;
    gib.move_z = 12 + random(16);
    gib.bloodburst = noone;
    gib.splatSound = "junkbot_death_partclink";
    gib.rot = 0;
    
    with gib {
        scr_entity_setDirSpd(random(360), 4 + random(30));
        scr_entity_setShadowSprite(sprite_index, image_index, 0, 0);
    }
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

var _dirdir = ((faceDir+360)mod 360) div 90;
var _odir = ((faceDir+360)mod 360);
facDir = faceDir mod 360;
wlkInd += wlkSpd * dt_sec();
shkInd += shkSpd * dt_sec();
if (a_attackName == "stagger")
{
    shkXin += dt_sec() * 5;
    shkYin += dt_sec() * 5;
    draw_sprite_ext(sEnemyDroneEgg, basSub + 0, dx + lengthdir_x(1, shkXin * 90), dy + lengthdir_y(1, shkYin * 125), xsc, ysc, 0, c_white, 1); 
}
else if (a_attackName == "charge")
{
    switch(a_attackState)
    {
        case "before":
            draw_sprite_ext(sEnemyDroneEgg, basSub + 0 + (shkInd mod 4), dx, dy, xsc, ysc, 0, c_white, 1);
            break;
            
        case "approach":
            draw_sprite_ext(sEnemyDroneEgg, basSub + 1 + (shkInd mod 4), dx, dy, xsc, ysc, 0, c_white, 1);
            break;
            
        case "attack":
            draw_sprite_ext(sEnemyDroneEgg, basSub + 7, dx, dy, xsc, ysc, 0, c_white, 1);
            break;
        
        case "after":
            draw_sprite_ext(sEnemyDroneEgg, basSub + 8, dx, dy, xsc, ysc, 0, c_white, 1);
            break;
    }
}
else
{
    if (facDir &lt; 0 || facDir &gt; 180) 
    {
        basSub = 0;
        if (facDir &lt; 270) xsc = -1; else xsc = 1;
    }
    else 
    {
        basSub = 13;
        if (facDir &lt; 90) xsc = -1; else xsc = 1;
    }
    draw_sprite_ext(sEnemyDroneEgg, basSub + 9 + (wlkInd mod 4), dx, dy, xsc, ysc, 0, c_white, 1);
}

combatActor_draw_post();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>14,18</point>
    <point>14,14</point>
  </PhysicsShapePoints>
</object>
