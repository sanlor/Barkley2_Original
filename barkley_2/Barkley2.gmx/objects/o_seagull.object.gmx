<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_seagull</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>EnemyCombatActor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

invulnerable = true;
targetable = false;
can_leave_room = true;

scr_AI_disable(true);
scr_AI_hearing_hookUserEvent(1);
scr_AI_hearing_setHearingDistanceModifer(0.25);

gravity_z = 0;

scr_entity_setCollisionType(COLLISION_NONE);
scr_actor_setActorPushType(ACTOR_COLLISIONPUSH_NONE);

scr_entity_animation_define("idle", s_seagull, 0, 1, 0); 
scr_entity_animation_define("fly", s_seagull, 1, 6, 1.5);

flyDir = choose(1, -1);
lookDir = flyDir;
if flyDir = -1 then flyDir = 180 - irandom(30);
else flyDir = irandom(30);
flying = false;
flyingAwayFrom = noone;
didAlertSound = false;

soundWingflap = "seagull_wingflap";
soundAlert = "seagull_caw"; // A cawing sound when getting scared and flying away
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Inheritance and pause //
event_inherited();
if paused() exit;

// If already flying... //
if (flying) {
    scr_entity_setDirSpd(flyDir, 22);
    move_z = 5;
    
    if (!didAlertSound) {
        audio_play_sound_at_xy(soundAlert, false, 0, x, y);
        didAlertSound = true;
    }
    
    // Alert nearby enemies of Hoopz
    if (instance_exists(flyingAwayFrom)) {
        scr_AI_hearing_makeSound(flyingAwayFrom, x, y, 600, 300);
    }
    
    // Play sound
    if (scr_entity_animation_onFrame("fly", 1)) {
        audio_play_sound_at_xy(soundWingflap, false, 0, x, y);
    }
    
    // Destroy after reaching some altitude
    if (z &gt;= 200) {
        instance_destroy();
    }
    
// If idling on the ground //
} else {
    scr_entity_setDirSpd(move_dir, 0);
    
    // Fly if hoopz, enemy, or an attack, is nearby
    if (instance_exists(o_hoopz)) {
        if (point_distance(x, y, o_hoopz.x, o_hoopz.y) &lt; 45) {
            flying = true;
            //flyDir = point_direction(o_hoopz.x, o_hoopz.y, x, y);
            flyingAwayFrom = o_hoopz;
            event_user(2);
        }
    }
    if (instance_exists(CombatAttackEntity)) {
        var obj = instance_nearest(x, y, CombatAttackEntity);
        if (obj != noone and instance_exists(obj)) {
            if (point_distance(x, y, obj.x, obj.y) &lt; 45) {
                flying = true;
                //flyDir = point_direction(obj.x, obj.y, x, y);
                flyingAwayFrom = obj;
                event_user(2);
            }
        }
    }
    
    var nearestEnemy = noone;
    var nearestEnemyDist = 45;
    var myX = x;
    var myY = y;
    with (EnemyCombatActor) {
        if (object_index != o_seagull and point_distance(x, y, myX, myY) &lt; nearestEnemyDist) {
            nearestEnemy = id;
            nearestEnemyDist = point_distance(x, y, myX, myY); 
        }
    }
    if (nearestEnemy != noone and instance_exists(nearestEnemy)) {
        flying = true;
        //flyDir = point_direction(nearestEnemy.x, nearestEnemy.y, x, y);
        flyingAwayFrom = nearestEnemy;
        event_user(2);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Leave feathers

for (i=0; i&lt;irandom_range(2,3); i++)
{
    _obj = instance_create(x,y,o_FX);
    _obj.sprite_index = s_seagull_feather;
    _obj.image_index = irandom(6);
    _obj.image_angle = choose(0,90,180,270);
    _obj.image_speed=random_range(0.1,0.3);
    _obj.speed = random_range(1,2);
    _obj.friction = random_range(0.2,0.5);
    _obj.x = x - 4 + irandom(8);
    _obj.y = y - 4 + irandom(8);
    _obj.depth = -99999;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Fly away from source actor

if (instance_exists(AI_hearing_source_actor) and AI_hearing_source_actor.object_index != o_seagull) {
    flyDir = point_direction(AI_hearing_source_actor.x, AI_hearing_source_actor.y, x, y);
    flying = true;
    flyingAwayFrom = AI_hearing_source_actor;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

var flip = 1;
var anim = "idle";

if (move_dist &gt; 0) {
    anim = "fly";
} else {
    flip = lookDir;
}

if move_x &lt; 0 then flip = -1;
else flip = 1;

draw_sprite_ext(
        scr_entity_animation_getSpriteIndex(anim),
        scr_entity_animation_getImage(anim),
        dx, dy, flip, 1, 0, c_white, 1);
        
combatActor_draw_post();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
