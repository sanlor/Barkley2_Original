<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_junkworm_head</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>EnemyCombatActor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Disabled AI
scr_AI_disable(true);

scr_entity_setCollisionType(COLLISION_NONE);
scr_actor_setActorPushType(ACTOR_COLLISIONPUSH_NONE);
scr_entity_setShadowSprite(sprite_index, 0, 0, 0);

state = "idle"; // idle, jump
timer = 10 + random(40); // Random start timer

restX = x;
restY = y;
targetX = x;
targetY = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited(); 

switch (state) {
    case "idle":
        timer -= dt();
        if (timer &lt;= 0) {// On appear:
            // 1: Pick appear point
            /*
                An appear point must be nearby, traceable from me, and with maximum 1 points on the
                way being free. If hoopz is near any of the possible points, choose that one 50% of time.
            */ 
            var appearPoints = ds_list_create();
            var myX = x;
            var myY = y;
            var appearPointClosestHoopz = noone;
            var appearPointClosestHoopzDist = 200;
            
            with (o_enemy_junkworm_appearPoint) {
                var dist = point_distance(myX, myY, x, y);
                if (dist &lt; 300) {
                    var dir = point_direction(myX, myY, x, y);
                    var freePoints = 0;
                    for (var i = 0; i &lt;= 1; i += 0.1) {
                        if (scr_collision_point_free(myX + lengthdir_x(i*dist, dir), myY + lengthdir_y(i*dist, dir), z, COLLISION_NORMAL)) {
                            freePoints++;
                        }
                    }
                    if (freePoints &lt;= 1) {
                        ds_list_add(appearPoints, id);
                        if (instance_exists(o_hoopz)) {
                            var hoopzDist = point_direction(o_hoopz.x, o_hoopz.y, x, y);
                            if (hoopzDist &lt;= appearPointClosestHoopzDist) {
                                appearPointClosestHoopzDist = hoopzDist;
                                appearPointClosestHoopz = id;
                            }
                        }
                    }
                }
            }
            
            if (ds_list_size(appearPoints) &gt; 0) {
                var appearPoint;
                if (appearPointClosestHoopz != noone and random(2) &gt;= 1) {
                    appearPoint = appearPointClosestHoopz;
                } else {
                    appearPoint = ds_list_choose(appearPoints);
                }
                var appearX = appearPoint.x;
                var appearY = appearPoint.y;
                
                // 2: Pick land point
                /*
                    A land point must be nearby, and with minimum 70% of the points on the way being
                    free.
                */
                var landPoints = ds_list_create();
                var landPointClosestHoopz = noone;
                var landPointClosestHoopzDist = 200;
                
                with (o_enemy_junkworm_appearPoint) {
                    var dist = point_distance(appearX, appearY, x, y);
                    if (dist &lt; 200 and dist &gt;= 48) {
                        var dir = point_direction(appearX, appearY, x, y);
                        var freePoints = 0;
                        for (var i = 0; i &lt;= 1; i += 0.1) {
                            if (scr_collision_point_free(appearX + lengthdir_x(i*dist, dir), myY + lengthdir_y(i*dist, dir), z, COLLISION_NORMAL)) {
                                freePoints++;
                            }
                        }
                        if (freePoints &gt;= 7) {
                            ds_list_add(landPoints, id);
                            var hoopzDist = point_direction(o_hoopz.x, o_hoopz.y, x, y);
                            if (hoopzDist &lt;= landPointClosestHoopzDist) {
                                landPointClosestHoopzDist = hoopzDist;
                                landPointClosestHoopz = id;
                            }
                        }
                    }
                }
                
                if (ds_list_size(landPoints)) {
                    // 3: Jump there!
                    var landPoint;
                    if (landPointClosestHoopz != noone and random(2) &gt;= 1) {
                        landPoint = landPointClosestHoopz;
                    } else {
                        landPoint = ds_list_choose(landPoints);
                    }
                    restX = appearPoint.x;
                    restY = appearPoint.y;
                    targetX = landPoint.x;
                    targetY = landPoint.y;
                    state = "jump";
                    timer = 1;
                }
                
                ds_list_destroy(landPoints);
            }
            ds_list_destroy(appearPoints);
            
            
        }
        break;
    
    case "jump":
        timer -= dt() / 25;
        x = restX + ((targetX - restX) * (1-timer));
        y = restY + ((targetY - restY) * (1-timer));
        z = 10 + sin(timer*pi)*30;
        if (timer &lt;= 0) {
            state = "idle";
            timer = 20 + random(30);
        }
        break;
}


// 4: Land and wait
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == "jump") {
    event_inherited();
    draw_sprite(sprite_index, 0, dx, dy);
}

combatActor_draw_post();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
