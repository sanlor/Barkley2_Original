<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2510000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
// All positions here are relative to where the hud is positioned
Marquee("create");

hudX = 0;
hudY = 240 - sprite_get_height(s_hud_bar);
hudVisibleForce = 0;
hudHide = global.hudStick; // 0 to 1 value that slides hud into view, 1 = in view
global.hudStick = 0;
hudHideSpeed = 0.4; // Time in seconds how long it takes HUD to emerge from hide
hudActive = 1;
hudColorBG = make_color_rgb(19, 19, 25);
hudOnce = 0; // For weight marker right now

hudDrawCount = 0;
hudDrawTranshumanism = 1;
for (i = 0; i &lt; 5; i += 1) hudDrawGlamp[i] = 1;
hudDrawGun = 1;
hudDrawAmmo = 1; hudDrawWeight = 1;
hudDrawPeriodic = 1;
hudDrawPockets = 1;
hudDrawMarquee = 1;
hudDrawWifi = 1;

// Message Show
messageShow = "";
messageTime = 0;
messageCount = 0;

// Ammo counter
ammoNone = 0; // When 1, count down and do red flash
ammoFlash = 0; // Counter for ammo flash
ammoX = 6;
ammoY = 9;
ammoColorInactive = make_color_rgb(19, 55, 55);
ammoColorActive = make_color_rgb(135, 210, 190)
ammoColorCharge = make_color_rgb(50, 180, 240);
ammoColorEmpty = make_color_rgb(170, 50, 50);//make_color_rgb(50, 100, 90);

// Gun box
gunX = 65;
gunY = 6;
// Gun variables
gunHolstered = 0;
gunLines = 2;
gunSwap = 0; // Taken from o_hoopz
gunEquipped = NULL;
gunCharge = 0; // Periodic charge taken from gun
gunChargeAlpha = 0; //
gunBullets = 0; // Bullets left in gun

// TV
tvX = (368 / 2) - floor(sprite_get_width(s_hud_tv) / 2);
tvY = 0;
tvBlink = 0; // 0 - 360
faceX = 162;
faceY = 5;
faceCount = 2;
faceGlance = 0;
faceWait = 0;
textX = faceX + 35;
textY = faceY + 15;
textColor = make_color_rgb(112, 0, 0);
player_hp = 0;
lvlupimg = 0;
// Variables
hp = 50;
hpMax = 100;

// Scale
scaleX = 120;
scaleY = 5;
HUD("setup scale");

// Charge
chargeX = 135;
chargeY = 5;
chargeSin = 0;
// Charge variables
chargeSprite = s_hud_charge;
chargeIndex = 0;

// DNA
dnaX = 261;
dnaY = 5;
dnaSpeed = -7.5;
dnaWidth = 46;
dnaAnim = 0; // Goes up to 19
// DNA Variables
dnaBio = 25;
dnaCosmic = 25;
dnaCyber = 25;
dnaZauber = 25;

// GLAMP
glampX = 311;
glampY = 5;
// GLAMP Variables
glampBase[0] = 85;
glampBase[1] = 25;
glampBase[2] = 40;
glampBase[3] = 30;
glampBase[4] = 60;
glampCurrent[0] = 85 - 5;
glampCurrent[1] = 25;
glampCurrent[2] = 40 + 10;
glampCurrent[3] = 30;
glampCurrent[4] = 60;

// WIFI
wifiX = 361;
wifiY = 5;
// WIFI Variables
wifiConnectivity = 0;
wifiDir = 0;

// Candy
candyX = 221;
candyY = 5;
// Candy Variables
candySprite = NULL;
candyIndex = 0

// Zauber
zauberX = 241;
zauberY = 5;
// Zauber Variables
zauberPos = NULL;

// OLD HUD STUFF
moneyCount = 0;
moneyShow = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shake apply
if paused() exit;
Shake("apply");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hudActive = !global.event and !instance_exists(ustation);

if paused() exit;

ClockTime("step");
chargeSin += dt();

// Level up icon //
if lvlupimg &lt;= 9 then lvlupimg += 5 * dt_sec();
else lvlupimg = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Money show and gun swap
// gun swap (replace)
if (!scr_player_getGunHolstered()) gcc = make_color_rgb(177,223,190);
else gcc = make_color_rgb(19,55,55);
//d3d_set_fog(1, gcc, 0, 0);
var gunShw = 0;
with (o_hoopz)
{
    gunPouchShow = Goto(gunPouchShow, 0, dt_sec() * 15);
    gunCountShow = Goto(gunCountShow, 0, dt_sec() * 15);
    if (gunPouchShow != 0|| gunCountShow != 0) gunShw = 1;
}

if (messageShow != "" &amp;&amp; gunShw == 0)
{
    draw_set_font(global.fn_small);
    draw_set_alpha(abs(1 - (messageCount / messageTime)))
    draw_text(x + 5, y - 8, messageShow);
    draw_set_alpha(1);
    messageCount = Goto(messageCount, messageTime, dt_sec());
    if (messageCount == messageTime)
    {
        messageCount = 0;
        messageShow = "";
    }
}

if (moneyShow &gt; 0)
{
    draw_set_font(global.fn_small);
    draw_set_alpha(median(0,1,moneyShow/5))
    //draw_text(x+220,y-8,"NEURO SHEKELS "+ string(moneyCount));
    draw_set_alpha(1);
    if(moneyCount == scr_money_count()) moneyShow -= dt_sec() * 1.5;
    else moneyCount = Goto(moneyCount, scr_money_count(), dt() * 6);
}

if(gunEquipped != NULL &amp;&amp; ds_exists(gunEquipped, ds_type_map))
{
    charge = gunEquipped[? "pChargeRatio"];

    if(o_hoopz.gunPouchShow&gt;0)
    {
        draw_set_font(global.fn_small);
        draw_set_alpha(median(0,1,o_hoopz.gunPouchShow/5))
        draw_text(x+5,y-8, string_upper(GunMap(gunEquipped, "model")));
        draw_set_alpha(1);
    }
    
    if(o_hoopz.gunCountShow&gt;0)
    {
        draw_set_font(global.fn_small);
        draw_set_alpha(median(0,1,o_hoopz.gunCountShow/5))
        draw_text(x+320,y-26, string_upper("gun pouch:#" +
               string(scr_equipment_guns_bag_getSlotsUsed()) + "-" +
               string(scr_equipment_guns_bag_getSlotsTotal() - scr_equipment_guns_bag_getSlotsUsed())));
        draw_set_alpha(1);
    }
    
    d3d_set_fog(1, gcc, 0, 0);
    var hudspr = assetOrNull(gunEquipped[? "hudIconSprite"], asset_sprite);
    if (hudspr != NULL) {
        HUD("gun draw", hudspr, gunEquipped[? "hudIconFrame"], x + gunX + 2, y + gunY + 2, 1, 1, gunEquipped[? "col"], gunSwap); //o_hoopz.swaptick / 6);
    }

    if(o_hoopz.gunPouchShow&gt;20)
    {
        var _nb,_i,_gn,_in;
        if (scr_equipment_guns_bandolier_equippedFrom()) {
            _nb = scr_equipment_guns_bandolier_getSlotsUsed();
            _in = scr_equipment_guns_bandolier_getSlot(scr_equipment_guns_getCurrentGun());
        } else {
            _nb = 1;
        }
        _sep = 240/_nb;
        for(_i=0; _i&lt;_nb; _i+=1)
        {
            if (scr_equipment_guns_bandolier_equippedFrom()) //Pouch
            { 
                _gn = scr_equipment_guns_bandolier_getGun(_i);
                if(_i==_in){_a=1;}else{_a=0.5;} 
            }
            else //Bag
            { 
                _gn = Gun("index to object", Gun("current"));
                _a = 1; 
            }
            if(o_hoopz.gunPouchShow&lt;25){_a = _a*((o_hoopz.gunPouchShow-20)/5);}
            d3d_set_fog(1, gcc, 0, 0);
            if (_gn != NULL &amp;&amp; ds_exists(_gn, ds_type_map)) hudspr = assetOrNull(_gn[? "hudIconSprite"], asset_sprite);
            else hudspr = NULL;
            if (hudspr != NULL) {
                HUD("gun draw", hudspr,_gn[? "hudIconFrame"],x+92-24+_sep*_i,y-24,0.7,0.7,_gn[? "col"],_a);
            }

            
            draw_set_font(global.fn_small);
            draw_set_alpha(_a);
            d3d_set_fog(false, 0, 0, 0);
            draw_text(x+92-24+_sep*_i + 6,y-24 - 10,string_upper(string(floor(_gn[? "pCurAmmo"]))));
            draw_set_alpha(1);
        }
    }
}   
     
d3d_set_fog(false, 0, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HUD expose more drawing elements
if (hudDrawCount == 0) hudDrawTranshumanism = 0.01;
if (hudDrawCount == 1) hudDrawGlamp[0] = 0.01; // G
if (hudDrawCount == 2) hudDrawGlamp[1] = 0.01; // L
if (hudDrawCount == 3) hudDrawGlamp[2] = 0.01; // A
if (hudDrawCount == 4) hudDrawGlamp[3] = 0.01; // M
if (hudDrawCount == 5) hudDrawGlamp[4] = 0.01; // P
if (hudDrawCount == 6) hudDrawGun = 0.01;
if (hudDrawCount == 7) { hudDrawAmmo = 0.01; hudDrawWeight = 0.01; }
if (hudDrawCount == 8) hudDrawPeriodic = 0.01;
if (hudDrawCount == 9) hudDrawPockets = 0.01;
if (hudDrawCount == 10) hudDrawMarquee = 0.01;
if (hudDrawCount == 11) hudDrawWifi = 0.01;
hudDrawCount += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Hide all HUD elements
hudDrawTranshumanism = 0;
for (i = 0; i &lt; 5; i += 1) hudDrawGlamp[i] = 0;
hudDrawGun = 0;
hudDrawAmmo = 0; hudDrawWeight = 0;
hudDrawPeriodic = 0;
hudDrawPockets = 0;
hudDrawMarquee = 0;
hudDrawWifi = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// hudVisibleForce = 1;
hudVisibleForce = 1;
depth = -2510005;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// hudVisibleForce = 0;
hudVisibleForce = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Room End Marquee
Marquee("room end");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
Cyberspear("draw"); // For CGREM quest
if (hudVisibleForce == 0)
{
    if (instance_exists(o_hud_stealther) || Quest("hudVisible") == 0) exit;
}
else 
{
    var hudDrwSpd = 1 * dt_sec();
    if (hudDrawTranshumanism &gt; 0) hudDrawTranshumanism = Goto(hudDrawTranshumanism, 1, hudDrwSpd);
    for (i = 0; i &lt; 5; i += 1) 
    {
        if (hudDrawGlamp[i] &gt; 0) hudDrawGlamp[i] = Goto(hudDrawGlamp[i], 1, hudDrwSpd);
    }
    if (hudDrawGun &gt; 0) hudDrawGun = Goto(hudDrawGun, 1, hudDrwSpd);
    if (hudDrawAmmo &gt; 0) 
    { 
        hudDrawAmmo = Goto(hudDrawAmmo, 1, hudDrwSpd);
        hudDrawWeight = Goto(hudDrawWeight, 1, hudDrwSpd);
    }
    if (hudDrawPeriodic &gt; 0) hudDrawPeriodic = Goto(hudDrawPeriodic, 1, hudDrwSpd);
    if (hudDrawPockets &gt; 0) hudDrawPockets = Goto(hudDrawPockets, 1, hudDrwSpd);
    if (hudDrawMarquee &gt; 0) hudDrawMarquee = Goto(hudDrawMarquee, 1, hudDrwSpd);
    if (hudDrawWifi &gt; 0) hudDrawWifi = Goto(hudDrawWifi, 1, hudDrwSpd);
    hudActive = 1;
}

///@@@ Set variables @@@///
gunSwap = o_hoopz.swaptick / 6;
gunHolstered = scr_player_getGunHolstered();
gunEquipped = scr_player_equip("object");

// CHARGE
if (gunEquipped != NULL &amp;&amp; ds_exists(gunEquipped, ds_type_map)) gunCharge = gunEquipped[? "pChargeRatio"];
else gunCharge = 0;

// Ammo and weight
if (gunEquipped != NULL &amp;&amp; ds_exists(gunEquipped, ds_type_map)) 
{
    gunBullets = floor(gunEquipped[? "pCurAmmo"]);
    gunSprite = assetOrNull(gunEquipped[? "hudIconSprite"], asset_sprite);
    gunLines = global.gunSize[? gunSprite];
    gunLines = (8 / 97) * gunLines; // gunLines is now a value of 26 to 97, a difference of 71 !!!
    gunLines = (8 + ((8 / 97) * 26)) - gunLines;
    if (global.gunSize[? gunSprite] == 97) gunLines = 2;
}
else 
{
    gunBullets = 0;
    gunSprite = s_null; //1x1;
    gunLines = 2;
}

// Get holding candy
var candyPos = Candy("current");
if (candyPos != NULL) 
{
    var candy = scr_items_get(ITEMTYPE_CANDY, candyPos);
    var candyName = Candy("name", candy); // CandyMap
}

// Get zauber
zauberPos = Zauber("slot");

// DNA
dnaBio = scr_savedata_get("player.humanism.bio");
dnaCyber = scr_savedata_get("player.humanism.cyber");
dnaCosmic = scr_savedata_get("player.humanism.cosmic");
dnaZauber = scr_savedata_get("player.humanism.zauber");

// TV
if (instance_exists(o_hoopz)) 
{
    hp = ceil(scr_stats_getCurrentStat(o_hoopz, STAT_CURRENT_HP));
    hp = max(0, hp);
    hpMax = ceil(scr_stats_getEffectiveStat(o_hoopz, STAT_EFFECTIVE_MAX_HP));
    if (hpMax == 0) player_hp = 0; else player_hp = hp / hpMax;
}
else player_hp = 0;
player_hp = clamp(player_hp, 0, 1);

// GLAMP
if (instance_exists(o_hoopz)) 
{
    glampBase[0] = scr_stats_getBaseStat(o_hoopz, STAT_BASE_GUTS);
    glampBase[1] = scr_stats_getBaseStat(o_hoopz, STAT_BASE_LUCK);
    glampBase[2] = scr_stats_getBaseStat(o_hoopz, STAT_BASE_AGILE);
    glampBase[3] = scr_stats_getBaseStat(o_hoopz, STAT_BASE_MIGHT);
    glampBase[4] = scr_stats_getBaseStat(o_hoopz, STAT_BASE_PIETY);
    glampCurrent[0] = scr_stats_getEffectiveStat(o_hoopz, STAT_BASE_GUTS);
    glampCurrent[1] = scr_stats_getEffectiveStat(o_hoopz, STAT_BASE_LUCK);
    glampCurrent[2] = scr_stats_getEffectiveStat(o_hoopz, STAT_BASE_AGILE);
    glampCurrent[3] = scr_stats_getEffectiveStat(o_hoopz, STAT_BASE_MIGHT);
    glampCurrent[4] = scr_stats_getEffectiveStat(o_hoopz, STAT_BASE_PIETY);
}

// WiFi
if (instance_exists(o_room_wifiControl)) wifiConnectivity = o_room_wifiControl.connectivity;
else wifiConnectivity = 0;

///@@@ Set variables @@@///

// HUD
x = view_xview + hudX;
y = view_yview + hudY + (sprite_get_height(s_hud_bar) * abs(1 - hudHide));
if (hudActive) hudHide = min(hudHide + (dt_sec() / hudHideSpeed), 1);
else hudHide = max(hudHide - (dt_sec() / hudHideSpeed), 0);
draw_sprite_ext(s1x1, 0, x, y, sprite_get_width(s_hud_bar), sprite_get_height(s_hud_bar), 0, hudColorBG, image_alpha);
if (hudDrawMarquee &gt; 0) Marquee("draw", hudDrawMarquee); // Marquee must be drawn here
if (hudDrawMarquee == 0) draw_sprite_ext(s_hud_bar, 1, x, y, 1, 1, 0, c_white, image_alpha);
else draw_sprite_ext(s_hud_bar, 0, x, y, 1, 1, 0, c_white, image_alpha);

// Ammo counter
if (hudDrawAmmo &gt; 0)
{
    if (gunBullets == 0) ammoNone = 1; else ammoNone = 0;
    if (gunEquipped == NULL || ds_exists(gunEquipped, ds_type_map) == 0) ammoNone = 0;
    amn = (ammoFlash * 3) mod 1;
    if (paused() == false) ammoFlash += dt_sec();
    col = hudColorBG;
    if (ammoNone &gt; 0) col = merge_color(col, c_red, amn / 2);
    draw_sprite_ext(s1x1, 0, x + ammoX, y + ammoY, sprite_get_width(s_hud_ammo), sprite_get_height(s_hud_ammo), 0, col, image_alpha * hudDrawAmmo);
    draw_sprite_ext(s_hud_ammo, 0, x + ammoX, y + ammoY, 1, 1, 0, c_white, image_alpha * hudDrawAmmo);
    draw_set_font(global.fn_hud);
    draw_set_color(ammoColorInactive);
    draw_set_alpha(image_alpha * hudDrawAmmo);
    if (ammoNone &gt; 0) draw_set_color(merge_color(ammoColorInactive, c_red, amn / 2));
    draw_text(x + ammoX + 2, y + ammoY + 2, "8888");
    if (paused() == false) { if (gunCharge &gt;= 1) gunChargeAlpha = random_range(0.5, 1); else gunChargeAlpha = 0; }
    if (gunCharge &gt;= 1) { draw_set_color(ammoColorCharge); draw_set_alpha(image_alpha * gunChargeAlpha * hudDrawAmmo); }
    else 
    { 
        if (gunBullets == 0) draw_set_color(ammoColorEmpty);
        else draw_set_color(ammoColorActive); 
        draw_set_alpha(image_alpha * hudDrawAmmo); 
    }
    draw_set_halign(2);
    if (gunBullets == 0) 
    {
        draw_set_color(ammoColorEmpty);
        draw_set_alpha(image_alpha * hudDrawAmmo); 
        if (ammoNone &gt; 0)
        {
            draw_set_color(merge_color(ammoColorEmpty, c_red, amn));
        }
        draw_text(x + ammoX + 2 + 56, y + ammoY + 2, "0000");
    }
    else draw_text(x + ammoX + 2 + 56, y + ammoY + 2, string(gunBullets));
    draw_set_halign(0);
    draw_set_alpha(image_alpha);
}

// Gun box
if (hudDrawGun &gt; 0)
{
    col = hudColorBG;
    if (ammoNone &gt; 0) col = merge_color(hudColorBG, c_red, amn / 2);
    draw_sprite_ext(s1x1, 0, x + gunX, y + gunY, sprite_get_width(s_hud_gun), sprite_get_height(s_hud_gun), 0, col, image_alpha * hudDrawGun);
    
    // Gun lines
    dx = x + gunX + 26;
    dy = y + gunY + 15;
    col = make_color_rgb(0, 72, 72);
    if (ammoNone &gt; 0) col = merge_color(col, c_red, amn);
    linColCon = merge_color(col, make_color_rgb(255, 255, 255), gunSwap); //o_hoopz.swaptick / 6);
    for (h = 0; h &lt; 2; h += 1)
    {
        if (h == 0) { linAlp = 1 * hudHide; linCol = c_black; } //c_black - alpha obsolete
        else { linAlp = 0.5 * hudHide; linCol = linColCon; draw_set_colour_write_enable(true, true, true, false); }
        //Do horz lines
        draw_sprite_ext(s1x1, 0, x + gunX, dy, 52, 1, 0, linCol, linAlp * hudDrawGun);
        for (i = gunLines; i &lt; 13; i += gunLines) draw_sprite_ext(s1x1, 0, x + gunX, dy + i, 52, 1, 0, linCol, linAlp * hudDrawGun);
        for (i = gunLines; i &lt; 14; i += gunLines) draw_sprite_ext(s1x1, 0, x + gunX, dy - i, 52, 1, 0, linCol, linAlp * hudDrawGun);
        //Do vert lines
        draw_sprite_ext(s1x1, 0, dx, y + gunY, 1, 26, 0, linCol, linAlp * hudDrawGun);
        for (i = gunLines; i &lt; 25; i += gunLines) draw_sprite_ext(s1x1, 0, dx + i, y + gunY, 1, 26, 0, linCol, linAlp * hudDrawGun);
        for (i = gunLines; i &lt; 26; i += gunLines) draw_sprite_ext(s1x1, 0, dx - i, y + gunY, 1, 26, 0, linCol, linAlp * hudDrawGun);
    }
    draw_set_colour_write_enable(true, true, true, true);
    
    // Gun box overlay (moved above gun'sbag so it draws underneath the bleed
    draw_sprite_ext(s_hud_gun, 0, x + gunX, y + gunY, 1, 1, 0, c_white, image_alpha * hudDrawGun);
    
    // Gun image
    if (gunEquipped != NULL  &amp;&amp; ds_exists(gunEquipped, ds_type_map))
    {
        if (gunSprite != NULL) 
        {
            gunCountBandolier = scr_equipment_guns_bandolier_getSlotsUsed();
            gunIsBagged = true;
            for (i = 0; i &lt; gunCountBandolier; i += 1)
            {
                if (gunEquipped == scr_equipment_guns_bandolier_getGun(i)) gunIsBagged = false;
            }
            if (gunIsBagged) draw_sprite_ext(s_hud_gunsbag01, 0, x + gunX + 1 , y + gunY - 2, 1, 1, 0, c_white, image_alpha * (1.0 - (0.6 * gunHolstered)) * hudDrawGun);
            // old gun's bag sprite: x + 2 + 19, y + 2 + 1
            var hudmat = gunEquipped[? "hudIconFrame"];
            HUD("gun draw", gunSprite, hudmat, x + gunX + 2, y + gunY + 2, 1, 1, gunEquipped[? "col"], image_alpha * (1.0 - (0.6 * gunHolstered)) * hudDrawGun);
        }
    }
}

// TV / Doom Face
draw_sprite_ext(s_hud_tv, 1, x + tvX, y + tvY, 1, 1, 0, c_white, image_alpha);
hlv = abs (player_hp - 1);
alp = (hlv / 2) + abs((hlv / 2) * lengthdir_x(1, tvBlink));
if (paused() == false) tvBlink += (hlv * hlv * hlv) * 580 * dt_sec();
if (hp &lt;= 0) alp = 0;
draw_set_colour_write_enable(true, true, true, false);
draw_sprite_ext(s_hud_tv, 2, x + tvX, y + tvY, 1, 1, 0, c_white, alp * image_alpha);
draw_set_colour_write_enable(true, true, true, true);
if (paused() == false) faceCount -= dt_sec();
if (faceCount &lt; 0)
{
    faceCount = 2 + random(1);
    if (random(100) &lt; 50) { faceGlance = choose(-1, 1); faceWait = 0.5 + random(1.5); }
}
if (faceGlance != 0) { if (faceWait &gt; 0) faceWait -= dt_sec(); else faceGlance = 0; }
injured = floor(abs(1 - player_hp) * 5);
if (Quest("player_is_fantomas") == 1) draw_sprite_ext(s_hud_face_fantomas, (3 * injured + 1) + faceGlance, x + faceX, y + faceY, 1, 1, 0, c_white, 1);
else 
{
    BlueFace("begin");
    draw_sprite_ext(s_hud_face, (3 * injured + 1) + faceGlance, x + faceX, y + faceY, 1, 1, 0, c_white, image_alpha);
    BlueFace("end");
    
    // Level Up Icon //
    if (Utility("experience to next") &lt;= 0) and hudHide != 0 then draw_sprite_ext(sLevelUp, lvlupimg, x + 14 - (abs(1 - hudHide) * 48), view_yview + 190, 1, 1, 0, c_white, image_alpha); 
}

// HP Text
draw_set_font(global.fn_3);
draw_set_halign(1);
draw_set_valign(1);
textColor = make_color_rgb(112 + (128 * alp), 0, 0);
draw_set_color(textColor);
draw_text(x + textX, y + textY - 6, string(hp));
draw_text(x + textX, y + textY + 6, string(hpMax));
draw_set_halign(0);
draw_set_valign(0);
draw_set_color(c_white);
draw_sprite_ext(s1x1, 0, x + textX - 10, y + textY - 1, 20, 2, 0, textColor, image_alpha);

// TV Overlay
draw_sprite_ext(s_hud_tv, 0, x + tvX, y + tvY, 1, 1, 0, c_white, image_alpha);

// Scale - 28 px usable area
if (hudDrawWeight &gt; 0)
{
    var sclWgt = 0;
    var mgt = 0;
    var ins = 0;
    if (instance_exists(o_hoopz)) 
    {
        mgt = scr_stats_getEffectiveStat(o_hoopz, STAT_BASE_MIGHT);
        sclWgt += scr_stats_getEffectiveStat(o_hoopz, STAT_BASE_WEIGHT);
    }
    if (hudOnce == 0) { ins = 1; hudOnce = 1; }
    HUD("draw scale", x + scaleX, y + scaleY, mgt, sclWgt, ins, c_white, hudDrawWeight);
}

// Charge
if (hudDrawPeriodic &gt; 0)
{
    chargePus = floor(28 * gunCharge) + ((chargeSin mod 1) * gunCharge);
    chargeCol = make_color_rgb(64 + (chargePus * random_range(4, 5)), chargePus * 3, chargePus * 3);
    if (chargePus &gt;= 28) chargeCol = make_color_rgb(chargePus * 3, chargePus * 7, chargePus * random_range(6.5, 8.5));
    chargePus = clamp(chargePus, 0, 28);
    
    draw_sprite_ext(s1x1, 0, x + chargeX, y + chargeY, sprite_get_width(chargeSprite), sprite_get_height(chargeSprite), 0, hudColorBG, image_alpha * hudDrawPeriodic);
    draw_sprite_ext(chargeSprite, 0, x + chargeX, y + chargeY, 1, 1, 0, c_white, image_alpha * hudDrawPeriodic);
    draw_sprite_part_ext(chargeSprite, 1, 1, 1 + abs(chargePus - 28), 10, chargePus, x + chargeX + 1, y + chargeY + 1 + abs(chargePus - 28), 1, 1, chargeCol, image_alpha * hudDrawPeriodic);
}

// WIFI
if (hudDrawWifi &gt; 0)
{
    wifiDir += dt_sec() * 180;
    draw_sprite_ext(s1x1, 0, x + wifiX, y + wifiY, sprite_get_width(s_hud_wifi), sprite_get_height(s_hud_wifi), 0, hudColorBG, image_alpha * hudDrawWifi);
    draw_sprite_ext(s_hud_wifi, clamp(round(wifiConnectivity - 0.5 + lengthdir_x(1, wifiDir)), 0, 4), x + wifiX, y + wifiY, 1, 1, 0, c_white, image_alpha * hudDrawWifi);
}

// Pockets
if (hudDrawPockets &gt; 0)
{
    // Pocket - Candy
    draw_sprite_ext(s_hud_pocket, 0, x + candyX, y + candyY, 1, 1, 0, c_white, image_alpha * hudDrawPockets);
    if (candyPos != NULL) Candy("draw name", candyName, x + candyX + 9, y + candyY + 9, 1, 1, 0, c_white, image_alpha * hudDrawPockets);
    else draw_sprite_ext(s_hud_pocket, 1, x + candyX, y + candyY, 1, 1, 0, c_white, image_alpha * hudDrawPockets);
    
    // Pocket - Zauber
    draw_sprite_ext(s_hud_pocket, 0, x + zauberX, y + zauberY, 1, 1, 0, c_white, image_alpha * hudDrawPockets);
    if (zauberPos != NULL) Zauber("draw icon", Zauber("slot ref", zauberPos), x + zauberX, y + zauberY, hudDrawPockets);
    else draw_sprite_ext(s_hud_pocket, 1, x + zauberX, y + zauberY, 1, 1, 0, c_white, image_alpha * hudDrawPockets);
}

// DNA
if (hudDrawTranshumanism &gt; 0)
{
    draw_sprite_ext(s1x1, 0, x + dnaX, y + dnaY, sprite_get_width(s_hud_glamp), sprite_get_height(s_hud_glamp), 0, hudColorBG, image_alpha * hudDrawTranshumanism);
    // DNA Strands
    if (paused() == false) dnaAnim += dnaSpeed * dt_sec(); //0.25 was transhumanism
    dnaAnim = dnaAnim mod 19;
    if (dnaAnim &lt; 0) dnaAnim += 19;
    dx = x + dnaX + 1;
    dy = y + dnaY + 4;
    dl = 0;
    dnaTotal = dnaBio + dnaCyber + dnaCosmic + dnaZauber;
    // Bio
    dw = (dnaBio / dnaTotal) * dnaWidth;
    if (dw &gt; 0) draw_sprite_part_ext(s_hud_dna, 0, dl + dnaAnim, 0, dw, 15, dx + dl, dy, 1, 1, c_white, image_alpha * hudDrawTranshumanism);
    dl += dw;
    // Zauber
    dw = (dnaZauber / dnaTotal) * dnaWidth;
    if (dw &gt; 0) draw_sprite_part_ext(s_hud_dna, 3, dl + dnaAnim, 0, dw, 15, dx + dl, dy, 1, 1, c_white, image_alpha * hudDrawTranshumanism);
    dl += dw;
    // Cosmic
    dw = (dnaCosmic / dnaTotal) * dnaWidth;
    if (dw &gt; 0) draw_sprite_part_ext(s_hud_dna, 1, dl + dnaAnim, 0, dw, 15, dx + dl, dy, 1, 1, c_white, image_alpha * hudDrawTranshumanism);
    dl += dw;
    // Cyber
    dw = (dnaCyber / dnaTotal) * dnaWidth;
    if (dw &gt; 0) draw_sprite_part_ext(s_hud_dna, 2, dl + dnaAnim, 0, dw, 15, dx + dl, dy, 1, 1, c_white, image_alpha * hudDrawTranshumanism);
    // DNA overlay
    draw_sprite_ext(s_hud_glamp, 0, x + dnaX, y + dnaY, 1, 1, 0, c_white, image_alpha * hudDrawTranshumanism);
}

// GLAMP
if (hudDrawGlamp[0] &gt; 0)
{
    draw_sprite_ext(s1x1, 0, x + glampX, y + glampY, sprite_get_width(s_hud_glamp), sprite_get_height(s_hud_glamp), 0, hudColorBG, image_alpha * hudDrawGlamp[0]);
    dx = x + glampX + 2;
    dy = y + glampY + 2;
    for (i = 0; i &lt; 5; i += 1)
    {
        if (glampBase[i] == glampCurrent[i]) sub = 2; // Glamp is uneffected
        else if (glampBase[i] &lt; glampCurrent[i]) sub = 3;
        else sub = 4;
        if (sub != 2)
        {
            draw_sprite_part_ext(s_hud_glamp, sub + 2, 2 + (i * 9), 2, 8, 14, dx, dy, 1, 1, c_white, image_alpha * hudDrawGlamp[i]);
        }
        else
            draw_sprite_part_ext(s_hud_glamp, 1, 2 + (i * 9), 2, 8, 14, dx, dy, 1, 1, c_white, image_alpha * hudDrawGlamp[i]);
        rat = ceil(glampCurrent[i] * 0.14);
        draw_sprite_part_ext(s_hud_glamp, sub, 2 + (i * 9), 2 + abs(rat - 14), 8, rat, dx, dy + abs(rat - 14), 1, 1, c_white, image_alpha * hudDrawGlamp[i]);
        // Blue line
        draw_sprite_part_ext(s_hud_glamp, 7, 2 + (i * 9), 2 + abs(rat - 14), 8, 1, dx, dy + abs(rat - 14), 1, 1, c_white, image_alpha * hudDrawGlamp[i]);
        dx += 9;
    }
    draw_sprite_ext(s_hud_glamp, 0, x + glampX, y + glampY, 1, 1, 0, c_white, image_alpha * hudDrawGlamp[0]);
}
// GLAMP

// Icemans lets play career // Putting it here so it stays on top of the hud //
if instance_exists(o_suffix_letsplay) then
    {
    draw_sprite_ext(s_hud_face_letsplay, 0, view_xview + 192 - 8, view_yview + 215, 1, 1, 0, c_white, image_alpha);
    draw_sprite_ext(s_letsplay_watermark, 0, view_xview + 230, view_yview + 210, 1, 1, 0, c_white, 0.95);
    }

// Money show and guns swap
event_user(15);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
