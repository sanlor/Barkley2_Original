<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_enemy_junkbot_missile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CombatAttackEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

targetX = 0;
targetY = 0;
targetZ = 0;
startX = x;
startY = y;
startZ = 0;

arcpos = 0;
arcspd = 10; // in pixels
arcacc = .2; // in pixels/sec
arcaccCutoff = .5; // percentage of path

rotSin = random(2*pi);
rotSpdMod = .25 - random(.5);

started = false;

smokeTimer = 0;

scr_entity_setShadowSprite(sprite_index, 0, 0, 0);
scr_entity_setGravity(0);
scr_entity_setCollisionType(COLLISION_NONE);

event_user_on_hit = 0;
deal_damage = false;

soundImpact = "";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Big boom

scr_fx_explosion_spawn_on(self.id, 1);

var blast = instance_create(x, y, o_enemyAttack_genericblast);
blast.z = z;
blast.lifetime = 8;
ds_map_copy(blast.stats_attack, stats_attack);
ds_list_clear(blast.target_list); // Hit anything

audio_play_sound_at_xy(soundImpact, false, 0, x, y);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if paused() exit;

scr_entity_setDirSpd(move_dir, 0);

// Initial blast-off effect
if (started == false) {
    started = true;
    startZ = z;
    var blastoff = instance_create(x, y, o_effect_generic_animateOnce);
    blastoff.z = z;
    blastoff.sprite_index = s_effect_junkbot_missile_trail;
    blastoff.image_xscale = .6 + random(.2);
    blastoff.image_yscale = blastoff.image_xscale;
    with blastoff {
        scr_entity_animation_setSpeed(ANIMATION_DEFAULT, 1.5);
        scr_entity_setMoveXY(0, 0);
        scr_entity_setGravity(0);
    }
}

// Smoke exhaust
smokeTimer -= dt();
while (smokeTimer &lt;= 0) {
    var smoke = instance_create(x, y, o_effect_generic_animateOnce);
    smoke.z = z;
    smoke.sprite_index = s_effect_junkbot_missile_trail;
    smoke.image_xscale = .4 + random(.3);
    smoke.image_yscale = smoke.image_xscale;
    with smoke {
        scr_entity_animation_setSpeed(ANIMATION_DEFAULT, .3 + random(.7));
        scr_entity_setMoveXY(0, 0);
        scr_entity_setGravity(0);
    }
    
    smokeTimer += .4;
}


// Calculate path along parabola
var A = -1;
var B = 1;
var C = 1;
var ROOT = (-B - sqrt(B*B - 4*A*C)) / (2*A);

var targetDist = point_distance(startX, startY, targetX, targetY);
var targetDir = point_direction(startX, startY, targetX, targetY);
var dist = (targetDist / ROOT) * arcpos;

x = startX + lengthdir_x(dist, targetDir);
y = startY + lengthdir_y(dist, targetDir);
z = startZ * (A*power(arcpos, 2) + B*arcpos + C);

arcpos += (arcspd / (targetDist / ROOT)) * dt();

if (arcpos &lt; (ROOT*arcaccCutoff)) {
    arcspd += arcacc * dt();
} else {
    arcspd -= arcacc * dt();
}

// Rotate around movement vector
var rCosPrev = cos(rotSin) * 3;
rotSin += rotSpdMod * arcspd * dt();
var rCos = cos(rotSin) * 3;
var rSin = sin(rotSin) * 3;

z += rSin;
x += lengthdir_x(rCos, targetDir + 90);
y += lengthdir_y(rCos, targetDir + 90);

if (z &lt;= base_z or (z &lt; base_z+24 and !scr_collision_place_free(x + move_x,y + move_y, collision_check))) {
    instance_destroy();
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

draw_sprite_ext(sprite_index, 0, dx, dy, .7, .7, move_dir, c_white, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
