<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2100001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enabled = false;

repeatTimer = 0;
prevRepeatCnt = 0;

// Create list of debug modes here
modes = ds_list_create();
ds_list_add(modes, o_debugMode_phasing);
ds_list_add(modes, o_debugMode_questTracker);
ds_list_add(modes, o_debugMode_equipment);
ds_list_add(modes, o_debugMode_items);
ds_list_add(modes, o_debugMode_statInspector);
ds_list_add(modes, o_debugMode_viewWeaponStats);
ds_list_add(modes, o_debugMode_gunfusinglab);
//ds_list_add(modes, o_debugMode_genes);
ds_list_add(modes, o_debugMode_enemyEditor);
ds_list_add(modes, o_debugMode_sound);
ds_list_add(modes, o_debugMode_enemyPlacement);
ds_list_add(modes, o_debugMode_shader);
ds_list_add(modes, o_debugMenu_combatVisualizer);
ds_list_add(modes, o_debugMenu_movementVisualizer);
ds_list_add(modes, o_debugMenu_pathVisualizer);
ds_list_add(modes, o_debugMode_zHeightVisualizer);
ds_list_add(modes, o_debugMode_teleport);


// Create list of debug modes here
modes_names = ds_list_create();
ds_list_add(modes_names, "Phasing");
ds_list_add(modes_names, "Quest Hacker");
ds_list_add(modes_names, "Equipment");
ds_list_add(modes_names, "Items");
ds_list_add(modes_names, "Stat Inspector");
ds_list_add(modes_names, "WeaponStat Inspector");
ds_list_add(modes_names, "Gunsfuse Lab");
//ds_list_add(modes_names, "Gun'sfusion - Genes");
ds_list_add(modes_names, "Enemy Editor");
ds_list_add(modes_names, "Sound Editor");
ds_list_add(modes_names, "Enemy Spawn Placement");
ds_list_add(modes_names, "Shader");
ds_list_add(modes_names, "Combat Visualizer");
ds_list_add(modes_names, "Movement Visualizer");
ds_list_add(modes_names, "Path Visualizer");
ds_list_add(modes_names, "Z-Height Visualizer");
ds_list_add(modes_names, "Teleport");

// Current debug mode ID
mode = 0;
draw_timer = 0;
save_text = "";
save_timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step - Debug Menu, Other Functions

// Enable debug menu
if (keyboard_check_pressed(vk_insert) || keyboard_check_pressed(vk_f8)) &amp;&amp; global.DEBUGMODE {
    // Enable/disable
    enabled = !enabled;
    draw_timer = 15;
    if (enabled) {
        event_user(0);
    }
    else {
        with o_debugMode instance_destroy();
        paused(false);
        with (pausemenu) instance_destroy();
    }
}

// Switch sub-sections on debug menu
if (enabled) {
    //if (mouse_wheel_down()) {
    if (keyboard_check_pressed(vk_pagedown) or (keyboard_check(vk_control) and keyboard_check_pressed(ord('S')))) {
        mode++;
        draw_timer = 10;
        event_user(0);
    }
    
    //if (mouse_wheel_up()) {
    if (keyboard_check_pressed(vk_pageup) or (keyboard_check(vk_control) and keyboard_check_pressed(ord('W')))) {
        mode--;
        draw_timer = 10;
        event_user(0);
    }
}

if (global.DEBUGMODE)
{   

    if(global.logRepeatCount&gt;0 &amp;&amp; global.logfile != "")
    {
        if(repeatTimer&lt;60){repeatTimer+=1;}
        else
        {
            file = file_text_open_append(global.logfile);
            repeatTimer = 0;
            file_text_write_string(file,global.lastLog + "[repeats: "+string(global.logRepeatCount)+"]");
            global.logRepeatCount = 0;
            file_text_writeln(file);
            file_text_close(file);
        }
    }
    else{repeatTimer = 0;}
    
    if (keyboard_check_pressed(vk_subtract))
    {
        global.logfile = get_save_filename("txt", "log.txt");
        
        file = file_text_open_write(global.logfile);
        file_text_write_string(file, "NEW RUN: "+ date_time_string( date_current_datetime() ) );
        file_text_writeln(file);
        file_text_close(file)
    }
    
    // Switch cursor height
    if (keyboard_check_pressed(vk_home)) {
        switch (global.cursorShift) {
            case 0: global.cursorShift = 12; break;
            case 12: global.cursorShift = 16; break;
            case 16: global.cursorShift = 20; break;
            case 20: global.cursorShift = 0; break;
        }
        show_debug_message("Cursor height set to: " + string(global.cursorShift));
    }
    
    // QUICKSAVE
    if (keyboard_check_pressed(vk_f9))
    {
        event_user(9);
        if (file_exists("save" + string(global.currentSaveSlot) + ".b2"))
        {
            file_copy("save" + string(global.currentSaveSlot) + ".b2", "quicksave0.b2");
            save_text = "Saved as quicksave0.b2, press F11 to load later";
            save_timer = 1;
        }
        else
        {
            save_text = "Cannot quicksave on slot 0, no save.b2 file exists";
            save_timer = 1;
        }
    }
    
    if (keyboard_check_pressed(vk_f10))
    {
        event_user(9);
        if (file_exists("save" + string(global.currentSaveSlot) + ".b2"))
        {
            file_copy("save" + string(global.currentSaveSlot) + ".b2", "quicksave1.b2");
            save_text = "Saved as quicksave1.b2, press F12 to load later";
            save_timer = 1;
        }
        else
        {
            save_text = "Cannot quicksave on slot 1, no save.b2 file exists";
            save_timer = 1;
        }
    }
    
    if (keyboard_check_pressed(vk_f11))
    {
        if (file_exists("quicksave0.b2"))
        {
            file_copy("quicksave0.b2", "save" + string(global.currentSaveSlot) + ".b2");
            save_text = "Loaded quicksave0.b2";
            save_timer = 1;
            event_user(10);
        }
    }
    
    if (keyboard_check_pressed(vk_f12))
    {
        if (file_exists("quicksave1.b2"))
        {
            file_copy("quicksave1.b2", "save" + string(global.currentSaveSlot) + ".b2");
            save_text = "Loaded quicksave1.b2";
            save_timer = 1;
            event_user(10);
        }
    }
}

if draw_timer &gt; 0 draw_timer -= dt();
if (save_timer &gt; 0) save_timer -= dt_sec() / 4;

// DEBUG NOTES

// GZ NOTE: Draw End for o_hud has debug key for DS_GRID, is marked as debug only.
// It should be removed later but may still be needed right now for testing, and
// needs to be in Draw End for the hud to work correctly (I believe, at least).

/*
// Path tester
if (keyboard_check_pressed(ord('I'))) 
{
    with (o_cts_hoopz) 
    {
        scr_actor_unsetRigid(id);
        scr_actor_instantRigid(id);
        _automatic_animation = true;
        scr_path_set(x, y, mouse_x, mouse_y, 3, 0, NULL);
    }
}
*/




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load game
scr_savedata_load();
var save_roomname = scr_savedata_get("map.room");
var save_room = asset_get_index(save_roomname);
var save_roomx = scr_savedata_get("map.x");
var save_roomy = scr_savedata_get("map.y");
//a//udio_set_bgm(scr_audio_getRoomBGM(save_room));
var rt;
with (o_world) { rt = scr_map_initialise_load_room(save_room, save_roomx, save_roomy); }
room_target = rt;

paused(false);
global.event = false;
//a//udio_set_bgm(nextBGM);
if (scr_savedata_get("player.respawn.do") == true) {
    // Respawn logic
    //instance_create(0, 0, o_hoopz);
    with (o_hoopz) { scr_player_respawn(); }
}
else 
{
    // Teleport player to destination
    room_goto(room_target);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SAVE
if (instance_exists(o_hoopz))
{
    scr_savedata_put("map.room", room_get_name(room));
    scr_savedata_put("map.x", o_hoopz.x);
    scr_savedata_put("map.y", o_hoopz.y);
    scr_savedata_save();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var n = ds_list_size(modes);
if (mode &gt;= n) mode = 0;
if (mode &lt; 0) mode = n-1;

with o_debugMode instance_destroy();
paused(false);
with (pausemenu) instance_destroy();
instance_create(o_hoopz.x, o_hoopz.y, ds_list_find_value(modes, mode));
show_debug_message("Created debug mode #" + string(n));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_debugLogFile("-Room End-");

ds_list_destroy(modes);
ds_list_destroy(modes_names);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
if (enabled == 0) exit;

if (draw_timer &gt; 0) {
    
    var midx = (SCREEN_WIDTH*global.screen_scale)/2;
    
    draw_set_colour(c_black);
    draw_set_alpha(0.5);
    draw_rectangle(midx - 100, 20, midx + 100, 20 + ds_list_size(modes) * 20 + 40, false)
    
    draw_set_font(global.fn_1)
    draw_set_alpha(0.75);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    
    for (var i = 0; i &lt; ds_list_size(modes); i++) {
        if (i == mode)
            draw_set_color(c_blue);
        else
            draw_set_color(c_white);
        draw_text(midx, 40 + 20*i, ds_list_find_value(modes_names, i))
    }
    
    draw_set_color(c_white);
}

//Save info
if (mode == 0)
{
    draw_set_font(global.fn_1);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_color(c_white);
    draw_set_alpha(1);
    draw_text_transformed(5, 560, "Press F9 to Quicksave on slot 1, F11 to load slot 1", 1, 1, 0);
    draw_text_transformed(5, 580, "Press F10 to Quicksave on slot 2, F12 to load slot 2", 1, 1, 0);
    draw_set_color(c_white);
}
if (save_timer &gt; 0)
{
    draw_set_font(global.fn_1);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_color(c_fuchsia);
    draw_set_alpha(save_timer);
    draw_text_transformed(5, 5, save_text, 2, 2, 0);
    draw_set_color(c_white);
    draw_set_alpha(1);
}

draw_set_alpha(1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
