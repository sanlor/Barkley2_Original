<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2100000</depth>
  <persistent>0</persistent>
  <parentName>o_debugMode</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Render hitboxes for CombatActors
draw_set_colour(c_purple);
with CombatActor {
    // Render hitbox
    var mask;
    if (mask_index != -1) mask = mask_index; else mask = sprite_index;
    if (sprite_exists(mask)) {
        draw_sprite_ext(mask, image_index, x, y - z, image_xscale, image_yscale, image_angle, c_purple, 0.5);
        if (hitbox_z_top &gt; 6) {
            draw_sprite_ext(mask, image_index, x, y - z - hitbox_z_top, image_xscale, image_yscale, image_angle, c_purple, 0.2);
        }
        if (hitbox_z_top &gt; 12) {
            draw_sprite_ext(mask, image_index, x, y - z - (hitbox_z_top * .5), image_xscale, image_yscale, image_angle, c_purple, 0.2);
        }
        if (hitbox_z_top &gt; 24) {
            draw_sprite_ext(mask, image_index, x, y - z - (hitbox_z_top * .25), image_xscale, image_yscale, image_angle, c_purple, 0.2);
            draw_sprite_ext(mask, image_index, x, y - z - (hitbox_z_top * .75), image_xscale, image_yscale, image_angle, c_purple, 0.2);
        }
    }
    
    // Render top-to-origin-to-floor
    draw_line(x, y - z - hitbox_z_top, x, y);
    draw_circle(x, y - z, 3, true);
    draw_circle(x, y - z - hitbox_z_top, 3, true);
}

// Render hitboxes for CombatAttackEntity
draw_set_colour(c_red);
with CombatAttackEntity {
    // Render hitbox
    var mask;
    if (mask_index != -1) mask = mask_index; else mask = sprite_index;
    if (sprite_exists(mask)) {
        draw_sprite_ext(mask, image_index, x, y - z, image_xscale, image_yscale, image_angle, c_red, 0.5);
        if (hitbox_z_top &gt; 3) {
            draw_sprite_ext(mask, image_index, x, y - z - hitbox_z_top, image_xscale, image_yscale, image_angle, c_red, 0.2);
        }
        if (hitbox_z_top &gt; 6) {
            draw_sprite_ext(mask, image_index, x, y - z - (hitbox_z_top * .5), image_xscale, image_yscale, image_angle, c_red, 0.2);
        }
        if (hitbox_z_top &gt; 12) {
            draw_sprite_ext(mask, image_index, x, y - z - (hitbox_z_top * .25), image_xscale, image_yscale, image_angle, c_red, 0.2);
            draw_sprite_ext(mask, image_index, x, y - z - (hitbox_z_top * .75), image_xscale, image_yscale, image_angle, c_red, 0.2);
        }
    }
    
    // Render top-to-origin-to-floor
    draw_line(x, y - z - hitbox_z_top, x, y);
    draw_circle(x, y - z, 3, true);
    draw_circle(x, y - z - hitbox_z_top, 3, true);
}

// Render audio emitters //
draw_set_colour(c_aqua);
with o_sfx_audio_emitter_parent {
    draw_circle(x, y, 6, true);
    draw_text(x, y, "Snd");
    }

draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
