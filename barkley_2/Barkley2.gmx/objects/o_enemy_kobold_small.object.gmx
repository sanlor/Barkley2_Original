<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_koboldSmall_head</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_enemygroup_kobold</parentName>
  <maskName>mask_disk_20by20</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////you get all the default variables from EnemyCombatActor
event_inherited();

// Enemy stats
scr_enemyDB_statsGet(enemyBuild);

// Enemy configurations // Z hitbox aka tallness of the enemy, collision circle size and collision type //
scr_entity_setZHitbox(0, 24);
scr_entity_setMovementCollisionShape_circle(10);
scr_entity_setCollisionType(COLLISION_ALL);

// Randomize a head for this kobold //
headType = irandom(13);
headType *=4;

// Ailment totem coordinates //
ailmentTotem_define(id, 0, 14, 16, 44);

// Hurt and Damage sounds //
deathSound = "kobold_death_small";
damageSound = "kobold_grunt_small";
hook_hitfx = enemy_hitfx_kobold_small;

// Passive state AI //
var conf, guard;
guard = scr_AI_addPassiveState(scr_AI_passive_guard);
guard[? "sndAlertSound"] = "kobold_alert"; 

// Approach AI //
activeApproach = scr_AI_addActiveState(scr_AI_active_approach);
activeHangback = scr_AI_addActiveState(scr_AI_active_hangback);
activeHangback[? "switchPriority"] = 10;
activeHangback[? "switchRemoveMaxDist"] = 150;
activeHangback[? "switchAddMaxDist"] = 110;

// Movement
scr_path_setMovementType(scr_path_movementType_standard_offset);

// Collision distance from the walls/collisions //
path_walldist = 12+random(10);

// Movement //
var movement = scr_AI_movement_init(scr_AI_movementType_standard);
movement[? "dirOffsetMax"] = 40;
activeApproach[? "walkScript"] = movement;
activeHangback[? "walkScript"] = movement;

// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// Charge attack //
attack = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_action_charge);
attack[? "action"] = action; 

// Charge attack stats //
AI_util_action_setDamage(action, 2, .5, .5, 0, 20, 125, STAGGER_HARDNESS_MEDIUM);
action[? "sndAttackWarn"] = "kobold_charge_small";
action[? "sndAttackRun"] = "kobold_attack";
action[? "sndAttackStrike"] = "general_impact";

attack[? "distMax"] = 90;
attack[? "cooldownTime"] = 15; 
attack[? "cooldownTimeRnd"] = 26;

// Slash
attack = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_action_slash);
attack[? "action"] = action; 

AI_util_action_setDamage(action, 2, .8, 0, 0, 10, 100, STAGGER_HARDNESS_SOFT);
action[? "sndAttackWarn"] = "kobold_attack";
action[? "sndAttackStrike"] = "general_impact";
action[? "mask"] = mask_crescent_24_12;

attack[? "distMax"] = 30;
attack[? "cooldownTime"] = 3.5; 
attack[? "cooldownTimeRnd"] = 10;
attack[? "rechargeTime"] = 0;
attack[? "rechargeTimeRnd"] = 0;

//Initiate Animation Entities
scr_entity_animation_new("body");
scr_entity_animation_new("head");
scr_entity_animation_new("left_arm");
scr_entity_animation_new("right_arm");
_body_offset=0;
_head_offset=0;
_leftarm_offset=0;
_rightarm_offset=0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Death event // Drop goop on the ground //
var _obj;

// Goop burst/explosion effect //
repeat(4) scr_fx_simple_ext(x-5+random(10),y-5+random(19), z + random(10), s_koboldBigBurst, 0.5 + random(0.5), 1, 1, choose(0,90,180,270), c_white, 1);
    
// Goop puddle //
repeat (irandom(5 + 4)) Puddle_Effect(x, y, base_z, choose(1, 2), make_color_rgb(50, 200, 20));

// Goop puddle drops //
repeat (irandom(5 + 4)) instance_create(x, y, o_effect_goopdrop);

// The healing goop puddle //
//gooplor = instance_create(x, y, o_kobold_healingGoop);
//gooplor.z = base_z;

// Inheritance //
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

var _col,pt2x,pt2y,pt3x,pt3y,_img,_hScale,_frm,_hoff,_hFrm,_showLArm,_showRArm;
_col = image_blend;

_frm = 0;
_img = 0;
_hScale = 1;
_hoff = 0;
_hFrm = 0;

_aFrmR = 0;
_aFrmL = 0;

_showLArm = true;
_showRArm = true;

_img = s_cgremlin_small_gibs;

if(a_attackName == "stagger")
{
    scr_entity_animation_setSpeed("body", 0);
    scr_entity_animation_setRange("body",_body_offset, 1);
    scr_entity_animation_setSpeed("head", 0);
    scr_entity_animation_setRange("head", _head_offset+1, 1);
    scr_entity_animation_setSpeed("left_arm", 0);
    scr_entity_animation_setRange("left_arm", 10, 1);
    scr_entity_animation_setSpeed("right_arm", 0);
    scr_entity_animation_setRange("right_arm", 10, 1);
    
}
else
{
    if(a_walking)
    {
    scr_entity_animation_setSpeed("body", 1);
    scr_entity_animation_setRange("body", _body_offset, 4);
    scr_entity_animation_setSpeed("head", 0);
    scr_entity_animation_setRange("head", _head_offset, 1);

    }
    else
    {
    scr_entity_animation_setSpeed("body", 0);
    scr_entity_animation_setRange("body", _body_offset, 1);
    scr_entity_animation_setSpeed("head", 0);
    scr_entity_animation_setRange("head", _head_offset, 1);
    scr_entity_animation_setSpeed("left_arm", 0);
    scr_entity_animation_setRange("left_arm", 1, 1);
    scr_entity_animation_setSpeed("right_arm", 0);
    scr_entity_animation_setRange("right_arm", 1, 1);
    }
}

_dirdir = ((faceDir+360)mod 360) div 90;
_odir = ((faceDir+360)mod 360);
switch(_dirdir)
{
    case 0: _hScale = -1; _body_offset= 6+2; _head_offset=headType+2; break;
    case 1: _hScale = 1; _body_offset= 6+2; _head_offset=headType+2; break;
    case 2: _hScale = -1; _body_offset=2; _head_offset=headType; break;
    case 3: _hScale = 1; _body_offset=2; _head_offset=headType; break;
}


if(a_attackName=="slash")
{
    _showRArm = false;
    if(_odir&lt;180)
    {
        switch(a_attackState)
        {
            case "before":
                animStrike+=1;
                //draw_sprite_ext(s_cgremlin_weap,weaponType,x-6*_hScale,y+10,_hScale,1,180+animStrike,c_white,1);
                //draw_sprite_ext(s_cgremlin_atkArm,armTypeR*2,x,y,_hScale,1,180,c_white,1);
                break;
                
            case "attack":
                animStrike = 0;
                //draw_sprite_ext(s_cgremlin_slash,0,x,y,_hScale,1,180,c_white,1);
                break;
            
            case "after":
                animStrike+=1;
                //draw_sprite_ext(s_cgremlin_weap,weaponType,x+6*_hScale,y-10,-_hScale,1,90-animStrike,c_white,1);
                //draw_sprite_ext(s_cgremlin_atkArm,armTypeR*2+1,x,y,_hScale,1,180,c_white,1);
                break;
        }
        
    }
}
else
{
    animStrike = 0;
    if(_odir&gt;=180)
    {
    //draw_sprite_ext(s_cgremlin_weap,weaponType,x-1*_hScale,y+2,_hScale,1,0,c_white,1);
    }
}

draw_set_alpha(1);

///back arm
if(_odir&gt;=180 &amp;&amp; _showRArm || _odir&lt;180 &amp;&amp; _showLArm)
{
    _fr = _aFrmR;
    if(_dirdir&lt;=180){_fr = _aFrmL;}
    //draw_sprite_ext(s_cgremlin_armsR,_fr,x,y,_hScale,1,0,_col,1);
}

draw_sprite_ext(s_koboldSmall_body,scr_entity_animation_getImage("body"),dx,dy,_hScale,1,0,_col,1);
draw_sprite_ext(s_koboldSmall_head,scr_entity_animation_getImage("head"),dx,dy-20+_hoff,_hScale,1,0,_col,1);


if(_odir&gt;=180 &amp;&amp; _showLArm || _odir&lt;180 &amp;&amp; _showRArm)
{
    _fr = _aFrmL;
    if(_dirdir&lt;=180){_fr = _aFrmR;}
    //draw_sprite_ext(s_cgremlin_armsL,_fr,x,y,_hScale,1,0,_col,1);
}

if(a_attackName=="slash")
{
_aFrmR =scr_entity_animation_getImage("left_arm");
_aFrmL =scr_entity_animation_getImage("right_arm");
    if(_odir&gt;=180)
    {
        switch(a_attackState)
        {
            case "before":
                animStrike+=1;
                //draw_sprite_ext(s_cgremlin_weap,weaponType,x+6*_hScale,y-10,_hScale,1,0+animStrike,c_white,1);
                //draw_sprite_ext(s_cgremlin_atkArm,armTypeR*2,x,y,_hScale,1,0,c_white,1);
                break;
                
            case "attack":
                animStrike = 0;
                //draw_sprite_ext(s_cgremlin_slash,0,x,y,_hScale,1,0,c_white,1);
                break;
            
            case "after":
                animStrike+=1;
                //draw_sprite_ext(s_cgremlin_weap,weaponType,x-6*_hScale,y+10,-_hScale,1,90-animStrike,c_white,1);
                //draw_sprite_ext(s_cgremlin_atkArm,armTypeR*2+1,x,y,_hScale,1,0,c_white,1);
                break;
        }
    }
}
else
{
    if(_odir&lt;180)
    {
        //draw_sprite_ext(s_cgremlin_weap,weaponType,x-1*_hScale,y+2,_hScale,1,0,c_white,1);
    }
}

combatActor_draw_post();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,15</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
