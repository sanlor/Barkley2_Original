<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2510002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
wid = (SCREEN_WIDTH/4)*3;
hei = SCREEN_HEIGHT/4;
startX = SCREEN_WIDTH/4;
startY = -10;
targetX = startX;
targetY = startY;
lerpSpeedShow = 0.2;
lerpSpeedHide = 0.4;

floatDuration = 1;
floatAmount = 0;
floatPoint = 0; //Radians

startScaleX = 1;
startScaleY = 0;
borderId = 22;

zauberBtnWidth = 90;
zauberBtnHeight = 12;
btnWidth = 40;
btnHeight = 18;
midBtnWidth = 25;
midBtnHeight = 25;
midBtnX = 41;
midBtnY = 17;
btnSeparation = 2;

//No touch
Border("generate", borderId, wid, hei);
x = startX;
y = startY;
image_xscale = startScaleX;
image_yscale = startScaleY;
hiding = 0;

surf = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>quickmenu2</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string>"killSurface"</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>surf</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Hide animation;
hiding = !global.quickmenuShown;

if(hiding == 1){
    if(x == startX and 
        y == startY and 
        image_xscale == startScaleX and
        image_yscale == startScaleY) instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    if(not surface_exists(surf)){
      surf = surface_create(wid+10, hei); // +10 because of bottom cables 
    } 
    surface_set_target(surf);
    draw_clear_alpha(c_white,0);

    Border("draw", borderId, 0, 0);
    var baseX = 13;
    var baseY = 11;

    var viewX = x+view_xview[0];
    var viewY = y+view_yview[0];

    var hoverOnMid = scr_mouse_rect(viewX+midBtnX, viewY+midBtnY, viewX+midBtnX+midBtnWidth, viewY+midBtnY+midBtnHeight);
    var hover = false;
    var textColor = c_orange;
    var bgColor = c_black;

    //TopLeft btn
    hover = not hoverOnMid and scr_mouse_rect(viewX+baseX, viewY+baseY, viewX+baseX+btnWidth, viewY+baseY+btnHeight);
    if(hover) {
      textColor = c_yellow;
      if(mouse_check_button_pressed(mb_left)){
        bgColor = c_white;
        Map("invoke");
        quickmenu2("destroy");
      }
    } else { 
      textColor = c_orange;
      bgColor = c_black;
    }
    scr_draw_rect(baseX, baseY, btnWidth, btnHeight, c_gray, 1);
    scr_draw_rect(baseX+1, baseY+1, btnWidth-2, btnHeight-2, bgColor, 1);
    quickmenu2("write", global.fn_7ocs, textColor, baseX+2, baseY+(btnHeight/2), fa_left, fa_middle, "MAPS");       

    //TopRight btn
    baseX += btnWidth + btnSeparation;
    hover = not hoverOnMid and scr_mouse_rect(viewX+baseX, viewY+baseY, viewX+baseX+btnWidth, viewY+baseY+btnHeight);
    if(hover) {
      textColor = c_yellow;
      if(mouse_check_button_pressed(mb_left)){
        bgColor = c_white;
        Note("viewer");
        quickmenu2("destroy");
      }
    } else { 
      textColor = c_orange;
      bgColor = c_black;
    }
    scr_draw_rect(baseX, baseY, btnWidth, btnHeight, c_gray, 1);
    scr_draw_rect(baseX+1, baseY+1, btnWidth-2, btnHeight-2, bgColor, 1);
    quickmenu2("write", global.fn_7ocs, textColor, baseX+(btnWidth)-3, baseY+(btnHeight/2), fa_right, fa_middle, "NOTES");       

    //BottomRight btn
    baseY += btnHeight + btnSeparation;
    hover = not hoverOnMid and scr_mouse_rect(viewX+baseX, viewY+baseY, viewX+baseX+btnWidth, viewY+baseY+btnHeight);
    if(hover) {
      textColor = c_yellow;
      if(mouse_check_button_pressed(mb_left)){
        bgColor = c_white;
        instance_create(0, 0, q_menu_inventory);
        quickmenu2("hide");
      }
    } else { 
      textColor = c_orange;
      bgColor = c_black;
    }
    scr_draw_rect(baseX, baseY, btnWidth, btnHeight, c_gray, 1);
    scr_draw_rect(baseX+1, baseY+1, btnWidth-2, btnHeight-2, bgColor, 1);
    quickmenu2("write", global.fn_7ocs, textColor, baseX+(btnWidth)-3, baseY+(btnHeight/2), fa_right, fa_middle, "ITEMS");       

    //BottomRight btn
    baseX -= btnWidth + btnSeparation;
    hover = not hoverOnMid and scr_mouse_rect(viewX+baseX, viewY+baseY, viewX+baseX+btnWidth, viewY+baseY+btnHeight);
    if(hover) {
      textColor = c_yellow;
      if(mouse_check_button_pressed(mb_left)){
        bgColor = c_white;
        instance_create(0, 0, oChatroulette);
        quickmenu2("destroy");
      }
    } else { 
      textColor = c_orange;
      bgColor = c_black;
    }
    scr_draw_rect(baseX, baseY, btnWidth, btnHeight, c_gray, 1);
    scr_draw_rect(baseX+1, baseY+1, btnWidth-2, btnHeight-2, bgColor, 1);
    quickmenu2("write", global.fn_7ocs, textColor, baseX+2, baseY+(btnHeight/2), fa_left, fa_middle, "CHAT");       

    //Middle btn
    if(hoverOnMid) {
      textColor = c_yellow;
      if(mouse_check_button_pressed(mb_left)){
        bgColor = c_white;
        quickmenu2("hide");
      }
    } else { 
      textColor = c_orange;
      bgColor = c_black;
    }
    scr_draw_rect(midBtnX, midBtnY, midBtnWidth, midBtnHeight, c_gray, 1);
    scr_draw_rect(midBtnX+1, midBtnY+1, midBtnWidth-2, midBtnHeight-2, bgColor, 1);
    quickmenu2("write", global.fn_7oc, textColor, midBtnX+midBtnWidth/2, midBtnY+midBtnHeight/2, fa_center, fa_middle, "(o)");       

    baseX = 98;
    baseY = 12;
    scr_draw_rect(baseX-2, baseY-2, 175, 40, c_black, 1);
    var i;
    var hover;
    for (i = 0; i &lt; (Zauber("amount")); i += 1) {
      var zauber = ds_list_find_value(global.zauberList,i);

      bgColor = c_black;

      hover = scr_mouse_rect(viewX+baseX, viewY+baseY, viewX+baseX+zauberBtnWidth-1, viewY+baseY+zauberBtnHeight-1);
      if(hover) {
        textColor = c_yellow;
        if(mouse_check_button_pressed(mb_left)){
          bgColor = c_white;
          Zauber("slot", i);
        } 
      } else if(Zauber("slot") == i) {
        textColor = c_white;
      } else { 
        textColor = c_orange;
      }

      scr_draw_rect(baseX-1, baseY-1, zauberBtnWidth, zauberBtnHeight, textColor, 1);
      scr_draw_rect(baseX, baseY, zauberBtnWidth, zauberBtnHeight, bgColor, 1);
      if(Zauber("slot") == i) scr_draw_rect(baseX, baseY, zauberBtnWidth, zauberBtnHeight, c_gray, 0.5);

      quickmenu2("write", global.fn_7ocs, textColor, baseX, baseY, fa_left, fa_top, Zauber("name",zauber));

      if(i==2) { baseX += zauberBtnWidth; baseY -= zauberBtnHeight *3; }
      baseY += zauberBtnHeight;
    }

    surface_reset_target();

if(hiding == 0) {
    quickmenu2("showAnimation", self, targetX, targetY); 
} else if(hiding == 1){ 
    quickmenu2("hideAnimation", self, startX, startY, startScaleX, startScaleY);
}

draw_surface_ext(surf, view_xview[0]+x, view_yview[0]+y, image_xscale, image_yscale, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
