<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2600000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//TEXT
textTitle = choose("WHICH COLOR WILL WIN?");
textRight = choose("YOUR COLOR CAME OUT ON TOP!");
textWrong = choose("YOUR COLOR WAS VANQUISHED!");
textTop = textTitle;

cRed = make_color_rgb(255 - 16, 16, 16);
cBlue = make_color_rgb(16, 16, 255 - 16);
cYellow = make_color_rgb(255 - 16, 255 - 16, 16);
cWhite = c_white; //make_color_rgb(255 - 16, 16, 255 - 16);

col[0] = cRed;
col[1] = cBlue;
col[2] = cYellow;
col[3] = cWhite;
for (i = 0; i &lt; 4; i += 1) colVis[i] = 1;

kill[0] = floor(random(4));
kill[1] = kill[0];
while (kill[1] == kill[0]) kill[1] = floor(random(4));
kill[2] = kill[0];
while (kill[2] == kill[0] || kill[2] == kill[1]) kill[2] = floor(random(4));

select = 0;
selectMax = 4;
confirm = 0;
state = 0;

colorSpc = 64 + 16;
colorSpace = colorSpc;
colorSpd = 10;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select a shape
if (MiniKeyPress("cancel")) { Minigame("stop"); instance_destroy(); }

if (state == 0)
{
    if (MiniKeyPress("left"))
    {
        select -= 1;
        if (select &lt; 0) select = selectMax - 1;
    }
    if (MiniKeyPress("right"))
    {
        select += 1;
        if (select &gt;= selectMax) select = 0;
    }
    
    if (MiniKeyPress("action"))
    {
        state = 1;
    }
}
else if (state == 1)
{
    colorSpace -= dt() * colorSpd;
    if (colorSpace &lt; 0) { colVis[kill[0]] = 0; state += 1; colorSpace = 0; audio_play_sound_ext("sn_ptonyhurt", 0, 0); }
}
else if (state == 2)
{
    colorSpace += dt() * colorSpd;
    if (colorSpace &gt; colorSpc) { state += 1; colorSpace = colorSpc; }
}
else if (state == 3)
{
    colorSpace -= dt() * colorSpd;
    if (colorSpace &lt; 0) { colVis[kill[1]] = 0; state += 1; colorSpace = 0; audio_play_sound_ext("sn_ptonyhurt", 0, 0); }
}
else if (state == 4)
{
    colorSpace += dt() * colorSpd;
    if (colorSpace &gt; colorSpc) { state += 1; colorSpace = colorSpc; }
}
else if (state == 5)
{
    colorSpace -= dt() * colorSpd;
    if (colorSpace &lt; 0) { colVis[kill[2]] = 0; state += 1; colorSpace = 0; audio_play_sound_ext("sn_ptonyhurt", 0, 0); }
}
else if (state &lt; 35)
{
    state += dt() * colorSpd;
    if (state &gt;= 35)
    {
        if (colVis[select] == 1) { audio_play_sound_ext("sn_ptonyright", 10, 0); textTop = textRight; }
        else if (colVis[select] == 0) { audio_play_sound_ext("sn_ptonywrong", 10, 0); textTop = textWrong; }
    }
}
else if (state &gt;= 35)
{
    if (MiniKeyPress("action"))
    {
        //room_goto(rMiniSelect);
        instance_destroy();
        instance_create(0, 0, oMini10Select);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
draw_set_color(c_black); draw_rectangle(global.miniX, global.miniY, global.miniX + (385 * global.miniScale), global.miniY + (241 * global.miniScale), 0);
dx = global.miniX + (global.miniWidthS / 2); 
dy = global.miniY + (global.miniHeightS / 2);
ds = global.miniScale;

//Border and text
draw_set_color(cBlue);
draw_rectangle(global.miniX, global.miniY, global.miniX + global.miniWidthS, global.miniY + (17 * global.miniScale), 0);

draw_set_color(c_white);
draw_set_font(CourierNew12);
draw_set_halign(1);
draw_text_transformed(global.miniX + (global.miniWidthS / 2), global.miniY + (0 * global.miniScale), textTop, global.miniScale, global.miniScale, 0);
draw_set_halign(0);

//DRAW SELECT
if (state == 0)
{
    scr_font(CourierNew24b, c_white, 1, 1);
    draw_text_transformed(dx - (32 * global.miniScale), dy, "&lt;", global.miniScale, global.miniScale, 0);
    draw_text_transformed(dx + (32 * global.miniScale), dy, "&gt;", global.miniScale, global.miniScale, 0);
    draw_sprite_ext(sMiniColor, 0, dx, dy, 16 * global.miniScale, 16 * global.miniScale, 0, col[select], 1);
    scr_font(CourierNew24b, c_white, 0, 0);
}

//Draw 4 colors
ds = global.miniScale * 8;
cs = colorSpace * global.miniScale;
if (colVis[0]) draw_sprite_ext(sMiniColor, 0, dx - cs, dy, ds, ds, 0, col[0], 1);
if (colVis[1]) draw_sprite_ext(sMiniColor, 0, dx, dy - cs, ds, ds, 0, col[1], 1);
if (colVis[2]) draw_sprite_ext(sMiniColor, 0, dx + cs, dy, ds, ds, 0, col[2], 1);
if (colVis[3]) draw_sprite_ext(sMiniColor, 0, dx, dy + cs, ds, ds, 0, col[3], 1);

if (colVis[0]) draw_sprite_ext(sMiniColor, 0, dx - cs, dy, ds, ds, 0, col[0], .5);
if (colVis[1]) draw_sprite_ext(sMiniColor, 0, dx, dy - cs, ds, ds, 0, col[1], .5);
if (colVis[2]) draw_sprite_ext(sMiniColor, 0, dx + cs, dy, ds, ds, 0, col[2], .5);
if (colVis[3]) draw_sprite_ext(sMiniColor, 0, dx, dy + cs, ds, ds, 0, col[3], .5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>3,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
