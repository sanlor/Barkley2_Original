<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_vrwControl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
// event_bct_vrstation01
if (scr_quest_get_state("vrwInside") == 1)
{
    instance_destroy();
    exit;
}
o_curs.visible = 0;
o_curs.toggleCursor = 0;
audio_stop_all(); // Cut off music
audio_play_sound_ext("mus_dnet_track1", 10, 1);
colDef = c_white; // Default color
colHov = c_yellow; // Hover color
colIna = c_ltgray; // Inactive color
colAct = c_lime; // Active color
colVer = c_gray;

hue[0] = 24;//random(255);
hue[1] = 24;//random(255);
bnc = 360;
bncSpd = 360;
hnc = random(360);
for (i = 0; i &lt; 15; i += 1)
{
    chl[i] = 14;
}
chl[1] = 4;
chl[2] = 4;
chl[11] = 4;
chl[12] = 4;

avaSub = 0;
avaSpn = 2;

ovrStt = "";
ovrMsg = "";
updOne = 0;
jacOne = 0;

aliSel = floor(random(4));
aliNam[0] = "Holy";
aliNam[1] = "DoGood";
aliNam[2] = "Vengeful";
aliNam[3] = "W.I.C.K.E.D.";

jobSel = floor(random(4));
jobNam[0] = "Croupier";
jobNam[1] = "Jobber";
jobNam[2] = "Cobbler";
jobNam[3] = "Roofer";

butNam[0] = "Refresh";
butAct[0] = 1;
butNam[1] = "Update";
butAct[1] = 0;
butNam[2] = "Jack In";
butAct[2] = 0;
butNam[3] = "Jack Out";
butAct[3] = 1;

// Server info
lisAmt = 0;
serSel = -1;
serOne = 0;
event_user(14); // Set servers
serCou = serAmt; // Check step, does slow refresh
//event_user(15); // Refresh
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DON'T Stop music

o_curs.visible = 1;
o_curs.toggleCursor = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event = true
global.event = true;
view_xview[0] = 0;
view_yview[0] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do button actions

// Pause //
if (paused()) exit;

if (ovrStt == "Jack Out") 
{
    Quest("vrwInside", 0);
    instance_destroy();
    audio_stop_all(); // added
    Teleport(r_bct_tower04, 208, 1424);
    exit;
}

if (ovrStt == "Refresh")
{
    if (serOne == 0)
    {
        event_user(14); // Update list
        lisAmt = 0;
        serSel = -1;
        butAct[2] = 0;
    }
    serOne += dt_sec();
    if (serOne &gt;= 1)
    {
        serOne = 0.001;
        if (random(100) &lt; serRan[serCou] &amp;&amp; lisAmt &lt; 4)
        {
            lisInd[lisAmt] = serCou;
            lisAmt += 1;
        }
        serCou += 1;
        if (serCou &gt;= serAmt) { butAct[1] = 1; ovrStt = ""; }
    }
}
else
{
    serCou = 0;
    serOne = 0;
}

if (ovrStt == "Update")
{
    updOne += dt_sec();
    if (updOne &gt;= 2)
    {
        event_user(14); // Update list
        ovrStt = "";
    }
}
else
{
    updOne = 0;
}

if (ovrStt == "Jack In")
{
    jacOne += dt_sec();
    if (jacOne &gt;= 2)
    {
        ovrMsg = serMsg[lisInd[serSel]];
        if (ovrMsg == "CONNECTING")
        {
            global.event = false;
            Quest("vrwInside", 1);
            instance_destroy();
            audio_stop_sound_ext("mus_dnet_track1"); // added
            audio_play_sound_ext("mus_OligarchyOnline", 3, 1); // was priority 10
            exit;
        }
        if (mouse_check_button_pressed(mb_left))
        {
            mouse_clear(mb_left);
            ovrMsg = "";
            ovrStt = "";
        }
    }
}
else
{
    jacOne = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Refresh servers
h = 0;
for (i = 0; i &lt; serCou; i += 1)
{
    if (random(100) &lt; serRan[i])
    {
        lisInd[h] = i;
        h += 1;
        if (h &gt;= 4) break;
    }
}
lisAmt = h;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update
i = 0;
serNam[i] = "Archibalds_Domain";
serPly[i] = 2 + floor(random(3));
serMax[i] = 16;
serPng[i] = 9999;
serRan[i] = 100;
serMsg[i] = "ERROR 392 #Ping timeout.";
i += 1;
serNam[i] = "BappersONLY";
serPly[i] = 7000;
serMax[i] = 7000;
serPng[i] = 50 + floor(random(20));
serRan[i] = 75;
serMsg[i] = "ERROR 135 #Server is full.";
i += 1;
serNam[i] = "Poppers_Den";
serPly[i] = 600 + floor(random(61));
serMax[i] = 800;
serPng[i] = 151 + floor(random(50));
serRan[i] = 100;
serMsg[i] = "CONNECTING";
i += 1;
serNam[i] = "(L) GrapestersParadise";
serPly[i] = 20 + floor(random(5));
serMax[i] = 50;
serPng[i] = 20 + floor(random(10));
serRan[i] = 10;
serMsg[i] = "ERROR 900 #Locked server.";
i += 1;
serNam[i] = "TESTTESTESTTEST";
serPly[i] = 0;
serMax[i] = 0;
serPng[i] = 0;
serRan[i] = 25;
serMsg[i] = "ERROR 342 #Invalid server.";
serAmt = i + 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Server list
dx = 4;
dy = 142;
draw_set_font(global.fn_2);
draw_set_halign(0);
draw_set_color(colIna);
draw_text(dx + 15 + 8, dy - 12, "Server");
draw_text(dx + 165 + 40, dy - 12, "Players");
draw_text(dx + 240 + 80, dy - 12, "Ping");
draw_set_color(c_white);
draw_spr_box(dx, dy, dx + (384 - 8), dy + 75);

/// Draw server info
dx = 4 + 15;
dy = 142 + 12;
if (lisAmt == 0 &amp;&amp; ovrStt == "")
{
    draw_text(dx + 8, dy, "Refresh for servers.");
}
else
{
    did = serSel;
    for (i = 0; i &lt; lisAmt; i += 1)
    {
        ind = lisInd[i];
        lisNam = serNam[ind];
        lisPly = string(serPly[ind]) + "/" + string(serMax[ind]);
        lisPng = string(serPng[ind]);
        draw_set_color(colDef);
        if (ovrStt == "" &amp;&amp; scr_mouse_rect(dx - 4, dy - 3, dx - 4 + 354, dy - 3 + 13) &amp;&amp; paused() == 0) hil = 1; else hil = 0;
        if (mouse_check_button_pressed(mb_left) &amp;&amp; hil &amp;&amp; paused() == 0) { did = i; mouse_clear(mb_left); }
        if (hil) draw_set_color(colHov);
        if (serSel == i) { draw_sprite(s_return_vrw, 0, dx - 4, dy - 2); draw_set_color(colAct); }
        draw_set_halign(0);
        //draw_sprite_ext(s1x1, 0, dx - 4, dy - 3, 354, 14, 0, c_white, 1);
        draw_text(dx + 8, dy, lisNam);
        draw_set_halign(1);
        draw_text(dx + 175 + 40, dy, lisPly);
        draw_text(dx + 240 + 80, dy, lisPng);
        dy += 14;
    }
    serSel = did;
    if (serSel &gt;= 0) butAct[2] = 1;
}
draw_set_halign(0);

// Commands

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
for (i = 0; i &lt; 2; i += 1)
{
    if (i == 0) sat = 64; else sat = 255;
    col[i] = make_color_hsv(hue[i], sat, 255);
}
draw_sprite_tiled_ext(s_mg_vrw_oli_bg, 0, 0, 0, 1, 1, col[0], 1);
draw_sprite_tiled_ext(s_mg_vrw_oli_bg, 1, 0, 0, 1, 1, col[1], 1);

avaX = 384 / 2;
avaY = 68 + 14;
if (paused() == 0) avaSpn = max(2, avaSpn - (dt_sec() * 4));
if (paused() == 0) avaSub += dt_sec() * avaSpn;
draw_sprite_ext(s_mg_vrw_oli_avatar, avaSub, avaX, avaY, 2, 2, 0, c_white, 1);
if (ovrStt == "" &amp;&amp; scr_mouse_rect(avaX - 25, avaY - 25, avaX + 25, avaY + 25)) 
{
    if (mouse_check_button_pressed(mb_left) &amp;&amp; paused() == 0)
    {
        mouse_clear(mb_left);
        avaSpn = 12;
    }
}
draw_set_font(global.fn_5);
draw_set_font(global.fn_2);
draw_set_halign(1);
draw_set_color(colHov);
draw_text(avaX, avaY - 30 - 10, "Klaaust Mitsugiri");
//draw_set_color(colDef);
draw_text(avaX, avaY + 30, aliNam[aliSel] + " " + jobNam[jobSel]);
draw_set_color(colDef);

// Draw oligarchy text
if (paused() == 0) bnc += dt_sec() * bncSpd;
if (paused() == 0) bncSpd = max(360, bncSpd - (dt_sec() * (360 * 2)));
if (paused() == 0) hnc += dt_sec() * 64;
dx = (384 / 2) - 102;
dy = 4;
if (ovrStt == "" &amp;&amp; scr_mouse_rect(dx, dy - 4, dx + 204, dy + 32)) 
{
    if (mouse_check_button_pressed(mb_left) &amp;&amp; paused() == 0)
    {
        mouse_clear(mb_left);
        bncSpd = 360 * 6;
    }
}
for (i = 0; i &lt; 15; i += 1)
{
    bn = round(lengthdir_x(2, bnc + (i * 30)));
    hn = round(lengthdir_x(255, hnc + (i * 10)));
    cl = make_color_hsv(hn, 255, 255);
    draw_sprite_ext(s_mg_vrw_oli_text, i, dx, dy + bn, 1, 1, 0, cl, 1);
    dx += chl[i] + 2;
    if (i == 8) dx += 6;
}

// Version number
dx = 384 - 45;
dy = 2;
if (ovrStt == "" &amp;&amp; scr_mouse_rect(dx, dy, dx + 45, dy + 8)) 
{
    if (mouse_check_button_pressed(mb_left) &amp;&amp; paused() == 0)
    {
        mouse_clear(mb_left);
        colVer = make_color_hsv(random(255), 255, 255);
    }
}
draw_sprite_ext(s_mg_vrw_oli_version, 0, dx - 1, dy, 1, 1, 0, c_black, 1);
draw_sprite_ext(s_mg_vrw_oli_version, 0, dx + 1, dy, 1, 1, 0, c_black, 1);
draw_sprite_ext(s_mg_vrw_oli_version, 0, dx, dy - 1, 1, 1, 0, c_black, 1);
draw_sprite_ext(s_mg_vrw_oli_version, 0, dx, dy + 1, 1, 1, 0, c_black, 1);
draw_sprite_ext(s_mg_vrw_oli_version, 0, dx, dy, 1, 1, 0, colVer, 1);

// Alignment
dx = (384 / 4) - 52 - 30;
dy = 48;
draw_set_font(global.fn_2);
draw_set_halign(1);
draw_spr_box(dx, dy, dx + 106, dy + 75 + 0);
draw_set_color(colIna);
draw_text(dx + 52, dy - 12, "Alignment");
draw_set_halign(0);
dx += 15;
dy += 12;
did = aliSel;
for (i = 0; i &lt; 4; i += 1)
{
    draw_set_color(colDef);
    if (ovrStt == "" &amp;&amp; scr_mouse_rect(dx - 4, dy - 3, dx - 4 + 84, dy - 3 + 13) &amp;&amp; paused() == 0) hil = 1; else hil = 0;
    if (mouse_check_button_pressed(mb_left) &amp;&amp; hil &amp;&amp; paused() == 0) { did = i; mouse_clear(mb_left); }
    if (hil) draw_set_color(colHov);
    if (aliSel == i) { draw_sprite(s_return_vrw, 0, dx - 4, dy - 2); draw_set_color(colAct); }
    //draw_sprite_ext(s1x1, 0, dx - 4, dy - 3, 84, 14, 0, c_white, 1); //visual aid of clickbox
    draw_text(dx + 8, dy, aliNam[i]);
    dy += 14;
}
aliSel = did;

// Job
dx = (384 * 0.75) - 44 + 30;
dy = 48;
draw_set_font(global.fn_2);
draw_set_halign(1);
draw_spr_box(dx, dy, dx + 90 + 6, dy + 75 + 0);
draw_set_color(c_ltgray);
draw_text(dx + 44 + 3, dy - 12, "Class");
draw_set_halign(0);
dx += 15;
dy += 12;
did = jobSel;
for (i = 0; i &lt; 4; i += 1)
{
    draw_set_color(colDef);
    if (ovrStt == "" &amp;&amp; scr_mouse_rect(dx - 4, dy - 3, dx - 4 + 68, dy - 3 + 13) &amp;&amp; paused() == 0) hil = 1; else hil = 0;
    if (mouse_check_button_pressed(mb_left) &amp;&amp; hil &amp;&amp; paused() == 0) { did = i; mouse_clear(mb_left); }
    if (hil) draw_set_color(colHov);
    if (jobSel == i) { draw_sprite(s_return_vrw, 0, dx - 4, dy - 2); draw_set_color(colAct); }
    //draw_sprite_ext(s1x1, 0, dx - 4, dy - 3, 68, 14, 0, c_white, 1); //visual aid of clickbox
    draw_text(dx + 8, dy, jobNam[i]);
    dy += 14;
}
jobSel = did;

// Servers
event_user(0);

// Buttons
draw_set_font(global.fn_1);
draw_set_halign(1);
dv = 384 / 5;
dx = dv;
dy = 240 - 21;
for (i = 0; i &lt; 4; i += 1)
{
    wid = ceil(string_width(butNam[i]) / 2);
    //draw_sprite_ext(s1x1, 0, dx - wid, dy, wid * 2, 18, 0, c_white, 1);
    draw_set_color(colDef);
    if (butAct[i] == 0) draw_set_color(colIna);
    else
    {
        if (ovrStt == "" &amp;&amp; scr_mouse_rect(dx - wid, dy, dx + wid, dy + 18) &amp;&amp; paused() == 0) hil = 1; else hil = 0;
        if (hil) draw_set_color(colHov);
        if (mouse_check_button_pressed(mb_left) &amp;&amp; hil &amp;&amp; paused() == 0) { ovrStt = butNam[i]; mouse_clear(mb_left); }
    }
    draw_text(dx, dy, butNam[i]);
    dx += dv;
}

// Overlay
if (ovrStt != "" &amp;&amp; ovrStt != "Jack Out")
{
    draw_sprite_ext(s1x1, 0, 0, 0, 384, 240, 0, c_black, 0.33);
    dx = (384 / 2) - 96;
    dy = (240 / 2) - 24;
    draw_spr_box(dx, dy, dx + 192, dy + 48);
    draw_set_font(global.fn_2);
    draw_set_color(colDef);
    draw_set_halign(1);
    draw_set_valign(1);
    dx = 382 / 2;
    dy = 240 / 2;
    if (ovrMsg != "") draw_text(dx, dy, ovrMsg);
    else if (ovrStt == "Refresh") draw_text(dx, dy, "Refreshing server list...");
    else if (ovrStt == "Update") draw_text(dx, dy, "Updating server info...");
    else if (ovrStt == "Jack In") draw_text(dx, dy, "Jacking into server...");
    draw_set_valign(0);
}

// Cursor
draw_set_color(c_black);
draw_circle(o_curs.x, o_curs.y, 5, 0);
draw_set_color(c_fuchsia);
draw_circle(o_curs.x, o_curs.y, 3, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
