<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls the Zone Text display when changing areas

// Setup //
zone = "";
zoneLast = "";
flavorLast = "";

yPos = 16;
alpha = 0;
alpha2 = 0;
alpha_goal = 1;
alpha2_goal = 1;
start = false;
ending = false;
name = "Zone";
flavor = "Flavor";

timer_ending = 0;
timer_start = 0;
timer_flavor = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//The text has been here a while. Forcibly end its drawing.
//Every room starts by setting it to visible if appropriate, so this is a safe, easy way out.
visible = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Pause //
if paused() then exit;
if (instance_exists(o_hoopz_death_grayscale)) exit;

// Start //
if timer_start &gt; 0 then
    {
    // Tick down //
    timer_start -= dt();
    
    // Event //
    if timer_start &lt;= 0 then start = true;
    }

// End //
if timer_ending &gt; 0 then
    {
    // Tick down //
    timer_ending -= dt();
    
    // Event //
    if timer_ending &lt;= 0 then
        {
        start = false;
        alpha_goal = 0;
        alpha2_goal = 0;
        }
    }
    
// Flavor //
if timer_flavor &gt; 0 then timer_flavor -= dt();
    
// Entry //
if start = true then
    {
    // Move down slightly //
    if yPos &gt; 0 then yPos -= 0.25;
    
    // Alpha in //
    if alpha &lt; alpha_goal then alpha += 0.1;
    if alpha2 &lt; alpha2_goal and timer_flavor &lt;= 0 then alpha2 += 0.1;
    }
    
// Adios //
if alpha &gt; alpha_goal then alpha -= 0.1;
if alpha2 &gt; alpha2_goal then alpha2 -= 0.1;
//if alpha &lt;= 0 and alpha2 &lt;= 0 and alpha2_goal &lt;= 0 then instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Specify all zone data here

zone = "";
flavor = "";
area = scr_area_get();
nam = room_get_name(room);

if (area == "tnn")
{
    zone = "Tir na nOg";
    flavor = "Forlorn Cyberghetto";
    exit;
}

if (area == "sw1" || area == "sw2")
{
    zone = "Sewers of Nog";
    flavor = "The dankness is palpatable ...";
    exit;
}

if (nam == "r_est_industrialZone01")
{
    zone = "The Social";
    flavor = "Sanctuary for the wary and weary";
    exit;
}

if (area == "wst")
{
    zone = "The Westelands";
    flavor = "Junk and gunk, west of the Eastelands";
    exit;
}

if (area == "est")
{
    zone = "The Eastelands";
    flavor = "Trash and debris, east of the Westelands";
    exit;
}

if (area == "fct")
{
    if (string_count("biotek", nam) &gt; 0)
    {
        zone = "Big Bad Wolf &amp; Benjamin Biotek";
        flavor = "Hmm... I think something's off about this place...";
    }
    else
    {
        zone = "Power Plant";
        flavor = "The source of all juice";
    }
    exit;
}

if (area == "pdt")
{
    zone = "Ys-Kolob";
    flavor = "Ethnic melting pot";
    exit;
}

if (area == "dz2")
{
    zone = "Al-Akihabara";
    flavor = "Parched throats amidst the sands";
    exit;
}

if (area == "swp")
{
    zone = "Swamps";
    flavor = "*Sniff* *Sniff* Hmm... a dank smell...";
    exit;
}

if (area == "mtn")
{
    zone = "Mountainpass";
    flavor = "Check out these vistas";
    exit;
}

if (area == "gil")
{
    zone = "Gilbert's Peek";
    flavor = "Mysteriouse holy grounds";
    exit;
}

if (area == "pea")
{
    zone = "Gilbert's Peak";
    flavor = "Check out the peak";
    exit;
}

if (area == "bct")
{
    zone = "Braincity";
    flavor = "Cyberhell";
    exit;
}

if (area == "min")
{
    zone = "Mines";
    flavor = "Rubies and gemstones await...";
    exit;
}

if (area == "tri")
{
    zone = "The Bustling Metropolis of Triskelion";
    flavor = "Watch out for falling meteors (at the bazaar...)";
    exit;
}   

if (area == "ice")
{
    zone = "Frigid Inskirts";
    flavor = "Don't catch a cold...";
    exit;
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //
//As a failsafe against this text persisting for any reason, alarm 0 is set for about 15 seconds from room start. 
//It forcibly sets this object back to invisible. 15 seconds is only slightly longer than the text lasts for naturally.
alarm[0] = 450;


if (Quest("zoneVisible") == 0) exit;
// Fill zone and flavor variables with data
event_user(0); 
if (zoneLast == zone &amp;&amp; flavorLast == flavor) { visible = 0; exit; }

// Exceptions to the rule //
if room = r_fct_factoryOutpost01 and Quest("tutorialProgress") &lt;= 11 then 
    {
    visible = false;
    exit;
    }

visible = 1;

timer_ending = 60;
timer_start = 5;
timer_flavor = 15;

zoneLast = zone;
flavorLast = flavor;

alpha_goal = 1;
alpha2_goal = 1;
if (zone == "") visible = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw text //
if (instance_exists(o_hoopz_death_grayscale)) exit;
if (Quest("zoneVisible") == 0) exit;
if (zone == "") exit;
draw_set_alpha(alpha);
scr_font(global.fn_1, c_white, 1, 1);
draw_sprite(s_effect_zonename_backdrop, 0, view_xview + 192 - string_width(zone) / 2, view_yview + 23);
draw_sprite(s_effect_zonename_backdrop, 2, view_xview + 192 + string_width(zone) / 2, view_yview + 23);
for (i=0; i&lt;string_width(zone)+1; i+=1;)
draw_sprite(s_effect_zonename_backdrop, 1, view_xview + 192 - string_width(zone) / 2 + i, view_yview + 23);
draw_text(view_xview + 192, view_yview + 24, zone);
draw_set_alpha(alpha2 * 0.8);
draw_set_font(global.fn_2);
draw_text(view_xview + 192, view_yview + 44, flavor);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
