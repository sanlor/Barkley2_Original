<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Phase setup //
phase[0] = 50;
phase[1] = 1;
phase[2] = 0;

// Phase skipping //
phase_skip_time = 0;
phase_skip_to = 0;
phase_skip = 0;

// Textbox setup //
textbox_written = "";
textbox_goal = "";
textbox_pause = 0;
textbox_position = 0;
textbox_skip = false;  

// Alpha setup //
alpha_textbox = 0;
alpha_textbox_goal = 0;
alpha_textbox_timer = 0;
alpha_event = 0;
alpha_event_goal = 1;
alpha_text = 0;
alpha_text_goal = 0;

// Other //
audio_play_sound_ext("sn_cc_death", 10, false);
if audio_is_playing_ext("mus_charcreate") then
    {
    audio_stop_sound_ext("mus_charcreate");
    audio_play_sound_ext("mus_gameover", 10, false);
    }

o_cc_wizard.alpha_goal = 0;
timer_transition = 0;
timer_music = 30;

text = "And I had such great hopes for you... I suppose#we shall just have to wait for a new champion to#arise. Goodbye " +string(o_cc_data.character_name)+ "..."; 

// Setup stuff //
interval = 0.1;

system = part_system_create();
part_system_depth(system, -100);

emitter = part_emitter_create(system);
part_emitter_region(system, emitter, 190, 194, 118, 122, ps_shape_rectangle, ps_distr_linear);

particle = part_type_create();
part_type_alpha2(particle, 0.2, 0.4);
part_type_color2(particle, make_color_rgb(250, 0, 0), make_color_rgb(155, 0, 0));
part_type_life(particle, 100, 150);
part_type_speed(particle, 0.2, 0.01, 0.1, 0);
part_type_direction(particle, 0, 360, 1, 0);
part_type_size(particle, 0.1, 0.25, 0.02, 0);
part_type_shape(particle, pt_shape_explosion);

particle2 = part_type_create();
part_type_alpha2(particle2, 0.2, 0.4);
part_type_color2(particle2, make_color_rgb(60, 0, 50), make_color_rgb(60, 20, 50));
part_type_life(particle2, 100, 150);
part_type_speed(particle, 0.2, 0.01, 0.1, 0);
part_type_direction(particle, 0, 360, 1, 0);
part_type_size(particle, 0.1, 0.25, 0.02, 0);
part_type_shape(particle, pt_shape_explosion);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Pause //
//if paused then exit;

// Phases //
if phase[0] &gt; 0 then
    {
    // Tick down //
    phase[0] -= dt();
    
    // Event //
    if phase[0] &lt;= 0 then
        {
        // Introduction to hand scanner //
        if phase[1] = 1 then 
            {
            alpha_text_goal = 1;
            scr_cc_textbox(text);
            }

        // Adios //
        if phase[1] = 2 then 
            {
            alpha_textbox_goal = 0;
            timer_transition = 35;
            phase[2] = 45;
            }
        }
    } 
    
// Transition //
if timer_transition &gt; 0 then
    {
    // Tick down //
    timer_transition -= dt();
    
     // Event //
     if timer_transition &lt;= 0 then instance_create(0, 0, o_cc_transition);
     }
    
// End of this event //
if phase[2] &gt; 0 then
    {
    // Tick down //
    phase[2] -= dt();
        
    // End //
    if phase[2] &lt;= 0 then game_restart();
    }

// Interval //
if phase[0] &gt;= 15 and phase[1] = 1 then
    {
    if interval &gt; 0 then
        {
        interval -= dt();
        
        // Event //
        if interval &lt;= 0 then
            {
            part_emitter_burst(system, emitter, particle2, irandom(2) + 4);
            part_emitter_burst(system, emitter, particle, irandom(3) + 8);
            interval = irandom(0.15) + 0.15;
            }
        }
    }
    
// Music change //
if timer_music &gt; 0 then
    {
    // Tick down //
    timer_music -= dt();
    
    // Event //
    // BONG //if timer_music &lt;= 0 then audio_set_bgm(mus_gameover);
    }
    
// Skip text with button //
scr_cc_textbox_skip();

// Type it //
scr_cc_textbox_type();

// Move to a next phase //
scr_cc_phase_skip_process();
    
// Alpha goals //
if alpha_textbox_timer &gt; 0 then alpha_textbox_timer -= dt();
else
    {
    if alpha_textbox &lt; alpha_textbox_goal then alpha_textbox += 0.1;
    if alpha_textbox &gt; alpha_textbox_goal then alpha_textbox -= 0.1;
    }

if phase[1] = 1 and phase[0] &lt; 16 then
    {
    if alpha_event &lt; alpha_event_goal then alpha_event += 0.01;
    }
if alpha_event &gt; alpha_event_goal then alpha_event -= 0.01;

// Text //
if alpha_text &lt; alpha_text_goal then alpha_text += 0.1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw backdrop //
draw_sprite_ext(s_cc_death_backdrop, 0, 192, 120, 1, 1, 0, c_white, alpha_event);

// Draw textboxes //
scr_cc_draw_textbox();

// draw name //
if phase[1] &gt;= 1 then
    {
    draw_set_color(c_red);
    draw_set_halign(fa_center);
    draw_set_alpha(alpha_text);
    draw_text(192, 104, o_cc_data.character_name);
    draw_set_color(c_teal);
    draw_text(163, 133, string(o_cc_data.character_zodiac_day) + "." + string(o_cc_data.character_zodiac_month) + ".");
    draw_text(163, 143, string(o_cc_data.character_zodiac_year));
    
    draw_text(216, 133, string(o_cc_data.character_zodiac_day) + "." + string(o_cc_data.character_zodiac_month) + ".");
    draw_text(216, 143, string(o_cc_data.character_zodiac_year));
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
