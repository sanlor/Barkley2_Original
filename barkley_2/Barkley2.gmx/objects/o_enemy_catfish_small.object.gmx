<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_catfish_small</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_enemygroup_catfish</parentName>
  <maskName>mask_disk_28by28</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup
// Inheritance //
event_inherited();

// Shadow size, Z-hitbox size, Surface size, 
scr_entity_setShadowCircle(12);
scr_entity_setZHitbox(0, 24);
combatActor_setRenderSurfSize(64);

// Get my GLAMP and resistance stats //
scr_enemyDB_statsGet(enemyBuild);

// Ailment totem coordinates //
ailmentTotem_define(id, -5, 12, 19, 42);

// Pathing type + distance from walls with pathing //
scr_path_setMovementType(scr_path_movementType_standard_offset);
scr_path_setWalldist(12+random(10));

// Shield drafting variables //
shield_equipped = false;
drafting = 0;
count = 0; 

// Sounds //
alertSound = "catfishsmall_alert";
deathSound = "catfishsmall_death";
damageSound = "catfishsmall_grunt";

// Visual effect for getting hit //
hook_hitfx = enemy_hitfx_catfish;

var conf, guard;
guard = scr_AI_addPassiveState(scr_AI_passive_guard);
guard[? "sndAlertSound"] = alertSound;

// Active state in water
activeMoveTowardsLand = scr_AI_addActiveState(scr_AI_active_moveTowardsLand);
activeMoveTowardsLand[? "switchPredicate"] = predicate_AI_isWading;

// Active state on land
ai_approach = scr_AI_addActiveState(scr_AI_active_approach);
ai_approach[? "switchPredicate"] = predicate_AI_isNotWading;

// This makes Catfish keep distance from target
ai_hangBack = scr_AI_addActiveState(scr_AI_active_hangback);
ai_hangBack[? "switchPriority"] = 10;
ai_hangBack[? "switchRemoveMaxDist"] = 150;
ai_hangBack[? "switchAddMaxDist"] = 110;
ai_hangBack[? "switchPredicate"] = predicate_AI_isNotWading;

ai_shieldDraft = scr_AI_addActiveState(scr_AI_active_shielddraft);
ai_shieldDraft[? "switchPredicate"] = predicate_AI_isNotWading;

var movement = scr_AI_movement_init(scr_AI_movementType_standard);
movement[? "dirOffsetMax"] = 40;
ai_approach[? "walkScript"] = movement;
ai_hangBack[? "walkScript"] = movement;

// Create and configure AI switch
//var attack;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// Jump action
var jump = scr_AI_addAction(scr_AI_action_jump);
jump[? "jumpHeightBase"] = 35;
activeMoveTowardsLand[? "jumpAction"] = jump;

// Shot - Piggybacks onto Aim and Shoot below
ai_shot = scr_AI_addAction(scr_AI_action_shot);
Attack("assign", ai_shot, "shot", 0.5, 0.5, 0.0, 0.0, 0.0, 0.0);
ai_shot[? "attackName"] = "blowpipe";
ai_shot[? "bulletObject"] = o_enemyAttack_blowdart;
ai_shot[? "burst"] = 1; // Shots to take
ai_shot[? "burstRnd"] = 1; // Burst random (sometimes does 2 shots)
ai_shot[? "precision"] = 12; // Variation in DEGREES on shot aim
ai_shot[? "motion"] = 35; // Speed of bullet - 45 is old value
ai_shot[? "motionRnd"] = 10; // Speed of bullet random - 2 is old value
ai_shot[? "gunRange"] = 20; // Pixels from face to shoot?
ai_shot[? "sndAttackWarn"] = "catfishsmall_attack";
ai_shot[? "sndAttackStrike"] = "catfishsmall_shoot";

// Aim and shoot
ai_aim = scr_AI_addAction(scr_AI_active_aimandshoot);
ai_aim[? "action"] = ai_shot;
attack = scr_AI_switch_standard("new_attack", conf);
attack[? "predicate"] = predicate_AI_isNotWadingOrDrafting;
attack[? "action"] = ai_aim;
// Range catfish must be in to execute this attack
attack[? "distMin"] = 30;
attack[? "distMax"] = 150; // was 150
ai_aim[? "distMax"] = attack[? "distMax"]; // Must clone for clear shot distance
// Time STANDING doing nothing before the actual shot
ai_aim[? "prepTime"] = 4; // GZ INFLUENCE BY ACRO DEVIATION

// ACRO TIME
time0 = AI_decisionFrequency;
time1 = ai_shot[? "beforeTime"];
time2 = ai_shot[? "afterTime"];
time3 = ai_aim[? "prepTime"];
deviate = 1;

/// Animation
Animation("define", "catfish_stand", s_catfish_small, 0, 1, 0);
Animation("define", "catfish_walk", s_catfish_small, 1, 4, 0.3);
scr_entity_animation_setSpeedPerPixel("catfish_walk", 1/10);
Animation("define", "catfish_jump", s_catfish_small, 5, 1, 0);
Animation("define", "catfish_stagger", s_catfish_small, 5, 1, 0);
Animation("define", "catfish_shot_before", s_catfish_small, 6, 5, 1);
Animation("define", "catfish_shot_attack", s_catfish_small, 11, 1, 1);
Animation("define", "catfish_shot_after", s_catfish_small, 11, 2, 1);
Animation("define", "water", s_watershadow_medium, 0, 4, 0.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Begin Step
drafting = 0;
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
event_inherited();
if paused() exit;

// ACRO TIME
deviate = scr_stats_getEffectiveStat(id, STAT_BASE_AGILE) / scr_stats_getBaseStat(id, STAT_BASE_AGILE);
AI_decisionFrequency = time0 / deviate;
ai_shot[? "beforeTime"] = time1 / deviate;
ai_shot[? "afterTime"] = time2 / deviate;
ai_aim[? "prepTime"] = time3 / deviate;

var wading = predicate_AI_isWading(id);
if (wading) invulnerable = 1; // Can't hurt in water or when jumping

scr_entity_setShadowVisible(!wading);

if (!wading and z - base_z &lt; 1) 
{
    var seeShield = false;
    count += 1;
    if(count &gt; 20) ///at reg intervals check if shield buddy is present
    {
        count = 0;
        if (instance_exists(o_enemy_catfish_shield))
        {
            var o = instance_nearest(x,y,o_enemy_catfish_shield);
            if(point_distance(x,y,o.x,o.y)&lt;96) seeShield = true;
        }
        
        if(seeShield) ///change default active script depending on if a shielder is there.
        {
            if(AI_stateTopScript == scr_AI_active_hangback or AI_stateTopScript == scr_AI_active_approach) {
                scr_AI_stateClearAll();
            }
            ds_map_replace(AI_switch,"activeState",ai_shieldDraft);
        }
        else
        {
            if(AI_stateTopScript==scr_AI_active_shielddraft) {
                scr_AI_stateClearAll();
            }
            ds_map_replace(AI_switch,"activeState",ai_hangBack);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gibbing
// If conditions are met, drop fishguts //
if (Quest("fishgutQuest") &gt;= 1 &amp;&amp; Quest("fishgutQuest") &lt;= 4) then
{
    if irandom(99) &lt;= 99 then 
    {
        var reps = 1;
        if (object_index == o_enemy_catfish_small_poison) reps = 2;
        repeat (reps) instance_create(x - 4 + random(8), y - 8 + random(8), o_mg_collect_guts);
    }
}

var _obj,_reps;

_obj = instance_create(x,y,o_FX);
_obj.sprite_index = s_catfish_blood;
_obj.image_speed = 0.25;
_obj.image_angle = choose(0,90,180,270);

_reps = 0;
var repeats = 3 + irandom(3);
repeat(repeats)
{
    _obj = instance_create(x-6+random(12),y-6+random(12),o_FX);
    _obj.z = z + random(hitbox_z_top);
    _obj.sprite_index = s_catfish_bloodsmall;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
    _reps +=1;
    _obj.delay = _reps*2;
}

_obj = instance_create(x,y,o_gibs);
_obj.sprite_index = s_catfish_gibs;
_obj.shadow_radius = 5;
_obj.bloodburst = s_catfish_bloodsmall;
_obj.image_index = irandom(11);
    
if(random(1)&gt;0.2)
{
    _obj = instance_create(x,y-4,o_gibs);
    _obj.sprite_index = s_catfish_gibs;
    _obj.bloodburst = s_catfish_bloodsmall;
    _obj.shadow_radius = 5;
    _obj.image_index = choose(0,1,3,6,12);
}

if(random(1)&gt;0.2)
{
    _obj = instance_create(x,y+4,o_gibs);
    _obj.sprite_index = s_catfish_gibs;
    _obj.bloodburst = s_catfish_bloodsmall;
    _obj.shadow_radius = 5;
    _obj.image_index = choose(1,2,6,9,10);
}

if(random(1)&gt;0.2)
{
    _obj = instance_create(x-8,y,o_gibs);
    _obj.sprite_index = s_catfish_gibs;
    _obj.bloodburst = s_catfish_bloodsmall;
    _obj.shadow_radius = 5;
    _obj.image_index = choose(7,8,9,10,11);
}

if(random(1)&gt;0.2)
{
    _obj = instance_create(x+8,y,o_gibs);
    _obj.sprite_index = s_catfish_gibs;
    _obj.bloodburst = s_catfish_bloodsmall;
    _obj.shadow_radius = 5;
    _obj.image_index = choose(1,2,3,4,5);
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
event_inherited();

if (scr_actor_isWading(id)) // Submerged
{
    var sprite = scr_entity_animation_getSpriteIndex("water");
    var image = scr_entity_animation_getImage("water");
    draw_sprite(sprite, image, dx, dy)
} 
else 
{
    var _dir,_frameOff
    _dir = ((faceDir+360)mod 360) div 90;
    
    switch(_dir)
    {
        case 0: 
            _hScale = -1;
            break;
        case 1: 
            _hScale = 1;
            break;
        case 2: 
            _hScale = -1; 
            break;
        case 3: 
            _hScale = 1;
            break;
    }
    
    // Set animation shifts
    if (_dir == 2 or _dir == 3) {
        // Facing downwards
        scr_entity_animation_setShift("catfish_stand", 0);
        scr_entity_animation_setShift("catfish_walk", 0);
        scr_entity_animation_setShift("catfish_jump", 0);
        scr_entity_animation_setShift("catfish_stagger", 0);
        scr_entity_animation_setShift("catfish_shot_before", 0);
        scr_entity_animation_setShift("catfish_shot_attack", 0);
        scr_entity_animation_setShift("catfish_shot_after", 0);
    }
    else
    {
        // Facing upwards
        scr_entity_animation_setShift("catfish_stand", 14);
        scr_entity_animation_setShift("catfish_walk", 14);
        scr_entity_animation_setShift("catfish_jump", 14);
        scr_entity_animation_setShift("catfish_stagger", 14);
        scr_entity_animation_setShift("catfish_shot_before", 14);
        scr_entity_animation_setShift("catfish_shot_attack", 14);
        scr_entity_animation_setShift("catfish_shot_after", 14);
    }
    
    var image = 0;
    
    var jumpheight = z - base_z;
    
    if(a_attackName == "stagger")
    {
        image = scr_entity_animation_getImage("catfish_stagger");
    }
    else if(a_attackName == "blowpipe")
    {
        switch(a_attackState)
        {
        case "before":
            image = scr_entity_animation_imageByRatio("catfish_shot_before", a_attackAnim, I_atk_shot_intAfter);
            break;
            
        case "attack":
            image = scr_entity_animation_imageByRatio("catfish_shot_attack", a_attackAnim, I_atk_shot_intAfter);
            break;
        
        case "after":
            image = scr_entity_animation_imageByRatio("catfish_shot_after", a_attackAnim, I_atk_shot_intAfter);
            break;
        }
    }
    else if (jumpheight &gt;= 1)
    {
        image = scr_entity_animation_getImage("catfish_jump");
    }
    else
    {
        if(a_walking)
        {
            image = scr_entity_animation_getImage("catfish_walk");
        }
        else
        {
            image = scr_entity_animation_getImage("catfish_stand");
        }
    }
    
    var sprite = scr_entity_animation_getSpriteIndex("catfish_stand");
    draw_sprite_ext(sprite,image,dx,dy,_hScale,1,0,c_white,1);
}

//draw_set_color(c_fuchsia);
//if (drafting) draw_text(dx, dy - 40, "DRAFT");//string(deviate));

combatActor_draw_post();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,21</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
