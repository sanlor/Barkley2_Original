<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_door_light_editor_icon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create

image_speed = 0;
locked = false;
draw_locked = true;
alpha_lock = 0;
alpha_lock_goal = 0;
locked_text = "Locked";
name = "door";
timer_door_lock = 0;
timer_door_unlock = 0;
text_x = 0; //0;
text_y = 0;
check_for = PlayerCombatActor;

// Setup //
sprite_index = s_door_light01
opening_range = 32;
opening_speed = 2;
sfx_open = NULL_STRING;
sfx_close = NULL_STRING;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Pause //
if paused() then exit;

chkObj = instance_nearest(x, y, check_for);
if (instance_exists(chkObj)) disObj = point_distance(x, y, chkObj.x, chkObj.y);
else disObj = 999;

// Hoopz check //
// If Hoopz has exited through this door, it should be open //
if hoopz_check &gt; 0 then
    {
    // Tick down //
    hoopz_check -= dt();
    
    // Is Hoopz there? //
    if instance_exists(PlayerCombatActor) and locked = false then
        {
        if hoopz_check_tries &gt; 0 then 
            {
            hoopz_check_tries -= 1;
            hoopz_check = 2;
            }
        else hoopz_check = 0;
        if distance_to_object(PlayerCombatActor) &lt;= 40 then 
            {
            image_index = image_number - 1;
            open = true;
            close = false;
            no_sound = 0;
            }
        }
    }

// Image //
if instance_exists(check_for) then
    {
    // Not locked //
    if locked = false then
        {
        // Open up //
        if disObj &lt;= opening_range then
            {
            // Sounds //
            if image_index &lt; image_number - 1 and open = false and no_sound &lt;= 0 then 
                {
                audio_play_sound_at_xy(sfx_open, false, 10, x, y);
                open = true;
                close = false;
                }
        
            // Animation //
            if image_index &lt; image_number - 2 then image_index += opening_speed * dt();
            else image_index = image_number - 1;
            }
            
        // Close down //
        else
            {
            // Sounds //
            if image_index &gt; 0 and close = false and no_sound &lt;= 0 then 
                {
                audio_play_sound_at_xy(sfx_close, false, 10, x, y);
                open = false;
                close = true;
                }
                
            // Animation //
            if image_index &gt; 1 then image_index -= opening_speed * dt();
            else image_index = 0;
            }
            
        // Alpha lock message gone //
        alpha_lock = 0;
        alpha_lock_goal = 0;
        }
        
    // Locked //
    else
        {
        // Lock image //
        if image_index &gt; 1 then image_index -= opening_speed * dt();
        else image_index = 0;
        
        // Locked message appears //
        if disObj &lt;= opening_range then 
            {
            if alpha_lock &lt;= 0 and draw_locked = true then audio_play_sound_at_xy("door_locked", false, 10, x, y);                
            alpha_lock_goal = 0.75;
            }
        else alpha_lock_goal = 0;
        
        // Alpha lock //
        if alpha_lock &lt; alpha_lock_goal then alpha_lock += 0.05;
        else if alpha_lock &gt; alpha_lock_goal then alpha_lock -= 0.05;
        }
    }
    
// Image limits //
if image_index &lt; 0 then image_index = 0;
else if image_index &gt; image_number - 1 then image_index = image_number - 1;
    
// No sound // Prevent doors from playing their closing sounds on room starts //
if no_sound &gt; 0 then no_sound -= dt();

// Lock door //
if timer_door_lock &gt;= 0 then
    {
    // Tick down //
    timer_door_lock -= dt();
    
    // Event //
    if timer_door_lock &lt;= 0 then
        {
        /// Lock the door //
        locked = true;
        }
    }
    
// Unlock door //
// Lock door //
if timer_door_unlock &gt;= 0 then
    {
    // Tick down //
    timer_door_unlock -= dt();
    
    // Event //
    if timer_door_unlock &lt;= 0 then
        {
        /// Unlock the door //
        locked = false;
        }
    }

    
    

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Unlock the door
// Unlock door //
timer_door_unlock = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lock the door
// Lock the door // Needs a delay because for some reason it won't work otherwise //
// PS this used to work without the delay timer straight from the event_user(0) script //
// Same with unlocking in event_user(1).
// Note made by Laz, 12.06.2015 // That's 12th of June for you USA weirdos//
timer_door_lock = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //
open = false;
close = false;
no_sound = 5;
hoopz_check = 5;
hoopz_check_tries = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw locked text
//draw_sprite(s_door_light_editor_icon, 0, x, y);
if (locked &amp;&amp; draw_locked)
{
    draw_set_font(global.fn_2); // Needs to be here so width is right
    
    // Draw backdrop rectangle //
    draw_set_alpha(alpha_lock * 0.5);
    draw_set_color(c_black);
    text_length = string_width(locked_text) + 8;
    draw_rectangle(x + text_x + sprite_width / 2 - text_length / 2, y + text_y - sprite_height / 2 - 8, x + text_x + sprite_width / 2 + text_length / 2, y + text_y - sprite_height / 2 + 8, false);
    
    // Draw locked text //
    draw_set_alpha(alpha_lock);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_text(x + text_x + sprite_width / 2, y + text_y - sprite_height / 2 - 4, string(locked_text));
    draw_set_halign(fa_left);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw light, no need to inherit
//draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,63</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
