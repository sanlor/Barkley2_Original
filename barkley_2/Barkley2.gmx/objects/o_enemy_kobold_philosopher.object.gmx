<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_koboldPhilosopher</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_enemygroup_kobold</parentName>
  <maskName>mask_disk_24by24</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////you get all the default variables from EnemyCombatActor
event_inherited();

// Enemy stats
scr_enemyDB_statsGet(enemyBuild);

// Enemy configurations
scr_entity_setZHitbox(0, global.settingEnemyBigHeight);
ailmentTotem_define(id, 0, 0, 0, 0);
scr_entity_setMovementCollisionShape_circle(14);
scr_entity_setCollisionType(COLLISION_ALL);

///that function fills in the monster's default resistances
///based on its monster type.
deathSound = "kobold_death";
damageSound = "kobold_grunt";

hook_hitfx = enemy_hitfx_kobold_small;

var conf, guard;
guard = scr_AI_addPassiveState(scr_AI_passive_guard);
guard[? "sndAlertSound"] = "kobold_alert"; //attacking scream (desperate)


scr_AI_addActiveState(scr_AI_active_approach);
activeHangback = scr_AI_addActiveState(scr_AI_active_hangback);
activeHangback[? "switchPriority"] = 10;
activeHangback[? "switchRemoveMaxDist"] = 150;
activeHangback[? "switchAddMaxDist"] = 110;

// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// Animation
/*
var anim = scr_AI_addAction(scr_AI_action_animation);
anim[? "attackName"] = "zauber_after";
anim[? "time"] = 5;

// Zauber
attack = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_action_zauber);
attack[? "action"] = action;

action[? "zauber"] = zauber_bio_putrefracktion;
action[? "actionOnCast"] = anim;
action[? "targetSpd"] = 10;

attack[? "distMax"] = 150;
attack[? "cooldownTime"] = 30;
attack[? "cooldownTimeRnd"] = 15;
attack[? "rechargeTime"] = 8;
attack[? "rechargeTimeRnd"] = 0;



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create animations

// Stand
scr_entity_animation_new("stand");
scr_entity_animation_setSpriteIndex("stand", s_koboldPhilosopher);
scr_entity_animation_setRange("stand", 0, 1);

// Walk
scr_entity_animation_new("walk");
scr_entity_animation_setSpriteIndex("walk", s_koboldPhilosopher);
scr_entity_animation_setRange("walk", 1, 4);
scr_entity_animation_setSpeed("walk", 0.5);

// Stagger
scr_entity_animation_new("stagger");
scr_entity_animation_setSpriteIndex("stagger", s_koboldPhilosopher);
scr_entity_animation_setRange("stagger", 17, 1);

// Zauber 
scr_entity_animation_new("zauber_before");
scr_entity_animation_setSpriteIndex("zauber_before", s_koboldPhilosopher);
scr_entity_animation_setRange("zauber_before", 10, 9);
scr_entity_animation_new("zauber_damage");
scr_entity_animation_setSpriteIndex("zauber_damage", s_koboldPhilosopher);
scr_entity_animation_setRange("zauber_damage", 19, 1);
scr_entity_animation_new("zauber_after");
scr_entity_animation_setSpriteIndex("zauber_after", s_koboldPhilosopher);
scr_entity_animation_setRange("zauber_after", 20, 3);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>repeat(6)
{
    scr_fx_simple_ext(x-12+random(24),y-12+random(24), z + random(10),
                      s_koboldBigBurst, 0.5 + random(0.5),
                      1, 1, choose(0,90,180,270), c_white, 1);
}

instance_create(x+random(48)-24,y+random(48)-24,o_enemyAttack_oozeSplash);
instance_create(x+random(48)-24,y+random(48)-24,o_enemyAttack_oozeSplash);
instance_create(x,y,o_enemyAttack_oozeSplash);

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Get quadrant enemy is facing towarsd
var quadrant = ((faceDir+360) mod 360) div 90;

// Set animation shifts
if (quadrant == 2 or quadrant == 3) {
    // Facing downwards
    scr_entity_animation_setShift("stand", 0);
    scr_entity_animation_setShift("walk", 0);
    scr_entity_animation_setShift("stagger", 0);
}
else {
    // Facing upwards
    scr_entity_animation_setShift("stand", 5);
    scr_entity_animation_setShift("walk", 5);
    scr_entity_animation_setShift("stagger", 0);
}

// Check if animation should be flipped
var xScale;
if (quadrant == 0 or quadrant == 2) {
    xScale = -1;
}
else {
    xScale = 1;
}

// Determine sprite and image to render
var sprite = s_koboldPhilosopher;
var image = 0;

// Zauber
if(a_attackName == "zauber") {

    if (I_atk_zauber_charge &lt; 1) {
        sprite = scr_entity_animation_getSpriteIndex("zauber_before");
        image = scr_entity_animation_imageByRatio("zauber_before", I_atk_zauber_charge, 1);
    }
    else {
        sprite = scr_entity_animation_getSpriteIndex("zauber_damage");
        image = scr_entity_animation_getImage("zauber_damage");
    }
}
// Winddown animation after zauber
else if(a_attackName == "zauber_after") {
    sprite = scr_entity_animation_getSpriteIndex("zauber_after");
    image = scr_entity_animation_imageByRatio("zauber_after", I_atk_anim_timer, I_atk_anim_max);
}
else if(a_attackName == "stagger") {
    sprite = scr_entity_animation_getSpriteIndex("stagger");
    image = scr_entity_animation_getImage("stagger");
}
    
// Walk or stand
else {
    if (a_walking) {
        sprite = scr_entity_animation_getSpriteIndex("walk");
        image = scr_entity_animation_getImage("walk");
    }
    else {
        sprite = scr_entity_animation_getSpriteIndex("stand");
        image = scr_entity_animation_getImage("stand");
    }
}

// Render sprite
draw_sprite_ext(sprite, image, dx, dy, xScale, 1, 0, image_blend, 1);

combatActor_draw_post();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,15</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
