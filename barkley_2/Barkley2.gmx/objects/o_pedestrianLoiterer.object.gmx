<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_pedestrianLoiterStand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>InteractiveActor</parentName>
  <maskName>s_pedestrian_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Inheritance //
event_inherited();

// Not allowed to exist during gov speech or gutter escape //
if (Quest("govSpeechInitiate") == 2) { instance_destroy(); exit; }
if (Quest("gutterEscape") == 1) { instance_destroy(); exit; }

// Disable during TNN CURFEW //
if (scr_time_db("tnnCurfew") == "during" &amp;&amp; scr_area_get() == "tnn") { instance_destroy(); exit; }

// Disable randomly //
if irandom(100) &lt;= 40 then { instance_destroy(); exit; }

// Shadow radius below my feet //
shadow_radius = 8;
_disableOutline = true;

// I don't have a rigid attached to me, you can run all over me... //
scr_actor_unsetRigid(id);

// Area checker //
idn = scr_area_get();
if idn = "tnn" then area = 0;
else if idn = "bct" then area = 1;
else if idn = "ala" then area = 2; 
else if idn = "pdt" then area = 3;
else if idn = "tri" then 
{
    area = 4;
    if (room == r_tri_bar01) area = 5;
    if (room == r_tri_ghetto01) area = 6;
}
else if idn = "wst" then area = 7;
else area = 0;

// Gossip variables //
event_user(10); // Gossip text
gossip = true;
gossip_index = irandom_range(0, 9)
timer_spouting_gossip = 0;
    
// Set sprite //
event_user(15);

// Variables for pushing around hoopz and the pedestrian upon collision of the two //
push_return_to_origin = 0;
push_return_to_origin_cooldown = 0;
push_return_to_origin_treshold = 0;
pushed_x = 0;
pushed_y = 0;
push_player_force = 1.5;
push_me_force = 1;
push_weight = 1.5 + random_range(0, 2);

// Alpha fade in/out, used for transits in and out of maps //
alpha = 1;
alpha_goal = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Inherit //
event_inherited();

// Pause //
if paused() exit;

// Gossip begins when Hoopz runs into me //
if (gossip &amp;&amp; global.event == 0 &amp;&amp; timer_spouting_gossip &lt;= 0)
{
    if (place_meeting(x, y, PlayerCombatActor))
    {
        // Timers to reset back to normal //
        timer_spouting_gossip = 55;
        
        // Gossip bubble //
        gossip = instance_create(x, y, o_entity_indicatorGossip); // 45 DT life
        gossip.text = gossip_pool[area, gossip_index];
    }
}
    
// Spout gossip, then move on //
if (timer_spouting_gossip &gt; 0)
{
    timer_spouting_gossip -= dt();
}

// NPC Push //
script_execute(scr_pedestrian_push);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set sprite
var shitgarbage = sprite_index;
Animation("define", "default", shitgarbage, irandom(sprite_get_number(shitgarbage) - 1), 1, 0);
Animation("set", id, "default");

/*
// TNN has 30 //
if area = 0 then
    {
    global.pedestrianSprite += irandom(2) + 1;
    if global.pedestrianSprite &gt;= 28 then global.pedestrianSprite -= 28;   // 27 
    }
    
// BCT has 30 // TODO check the actual amount
else if area = 1 then
    {
    global.pedestrianSprite += irandom(2) + 1;
    if global.pedestrianSprite &gt;= 27 then global.pedestrianSprite -= 27;
    }
    
// ALA has 30 // TODO check the actual amount
else if area = 2 then
    {
    global.pedestrianSprite += irandom(2) + 1;
    if global.pedestrianSprite &gt;= 28 then global.pedestrianSprite -= 28;
    }
    
// PDT has 1 //
else if area = 3 then
    {
    global.pedestrianSprite = 0;
    }
    
// Triskelion //
else if area &gt;= 4 then
    {
    global.pedestrianSprite += irandom(2) + 1;
    if global.pedestrianSprite &gt;= 28 then global.pedestrianSprite -= 28;   // 27 
    }
    
// WST //
else if area = 7 then
    {
    global.pedestrianSprite += irandom(2) + 1;
    if global.pedestrianSprite &gt;= 28 then global.pedestrianSprite -= 28;   // 27 
    }

// Sprite sheet //
if (area == 5) gossip = 1;
switch (area)
    {
    // TNN //
    case 0: sprite_sheet = s_pedestrian_tnn01; break;
    
    // BCT //
    case 1: sprite_sheet = s_pedestrian_tnn01; break;
    
    // ALA //
    case 2: sprite_sheet = s_pedestrian_tnn01; break;
    
    // YSK //
    case 3: sprite_sheet = s_pedestrian_tnn01; break;
    
    // TRI //
    case 4: 
    case 5: 
    case 6: sprite_sheet = s_pedestrian_tnn01; break;
    
    // WST //
    case 7: sprite_sheet = s_pedestrian_tnn01; break;
    }
    
// Set the sprite //
scr_entity_set_pedestrian(sprite_sheet, global.pedestrianSprite);
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gossip Text per area

// TNN //
gossip_pool[0, 0] = "Check out DwarfNET for tips and tricks!";
gossip_pool[0, 1] = "The Swamps are south from here...";
gossip_pool[0, 2] = "The Cyberdwarf? Ask those L.O.N.G.I.N.U.S. guys...";
gossip_pool[0, 3] = "They say a Wise Sage lives deep in the Frigid Inskirts!";
gossip_pool[0, 4] = "Be wary of Duergars...";
gossip_pool[0, 5] = "Remember to floss.";
gossip_pool[0, 6] = "Overusing Zaubers makes you tired.";
gossip_pool[0, 7] = "I'm going to join the Beach Watch!";
gossip_pool[0, 8] = "The second Otherkin War is upon us...";
gossip_pool[0, 9] = "Cuchulainn can suck my d*ck!";

// Brain City //
gossip_pool[1, 0] = "I'm proud to be a Braincinian";
gossip_pool[1, 1] = "Where's my son? Have you seen my baby boy?!";
gossip_pool[1, 2] = "I'm a resolute coffee drinker, full of beans";
gossip_pool[1, 3] = "A neurodeck in the head is worth ten in the belfry";
gossip_pool[1, 4] = "Cyberdwarf is a scam, don't believe the hype";
gossip_pool[1, 5] = "The tallest tower holds the deepest secrets";
gossip_pool[1, 6] = "Gilberts Peak eludes me";
gossip_pool[1, 7] = "Fortune favors the bald";
gossip_pool[1, 8] = "Search south of Castle Duffrey";
gossip_pool[1, 9] = "My next upgrade is going to be my tendons";

// Al-akihabara //
gossip_pool[2, 0] = "Ugh... I'm so parched...";
gossip_pool[2, 1] = "Water... I need... Water...";
gossip_pool[2, 2] = "Ungh... It's so hot in here...";
gossip_pool[2, 3] = "Please, someone, anyone... Give me nectar!";
gossip_pool[2, 4] = "If only us dwarfs wouldn't need to drink...";
gossip_pool[2, 5] = "Every word pains my parched throat";
gossip_pool[2, 6] = "My sore throat beckons for water...";
gossip_pool[2, 7] = "So thirsty...";
gossip_pool[2, 8] = "Thirst is the real enemy of us dwarfs...";
gossip_pool[2, 9] = "Hattori Temple appears only when the moon is full";

// Ys-Kolob // Esperanto //
gossip_pool[3, 0] = "Ĉiuj gloro al la urbestro de la Manĝtuloj";
gossip_pool[3, 1] = "Bonvenon al Ys-Kolob, amiko";
gossip_pool[3, 2] = "Beware la fantomoj de Kastelo Duffrey";
gossip_pool[3, 3] = "Birdo en la ĉapelo valoras du en la sonorilejo";
gossip_pool[3, 4] = "Mi sentas komploto mortigi ĉiuj Manĝtuloj";
gossip_pool[3, 5] = "Pekoj de la patro neston profunde en la itala";
gossip_pool[3, 6] = "Don de la Vega estas ne kiu li ŝajnas";
gossip_pool[3, 7] = "Se nur sinjoro Passepartout estis ankoraŭ tie...";
gossip_pool[3, 8] = "La fosaĵoj teni kaŝitan trezoron";
gossip_pool[3, 9] = "La knabo faris de betulo... Ĉu li vere mortas?";

// Triskelion
for (i = 0; i &lt; 10; i += 1)
{
    gossip_pool[4, i] = "I like looking at the water.";
}

// Triskelion Bar
gossip_pool[5, 0] = "*BURP*";
gossip_pool[5, 1] = "*SLURP*";
gossip_pool[5, 2] = "*HIC*";
gossip_pool[5, 3] = "*HORK*";
gossip_pool[5, 4] = "*HOOT*";
gossip_pool[5, 5] = "*COUGH*";
gossip_pool[5, 6] = "*HOLLER*";
gossip_pool[5, 7] = "Fuck you!";
gossip_pool[5, 8] = "*MUNCH*";
gossip_pool[5, 9] = "*CRUNCH*";

// Triskelion ghetto
gossip_pool[6, 0] = "I ain't sayin' anythin'";
gossip_pool[6, 1] = "Please... One more grape...";
gossip_pool[6, 2] = "Do you have a noose I could borrow?";
gossip_pool[6, 3] = "The cock-sucker guards won't let me in the city";
gossip_pool[6, 4] = "I wonder where the ladders go...";
gossip_pool[6, 5] = "...What!";
gossip_pool[6, 6] = "What a load of horse patoot!";
gossip_pool[6, 7] = "They call me Il Pauper.";
gossip_pool[6, 8] = "Greetings, saahib.";
gossip_pool[6, 9] = "I'm afraid of the night.";

// Industrial Park //
gossip_pool[7, 0] = "Great POWER is northwest";
gossip_pool[7, 1] = "The dankest of Swamps lie south";
gossip_pool[7, 2] = "Fary's are racist";
gossip_pool[7, 3] = "Stay clear of chups";
gossip_pool[7, 4] = "Respect the rules...";
gossip_pool[7, 5] = "One man's piece of shit is another man's gold";
gossip_pool[7, 6] = "Use anesthetics to capture live enemies";
gossip_pool[7, 7] = "Cybergremlins are BULLSHIT!";
gossip_pool[7, 8] = "Knowledge is power";
gossip_pool[7, 9] = "Sepideh's machine will save us all";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ice them
instance_destroy();
var _obj;

var repeats = 6 + irandom(3);
repeat(repeats) {
    _obj = instance_create(x-3+random(6),y-3+random(6),o_FX);
    _obj.z = z + random(hitbox_z_top);
    _obj.sprite_index = s_fx_bloodBurst;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
}

repeat (2)
{
if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y+4,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 1;
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 2;
}

if(random(1)&gt;0.5)
{
    _obj = instance_create(x,y,o_gibs);
    _obj.z = z + 10;
    _obj.sprite_index = s_cgremlin_small_gibs;
    _obj.image_index = 3;
}
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,24</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
