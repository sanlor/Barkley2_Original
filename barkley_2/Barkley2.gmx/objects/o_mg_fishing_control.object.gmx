<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// SETUP //
// Create the camera //
o_curs.toggleCursor = false;
instance_create(x, y, o_mg_fishing_camera);

// Go into setup mode, aka prepare to cast your lure 
mode = "setup";

tweenTime = 0.33; // In seconds how long it takes to appear
ald = 0; //tween variable

// Strength and angle of your cast //
strengthMinimum = 25; // You must cast this %
strength = 10;
angle = 45;

// Various coordinates //
x = view_xview + 64;
y = view_yview + 176;
viewX = x;
viewY = y;
lure_spawn_x = x;
lure_spawn_y = y;

// Music //
music = 1;

// Escape //
escape = false;
escape_yes = false;
escape_no = false;
key_pressed = 0;
fishingRoom = r_wst_wadingRace01;
fishingX = 100;
fishingY = 100;
fade = 0;
alpha_screen = 0;
guplur = false;
switch (room)
    {
    case r_fis_sewers01:
        fishingRoom = r_sw1_utility01;
        fishingX = 256;
        fishingY = 256;
    break;
    case r_fis_sewers02:
        fishingRoom = r_sw2_hermitPass01;
        fishingX = 264;
        fishingY = 464;
    break;
    case r_fis_swamps01:
        fishingRoom = r_swp_beach01;
        fishingX = 752;
        fishingY = 280;
    break;
    case r_fis_wasteland01:
        fishingRoom = r_wst_wadingRace01;
        fishingX = 184;
        fishingY = 304;
    break;
        case r_fis_nexus01:
        fishingRoom = r_far_nexus01;
        fishingX = 1080;
        fishingY = 832;
    break;
    break;
        case r_fis_ice01:
        fishingRoom = r_ice_dojoOutdoors01;
        fishingX = 608;
        fishingY = 368;
    break;
    break;
        case r_fis_cuchu01:
        fishingRoom = r_chu_pool01;
        fishingX = 304;
        fishingY = 208;
    break;
    break;
        case r_fis_mines01:
        fishingRoom = r_min_entrance01;
        fishingX = 752;
        fishingY = 248;
    break;
    }

// Other stuff //
Border("generate", 0, 144, 63); //SCREEN_WIDTH + 48
Border("generate", 1, 128 + 16, 96 + 16);
Border("generate", 2, 144, 48);
Border("generate", 3, 80, 80); // Big battle box
Border("generate", 4, 80, 40); // Battle health meter
Border("generate", 5, SCREEN_WIDTH + 20, 64 + 4); // Keep fish prompt
timer_catch = 0;
timer_setup = 0;
timer_battle = 0;
fish_value = 0;
lure_value = 0;

// Lure stats // 
/*
    weight          - governs the maximum distance the lure can be cast
    aerodynamics    - governs the speed at which you can control the lure both while its in midair and when its submerged
    catch           - governs the strength of the lure in the catching minigame, aka the size of the circle inside which the fish icon must be kept
*/

lureList = ds_list_create();
// Bayou Goopster // A basic lure, a beginners lure //
if (Item("have", "F-Lure Bayou Goopster")) ds_list_add(lureList, 0);
lureName[0] = "Bayou Goopster";
lureWeight[0] = 6;
lureAero[0] = 3;
lureCatch[0] = 2;

// Devil's Drifter // A heavy and clumsy stalker, powerful beyond it's humble appearance //
if (Item("have", "F-Lure Devil's Drifter")) ds_list_add(lureList, 1);
lureName[1] = "Devil's Drifter";
lureWeight[1] = 10;
lureAero[1] = 1;
lureCatch[1] = 7;

// Tiger Tom // A fast but otherwise average lure //
if (Item("have", "F-Lure Tiger Tom")) ds_list_add(lureList, 2);
lureName[2] = "Tiger Tom";
lureWeight[2] = 4;
lureAero[2] = 2;
lureCatch[2] = 5;

// Ladybug // A lure that is almost weightless //
if (Item("have", "F-Lure Ladybug")) ds_list_add(lureList, 3);
lureName[3] = "Ladybug";
lureWeight[3] = 2;
lureAero[3] = 10;
lureCatch[3] = 2;

// The Daverdale // Incredibly powerful but clumsy lure //
if (Item("have", "F-Lure Daverdale")) ds_list_add(lureList, 4);
lureName[4] = "Daverdale";
lureWeight[4] = 4;
lureAero[4] = 4;
lureCatch[4] = 4;

// Dread Wonthy // Incredible catch //
if (Item("have", "F-Lure Dread Wonthy")) ds_list_add(lureList, 5);
lureName[5] = "Dread Wonthy";
lureWeight[5] = 3;
lureAero[5] = 1;
lureCatch[5] = 8;

// Error preventer
if (ds_list_size(lureList) == 0) Item("gain", "F-Lure Bayou Goopster");

// Set initial lure
lurePos = 0;
lureSize = ds_list_size(lureList);
lureIndex = ds_list_find_value(lureList, lurePos);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Back to normal, return cursor, stop the musics and clear the list //
o_curs.toggleCursor = true;
ds_list_destroy(lureList);
audio_stop_sound_ext("mus_fishing_battleTEMP");
audio_stop_sound_ext("mus_fishing_casualTEMP");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.event = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make cts hoopz
if escape = true then exit;
if (instance_exists(o_cts_hoopz) == 0)
{
    scr_event_hoopz_switch_cutscene();
    scr_entity_animation_set(o_cts_hoopz, "fishingIdle");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Pause //
if paused() exit;

// Fade out //
if fade &gt; 0 then 
    {
    // Tick down //
    fade -= dt();
    
    // Alpha //
    alpha_screen += 1 * dt_sec();
    
    // Teleport //
    if fade &lt;= 0 then Teleport(fishingRoom, fishingX, fishingY, 1);        
    }
else
    {
    // Escape //
    if MiniKeyPress("cancel") then 
        {
        // Toggle //
        if escape = true then escape = false;
        else escape = true;
        }
    
    // Escape //
    if escape = true then 
        {    
        // Guplur //
        if (guplur == false)
        {
            kid = instance_create(0, 0, oConfirm);
            kid.dad = id;
            kid.givTxt = "Leave the fishing hole?";
            kid.curHov = 1;
            audio_stop_sound_ext("sn_fishingreel01");
            audio_stop_sound_ext("sn_fishingreelfast01");
        }
        guplur = true;
        if (instance_exists(oConfirm) == 0)
        {
            if (global.confirm == "yes")
            {
                o_curs.toggleCursor = true;
                fade = 20;
                if audio_is_playing_ext("mus_fishing_battleTEMP") then audio_stop_sound_ext("mus_fishing_battleTEMP");
                if audio_is_playing_ext("mus_fishing_casualTEMP") then audio_stop_sound_ext("mus_fishing_casualTEMP");
            }
            else escape = false;
        }
        
        }
    }
    
// Nothing else matters //
if escape = true then exit;
else
    {    
    // Setup your casting of the lure //
    if mode = "setup" then
        {
        // Reel back the rod //
        scr_entity_animation_set(o_cts_hoopz, "fishingIdle");
        
        // Change lure //
        if mouse_wheel_up() then 
        {
            lurePos += 1;
            if (lurePos &gt;= lureSize) lurePos = 0;
        }
        if mouse_wheel_down() then 
        {
            lurePos -= 1;
            if (lurePos &lt; 0) lurePos = lureSize - 1;
        }
        lureIndex = ds_list_find_value(lureList, lurePos);
        
        // Gamepad shyte //
        if (global.keyinput_type == KEYINPUT_GAMEPAD)
        {
            // Increase strength //
            if MiniKeyPress("up") or MiniKeyHeld("up") then strength += 1;
            
            // Decrease strength //
            else if MiniKeyPress("down") or MiniKeyHeld("down") then strength -= 1;
        }
        
        // KB+M Shyte //
        else 
        {
            var cax = SCREEN_WIDTH * 0.4; // was middle
            var cay = SCREEN_HEIGHT - (SCREEN_HEIGHT * 0.4); // was middle
            var cad = point_distance(cax, cay, SCREEN_WIDTH, 0) - 50;
            var jusX = o_curs.x;
            if (jusX &lt; cax) jusX = cax;
            var jusY = o_curs.y;
            if (jusY &gt; cay) jusY = cay;
            var tmp = point_distance(cax, cay, jusX, jusY);
            // 312 is max
            strength = ((tmp / cad) * 150); //312
        }
        
        // Strength limit //
        if strength &gt; 100 then strength = 100;
        if strength &lt; 0 then strength = 0;
        
        if (global.keyinput_type == KEYINPUT_GAMEPAD)
        {
            // Increase angle //
            if MiniKeyPress("left") or MiniKeyHeld("left") then angle += 1;   
            // Decrease angle //
            else if MiniKeyPress("right") or MiniKeyHeld("right") then angle -= 1;
        }
        else
        {
            //angle = point_direction(o_cts_hoopz.x, o_cts_hoopz.y, view_xview[0] + o_curs.x, view_yview[0] + o_curs.y);
            angle = point_direction(cax, cay, o_curs.x, o_curs.y);
        }
        
        // Angle limit //
        if angle &gt;= 180 then angle = 0;
        if angle &gt; 90 then angle = 90;
        if angle &lt;= 0 then angle = 0;
        
        // Set camera
        Fishing("trajectory", strength, angle, lureWeight[lureIndex]);
        viewX = fsx;//o_cts_hoopz.x + lengthdir_x(strength * 4, angle);
        viewY = fsy;//o_cts_hoopz.y + lengthdir_y(strength * 4, angle);
        
        // Confirm angle //
        if MiniKeyPress("action") &amp;&amp; strength &gt;= strengthMinimum and guplur = false then 
            {
            mode = "casting";
            castTime = 1;
            castOnce = 0;
            }
        }
    else if (mode == "casting")
    {
        viewX = o_cts_hoopz.x;
        viewY = o_cts_hoopz.y;
        castTime -= dt_sec();
        if (castTime &lt;= 0) 
        {
            if (castOnce == 0) Animation("play and set", o_cts_hoopz, "fishingCast", "fishingCast1");
            castOnce = 1;
            if (o_cts_hoopz._current_animation == "fishingCast1")
            {
                Animation("play and set", o_cts_hoopz, "fishingCast2", "fishingIdle");
                if instance_exists(o_cts_hoopz)
                {
                    lure_spawn_x = o_cts_hoopz.x + 12;
                    lure_spawn_y = o_cts_hoopz.y - 12;
                }
                lure = instance_create(lure_spawn_x, lure_spawn_y, o_mg_fishing_lure);
                lure.move_x = lengthdir_x((strength * 0.2) + 0, angle);
                lure.move_y = lengthdir_y((strength * 0.2) + 0, angle);
                lure.move_z = 15 + (strength * 0.4);
            }
            if (o_cts_hoopz._current_animation == "fishingIdle") mode = "fishing";
        }
    }
    // Catch fish //
    else if mode = "catch" then
        {
        // Small Delay to avoid clicking away on accident //
        if timer_catch &gt; 0 then
            {
            // Tick down //
            timer_catch -= dt();
            
            // Event //
            if timer_catch &lt;= 0 then
                {
                reward = instance_create(x, y, o_mg_fishing_catch);
                reward.gun = fish_gun;
                }
            }
        }
        
    // Go to setup //
    if timer_setup &gt; 0 then
        {
        // Tick down //
        timer_setup -= dt();
        
        // Event //
        if timer_setup &lt;= 0 then 
            {
            mode = "setup";
            music = 1;
            }
        }
        
    // Begin battle //
    if timer_battle &gt; 0 then
        {
        // Tick down //
        timer_battle -= dt();
        
        // Event //
        if timer_battle &lt;= 0 then
            {
            fish = instance_create(x, y, o_mg_fishing_battle_fish);
            fish.gun = fish_gun;
            fish.value = fish_value;
            instance_create(x, y, o_mg_fishing_battle_player);
            }
        }
    }
    
// Guplur //
guplur = false;

// Music //
if music = 0 then
    {
    if audio_is_playing_ext("mus_fishing_battleTEMP") then audio_stop_sound_ext("mus_fishing_battleTEMP");
    if audio_is_playing_ext("mus_fishing_casualTEMP") then audio_stop_sound_ext("mus_fishing_casualTEMP");
    }
else if music = 1 then
    {
    if !audio_is_playing_ext("mus_fishing_casualTEMP") then audio_play_sound_ext("mus_fishing_casualTEMP", 5, 1);
    if audio_is_playing_ext("mus_fishing_battleTEMP") then audio_stop_sound_ext("mus_fishing_battleTEMP");
    audio_sound_gain_ext("mus_fishing_casualTEMP", 1, 0);
    }
else if music = 2 then
    {
    if !audio_is_playing_ext("mus_fishing_battleTEMP") then audio_play_sound_ext("mus_fishing_battleTEMP", 5, 1);
    if audio_is_playing_ext("mus_fishing_casualTEMP") then audio_stop_sound_ext("mus_fishing_casualTEMP");
    audio_sound_gain_ext("mus_fishing_battleTEMP", 1, 0);
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Adios //
with (o_mg_fishing_fish) GunMap(gun, "decimate");
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the fishing interface
vrx = view_xview[0]; vry = view_yview[0];

// Tween
if (!instance_exists(o_mg_fishing_lure) and !instance_exists(o_mg_fishing_catch)) ald = Goto(ald, 1, dt_sec() / tweenTime);
else ald = Goto(ald, 0, dt_sec() / tweenTime);

// Casting location
draw_set_color(c_white);
Fishing("trajectory", strength, angle, lureWeight[lureIndex]);
draw_set_alpha(ald);
draw_circle(fsx, fsy, 4, true);
draw_set_alpha(1);

///// Power / Angle bar /////
scr_font(global.fn_7ocs, c_white, 0);
dry = vry + SCREEN_HEIGHT + 1;
Border("draw", 0, vrx - 24, dry - (ald * 28));
drx = vrx + 8; dry = dry + 12;
if (strength &lt; strengthMinimum) draw_set_color(c_red); else draw_set_color(c_white);
draw_text(drx, dry - (ald * 28), "Power: " + string_format(strength, 2, 0) + "%");
drx += 60;
draw_set_color(c_white);
draw_text(drx, dry - (ald * 28), "Angle: " + string(round(angle)));
///// Power / Angle bar /////

///// Lure Stats /////
dry -= 28;
drx = vrx + SCREEN_WIDTH - 6 - 128;
drx += 70;
dry -= 90;
dry += 24; drx += 16; dry += 16; dry += 128 - (ald * 128);
Border("draw", 1, vrx + 252 + 16, vry + 116 + 24 + 16 + 128 - (ald * 128));
scr_font(global.fn_1, c_aqua, fa_center, fa_top);
draw_text(drx - 7, dry - 3, string(lureName[lureIndex]));
scr_font(global.fn_7ocs, c_white, 2);
dry += 20;
draw_set_halign(fa_right);
draw_text(drx, dry, "Weight: ");
draw_set_halign(fa_left);
draw_text(drx + 5, dry, string(lureWeight[lureIndex]));
dry += 15;
draw_set_halign(fa_right);
draw_text(drx, dry, "Aerodynamics: ");
draw_set_halign(fa_left);
draw_text(drx + 5, dry, string(lureAero[lureIndex]));
dry += 15;
draw_set_halign(fa_right);
draw_text(drx, dry, "Potential: ");
draw_set_halign(fa_left);
draw_text(drx + 5, dry, string(lureCatch[lureIndex]));
// Draw lure icon //
//drx -= 70;
//dry -= 45;
//draw_sprite_ext(s_mg_fishing_lure, 0, drx, dry, 1, 1, 0, c_white, 1);
///// Lure Stats /////

// Gun'sbag capacity //
var guns_amount = scr_equipment_guns_bag_getSlotsUsed(); // &lt;--- This one seems to be correct //
var gunsbag_amount = scr_equipment_guns_bag_getSlotsTotal();
Border("draw", 2, vrx - 16, vry - 64 + (ald * 48));
draw_text(view_xview + 8, view_yview - 40 + (ald * 48), "Gun'sbag capacity: " + string(guns_amount) + " / " + string(gunsbag_amount));

///// Battle screen /////  
if instance_exists(o_mg_fishing_battle_fish) then 
    {
    Border("draw back", 3, vrx + 152, vry + 80);
    with (o_mg_fishing_battle_fish) event_user(0);
    with (o_mg_fishing_battle_player) event_user(0);
    Border("draw border", 3, vrx + 152, vry + 80);
    dry = 162;
    drc = make_color_hsv(((o_mg_fishing_battle_player.hitpoints / 100) * 70), 255, 255);
    Border("draw back", 4, vrx + 152, vry + dry);
    draw_sprite_ext(s1x1, 0, vrx + 152 + 4, vry + dry + 2, o_mg_fishing_battle_player.hitpoints / 100 * 72, 34, 0, drc, 0.75);
    //scr_font(global.fn_1, c_white, fa_center, fa_top);
    //draw_text(view_xview + 152 + 40, vry + dry + 2 + 4, "LINE STRENGTH");
    Border("draw border", 4, vrx + 152, vry + dry);
    }
    

    
// Screen fadeout //
draw_set_color(c_black)
draw_set_alpha(alpha_screen);
draw_rectangle(view_xview - 2, view_yview - 2, view_xview + view_wview + 2, view_yview + view_hview + 2, false);

//draw_line(view_xview + 64, view_yview + 192, view_xview + 0, view_yview + 128);
//draw_line(view_xview + 64, view_yview + 192, view_xview + 128, view_yview + 192);

//draw_set_color(c_red);
//draw_line(view_xview + 64, view_yview + 192, view_xview + 64 + lengthdir_x(strength, angle), view_yview + 192 + lengthdir_y(strength, angle))

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
