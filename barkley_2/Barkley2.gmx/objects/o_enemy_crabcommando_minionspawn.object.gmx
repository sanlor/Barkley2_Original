<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_boss_crabcommander_shrapnel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

scr_entity_setShadowVisible(false);
dny = -256;

if (!instance_exists(o_enemy_crabcommando_body)) {
    instance_destroy()
}
else {
    // Configure particle vortex
    var bodyX = o_enemy_crabcommando_body.x;
    var bodyY = o_enemy_crabcommando_body.y;
    var bodyZ = o_enemy_crabcommando_body.z;
    
    z = 16;
    scr_entity_setGravity(0);
    
    spawnAngle = point_direction(x, y, bodyX, bodyY);
    spawnDist = point_distance(x, y, bodyX, bodyY) + 40;
    spawnZ = bodyZ + 30;
    
    particles = ds_list_create();
    left = 100 + random(40);
    distDiv = 3 + random(3);
    
    spawnTimer = 0;
    spawnInterval = .08;
    
    // Enemy configurations
    enemyCreateTimer = 35;
    enemyCreated = false;
    decayTime = 45; // Lifetime of enemy, in seconds
    
    // Configure enemy to spawn
    enemyObject = o_enemy_ruinedDrone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if paused() exit;

spawnTimer += dt();
while (left &gt; 0 and spawnTimer &gt;= spawnInterval) {
    // Spawn a particle
    p = ds_list_create();
    p[| 0] = 0; // angle
    p[| 1] = -10 + random(20); // angleOffset
    p[| 2] = spawnDist - 40 + random(80); // dist
    p[| 3] = irandom(3); // image
    ds_list_add(particles, p);
    
    left--;
    spawnTimer -= spawnInterval;
}

// Step all particles
for (var i = 0; i &lt; ds_list_size(particles); i++) {
    var p = particles[| i];
    var angle       = p[| 0];
    var loops = angle / 360;
    angle += (6 * dt()) * (1 + (loops*10)) * (.5 + random(.8));
    p[| 0] = angle;
    
    if (loops &gt; 20) {
        ds_list_delete(particles, i);
        ds_list_destroy(p);
        i--;
    }
}

// Enemy spawn
enemyCreateTimer -= dt();
if (enemyCreateTimer &lt;= 0 and enemyCreated == false) {
    // Create enemy
    var n = instance_create(x, y, enemyObject);
    n.z = z;
    with n {
        // Always aggroed
        scr_AI_aggro_configure(9999, 9999, 10000);
    }
    
    var statusEffect = scr_statusEffect_generateNewFromScript(statusEffect_decayEnemyOverTime);
    statusEffect[? "lifetimeSeconds"] = decayTime;
    scr_statusEffect_applyOrRefreshOnCombatActor(statusEffect_decayEnemyOverTime, statusEffect, n);

    enemyCreated = true;
}

// Destroy after done
if (enemyCreated) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

for (var i = 0; i &lt; ds_list_size(particles); i++) {
    var p = particles[| i];
    var angle       = p[| 0];
    var angleOffset = p[| 1];
    var dist        = p[| 2];
    var image       = p[| 3];
    
    var loops = angle / 360;
    var ratio = 1/ (1+(loops*distDiv));
    
    var a = degtorad(angle + spawnAngle + angleOffset);
    var px = cos(a) * (dist * ratio);
    var py = -sin(a) * (dist * ratio);
    var pz = spawnZ * ratio;
    
    draw_sprite(sprite_index, image, dx + px, dy + py - pz);
}

var ratio = 1 - (enemyCreateTimer / 35);
draw_set_colour(c_white);
draw_set_alpha(1);
draw_circle(dx, dy, (ratio + sin(current_time / 10)*.1) * 16, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
