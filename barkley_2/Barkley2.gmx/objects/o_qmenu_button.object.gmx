<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2510002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///!GOOD! - Buttons for navigating QM (pocket, gun, zauber)
scale = global.qmScale;
roomWidth = global.qmRoomWidth;
roomHeight = global.qmRoomHeight;

offX = view_xview[0];
offY = view_yview[0];

//gz stuff
objCursor = o_curs;
press_time = 0;
//offX = 0; offY = 0; //for mouse script

//temp
x = offX + (roomWidth / 2); //room_width/2
y = offY + (roomHeight / 2); //room_height

//x = x/2; //offal used
//y = y/2; //offal used

col = -1;

//this is default going down?
dest_x = x; //x
dest_y = y; //y-room_height/4

// background
st_off = 0;
st_menu = 1;
st_guns = 2;
st_pocket = 3;
st_class = 4;

ar_bframe[st_off,st_menu] = 0;
ar_bframe[st_off,st_guns] = 0;
ar_bframe[st_off,st_class] = 0;
ar_bframe[st_off,st_pocket] = 0;

ar_bframe[st_guns,st_class] = 8;
ar_bframe[st_guns,st_pocket] = 9;
ar_bframe[st_pocket,st_class] = 10;

ar_bframe[st_menu,st_pocket] = 6;
ar_bframe[st_pocket,st_pocket] = 7;

ar_bframe[st_menu,st_menu] = 1;
ar_bframe[st_menu,st_guns] = 2;
ar_bframe[st_menu,st_class] = 4;

ar_bframe[st_guns,st_guns] = 3;
ar_bframe[st_class,st_class] = 5;

state = st_menu;
d_state = st_off;
state_change = 0;

// button
button_count = 3;

ar_xoff[0] = x + 20;//(10 * scale); //was 20
ar_xoff[1] = x;
ar_xoff[2] = x - 20;//(10 * scale); //was 20
ar_xoff[3] = x; //new

ar_yoff[0] = dest_y;
ar_yoff[1] = dest_y - 24;//(12 * scale); //was 24
ar_yoff[2] = dest_y;
ar_yoff[3] = dest_y; //new

ar_bx[0] = -100;//-(50 * scale); //100
ar_bx[1] = -25;//25;//-(12 * scale); //25
ar_bx[2] = 50;//(25 * scale); //50
ar_bx[3] = 0; //new

ar_by[0] = 3;//2 * scale; //3
ar_by[1] = 35;//18 * scale; //35
ar_by[2] = 3;//2 * scale; //3
ar_by[3] = 0; //new

for (i = 0; i &lt; 4; i += 1)
{
    ar_dx[i] = ar_bx[i];
    ar_dy[i] = ar_by[i];
    ar_sx[i] = ar_bx[i];
    ar_sy[i] = ar_by[i];
}

b_hover = -1;
b_dhover = -1;
b_ddhover = -1;
b_click = -1;
b_clicked = -1;

b_width = 48;//24 * scale; //49;
b_height = 16;//8 * scale; //16;

hover_time = 0;
click_time = 0;

dmx = mouse_x;
dmy = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivate quick menu
quickmenu("destroy");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Checks to see which buttons are pressed (Guns, items, abilities)
//if (global.controlType == "xbox") scr_keys_process();

rmx = o_curs.x;//view_xview[0] + o_curs.x;
rmy = o_curs.y;//view_yview[0] + o_curs.y;
if ((round(x) != round(dest_x)) or (round(y) != round(dest_y))) 
{
    x = lerp(x,dest_x,0.9);
    y = lerp(y,dest_y,0.9);
}
else 
{
    if (b_hover != -1) 
    {
        hover_time = min(hover_time+1,2)
        if (hover_time == 2)
        {
            b_ddhover = b_dhover;
            b_dhover = b_hover;
            hover_time = 0;
        }
    }
    else 
    {
        b_ddhover = b_dhover;
        b_dhover = b_hover;
    }
    
    if (global.controlType == "pc")
    {
        //col = scr_qmenu_col l(); //made it an event user to save on another script
        event_user(0); //assigns col in user event 0
    }
    else col = -1;
    e = 1;
    if (instance_exists(o_qmenu_item)) { if (o_qmenu_item.mouse_dragging != -1) e = 0; }
    if instance_exists(o_qmenu) 
    {
        if ((o_qmenu.dragging &gt;= 0) or (o_qmenu.uncollapsing &gt;= 0)) e = 0;
        if (o_qmenu.menu_type == "guns") { if (rmx &lt; (190 * scale)) e = 0; }
        else if (o_qmenu.menu_type == "zauber") { if (rmx &gt; roomWidth - (190 * scale)) e = 0; }
    }
    if (!instance_exists(o_qmenu)) objCursor.frame = 0;
    if (e) //rmx != dmx or rmy != dmy
    {
        for(i = 0; i &lt; button_count + 1; i += 1) 
        {
            if (col == i)
            {
                b_hover = i;
                objCursor.frame = 1;
                if (b_hover == 3) objCursor.frame = 6;
                break;
            }
            if (col == 3) objCursor.frame = 6;
            b_hover = -1;
        }
    }
    else b_hover = -1;
    dmx = rmx;
    dmy = rmy
    
    //////////////////////////////////////////////////////////gz
    //1 is the menu state, 2 = guns, 3 = pocket, 4 = class
    doState = -1;
    if (state == 1) //menu
    {
        if (scr_button("dpad left")) doState = 0;
        else if (scr_button("dpad right")) doState = 2;
        else if (scr_button("dpad down")) doState = 1;
        else press_time = 9;
    }
    else if (state == 2) // guns
    {
        if (scr_button("dpad right")) doState = 3;
        else press_time = 9;
    }
    else if (state == 3) //pocket
    {
        if (scr_button("dpad up")) doState = 3;
        else press_time = 9;
    }
    else if (state == 4) //class
    {
        if (scr_button("dpad left")) doState = 3;
        else press_time = 9;
    }
    if (doState != -1)
    {
        press_time += 1;
        if (press_time &gt;= 10)
        {
            press_time = 0;
            dest_x = ar_xoff[doState];
            dest_y = ar_yoff[doState];
            state = doState + 2;
            if (doState == 3) state = 1;
        }
    }
    
    if (doState != -1)
    {
        Destroy(o_qmenu);
        Destroy(o_qmenu_item);
    }
    
    if (click_time) 
    {
        click_time += 1;
        if (click_time == 4)
        {
            click_time = 0;
            b_click = -1;
            if (b_clicked &gt;= 0) 
            {
                dest_x = ar_xoff[b_clicked];
                dest_y = ar_yoff[b_clicked];
                state = b_clicked + 2;
                Destroy(o_qmenu);
                Destroy(o_qmenu_item);
            }
        }
    }
    else 
    {
        if ((b_hover == b_dhover) and (mouse_check_button_pressed(mb_left))) 
        {
            b_click = b_hover;
            click_time = 1;
            b_clicked = b_hover;
            if (b_hover == 3) o_qmenu_perst.doQ = 1; //keyboard_key_press(ord("Q"));
        }
    }
}

//Make menus based on what is clicked
if (state == d_state) //4 is class
{
    if (state == 2) 
    { 
        if (instance_exists(o_qmenu) == 0) instance_create((12 * scale), (8 * scale), o_qmenu); //24, 16
    }
    else if (state == 3)
    {
        if (instance_exists(o_qmenu_item) == 0) instance_create(0, 0, o_qmenu_item);
    }
    else if (state == 4) 
    { 
        if (instance_exists(o_qmenu) == 0) instance_create((12 * scale) - 9999, (8 * scale), o_qmenu); //24, 16
    }
}

if (state != d_state) 
{
    state_change += 1;
    if (state_change &gt; 2)
    {
        d_state = state;
        state_change = 0;
        b_hover = -1;
    }
}
else state_change = 0;
   
//Shift pocket
if (state == 2) ar_dx[1] = ar_sx[1] + ((2.5 * 8) * scale); //was 1.5 * 8 for both
else if (state == 4) ar_dx[1] = ar_sx[1] - ((2.5 * 8) * scale); 
else ar_dx[1] = ar_sx[1]; 

//Tween
for(i = 0; i &lt; 4; i += 1) 
{
    ar_bx[i] = scr_math_smooth(ar_dx[i],ar_bx[i],0.5);
    ar_by[i] = scr_math_smooth(ar_dy[i],ar_by[i],0.5);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check which area is hilighted
//change for view y view
var s;
s = state - 2;
//col2 = 0;

//replaced x and y
hx = (roomWidth / 2);
hy = (roomHeight / 2);
hx += o_qmenu_perst.xs - o_qmenu_perst.dest_x; //do i need this?
hy += o_qmenu_perst.ys - o_qmenu_perst.dest_y; // for pockets
    
// hoopz
if (point_distance(rmx, rmy, (hx * scale), (hy * scale) - (12 * scale)) &lt; (24 * scale)) { col = 3; exit; }

// out of window - scale? //mouse rect is why it wont cancel out
ex = view_xview[0];
ey = view_yview[0];
if (scr_mouse_rect(ex + (scale * 198) * (!s and s!=-1), ey + 0, ex + roomWidth - (198 * scale * (s == 2)), ey + ((112 - (26 * (s == 1))) * 2) / 2) * scale) { col = 3; exit; }
   
// in window, off button 
if (s == 0 and rmx &lt; (165 * scale)) or (s == 1 and rmy &gt; (120 * scale)) or (s == 2 and rmx &gt; (215 * scale)) { col = -1; exit; } //col2 = 1;

// buttons
if (scr_collision_tri(rmx, rmy, hx * scale, hy * scale, 0, hy * scale, 0, roomHeight) and s != 0) { col = 0; exit; }
    
if (scr_collision_tri(rmx, rmy, hx * scale, hy * scale, 0, roomHeight, roomWidth, roomHeight) and s != 1) { col = 1; exit; }
    
if (scr_collision_tri(rmx, rmy, hx * scale, hy * scale, roomWidth, roomHeight, roomWidth, hy * scale) and s != 2) { col = 2; exit; }

col = -1;
//col2 = 2; //on pocket it was doing this, fix buttons
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// button draw
itemAlpha = 0;
zaubAlpha = 0;
gunsAlpha = 0;
faceAlpha = 0;

//added
offX = round(view_xview[0]);
offY = round(view_yview[0]);

//green grid stuff
gridSub = ar_bframe[min(d_state, state), max(d_state, state)];
draw_sprite_ext(s_qback, gridSub, offX + 0, offY + 0, scale, scale, 0, c_white, 1);
offX += 1; //I am not sure why this is one off after tbhe grid, but it is

/*
//These hilights stack as you hold over an area
if (b_hover &gt;= 0)
{
    draw_sprite_ext(s_bartemp, b_hover + 1, offX + 0, offY + (roomHeight - (40 * scale)), scale, scale, 0, c_white, 0.22);
    if (b_hover + 1 == 1) gunsAlpha += 0.22;
    if (b_hover + 1 == 2) itemAlpha += 0.22;
    if (b_hover + 1 == 3) zaubAlpha += 0.22;
    if (b_hover + 1 == 4) faceAlpha += 0.22;
}

if (b_dhover &gt;= 0)
{
    draw_sprite_ext(s_bartemp, b_dhover + 1, offX + 0, offY + (roomHeight - (40 * scale)), scale, scale, 0, c_white, 0.22);
    if (b_dhover + 1 == 1) gunsAlpha += 0.22;
    if (b_dhover + 1 == 2) itemAlpha += 0.22;
    if (b_dhover + 1 == 3) zaubAlpha += 0.22;
    if (b_dhover + 1 == 4) faceAlpha += 0.22;
}
    
if (b_ddhover &gt;= 0)
{
    draw_sprite_ext(s_bartemp, b_ddhover + 1, offX + 0, offY + (roomHeight - (40 * scale)), scale, scale, 0, c_white, 0.22);
    if (b_ddhover + 1 == 1) gunsAlpha += 0.22;
    if (b_ddhover + 1 == 2) itemAlpha += 0.22;
    if (b_ddhover + 1 == 3) zaubAlpha += 0.22;
    if (b_ddhover + 1 == 4) faceAlpha += 0.22;
}

//Solid version
if ((state-2) &gt; -1) 
{
    draw_sprite_ext(s_bartemp, state - 1, offX + 0, offY + (roomHeight - (40 * scale)), scale, scale, 0, c_white, 1);
    if (state - 2 == 0) gunsAlpha = 1;
    if (state - 2 == 1) itemAlpha = 1;
    if (state - 2 == 2) zaubAlpha = 1;
    //if (state - 2 == 3) faceAlpha = 1; //can never be face state because it exits
}
*/

//Draw health bar + doomface
if (faceAlpha &gt; 0)
{
    //if (o_hud.health_ready == 1) draw_sprite_part_ext(s_bar, o_hud._health_img, 0, o_hud._top, o_hud.sprite_width, o_hud._bottom - o_hud._top, offX - 1, offY + 200 + o_hud._top, 1, 1, c_white, faceAlpha);
    //if (scr_quest_get_state("player_is_fantomas") == 1) then draw_sprite_ext(s_hud_face_fantomas,(3*o_hud.injured+1)+o_hud.glance,offX+179-1,offY+205,1,1,0,c_white,faceAlpha);
    //else draw_sprite_ext(s_hud_face,(3*o_hud.injured+1)+o_hud.glance,offX+179-1,offY+205,1,1,0,c_white,faceAlpha); //-1x
}

//Draw active item
if (itemAlpha &gt; 0)
{
    //if (Candy("current") != NULL) {
    //    scr_items_draw_ext(scr_items_get(ITEMTYPE_CANDY, Candy("current")), offX + global.pocketX, offY + global.pocketY, scale, scale, 0, c_white, itemAlpha);
    //}
}
    
//Draw active skill
if (zaubAlpha &gt; 0)
{
    //if (scr_items_zauber_getCurrent() != NULL)
    //{
    //    scr_items_draw_ext(scr_items_get(ITEMTYPE_ZAUBER, scr_items_zauber_getCurrent()), offX + global.zauberX, offY + global.zauberY, scale, scale, 0, c_white, zaubAlpha);
    //}
}

//Overlay that draws guns above all
if (gunsAlpha &gt; 0)
{
    //event_user(10); //draw gun, gun ammo, periodic
}

//These are the three buttons, notice it skips draw when active state
for (i = 0; i &lt; button_count; i += 1) 
{
    wx = offX + (roomWidth / 2);
    wy = offY + (roomHeight / 2);
    if (gridSub == 0) wy += 64;
    wx += o_qmenu_perst.xs - o_qmenu_perst.dest_x;
    wy += o_qmenu_perst.ys - o_qmenu_perst.dest_y;
    frame = i*5 + ((i=b_hover) + (i=b_dhover) + (i=b_ddhover) + (i=b_click));
    c = c_white;
    if (state != d_state) c = c_gray;
    if ((state - 2) != i) 
    {
        //if (!frame_on) draw_sprite_ext(s_b_back, frame, 1 * (x + ar_bx[i] + b_width / 2), 1 * (y + ar_by[i] + (b_height / 2)), scale, scale, 0, c, 0.8);
        draw_sprite_ext(s_caption, frame, 1 * (wx + ar_bx[i] + (b_width / 2)), 1 * (wy + ar_by[i] + b_height / 2), scale, scale, 0, c, 1);
    }
}

//Reset font
draw_set_halign(0);
draw_set_valign(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
