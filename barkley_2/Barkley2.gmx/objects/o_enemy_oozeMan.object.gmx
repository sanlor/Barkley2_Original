<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sOozeManMap</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>EnemyCombatActor</parentName>
  <maskName>mask_disk_24by24</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////you get all the default variables from EnemyCombatActor
event_inherited();

// Enemy stats
scr_enemyDB_statsGet(enemyBuild);

move_speed = scr_stats_getBaseStat(self.id, STAT_BASE_SPEED);

// Enemy configurations
scr_entity_setZHitbox(0, global.settingEnemyBigHeight);
scr_entity_setMovementCollisionShape_circle(24);
scr_entity_setShadowVisible(false);
scr_entity_setShadowCircle(24);
collisionPush = ACTOR_COLLISIONPUSH_NONE;

anim = 0;
animSpeed = 0.2;
animStrike = 0;

meltAnim = -1;

deathSound = "swampman_death";
damageSound = "swampman_hurt";

// Movement
var movement = scr_AI_movement_init(scr_AI_movementType_standard);
movement[? "animWalkSpd"] = 0.6;

// Passive and active states
var ark, conf, prox;
prox = scr_AI_addPassiveState(scr_AI_passive_proximity);
prox[? "sndAlertSound"] = "swampman_alert";

conf = scr_AI_addActiveState(scr_AI_active_approach);
conf[? "walkScript"] = movement;


// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// Slash
attack = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_action_slash);
attack[? "action"] = action; 
conf[? "stateAfterStop"] = action;

AI_util_action_setDamage(action, 25, .5, .5, 0, 10, 200, STAGGER_HARDNESS_HARD);
action[? "range"] = 0;
action[? "mask"] = mask_crescent_56_28;
action[? "beforeTime"] = 4;
action[? "damageTime"] = 2;
action[? "afterTime"] = 9;
action[? "attackName"] = "smash";
action[? "sndAttackWarn"] = "swampman_warn";
action[? "sndAttackStrike"] = "swampman_strike";
action[? "numParticles"] = 20;
action[? "particleObject"] = o_effect_rubble;

attack[? "distMax"] = 50;
attack[? "cooldownTime"] = 10;
attack[? "cooldownTimeRnd"] = 20;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create animations
scr_entity_animation_define("rise", s_oozeMan, 0, 8, 1);
scr_entity_animation_define("melt", s_oozeMan, 8, 15, 1);
scr_entity_animation_define("idle", s_oozeMan, 23, 1, 0);
scr_entity_animation_define("stagger", s_oozeMan, 24, 1, 0);
scr_entity_animation_define_ext("walk", s_oozeMan, 34, 6, 0.2, 0.05, 1, 0);

scr_entity_animation_define("swipe_before", s_oozeMan, 24, 4, 0);
scr_entity_animation_define("swipe_damage", s_oozeMan, 28, 2, 0);
scr_entity_animation_define("swipe_after", s_oozeMan, 30, 4, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if paused() exit;

if (AI_stateTopType == AI_STATETYPE_ACTIVE or AI_stateTopType == AI_STATETYPE_ACTION or AI_stateTopType == AI_STATETYPE_GLOBAL)
{
    scr_entity_setShadowVisible(true);
    collisionPush = ACTOR_COLLISIONPUSH_STANDARD;
    
    if(meltAnim &lt; 9)
    {
        if(meltAnim == -1) {
            meltAnim = 0;
        }
        scr_stats_setBaseStat(self, STAT_BASE_SPEED, 0);
        meltAnim += 0.9 * dt();
    }
    else
    {
        scr_stats_setBaseStat(self, STAT_BASE_SPEED, move_speed);
    }
}
else
{
    if(meltAnim != -1)
    {
        if(meltAnim &lt; 23)
        {
            meltAnim += 1 * dt();
            shadow_visible = true;
            collisionPush = ACTOR_COLLISIONPUSH_STANDARD;
        }
        if(meltAnim &gt;= 23)
        {
            meltAnim = -1;
            scr_stats_setBaseStat(self, STAT_BASE_SPEED, 0);
            shadow_visible = false;
            collisionPush = ACTOR_COLLISIONPUSH_NONE;
        }
    }
    else {
        scr_entity_setShadowVisible(false);
        collisionPush = ACTOR_COLLISIONPUSH_NONE;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _obj;

_obj = instance_create(x,y,o_FX);
_obj.sprite_index = s_oozeMan_tempDeath;
_obj.image_speed = 0.2;

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Get quadrant enemy is facing towarsd
var quadrant = ((faceDir+360) mod 360) div 90;

// Set animation shifts
if (quadrant == 2 or quadrant == 3) {
    // Facing downwards
    scr_entity_animation_setShift("rise", 0);
    scr_entity_animation_setShift("melt", 0);
    scr_entity_animation_setShift("idle", 0);
    scr_entity_animation_setShift("stagger", 0);
    scr_entity_animation_setShift("walk", 0);
    scr_entity_animation_setShift("swipe_before", 0);
    scr_entity_animation_setShift("swipe_damage", 0);
    scr_entity_animation_setShift("swipe_after", 0);
}
else {
    // Facing upwards
    scr_entity_animation_setShift("rise", 0);
    scr_entity_animation_setShift("melt", 0);
    scr_entity_animation_setShift("idle", 17);
    scr_entity_animation_setShift("stagger", 17);
    scr_entity_animation_setShift("walk", 17);
    scr_entity_animation_setShift("swipe_before", 17);
    scr_entity_animation_setShift("swipe_damage", 17);
    scr_entity_animation_setShift("swipe_after", 17);
}

var sprite = s_oozeMan;
var image;
if(a_attackName == "stagger")
{
    image = scr_entity_animation_getImage("stagger");
}
else
{
    if(a_walking)
    {
        image = scr_entity_animation_getImage("walk");
    }
    else
    {
        image = scr_entity_animation_getImage("idle");
    }
}

if(AI_stateTopType == AI_STATETYPE_ACTIVE or AI_stateTopType == AI_STATETYPE_ACTION or AI_stateTopType == AI_STATETYPE_GLOBAL)
{
    if(meltAnim &lt; 9)
    {
        image = scr_entity_animation_imageByRatio("rise", meltAnim, 9);
    }
}
else
{
    if(meltAnim != -1)
    {
        if(meltAnim &lt; 23)
        {
            image = scr_entity_animation_imageByRatio("melt", meltAnim-9, 23-9);
        }
    }
}


if (a_attackName == "smash") {
    switch(a_attackState)
    {
        case "before":
            image = scr_entity_animation_imageByRatio("swipe_before", I_atk_slsh_timer, I_atk_slsh_intBefore);
            break;
            
        case "damage":
            image = scr_entity_animation_imageByRatio("swipe_damage", I_atk_slsh_timer, I_atk_slsh_intDamage);
            break;
        
        case "after":
            image = scr_entity_animation_imageByRatio("swipe_after", I_atk_slsh_timer, I_atk_slsh_intAfter);
            break;
    }
}

switch(quadrant)
{
    case 0: _hScale = -1; break;
    case 1: _hScale = 1; break;
    case 2: _hScale = -1; break;
    case 3: _hScale = 1; break;
}

if(meltAnim &gt; -1)
{
    DrawStripExt(sprite,floor(image),dx,dy,_hScale,1,0,c_white,1);
}

combatActor_draw_post();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>34,70</point>
    <point>42,42</point>
  </PhysicsShapePoints>
</object>
