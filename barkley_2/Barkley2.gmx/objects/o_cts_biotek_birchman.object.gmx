<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup the cutscene //
alpha = 0;
alpha_goal = 1.5;
alpha_orb = 0;
alpha_orb_goal = 1;
scale = 0;
timer_exit = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Pause //
if paused() exit;

// Alpha //
if alpha &lt; alpha_goal then alpha += 0.05;
if alpha &gt; alpha_goal then alpha -= 0.05;
if alpha &gt;= alpha_goal and timer_exit = -1 then timer_exit = 15;
if alpha &lt;= 0 and alpha_goal &lt;= 0 then instance_destroy();

// Alpha of the expanding orb/flash of light //
if alpha_orb &gt; alpha_orb_goal then alpha_orb -= 0.2;
if alpha_orb &lt; alpha_orb_goal then alpha_orb += 0.05;

// Scale of the orb //
if scale != -1 then scale += 0.1;

// Lifespan of this all //
if timer_exit &gt; 0 then
    {
    timer_exit -= dt();
    if timer_exit &lt;= 0 then
        {
        scale = -1;
        alpha_goal = 0;
        alpha_orb_goal = 0;
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Light up the screen//
draw_set_color(c_white);
draw_set_alpha(alpha);
draw_rectangle(view_xview - 2, view_yview - 2, view_xview + view_wview, view_yview + view_hview, false);

// Expanding light orb that engulfs the screen //
draw_sprite_ext(s_mg_booty_light_orbit, 0, o_pdt_phileass_descent01.x, o_pdt_phileass_descent01.y - 64, scale, scale, image_angle, image_blend, alpha_orb);
draw_sprite_ext(s_mg_booty_light_orbit, 0, o_pdt_phileass_descent01.x, o_pdt_phileass_descent01.y - 64, scale * 0.5, scale * 0.5, image_angle, image_blend, alpha_orb * 0.5);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
