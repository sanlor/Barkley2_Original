<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_guilderVonMiser01</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>EnemyCombatActor</parentName>
  <maskName>mask_disk_32by32</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
event_inherited();

lifedraw = 0; // Disable health bar
ailmentTotem_define(id, 0, 35, 24, 70); // Legit

// Poke attack
attackTimer = 0;
attackFrequency = 0.2; // Every X seconds
attackMelee = ds_map_create();
Attack("assign", attackMelee, "poke", 0.5, 0, 0, 0, 0.5, 0);

// Single coin damage
attackCoin = ds_map_create();
Attack("assign", attackCoin, "coin", .5, 0, 0, 0, 0.5, 0.5);

// State
state = "harass";

// Brast
brastCooldownTime = 15; // Time to recharge brast
brastFollowTime = 0.5;    // Time to get to hoopz Y
brastTelegraphTime = 1; // Time to telegraph brast
brastShootTime = 1;     // Time in seconds to shoot
brastPauseTime = 1;     // Time to pause after brast
brastTopTime = 1;       // Time to reach 0 y after brast pause
brastSitTime = 3;       // Time to sit after reaching top

brastCooldown = 7.5;    // Time left before brast recharges
brastFollow = 0;
brastTelegraph = 0;
brastShoot = 0;
brastPause = 0;
brastTop = 0;
brastSit = 0;


cinema = 1;
mul = 0;
mulSpd = 0;

if (instance_exists(o_room_darkarea))
{
    light = Light("add", id, 128, .2, merge_color(c_black, global.colorGuilderberg, 0));
}
else light = -999;

bob = 0; // bobbing up and down
zht = 16; // z to be in air

sub = 0;
subSpd = 10;

proAct = 0;
proSec = 4; // Projectiles a second
proCou = 0;
proDmg = 1;
proTim = 1;
proPau = 3;

float_y = y;
float_x = x;
lockState = "wait";
lockWait = 1;
lockY = 0;
lockTimeFollow = 1.5; // Time in seconds to achieve lock Y
lockTimePause = 0.5;

// Enemy stats
scr_entity_setShadowCircle(18);
scr_enemyDB_statsGet(enemyBuild);
scr_entity_setCollisionType(COLLISION_ALL);
scr_path_setMovementType(scr_path_movementType_standard);
scr_path_setLookaheadDist(20);
scr_stats_knockback_setKnockbackHandler(scr_stats_knockbackHandler_none);
scr_AI_aggro_configure(120, 200, 800);
scr_entity_setZHitbox(0, 50);

mvyDir = 90;
mvyLen = 8; // 96

//y -= mvyLen / 2;

deathSound = "cGremlinSmall_death";
damageSound = "cGremlinSmall_grunt";

var conf, attacks, attack, guard;
guard = scr_AI_addPassiveState(scr_AI_passive_none);
guard[? "sndAlertSound"] = "cGremlinSmall_alert";

// Stagger
staggerX = 0;
staggerY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy
ds_map_destroy(attackMelee);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bobbing
event_inherited();
if (paused()) exit;

mul = Goto(mul, 1, mulSpd * dt_sec());
z = (zht - (sin(bob) * 3)) * mul;
bob += dt() * 0.33;
Light("y", light, -(z * 2.5));
if (mul != 1) Light("color", light, merge_color(c_black, global.colorGuilderberg, 0.33 * mul));

if (mul != 0) sub += subSpd * dt_sec();
if (scr_stats_getCurrentStat(id, STAT_CURRENT_STAGGER_TIME) &gt; 0) exit;
if (cinema) exit;

// Speed
actualSpeed = (scr_stats_getEffectiveStat(id, STAT_BASE_AGILE) / scr_stats_getBaseStat(id, STAT_BASE_AGILE));
actualSpeed += (scr_stats_getBaseStat(id, STAT_BASE_WEIGHT) / scr_stats_getEffectiveStat(id, STAT_BASE_WEIGHT));
actualSpeed /= 2;
dts = actualSpeed * dt_sec();
actualSpeed *= 30;
mvySpd = 50; //actualSpeed * 2; // Sway speed
//scr_stats_getEffectiveStat(id, STAT_BASE_AGILE) * 2;

y = float_y + lengthdir_y(mvyLen, mvyDir);
y = min(o_cinema3.y, y);
x = float_x;
mvyDir += mvySpd * dts; // dt_sec();

//if (AI_stateTopType == AI_STATETYPE_PASSIVE) exit;
/*
proTim -= dt_sec();
if (proTim &lt;= 0)
{
    proAct = 0;
    proPau -= dt_sec();
    if (proPau &lt;= 0)
    {
        proPau = 3;
        proTim = 1;
        proPat = choose(0, 1, 2);
        proSwr = 0;
        proAct = 1;
    }
}
*/
/*
if (proAct &gt; 0)
{
    proAct -= dt_sec();
    proCou += dt_sec() * proSec;
    while (proCou &gt; 1)
    {
        proCou -= 1;
        audio_play_sound_AI("hoopz_pickupMoney");
        cdr = 90;
        for (i = 0; i &lt; 4; i += 1)
        {
            event_user(10); // Make coin
            cdr += 90;
        }
    }
}
*/
brastCooldown -= dts; // dt_sec();
if (brastCooldown &lt;= 0)
{
    state = "follow";
    brastCooldown = brastCooldownTime;
    brastX = float_x;
    brastY = float_y;
    brastXDis = x - xstart;
    brastYDis = y - o_hoopz.y;
    brastProgress = 0;
    brastFollow = brastFollowTime;
}

if (state == "follow")
{
    brastProgress += dts / brastFollowTime; // dt_sec();
    float_y = brastY + lengthdir_y(brastYDis, 90 * brastProgress);
    float_x = brastX + lengthdir_y(brastXDis, 90 * brastProgress);
    brastFollow -= dts; // dt_sec();
    if (brastFollow &lt;= 0)
    {
        brastTelegraph = brastTelegraphTime;
        state = "telegraph";
        proCou = 1;
    }
}

if (state == "telegraph")
{
    // Telegraph
    proCou += dts * 100; // dt_sec();
    while (proCou &gt; 1)
    {
        proCou -= 1;
        cdr = 90;
        for (i = 0; i &lt; 4; i += 1)
        {
            mkl = 32 + random(256);
            mkx = x + lengthdir_x(mkl, cdr);
            mky = y + lengthdir_y(mkl, cdr);
            mkx = mkx - 8 + random(16);
            mky = mky - 8 + random(16);
            spk = instance_create(mkx, mky, oZauberSparkle);
            spk.z = z;
            spk.y -= z;
            spk.color = c_yellow;
            with (spk) event_user(0);
            cdr += 90;
        }
    }
    // Telegraph
    brastTelegraph -= dts; // dt_sec();
    if (brastTelegraph &lt;= 0)
    {
        proCou = 1.5;
        brastShoot = brastShootTime;
        state = "shoot";
    }
}

if (state == "shoot")
{
    // SHOOT
    proCou += dts * proSec; // dt_sec();
    while (proCou &gt; 1.5)
    {
        proCou -= 1.5;
        audio_play_sound_AI("hoopz_pickupMoney");
        cdr = 90;
        for (i = 0; i &lt; 4; i += 1)
        {
            event_user(10); // Make coin
            cdr += 90;
        }
    }
    // SHOOT
    brastShoot -= dts; // dt_sec();
    if (brastShoot &lt;= 0)
    {
        brastPause = brastPauseTime;
        state = "pause";
    }
}

if (state == "pause")
{
    brastPause -= dts; // dt_sec();
    if (brastPause &lt;= 0)
    {
        brastTop = brastTopTime;
        state = "top";
        brastX = float_x;
        brastY = float_y;
        brastYDis = x - xstart;
        brastYDis = y - (o_cinema30.y + 32);
        brastProgress = 0;
    }
}

if (state == "top")
{
    brastProgress += dts / brastTopTime; // dt_sec();
    float_y = brastY + lengthdir_y(brastYDis, 90 * brastProgress);
    float_x = brastX + lengthdir_y(brastXDis, 90 * brastProgress);
    brastTop -= dts; // dt_sec();
    if (brastTop &lt;= 0)
    {
        brastSit = brastSitTime;
        state = "sit";
    }
}

if (state == "sit")
{
    brastSit -= dts; // dt_sec();
    if (brastSit &lt;= 0)
    {
        brastSit = brastSitTime;
        state = "harass";
        lockWait = 0;
        lockState = "wait";
    }
}

// Harass
if (state == "harass")
{
    if (lockState == "wait")
    {
        lockWait -= dts; // dt_sec();
        if (lockWait &lt;= 0)
        {
            lockState = "follow";
            lockY = float_y;
            lockYDis = y - o_hoopz.y;
            lockX = float_x;
            lockXDis = clamp(x - o_hoopz.x, - 32, + 32);
            if (o_hoopz.x &lt; oBossGuilderbergTable.x) lockXDis = x - (xstart + 24);
            lockWait = lockTimeFollow;
            lockProgress = 0;
        }
    }
    else if (lockState == "follow")
    {
        lockProgress += dts / lockTimeFollow; // dt_sec();
        float_y = lockY + lengthdir_y(lockYDis, 90 * lockProgress);
        float_x = lockX + lengthdir_y(lockXDis, 90 * lockProgress);
        float_x = clamp(float_x, xstart - 24, xstart + 24);
        lockWait -= dts; // dt_sec();
        if (lockWait &lt;= 0)
        {
            proAct = 1;
            proCou = 1;
            lockState = "wait";
            lockWait = lockTimePause;
        }
    }
}

// Attack
attackTimer -= dts; // dt_sec();
if (attackTimer &lt;= 0)
{
    attackTimer += attackFrequency;
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create coin
pro = instance_create(x, y, oBossGuilderbergCoin);
pro.z = zht + 8;
pro.scl = 2;
pro.spd = 40;
with (pro) event_user(15);
Attack("damage", id, attackCoin, pro);
ds_list_copy(pro.target_list, target_list);
pro.dir = cdr;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mul speed
mulSpd = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cinema stop
cinema = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Push attack
var n, ax, ay, _dist;
//_dist = ds_map_find_value(conf, "range");
//ax = cos(degtorad(qdir)) * _dist;
//ay = -sin(degtorad(qdir)) * _dist;
n = instance_create(x, y, o_enemyAttack_melee_static)
n.z = z;
n.parent = id;
n.attack_from = id;
//n.instantkill = conf[? "instantKill"]
//n.offset_x = ax;
//n.offset_y = ay;
n.lifetime = 2;//I_atk_slsh_intDamage;
n.mask_index = mask_disk_48by48; //conf[? "mask"];
//n.image_angle = qdir;
ds_list_copy(n.target_list, target_list);
//if (instance_exists(I_AI_target)) ds_list_add(n.target_list, I_AI_target.object_index);                
//if (ds_map_find_value(conf, "attackSystem") == "new") Attack("damage", id, conf, n);
//else AI_util_action_attackEntityDamageFromAction(self.id, conf, n, STAT_ATTACK_DMG_NORMAL);   
Attack("damage", id, attackMelee, n);             
n.knockback_dir = point_direction(x, y, o_hoopz.x, o_hoopz.y); //qdir; 
scr_stats_setAttackStat(n, STAT_ATTACK_KNOCKBACK, 15);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
event_inherited();

if (mul == 0) ssb = 0;
else ssb = 1 + (sub mod 4);
var zau = 1;
var stg = scr_stats_getCurrentStat(id, STAT_CURRENT_STAGGER_TIME);
if (stg &gt; 0) 
{
    zau = 0.5;
    if (paused() == 0)
    {
        staggerX = - (stg / 2) + random(stg);
        staggerY = - (stg / 2) + random(stg);
    }
}
else
{
    staggerX = 0;
    staggerY = 0;
}
var drx = dx + staggerX;
var dry = dy + staggerY;
EffectZauber(sprite_index, ssb, drx, dry, 1, 1, global.colorGuilderberg, mul * zau);
draw_sprite_ext(sprite_index, ssb, drx, dry, 1, 1, 0, c_white, 1);

combatActor_draw_post();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
