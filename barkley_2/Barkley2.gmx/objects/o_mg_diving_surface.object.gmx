<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //
scr_player_setGunHolstered(true);
global.event = 1;
instance_create(0, 0, o_hud_stealther);
musicInstance = Delegate("sound loop", "mus_diving");
musicFast = 0;
musicTimer = 0;
musicX = 0;
musicY = 0;
musicAlt = 0;
musicNumber = 5;
musicDrown = 0;
darkness = 1;
leaving = 0;

surface = -1;
light = 0.3;
light_goal = 0.5;
ink_bonus = 0;
depth_bonus = 0;
explosion_bonus = 0;
oxyShk = 0;

arr = tile_get_ids_at_depth(-100);
for (i = 0; i &lt; array_length_1d(arr); i += 1)
{
    var tix = tile_get_x(arr[i]);
    var tiy = tile_get_y(arr[i]);
    var til = tile_get_left(arr[i]);
    var tit = tile_get_top(arr[i]);
    if (tit == 64 &amp;&amp; til == 0)
        instance_create(tix + 16, tiy + 16, o_mg_diving_diamond);
    else if (tit == 80 &amp;&amp; til == 0)
        instance_create(tix + 16, tiy + 00, o_mg_diving_diamond);
    else if (tit == 64 &amp;&amp; til == 16)
        instance_create(tix + 00, tiy + 16, o_mg_diving_diamond);
    else if (tit == 80 &amp;&amp; til == 16)
        instance_create(tix + 00, tiy + 00, o_mg_diving_diamond);
    else 
    {
        var mak = 0;
        if (til == 16 &amp;&amp; tit == 16) mak = 1;
        else if (til == 32 &amp;&amp; tit == 16) mak = 1;
        else if (til == 48 &amp;&amp; tit == 16) mak = 1;
        else if (til == 16 &amp;&amp; tit == 32) mak = 1;
        else if (til == 48 &amp;&amp; tit == 32) mak = 1;
        else if (til == 16 &amp;&amp; tit == 48) mak = 1;
        else if (til == 32 &amp;&amp; tit == 48) mak = 1;
        else if (tit == 48 &amp;&amp; til == 48) mak = 1;
        if (mak) instance_create(tix + 8, tiy + 8, o_mg_diving_block);
    }
}

// Wave effect //
_wavy_surface = -1;
_interval = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free surface
surface_free(surface);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step + GZ CODE
if (paused()) exit;
if (leaving) exit;

if (musicDrown &gt; 0)
{
    musicDrown += dt_sec();
    if (musicDrown &gt; 5) darkness = clamp(darkness + dt_sec(), 0, 1);
    if (musicDrown &gt; 7) { with (o_mg_diving_player) event_user(15); }
    exit;
}

with (o_cts_hoopz) { visible = 0; x = room_width; y = room_height; }
with (o_hoopz) { visible = 0; x = room_width; y = room_height; }

darkness = clamp(darkness - dt_sec(), 0, 1);

// Light //
if light &lt; light_goal then light += 0.001;
else if light &gt; light_goal then light -= 0.001;

// Change goal //
if light = light_goal then
    {
    if light_goal = 0.3 then light_goal = 0.5;
    else light_goal = 0.3;
    }

// Ink bonus //
if ink_bonus &gt; 0 then ink_bonus -= 0.01;
if ink_bonus &gt; 1 then ink_bonus = 1;
 
// Depth bonus //
if instance_exists(o_mg_diving_player) then
    {
    if o_mg_diving_player.y &lt;= 480 then depth_bonus = o_mg_diving_player.y * 0.0005;
    else depth_bonus = 0.24;
    }
    
// Explosion bonus //
if instance_exists(o_mg_diving_danger_explosion) then explosion_bonus = instance_number(o_mg_diving_danger_explosion) * 0.2;
else explosion_bonus = 0;

// Music
if (o_mg_diving_player.oxygen &lt;= 0)
{
    if (musicFast == 0)
    {
        Delegate("sound stop", "mus_diving");
        musicInstance = Delegate("sound loop", "mus_diving_fast");
        musicFast = 1;
        musicTimer = 1;
        musicNumber = 6;
        musicAlt = 1;
    }
    musicTimer += dt_sec();
    if (musicTimer &gt;= 1)
    {
        musicTimer -= 1;
        Delegate("sound play", "sn_mg_diving_boom");
        if (musicAlt) 
        {
            musicNumber -= 1;
            musicX = 384 * (0.4 + random(0.2));
            musicY = 240 * (0.4 + random(0.2));
            if (musicNumber &lt; 0) 
            {
                musicDrown = 0.001;
                Delegate("sound stop", "mus_diving_fast");
                Delegate("sound play", "sn_mg_diving_toilet_scream");
                with (o_mg_diving_player) event_user(0);
                o_mg_diving_player.drown = 1;
            }
        }
        musicAlt = !musicAlt;
    }
}
if (o_mg_diving_player.oxygen &gt; 0 &amp;&amp; musicFast == 1)
{
    Delegate("sound stop", "mus_diving_fast");
    musicInstance = Delegate("sound loop", "mus_diving");
    musicFast = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Goblets + Hoopz Start
if (Quest("prisonDive") &gt;= 30) 
{
    o_mg_diving_player.sprite_index = s_mg_diving_player;
    o_mg_diving_player.x = 288;
}
else
{
    Quest("prisonVitalsHide", 1);
}
cupNam[0] = "Sewer Goblet";
cupNam[1] = "Sewer Grail";
cupNam[2] = "Sewer Chalice";
cupNam[3] = "Sewer Vessel";
cupNam[4] = "Sewer Cannikin";
cupNam[5] = "Sewer Demitasse";
cupNam[6] = "Sewer Tumbler";
cupNam[7] = "Sewer Stein";
cupNam[8] = "Sewer Draught";
cupNam[9] = "Sewer Beaker";
global.temp = ds_list_create();
global.tmm = ds_map_create();
with (o_mg_diving_pickup_goblet)
{
    key = (x * 1600) + y;
    ds_list_add(global.temp, key);
    ds_map_add(global.tmm, key, id);
}
ds_list_sort(global.temp, 0);
for (var i = 0; i &lt; instance_number(o_mg_diving_pickup_goblet); i += 1)
{
    ind = ds_map_find_value(global.tmm, ds_list_find_value(global.temp, i));
    ind.name = cupNam[i];
}
with (o_mg_diving_pickup_goblet) event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw wavy surface
if (paused() == 0)
{
    _interval += 0.6 * dt_sec();
    if (_interval &gt;= 1) _interval -= 1;
}

if (surface_exists(_wavy_surface) == 0) 
{
    _wavy_surface = surface_create(384+64, 240+64); //surface size + bleeding (128 pixels)
}

/* draw the background to the surface */
surface_set_target(_wavy_surface);
draw_set_alpha(1);
draw_set_color(c_white);
draw_set_blend_mode(bm_normal);
draw_background_tiled(background2, 0, 0);
surface_reset_target();

/* some examples */

//_draw_surface_wave(_wavy_surface, view_xview[0], view_yview[0], 1, 90, 4.5, _interval, 4, 64); 

var _surface, _x_position, _y_position, _axis, _wavelength, _amplitude, 
    _animation_phase, _pixels, _bleeding;
    
    _surface = _wavy_surface;
    _x_position = view_xview;
    _y_position = view_yview;
    _axis = 1;
    _wavelength = 90;
    _amplitude = 4.5;
    _animation_phase = _interval;
    _pixels = 4;
    _bleeding = 32;
    
    _width = surface_get_width(_surface);
    _height = surface_get_height(_surface);
    
    if (_axis == 1) {
        _size = _height;
    } else {
        _size = _width;
    }
    
    if (_pixels == 0) {
        _pixels = 6;
    }
    
    for (_i = 0; _i&lt;_size; _i += _pixels) {
    
        _shift = _amplitude*sin(2*pi*((_i / _wavelength)+_animation_phase));
        
        if (_axis == 1) {
            
            _shift_x = _shift+_x_position;
            _shift_y = _i+_y_position;
    
            draw_surface_part_ext(_surface, 0, _i, _width, _pixels, (_shift_x-_bleeding), _shift_y,1,1,c_white,0.7);
            
        } else {
    
            _shift_x = _i+_x_position;
            _shift_y = _shift+_y_position;
    
            draw_surface_part_ext(_surface, _i, 0, _pixels, _height, _shift_x, (_shift_y-_bleeding),1,1,c_white,0.7);
            
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
draw_sprite_ext(s_mg_diving_border, 0, view_xview + 192, view_yview + 120, 1, 1, 0, c_black, 0.75);

// Draw the surface //
if surface_exists(surface) then
    {
    // Surface dickery mode //
    surface_set_target(surface);
    draw_clear_alpha(c_black, light + ink_bonus + depth_bonus - explosion_bonus);
    surface_reset_target();
    surface_set_target(surface);
    draw_set_blend_mode(bm_subtract);
    
    // Lights //
    if instance_exists(o_mg_diving_player) then
        {
        draw_sprite_ext(s_mg_booty_light_orbit, 0, o_mg_diving_player.x, o_mg_diving_player.y, 1.5, 1.5, 0, c_white, 1);//0.6);
        var o_cursx = view_xview + o_curs.x; //mouse_x;
        var o_cursy = view_yview + o_curs.y; //mouse_y;
        draw_sprite_ext(s_mg_booty_light_orbit, 0, o_cursx, o_cursy, 1, 1, 0, c_white, clamp((1 - o_mg_diving_player.light_mod) * 2, 0, 1)); // 0.8
        }
        
    // Torpedos //
    if instance_exists(o_mg_diving_danger_torpedo) then
        {
        draw_sprite_ext(s_mg_booty_light_orbit, 0, o_mg_diving_danger_torpedo.x, o_mg_diving_danger_torpedo.y, 0.5, 0.5, 0, c_red, 0.9);
        }
        
    // Explosion //
    if instance_exists(o_mg_diving_danger_explosion) then
        {
        draw_sprite_ext(s_mg_booty_light_orbit, 0, o_mg_diving_danger_explosion.x, o_mg_diving_danger_explosion.y, 1, 1, 0, c_red, 1.0);
        }
        
    // Goblet //
    if instance_exists(o_mg_diving_pickup_goblet) then
        {
        draw_sprite_ext(s_mg_booty_light_orbit, 0, o_mg_diving_pickup_goblet.x, o_mg_diving_pickup_goblet.y, 0.5, 0.5, 0, c_white, 0.75);
        }
        
    // Exits //
    if instance_exists(o_mg_diving_exit) then
        {
        draw_sprite_ext(s_mg_booty_light_orbit, 0, o_mg_diving_exit.x, o_mg_diving_exit.y, 1.5, 1.5, 0, c_white, 0.75);
        }
        
    // Back to normal //
    draw_set_blend_mode(bm_normal);
    surface_reset_target();
    draw_surface_ext(surface, 0, 0, 1, 1, 0,c_white, 1);
    }
else
    {
    surface = surface_create(room_width, room_height);
    }
    
// Draw hud //
draw_set_alpha(1);
draw_set_color(c_white);
//draw_text(view_xview + 0, view_yview + 0, "FPS " + string(fps));

// OXYGEN
oxyShk = clamp(oxyShk - (dt_sec() * 2), 0, 999);
drx = view_xview[0] + 4 - oxyShk + random(oxyShk * 2);
dry = view_yview[0] + 4 - oxyShk + random(oxyShk * 2);
draw_sprite_ext(s_mg_diving_oxygen, 1, drx, dry, 1, 1, 0, merge_color(c_white, c_red, oxyShk / 2), 1);
siz = sprite_get_height(s_mg_diving_oxygen);
oxy = (o_mg_diving_player.oxygen / 100);
oxr = abs(1 - oxy);
draw_sprite_part(s_mg_diving_oxygen, 0, 0, (oxr * siz), sprite_get_width(s_mg_diving_oxygen), oxy * siz, drx, dry + (oxr * siz));

// Stomach
drx += 17;
dry += 29 + 17;
draw_sprite_ext(s_mg_diving_stomach, 0, drx, dry, 1, 1, 0, c_white, 1);

// Music Number //
if (o_mg_diving_player.oxygen &lt;= 0 &amp;&amp; musicDrown == 0)
{
    if (round(musicTimer * 8) / 2 == floor(musicTimer * 4))
    {
        draw_sprite(s_mg_diving_drown, musicNumber, view_xview[0] + musicX, view_yview[0] + musicY);
    }
}

// Fade to black
if (darkness &gt; 0)
{
    draw_sprite_ext(s1x1, 0, floor(view_xview[0]), floor(view_yview[0]), 384 + 1, 240 + 1, 0, c_black, darkness);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>64,64</point>
    <point>64,64</point>
  </PhysicsShapePoints>
</object>
