<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// scr_event_move_init()
/// Automatically called when a move object is created.

// The object to move.
_object = NULL;

// The x and y coordinates to move to.
_move_x = 0;
_move_y = 0;

// The event that is associated with this move object, should never be null.
_event = NULL;

// The speed the object was moving before being paused.
_paused_speed = 0;

_aa = false; //automatic animate
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// scr_event_move_step()
/// Automatically called when the move object steps.

// Move to end if event is skipped
//if (_event._skipping)
if (instance_exists(_object) == 0)
{
    _event._events_active--; //added from skipping
    instance_destroy();
    exit;
}

var root = scr_event_find_root(_event);
if (root._paused and _object.path_spd != 0) {
    _paused_speed = _object.path_spd;
    _object.path_spd = 0;
} else if (!root._paused and _object.path_spd == 0) {
    _object.path_spd = _paused_speed;
}

// Check if reached end of path
var path_active;
with (_object) { path_active = scr_path_active(); }
if (!path_active) {
    _object.x = _move_x;
    _object.y = _move_y;
    _object._automatic_animation = _aa;
    _object.walkBackwards = 0;
    with (_object) {
         scr_path_delete();
         //scr_actor_unsetRigid(id); //Why is this called? GZ Edit: May 13 2015
         scr_entity_setMoveXY(0,0);
    }
    if (_rigid) //GZ Edit: May 13 2015
    {
        scr_actor_unsetRigid(_object);
        scr_actor_instantRigid(_object);
        _object._sat_shape = 0 // Free previous shape
        _object._sat_shape = sat_make_shape_circle(_object.x, _object.y, 8);
        scr_actor_setRigid(_object);
        scr_actor_instantRigid(_object);
    }

    _event._events_active--;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
