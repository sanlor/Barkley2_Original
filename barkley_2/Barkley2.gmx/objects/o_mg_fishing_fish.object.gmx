<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_watershadow_small</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>Particle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// SETUP //
event_inherited();

// Fish value, decides how good the gun is and how hard it is to catch the lunker //
// BASIC LUNKERS - Sewers and the wasteland have pretty basic lunkers //
// MEDIOCRE LUNKERS - Swamps, Dojo, Mines and Fary/Nexus have mediocre/good lunkers //
// GOOF-TIER LUNKERS - Mountain has all ranges of lunkers, undersewers have the best tier lunkers, Cuchu's Lair has good tier lunkers // 
if room = r_fis_sewers01 then value = 1 + irandom(35);              // Max 36
else if room = r_fis_sewers02 then value = 10 + irandom(30);        // Max 40
else if room = r_fis_wasteland01 then value = 20 + irandom(10);     // Max 30
else if room = r_fis_nexus01 then value = 15 + irandom(25);         // Max 40
else if room = r_fis_swamps01 then value = 55 + irandom(30);        // Max 85
else if room = r_fis_ice01 then value = 50 + irandom(0);            // Max 50
else if room = r_fis_mines01 then value = 30 + irandom(40);         // Max 70
else if room = r_fis_mountain01 then value = 1 + irandom(98);       // Max 99
else if room = r_fis_undersewer01 then value = 80 + irandom(19);    // Max 99
else if room = r_fis_cuchu01 then value = 20 + irandom(79);         // Max 99
else value = 10;

// Sprite //
if value &lt;= 33 then sprite_index = s_watershadow_small;
else if value &lt;= 66 then sprite_index = s_watershadow_medium;
else sprite_index = s_watershadow_large;
    
// MOVE ABOUT //
move_x = random(1) * choose(1, -1);
move_y = random(1) * choose(1, -1);
x_origin = x;
y_origin = y;
wander_limit = 48 + irandom(24 + value);
hooked = false;
timer_hooked_spooked = 0;
timer_trashing = 5;

// AFRAID OF LURE OR NOT //
if irandom(100) &lt;= 10 + (value * 0.5) then afraid_of_lure = true;
else afraid_of_lure = false;

// SCAN //
alpha_scan = 0;
scanned = false;

// Super caveman to drop
list_status_effect = ds_list_create();
scr_stats_initStats();
scr_stats_setBaseStat(id, STAT_BASE_LUCK, scr_savedata_get("player.stats.effective." + STAT_BASE_LUCK));
x = 99999;
y = 99999;
gunObj = Drop("gun", "fishing " + string(floor(value / 2)));
gunObj.grabbed = 1; // Don't decimate gun
gun = gunObj.gun;
with (gunObj) instance_destroy();
x = x_origin;
y = y_origin;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Pause //
if paused() exit;
if o_mg_fishing_control.escape = true then exit;

// Inheritance //
event_inherited();

// Animation //
image_index += dt_sec() * 2;

// RANDOM BUBBLES //
if irandom(100) &lt;= 5 then
    {
    wfx = instance_create(x + choose(1, -1) * irandom(12), y + choose(1, -1) * irandom(12), o_mg_fishing_bubble);   
    wfx.depth = depth - 8;
    }

// Stay near origin point //
if hooked = false then
    {
    // Avoid lure? //
    if afraid_of_lure = true and instance_exists(o_mg_fishing_lure)then
        {
        if distance_to_object(o_mg_fishing_lure) &lt;= 48 and distance_to_object(o_mg_fishing_control) &gt;= 200 then
            {
            if o_mg_fishing_lure.x &lt;= x then move_x += 0.2;
            else move_x -= 0.2;
            if o_mg_fishing_lure.y &lt;= y then move_y += 0.2;
            else move_y -= 0.2;
            }
        }
    
    // Wander about //
    if distance_to_point(x_origin, y_origin) &gt;= wander_limit then
        {
        if x &lt; x_origin then move_x += 0.1;
        if x &gt; x_origin then move_x -= 0.1;
        if y &lt; y_origin then move_y += 0.1;
        if y &gt; y_origin then move_y -= 0.1;
        }
    if distance_to_point(x_origin, y_origin) &gt;= wander_limit + 20 then
        {
        if x &lt; x_origin then move_x += 0.1;
        if x &gt; x_origin then move_x -= 0.1;
        if y &lt; y_origin then move_y += 0.1;
        if y &gt; y_origin then move_y -= 0.1;
        }
            
    // Wandering //
    if irandom(100) &lt;= 10 then move_x += random(0.1);
    if irandom(100) &lt;= 10 then move_y += random(0.1);

    // Limit //
    if move_x &gt; 1.5 then move_x = 1.5;
    else if move_x &lt; -1.5 then move_x = -1.5;
    if move_y &gt; 1.5 then move_y = 1.5;
    else if move_y &lt; -1.5 then move_y = -1.5;
    
    // Boundaries //
    if x &lt; o_cinema0.x then move_x += 0.2;
    if x &gt; o_cinema2.x then move_x -= 0.2;
    if y &lt; o_cinema1.y then move_y += 0.2;
    if y &gt; o_cinema3.y then move_y -= 0.2;
    }

// Hooked //
else
    {
    // Fish is trashing about //
    if timer_trashing &gt; 0 then
        {
        // TICK DOWN //
        timer_trashing -= dt();
        
        // EVENT //
        if timer_trashing &lt;= 0 then
            {
            repeat (irandom(5) + 5)
                {
                wfx = instance_create(x + choose(1, -1) * irandom(12), y + choose(1, -1) * irandom(12), o_mg_fishing_bubble);   
                wfx.depth = depth - 8;
                }
            audio_play_sound_at_xy("fishing_fish_trashing", false, 10, view_xview + 192, view_yview + 120);
            timer_trashing = 12 + irandom(16);
            }
        }
    
    // Small Splash effect //
    if irandom(100) &lt;= 12 then 
        {
        wfx = instance_create(x + choose(1, -1) * irandom(12), y + choose(1, -1) * irandom(12), o_mg_fishing_bubble);   
        wfx.depth = depth - 8;
        }
        
    // Stick to the lure //
    if instance_exists(o_mg_fishing_lure) then
        {
        if timer_hooked_spooked &lt;= 0 then
            {
            if distance_to_point(o_mg_fishing_lure.x, o_mg_fishing_lure.y) &gt;= 4 then
                {
                if x &lt; o_mg_fishing_lure.x then move_x += 0.2;
                if x &gt; o_mg_fishing_lure.x then move_x -= 0.2;
                if y &lt; o_mg_fishing_lure.y then move_y += 0.2;
                if y &gt; o_mg_fishing_lure.y then move_y -= 0.2;
                }
            if distance_to_point(x_origin, y_origin) &gt;= wander_limit + 8 then
                {
                if x &lt; o_mg_fishing_lure.x then move_x += 0.4;
                if x &gt; o_mg_fishing_lure.x then move_x -= 0.4;
                if y &lt; o_mg_fishing_lure.y then move_y += 0.4;
                if y &gt; o_mg_fishing_lure.y then move_y -= 0.4;
                }
        
            // Limit //
            if move_x &gt; 4.5 then move_x = 4.5;
            else if move_x &lt; -4.5 then move_x = -4.5;
            if move_y &gt; 4.5 then move_y = 4.5;
            else if move_y &lt; -4.5 then move_y = -4.5;
            }
        }
    
    // Caught //
    else instance_destroy();    
    }
    
// Hooked and Spooked //
if timer_hooked_spooked &gt; 0 then
    {
    // Tick down //
    timer_hooked_spooked -= dt();
    
    // Motionless //
    move_x = 0;
    move_y = 0;
    }
    
// Scan //
if scanned = false then
    {
    if instance_exists(o_mg_fishing_lure)then
        {
        if distance_to_object(o_mg_fishing_lure) &lt;= 20 + o_mg_fishing_control.lureCatch[o_mg_fishing_control.lureIndex] * 2 and o_mg_fishing_lure.reel &gt;= 1 then scanned = true;
        }
    }
else if alpha_scan &lt; 1 then alpha_scan += dt_sec();
    
// Depth //
scr_dny(10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw self //
draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, 0, c_white, 0.8);

// Scan data //
if (scanned = true and instance_exists(o_mg_fishing_battle_player) == 0) then
    {
    draw_set_font(global.fn_small);
    if hooked = false then draw_set_color(c_white);
    else draw_set_color(c_aqua);
    draw_set_alpha(alpha_scan);
    drx = floor(x);
    dry = floor(y);
    draw_text(drx + 16, dry - 28, "Fish value: " + string(value) + " pts");
    draw_sprite_ext(s1x1, 0, drx + 14, dry - 18, 80, 1, 0, c_white, 1); //x3
    dir = point_direction(drx + 6, dry - 4, drx + 13, dry - 18);
    dis = point_distance(drx + 6, dry - 4, drx + 13, dry - 18);
    draw_sprite_ext(s1x1, 0, drx + 6, dry - 4, dis, 1, dir, c_white, 1);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
