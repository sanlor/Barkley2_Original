<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_tnn_papers</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create
pausedWas = 0;
Border("generate", 0, 108, 50);
Border("generate", 1, SCREEN_WIDTH + 48, 63);

stringNothing = "No notes selectable.";
stringNoHeld = "No notes held.";
soundHoverLight = "sn_mnu_hover01"; // Hover over buttons
soundHoverHeavy = "sn_mouse_analoghover01"; // Hover over note
soundClickExit = "sn_mnu_exit01"; // Click exit
// Define the sound a note makes in the Note script

// Graphic changes
alpBgn = 0.75; // Alpha of grid background
butSpd = 0.15; // Speed at which buttons hilight in seconds
butHilCol = make_color_rgb(48, 52, 45);// Hilight color
butTxtCol = make_color_rgb(255, 202, 19);// Hilight color

o_curs.toggleCursor = false;
event = NULL;
person = ""; // select only

// DO OVERLAY
// White outline
curHov = 0; // When 1, it's orange
notHov = 1; // Note hover
notTrn = 0; // When -1 or 1, the note is moving
notPrv = 0; // Represents index of previous note

sld = 0; // When 1, all elements are in full view
sldSpd = 0.33; // Time in seconds it takes to slide into view
ext = 0; // When 1, commence exit
curOvr = -1; // If not -1, you're over something
curOvrOld = curOvr;

/// IDENTITY
mix = (SCREEN_WIDTH / 2);
miy = (SCREEN_HEIGHT / 2);
miw = 90;
idtSel = 0;
idtNam[0] = "Steve";
idtNam[1] = "Hoopz";
idtX[0] = mix - miw;
idtX[1] = mix + miw;
idtHov[0] = 0;
idtHov[1] = 0;
idtY = miy;
idtWid = sprite_get_width(sIdentity) / 2;
idtHei = sprite_get_height(sIdentity) / 2;

typ = "select"; // gallery, note
if (typ == "gallery")
{
    notClk = 0;
    galX = floor(SCREEN_WIDTH * 0.25);
    galY = floor(SCREEN_HEIGHT * 0.5) - 6;
    sub = 0;
    tit = "Goofster";
    dsc = "Goofsters are tall and slender creatures most well known for their supernatural hardy constitution. ##While Goofsters are considered to be benevolent, social creatures, they are rarely, if ever, seen among their kin. Instead they prefer the company of sentient mallards and rats. ##Goofsters live and thrive in ancient subterranean ruins but are highly susceptible to microwave tunnels.";
}
else // Get notes
{
    tit = "Give Which Paperwork...?";
    notVel = 0; // Exit is 0, 1 is photo
    
    // Get exclusion list
    dslExc = ds_list_create();
    // If you are not using an old save, get exclusion list
    if (string(global.noteExclude) != "0")
    {
        var exc = string_split(global.noteExclude, "|");
        for (i = 0; i &lt; array_length_1d(exc); i += 1)
        {
            ds_list_add(dslExc, exc[i]);
        }
    }
    
    notClk = 1; // If 0, you cannot click the note (ie. for art gallery)
    notSel = 0;
    notAmt = 0;
    for (i = 0; i &lt; ds_list_size(global.noteList); i += 1)
    {
        nam = ds_list_find_value(global.noteName, i);
        if (Note("have", nam) &amp;&amp; ds_list_contains(dslExc, nam) == 0)
        {
            notInd[notAmt] = ds_list_find_index(global.noteName, nam);
            notTit[notAmt] = nam;
            notSub[notAmt] = ds_list_find_value(global.noteSub, i);
            notSou[notAmt] = ds_list_find_value(global.noteSound, i);
            notAmt += 1;
        }
    }
    ds_list_destroy(dslExc);
    notSub[31] = 9; //Eric resume
    notSub[32] = 9; //Eric resume
}


butMid = SCREEN_WIDTH * 0.5; //round(room_width / 2);

// Exit
i = 0;
butWid[i] = 81;
butHei[i] = 17 + 6 + 8; // GZ + 8
butX[i] = butMid - round(butWid[i] / 2) + 1;
butY[i] = (SCREEN_HEIGHT - 36) + 5; // GZ + 5
butSpr[i] = sButtonPapers; butSub[i] = 3;
butXcl[i] = 1;

// Flip right
i += 1;
butWid[i] = 30; // GZ 25
butHei[i] = 30; // GZ 41
butX[i] = butMid + 174; //round(butWid[i] / 2) + (37 + 15 + 8);
butY[i] = (SCREEN_HEIGHT / 2);
butSpr[i] = sMapFlip; butSub[i] = 0;
butXcl[i] = 1;

// Flip left
i += 1;
butWid[i] = 30; // 25
butHei[i] = 30; // 41
butX[i] = butMid - 174; //round(butWid[i] / 2) - 36 - 24;
butY[i] = (SCREEN_HEIGHT / 2);
butSpr[i] = sMapFlip; butSub[i] = 0;
butXcl[i] = -1

butAmt = 3; //i + 1;
if (notAmt == 0) notClk = 0;
if (notAmt &lt;= 1) butAmt = 1;
for (i = 0; i &lt; butAmt; i += 1) { butHov[i] = 0; }

///// GIVE /////


spd = 0; //1 seconds


givTxt = "Would you like to give ";
givTit = "NULL";
givPct = 0;
givSpd = 0.5;
givAct = 0;
givSel = 0;
givExe = -1;
givExt = 0;

givWid = 384 + 1; //to be safe add 1
givHov[0] = 1;
givHov[1] = 0;
givX[0] = floor(givWid / 2) + 10 - 3;
givX[1] = floor(givWid / 2) - 10 - 81 + 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Resume event
if (typ == "viewer") Note("selected", "");
o_curs.toggleCursor = true;
global.event = false;

if (person != "") Note("exclude", person, Note("selected"));

if (instance_exists(oCinema))
{
    with (oCinema)
    {
        Cinema("next line");
        Cinema("process");
    }
}
else if (event != NULL) script_execute(event, SCRIPT_INTERACT);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CONFIRM LOGIC
global.event = true;
if (pausedWas &gt; 0) exit;
if (givAct == 0) exit;

givPct += dt_sec() / spd;
givPct = clamp(givPct, 0, 1);
if (givPct &lt;= 0 &amp;&amp; spd &lt; 0)
{
    spd = 0;
    givPct = 0;
    givAct = 0;
    givExt = 0;
    givExe = -1;
    givHov[0] = 1;
    givSel = 0;
}

if (givExt || givPct != 1) exit;
if (givPct &gt;= 1 &amp;&amp; spd &gt; 0 &amp;&amp; global.keyinput_type == KEYINPUT_GAMEPAD)
{
    //var confirm_pressed = scr_input_check_held(KEYID_DIALOGUE, PLAYER1) or 
    //                 (scr_input_check_held(KEYID_ACTION, PLAYER1) and 
    //                  global.keyinput_type == KEYINPUT_KEYBOARD_MOUSE);
    //if (confirm_pressed) givExe = 1;
    if (MiniKeyPress("action")) givExe = 1;
}


if (global.keyinput_type == KEYINPUT_GAMEPAD)
{
    if (MiniKeyPress("left") || MiniKeyPress("right"))
    {
        if (givSel == 0) givSel = 1; else givSel = 0;
    }
    if (MiniKeyPress("action"))
    {
        if (givSel == 1) givExe = 0; else givExe = 1;
    }
    if (MiniKeyPress("cancel")) givExe = 0;
}

/// CLICKING
y = 240 / 2;
givHei = (2 * 12) + 44; //was (4 * 12) + 44;
givHei -= 3; //gz add
givHei = round(givHei * pctBgn);
y -= givHei / 2;

x = view_xview[0];
y += view_yview[0];
x = round(x);
y = round(y);

dy = y + round(givHei * .61);
if (global.keyinput_type != KEYINPUT_GAMEPAD) givSel = -1;
for (i = 0; i &lt; 2; i += 1) 
{
    var hil = scr_mouse_rect(x + givX[i], dy, x + givX[i] + 81, dy + 17);
    if (hil &amp;&amp; global.keyinput_type != KEYINPUT_GAMEPAD) givSel = i;
    if (MiniKeyPress("action") &amp;&amp; hil) 
    {
        if (global.keyinput_type != KEYINPUT_GAMEPAD) curHov = 1;
        if (givSel == 1) givExe = 0; else givExe = 1;
    }
    givHovOld = givHov[i];
    if (givSel == i) givHov[i] += dt_sec() / butSpd; else givHov[i] -= dt_sec() / butSpd;
    givHov[i] = clamp(givHov[i], 0, 1);
    if (givHovOld == 0 &amp;&amp; givHov[i] &gt; 0) audio_play_sound_ext(soundHoverLight, 10, 0);
}

// EXECUTE
if (givExe == 0)
{
    givExe = -1;
    givExt = 1;
    with (oNote) { but = 0; event_user(0); }
    if (typ == "identity") Note("selected", idtNam[idtSel]);
    else Note("selected", notTit[notSel]);
    spd = -spd;
}
else if (givExe == 1)
{
    audio_play_sound_ext(soundClickExit, 10, 0);
    givExe = -1;
    givExt = 1;
    spd = -spd;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Was paused
if (instance_exists(pausemenu)) pausedWas = 2;
else pausedWas = max(0, pausedWas - 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// NOTE CHOOSE LOGIC
if (instance_exists(pausemenu) || pausedWas &gt; 0) exit;
if (givAct == 1) exit;

if (typ == "gallery" || typ == "viewer")
{
    if (global.keyinput_type == KEYINPUT_GAMEPAD)
    {
        if (MiniKeyPress("action") || MiniKeyPress("cancel")) { but = 0; event_user(0); }
    }
}

if (typ != "gallery" &amp;&amp; typ != "identity")
{
    did = 1;
    if (global.keyinput_type == KEYINPUT_GAMEPAD &amp;&amp; notVel == 1) did = 0;
    if (MiniKeyPress("right") &amp;&amp; did) // reverses
    {
        butHov[1] = 1;
        but = 1;
        event_user(0);
        curHov = 0;
    }
    if (MiniKeyPress("left") &amp;&amp; did) 
    {
        butHov[2] = 1;
        but = 2;
        event_user(0);
        curHov = 0;
    }
    if (global.keyinput_type == KEYINPUT_GAMEPAD) 
    {
        if (typ == "select")
        {
            if (MiniKeyPress("up") || MiniKeyPress("down")) notVel = !notVel;
            if (notVel == 0)
            {
                if (MiniKeyPress("action")) // Fix for when having no notes
                {
                    ///if (notAmt &gt; 0) Note("selected", "exit");
                    //else Note("selected", "none");
                    if (notAmt &gt; 0) but = 10; else but = 0;
                    event_user(0); 
                }
            }
            else
            {
                if (MiniKeyPress("action")) { but = 0; event_user(0); }
            }
        }
    }
}

x = view_xview[0];
y = view_yview[0];

curOvr = -1;
if (global.keyinput_type == KEYINPUT_GAMEPAD &amp;&amp; typ == "gallery") curOvr = 0;
if (global.keyinput_type == KEYINPUT_GAMEPAD &amp;&amp; typ == "viewer") curOvr = 0;
if (typ == "select")
{
if (global.keyinput_type == KEYINPUT_GAMEPAD &amp;&amp; notVel == 1) curOvr = 0;
if (global.keyinput_type == KEYINPUT_GAMEPAD &amp;&amp; notVel == 0) curOvr = 10;
}
for (i = 0; i &lt; butAmt; i += 1)
{
    xbf = 0; ybf = 0;
    if (i &gt; 0) { xbf -= butWid[i] / 2; ybf -= butHei[i] / 2; }
    var hil = scr_mouse_rect(x + xbf + butX[i], y + ybf + butY[i], x + xbf + butX[i] + butWid[i], y + ybf + butY[i] + butHei[i]);
    if (global.keyinput_type == KEYINPUT_GAMEPAD) hil = 0;
    if (hil || curOvr == i)
    {
        if (i == 0) butHov[i] = Goto(butHov[i], 1, dt_sec() / butSpd);
        else 
        { 
            if (butHov[i] &lt; 1) butHov[i] = 1; 
            else butHov[i] -= dt_sec() / butSpd;
        }
        //butHov[i] += dt_sec() / butSpd;
        curOvr = i;
        if (hil &amp;&amp; MiniKeyPress("action"))
        {
            but = i;
            event_user(0);
        }
    }
    else 
    {
        if (i == 0) butHov[i] -= dt_sec() / butSpd;
        else butHov[i] = 0;
    }
    butHov[i] = clamp(butHov[i], 0, 1.5);
    //else butHov[i] -= dt_sec() / butSpd;
    //butHov[i] = clamp(butHov[i], 0, 1);
}


// MOUSE ONLY - Click note allowed
if (notClk &amp;&amp; curOvr == -1 &amp;&amp; global.keyinput_type != KEYINPUT_GAMEPAD)
{
    if (notSub[notSel] &lt; 0) image_single = notSub[30 + abs(notSub[notSel])];
    else image_single = notSub[notSel];
    //if (position_meeting(view_xview[0] + o_curs.x, view_yview[0] + o_curs.y, id))
    if (position_meeting(mouse_x, mouse_y, id))
    {
        curOvr = 10;
        if (MiniKeyPress("action"))
        {
            but = 10;
            event_user(0);
        }
    }
}

if (sld &lt; 1) exit;
if (global.keyinput_type == KEYINPUT_GAMEPAD &amp;&amp; typ == "gallery") exit;

if (typ == "identity")
{
    if (global.keyinput_type == KEYINPUT_GAMEPAD)
    {
        if (MiniKeyPress("right") || MiniKeyPress("left")) idtSel = !idtSel;
        curOvr = idtSel;
        if (MiniKeyPress("action"))
        {
            but = 11 + idtSel;
            event_user(0);
        }
        for (i = 0; i &lt; 2; i += 1)
        {
            if (curOvr == i)
            {
                curOvr = 11 + i;
                idtHov[i] += dt_sec() / butSpd;
            }
            else idtHov[i] -= dt_sec() / butSpd;
            idtHov[i] = clamp(idtHov[i], 0, 1);
        }
    }
    else
    {
        for (i = 0; i &lt; 2; i += 1)
        {
            var hil = scr_mouse_rect(x + idtX[i] - idtWid, y + idtY - idtHei, x + idtX[i] + idtWid, y + idtY + idtHei);
            if (hil || curOvr == i)
            {
                curOvr = 11 + i;
                idtHov[i] += dt_sec() / butSpd;
            }
            else idtHov[i] -= dt_sec() / butSpd;
            idtHov[i] = clamp(idtHov[i], 0, 1);
        }
        if (MiniKeyPress("action") &amp;&amp; curOvr &gt; 10)
        {
            idtSel = curOvr - 11;
            but = 11 + idtSel;
            event_user(0);
        }
    }
}

if (curOvrOld != curOvr)
{
    if (curOvr &gt;= 0 &amp;&amp; curOvr &lt;= 5) audio_play_sound_ext(soundHoverLight, 10, 0);
    if (curOvr &gt;= 10) audio_play_sound_ext(soundHoverHeavy, 10, 0);
}
curOvrOld = curOvr;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// COMPLETED
Note("draw resume", notX, notY + 16, 8, 0, 0, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DYNAMIC: PET SHOP FORM
Note("draw resume", notX, notY + 16, 0, 1, 0, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// BUTTON CODE
if (sld != 1) exit; // Do not do anything if not fully slided
if (but == 0) // EXIT
{
    // Code below in two places
    if (notAmt &gt; 0) Note("selected", "exit");
    else Note("selected", "none");
    curHov = 1;
    audio_play_sound_ext(soundClickExit, 10, 0);
    ext = 1;
}
else if (but == 1) // Right
{
    if (notAmt &lt;= 1) exit;
    butHov[1] = 1.5;
    curHov = 1;
    // Play custom sound of next note
    notPrv = notSel;
    notTrn = -1;
    notSel += 1;
    if (notSel &gt;= notAmt) notSel = 0; 
    audio_play_sound_ext(notSou[notSel], 10, 0);
}
else if (but == 2) // Left
{
    if (notAmt &lt;= 1) exit;
    butHov[2] = 1.5;
    curHov = 1;
    // Play custom sound of next note
    notPrv = notSel;
    notTrn = 1;
    notSel -= 1;
    if (notSel &lt; 0) notSel = notAmt - 1;  
    audio_play_sound_ext(notSou[notSel], 10, 0);
}
else if (but == 10) // Note
{
    audio_play_sound_ext(notSou[notSel], 10, 0);
    curHov = 1;
    if (global.keyinput_type == KEYINPUT_GAMEPAD) givHov[0] = 1;
    else givHov[0] = 0;
    givAct = 1;
    givTit = notTit[notSel];
    spd = givSpd;
}
else if (but &gt;= 11)
{
    audio_play_sound_ext(soundClickExit, 10, 0);
    curHov = 1;
    if (global.keyinput_type == KEYINPUT_GAMEPAD) givHov[0] = 1;
    else givHov[0] = 0;
    givAct = 1;
    givTit = "Choose " + idtNam[idtSel] + " as your identity?";
    spd = givSpd;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
if (givAct == 0)// &amp;&amp; instance_exists(pausemenu) == 0)
{
    if (ext == 0) sld += dt_sec() / sldSpd; else sld -= dt_sec() / sldSpd;
}

sld = clamp(sld, 0, 1);
ald = abs(sld - 1);
if (sld == 0) instance_destroy();

x = view_xview[0];
y = view_yview[0];

draw_sprite_ext(s1x1, 0, x, y, 384, 240, 0, c_black, alpBgn * sld);


if (typ == "identity")
{
    for (i = 0; i &lt; 2; i += 1) idtCol[i] = merge_color(c_gray, c_white, idtHov[i]);
    draw_sprite_ext(sIdentity, 0, x + idtX[0] - (200 * ald), y + idtY, 1, 1, 0, idtCol[0], sld);
    draw_sprite_ext(sIdentity, 1, x + idtX[1] + (200 * ald), y + idtY, 1, 1, 0, idtCol[1], sld);
}
else if (typ == "gallery")
{
    draw_sprite_ext(sGallery, sub, x + galX - (200 * ald), y + galY, 1, 1, 0, c_white, sld);
    draw_set_font(global.fn_small);
    draw_set_color(c_white);
    draw_set_valign(fa_center);
    draw_set_halign(0);
    draw_set_alpha(sld);
    draw_text_ext_transformed(x + galX + 100 + (200 * ald), y + galY, dsc, -1, 160, 1, 1, 0);
    draw_set_valign(0);
    draw_set_alpha(1);
}
else // Note
{   
    if (notAmt == 0)
    {
        draw_set_halign(1);
        draw_set_valign(1);
        draw_set_font(global.fn_1);
        draw_set_color(c_white);
        strTmp = stringNothing;
        if (typ == "viewer") strTmp = stringNoHeld;
        draw_text_transformed(x + (384 / 2), y + (240 / 2) + (240 * ald), strTmp, 1, 1, 0);
        draw_set_halign(0);
        draw_set_valign(0);
    }
    else
    {
        notX = x;
        notRep = 2;
        notTrn = Goto(notTrn, 0, dt_sec() / butSpd);
        if (notTrn &lt; 0) notX = x + abs(notTrn * 384); 
        else if (notTrn &gt; 0) notX = x - abs(notTrn * 384);
        else notRep = 1;
        
        notY = y + (240 * ald);
        notTmp = notSel;
        for (i = 0; i &lt; notRep; i += 1)
        {
            if (curOvr == 10)
            {
                if (notSub[notTmp] &lt; 0) notBgn = notSub[30 + abs(notSub[notTmp])];
                else notBgn = notSub[notTmp];
                d3d_set_fog(true, c_white, 0, 0);
                //draw_sprite_ext(s_tnn_papers, notBgn, notX - 1, notY, 1, 1, 0, c_white, 1);
                //draw_sprite_ext(s_tnn_papers, notBgn, notX + 1, notY, 1, 1, 0, c_white, 1);
                //draw_sprite_ext(s_tnn_papers, notBgn, notX, notY - 1, 1, 1, 0, c_white, 1);
                //draw_sprite_ext(s_tnn_papers, notBgn, notX, notY + 1, 1, 1, 0, c_white, 1);
                Note("draw", notInd[notTmp], notX + 192 - 1, notY + 120, 1);
                Note("draw", notInd[notTmp], notX + 192 + 1, notY + 120, 1);
                Note("draw", notInd[notTmp], notX + 192, notY + 120 - 1, 1);
                Note("draw", notInd[notTmp], notX + 192, notY + 120 + 1, 1);
                d3d_set_fog(false, c_white, 0, 0);
            }
            notCol = merge_color(c_gray, c_white, notHov);
            if (curOvr == 0 &amp;&amp; typ == "select") notHov -= dt_sec() / butSpd;
            else notHov += dt_sec() / butSpd;
            notHov = clamp(notHov, 0, 1);
            if (notSub[notTmp] &lt; 0) event_user(abs(notSub[notTmp]));
            else Note("draw", notInd[notTmp], notX + 192, notY + 120); //draw_sprite_ext(s_tnn_papers, notSub[notTmp], notX, notY, 1, 1, 0, notCol, 1);
            
            notTmp = notPrv;
            notX += sign(notTrn) * 384;
        }
    }
}

// Top bar
skp = 0;
if (typ == "viewer" &amp;&amp; notAmt &lt;= 0) skp = 1;
if (skp == 0)
{
    Border("draw", 1, x - 24, y - 40 + - (ald * 21));
    if (typ == "viewer") tit = notTit[notSel];
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_font(global.fn_2);
    draw_set_alpha(1);
    draw_text(x + 192, y + 4 - (ald * 21), tit);
}

// Bottom bar
//s_hud_futureline_ud
if (butAmt &gt; 0)
{
    mix = x + (384 / 2);
    miw = 54;
    wid = (miw + 8);
    hei = 50;
    draw_set_color(c_white);
}


for (i = 0; i &lt; butAmt; i += 1)
{
    if (i &gt; 0 &amp;&amp; global.keyinput_type == KEYINPUT_GAMEPAD &amp;&amp; notVel == 1) break;
    dy = y + butY[i];
    dx = x + butX[i];
    if (i == 0) dy += ald * 41;
    else if (i == 1) dx += ald * 48;
    else if (i == 2) dx -= ald * 48;
    if (i == 0)
    {
        var extSub = butHov[i] * 6;
        if (ext == 1) extSub = 7;
        draw_sprite_ext(sButtonExit, extSub, dx, dy + 10 - (butHov[i] * 10), 1, 1, 0, c_white, 1);
    }
    else
    {
        var bss = butSub[i] + (sign(butHov[i]));
        if (global.keyinput_type != KEYINPUT_GAMEPAD) bss = butSub[i] + ceil(butHov[i]);
        draw_sprite_ext(butSpr[i], bss, dx, dy, butXcl[i], 1, 0, c_white, 1);
    }
}



draw_set_alpha(1);






///// GIVE /////
pctBgn = min(givPct * 2, 1);
pctTxt = clamp((givPct * 2) - 1, 0, 1);

draw_sprite_ext(s1x1, 0, view_xview[0], view_yview[0], 384, 240, 0, c_black, 0.75 * pctBgn);

y = 240 / 2;
givHei = (2 * 12) + 44; //was (4 * 12) + 44;
givHei -= 3; //gz add
givHei = round(givHei * pctBgn);
y -= givHei / 2;

x = view_xview[0];
y += view_yview[0];
x = round(x);
y = round(y);

draw_spr_tiled(x, y, x + givWid, y + givHei, global.dialogBG, 0, 0.75 * pctBgn);

draw_set_valign(1);
draw_set_halign(1);
draw_set_font(global.fn_1);
draw_set_alpha(pctTxt);
draw_set_color(c_white);
givStr = givTxt + givTit + "?";
if (typ == "identity") givStr = givTit;
txtWid = string_width_ext(givStr, -1, 280);
//draw_text_ext(x + floor(givWid / 2) - floor(txtWid / 2), y + round(givHei * .35), givStr, -1, 280);
draw_text_ext(x + floor(384 / 2), y + round(givHei * .35), givStr, -1, 340);
draw_set_alpha(1);
draw_set_valign(0);
draw_set_halign(0);

dy = y + round(givHei * .61);
for (i = 0; i &lt; 2; i += 1) 
{
    if (givSel == i) draw_sprite_ext(sButtonPapers, 1, x + givX[i], dy, 1, 1, 0, butHilCol, givHov[i] * pctTxt);
    draw_sprite_ext(sButtonPapers, 5 - i, x + givX[i], dy, 1, 1, 0, merge_color(c_white, butTxtCol, givHov[i]), pctTxt);
}

// Cursor
if (curOvr == -1) curSub = 0; else curSub = 1;
curCol = merge_color(c_white, butTxtCol, curHov);
curHov -= dt_sec() / butSpd;
curHov = clamp(curHov, 0, 1);
if (global.keyinput_type != KEYINPUT_GAMEPAD) draw_sprite_ext(s_curs2, curSub, mouse_x, mouse_y, 1, 1, 0, curCol, sld);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cancel draw event
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
