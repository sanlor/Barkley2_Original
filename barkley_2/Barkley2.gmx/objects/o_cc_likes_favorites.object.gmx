<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Dont run the event after this for this character //
for (h = 0; h &lt; 9; h += 1) Quest("playerCCLikes" + string(h + 1), 2);
for (h = 0; h &lt; 7; h += 1) Quest("playerCCFaves" + string(h + 1), 2);
o_cc_data.event_finished_dropdown = true;

// Phase setup //
phase[0] = 18;
phase[1] = 1;
phase[2] = 0;

// Phase skipping //
phase_skip_time = 0;
phase_skip_to = 0;
phase_skip = 0;

// Textbox setup //
textbox_written = "";
textbox_goal = "";
textbox_pause = 0;
textbox_position = 0;
textbox_skip = false;  

// Alpha setup //
alpha_textbox = 0;
alpha_textbox_goal = 0;
alpha_textbox_timer = 0;
alpha_event = 0;
alpha_event_goal = 0;
alpha_note = 0;
alpha_note_goal = 0;

// Other //
o_cc_wizard.alpha_goal = 1;
timer_transition = 0;
timer_active = 0;
timer_page = 0;
timer_note_alphaout = 0;
timer_note_alphain = 0;
timer_event_alphain = 0;
timer_event_alphaout = 0;

text[0] = "I am going to give you a list of topics separated#into two categories - likes and favorites. For#each like, choose the item that you more prefer;#For favorites, even more so."
text[1] = "I ask only that you respond candidly. The results#of this exercise depend on the complete veracity#of your answers. And besides, you don't need to#impress me. I'm already QUITE impressed."
text[2] = "Ahhh... your answers were quite intriguing.#Particularly provocative was your favorite sport.#Perhaps I misread you. You are indeed a youngster#of many facets.."; 

active = false;
page = -1;
note = "Choose your likes";

// Hovers //
for (u=0; u&lt;10; u+=1;)
    {
    for (i=0; i&lt;11; i+=1;)
        {
        choice_hover[u, i] = false;
        }
    }
    
// Default selection //
for (i=0; i&lt;9; i+=1;) chosen_likes[i] = 0;
for (i=0; i&lt;7; i+=1;) chosen_favorites[i] = 0;

option_view = false;
option_end = false;

option_selected = -1;

// Likes // 12 x 9 = 108 - there are 32 genes 64 96 - exluced = 118 / 4 = 29
option_likes[0, 0] = false;
option_likes[0, 1] = "Food"; // 12
option_likes[0, 2] = "Bean";
option_likes[0, 3] = "Oat";
option_likes[0, 4] = "Power Bar";
option_likes[0, 5] = "Fig";
option_likes[0, 6] = "Gum";
option_likes[0, 7] = "Sauce";
option_likes[0, 8] = "Buffalo Wing";
option_likes[0, 9] = "Graham Cracker";
option_likes[0, 10] = "Sorghum";
option_likes[0, 11] = "Nugget";
option_likes[0, 12] = "Salted Cracker";
option_likes[0, 13] = "Unsalted Cracker";

option_likes[1, 0] = false;
option_likes[1, 1] = "Footwear"; // 12
option_likes[1, 2] = "Moccasin";
option_likes[1, 3] = "Sandals";
option_likes[1, 4] = "Ã–tzi the Iceman's shoes";
option_likes[1, 5] = "Flip-flop";
option_likes[1, 6] = "Espadrilles";
option_likes[1, 7] = "Pattens";
option_likes[1, 8] = "Soles";
option_likes[1, 9] = "Slippers";
option_likes[1, 10] = "Flippers";
option_likes[1, 11] = "Socks";
option_likes[1, 12] = "Snowshoes";
option_likes[1, 13] = "Peg legs";

option_likes[2, 0] = false;
option_likes[2, 1] = "Battle Tactic"; // 12
option_likes[2, 2] = "Raucous Hoot";
option_likes[2, 3] = "Sommersault";
option_likes[2, 4] = "Knuckle Sandwich";
option_likes[2, 5] = "Battle Juggling";
option_likes[2, 6] = "Swoop Attack";
option_likes[2, 7] = "Boomerang Throw";
option_likes[2, 8] = "War Bops";
option_likes[2, 9] = "Operation Ground and Pound";
option_likes[2, 10] = "Magician Orb";
option_likes[2, 11] = "Jumping Jack (to build vigor)";
option_likes[2, 12] = "Crawling on Ground to Surprise Foes";
option_likes[2, 13] = "Peacefare";

option_likes[3, 0] = false;
option_likes[3, 1] = "Class"; // 12
option_likes[3, 2] = "History";
option_likes[3, 3] = "Geography";
option_likes[3, 4] = "Social Studies";
option_likes[3, 5] = "Geometry";
option_likes[3, 6] = "Algebra";
option_likes[3, 7] = "English";
option_likes[3, 8] = "Language Arts";
option_likes[3, 9] = "Pre-Algebra";
option_likes[3, 10] = "Oceanography";
option_likes[3, 11] = "Geology";
option_likes[3, 12] = "Gym";
option_likes[3, 13] = "Biology";

option_likes[4, 0] = false;
option_likes[4, 1] = "Sport"; // 12
option_likes[4, 2] = "Basketball";
option_likes[4, 3] = "Hoop Ball";
option_likes[4, 4] = "Hoop and Ball";
option_likes[4, 5] = "College Hoop and Ball";
option_likes[4, 6] = "Parahoop and Ball";
option_likes[4, 7] = "Outdoor Hoop and Ball";
option_likes[4, 8] = "Field Hoop and Ball";
option_likes[4, 9] = "E-Hoop and Ball";
option_likes[4, 10] = "Netball";
option_likes[4, 11] = "Dunkball";
option_likes[4, 12] = "Amateur Dunkball";
option_likes[4, 13] = "Hoop'n'ball";

option_likes[5, 0] = false;
option_likes[5, 1] = "Class"; // 12
option_likes[5, 2] = "Fighter";
option_likes[5, 3] = "Warrior";
option_likes[5, 4] = "Barbarian";
option_likes[5, 5] = "Knight";
option_likes[5, 6] = "Skirmisher";
option_likes[5, 7] = "Swordsman";
option_likes[5, 8] = "Fencer";
option_likes[5, 9] = "Gladiator";
option_likes[5, 10] = "Brawler";
option_likes[5, 11] = "Samurai";
option_likes[5, 12] = "Boxer";
option_likes[5, 13] = "Rodeo Clown";

option_likes[6, 0] = false;
option_likes[6, 1] = "Teacher"; // 12
option_likes[6, 2] = "Ms. Moody";
option_likes[6, 3] = "Mr. Helwig";
option_likes[6, 4] = "Sra. Primavera";
option_likes[6, 5] = "Mssr. Ehrlichmann";
option_likes[6, 6] = "Mr. Pinschmidt";
option_likes[6, 7] = "Herr Matula";
option_likes[6, 8] = "Prof. Gupta";
option_likes[6, 9] = "Sir Dilweg";
option_likes[6, 10] = "Lt. Turner";
option_likes[6, 11] = "Dr. Szekeras PhD";
option_likes[6, 12] = "Mdm. Bellard";
option_likes[6, 13] = "Mrs. Yamaguchi";

option_likes[7, 0] = false;
option_likes[7, 1] = "Star"; // 12
option_likes[7, 2] = "Sun";
option_likes[7, 3] = "Proxima Centauri";
option_likes[7, 4] = "Alpha Centauri C";
option_likes[7, 5] = "Sirius B";
option_likes[7, 6] = "R Doradus";
option_likes[7, 7] = "VY Canis Majoris";
option_likes[7, 8] = "OGLE-TR-122B";
option_likes[7, 9] = "R136a1";
option_likes[7, 10] = "PPI 15";
option_likes[7, 11] = "PSR J1614-2230";
option_likes[7, 12] = "Barnard's Star";
option_likes[7, 13] = "North Star";

option_likes[8, 0] = false;
option_likes[8, 1] = "Animal"; // 12
option_likes[8, 2] = "Nightingale";
option_likes[8, 3] = "Axolotl";
option_likes[8, 4] = "Mole";
option_likes[8, 5] = "Alligator";
option_likes[8, 6] = "Falcon";
option_likes[8, 7] = "Nutria";
option_likes[8, 8] = "Rat";
option_likes[8, 9] = "Tapir";
option_likes[8, 10] = "Snail";
option_likes[8, 11] = "Mandrill";
option_likes[8, 12] = "Wyvern";
option_likes[8, 13] = "Corndog";

// Dislikes // 72 total choices
//Two Racial Enemies
option_favorites[0, 0] = false;
option_favorites[0, 1] = "Racial foe 1"; // 12
option_favorites[0, 2] = "Mummies";
option_favorites[0, 3] = "Ooze";
option_favorites[0, 4] = "Bugbears";
option_favorites[0, 5] = "Seagulls";
option_favorites[0, 6] = "YouTube Let's Players";
option_favorites[0, 7] = "Skulls";
option_favorites[0, 8] = "Burglars";
option_favorites[0, 9] = "Gamers";
option_favorites[0, 10] = "Garfield";
option_favorites[0, 11] = "Weresnails";
option_favorites[0, 12] = "Wizards";
option_favorites[0, 13] = "The Mystical Drakes";

option_favorites[1, 0] = false;
option_favorites[1, 1] = "Racial foe 2"; // 12 = 24
option_favorites[1, 2] = "Mummies";
option_favorites[1, 3] = "Ooze";
option_favorites[1, 4] = "Bugbears";
option_favorites[1, 5] = "Seagulls";
option_favorites[1, 6] = "YouTube Let's Players";
option_favorites[1, 7] = "Skulls";
option_favorites[1, 8] = "Burglars";
option_favorites[1, 9] = "Gamers";
option_favorites[1, 10] = "Garfield";
option_favorites[1, 11] = "Weresnails";
option_favorites[1, 12] = "Wizards";
option_favorites[1, 13] = "The Mystical Drakes";

option_favorites[2, 0] = false;
option_favorites[2, 1] = "Phobia"; // 12 = 36
option_favorites[2, 2] = "Claustrophobia";
option_favorites[2, 3] = "Agoraphobia";
option_favorites[2, 4] = "Equinophobia";
option_favorites[2, 5] = "Necrophobia";
option_favorites[2, 6] = "Sitophobia";
option_favorites[2, 7] = "Coulrophobia";
option_favorites[2, 8] = "Entomophobia";
option_favorites[2, 9] = "Zauberphobia";
option_favorites[2, 10] = "Anthropophobia";
option_favorites[2, 11] = "Albuminurophobia";
option_favorites[2, 12] = "Metrophobia";
option_favorites[2, 13] = "Selachophobia";

option_favorites[3, 0] = false;
option_favorites[3, 1] = "Zauber"; // 12 = 48
option_favorites[3, 2] = "Kilpert's Ice Arrow";
option_favorites[3, 3] = "Lesser Mummification";
option_favorites[3, 4] = "Turn Duergar";
option_favorites[3, 5] = "Raise Vegetables";
option_favorites[3, 6] = "Battlefield Spook";
option_favorites[3, 7] = "Moonlight Muscle Level 7";
option_favorites[3, 8] = "Patriot";
option_favorites[3, 9] = "Summon Seagull III";
option_favorites[3, 10] = "Identify Bugbear";
option_favorites[3, 11] = "Jazz Toot";
option_favorites[3, 12] = "Herbert's Healing Hands";
option_favorites[3, 13] = "Remove Experience";

option_favorites[4, 0] = false;
option_favorites[4, 1] = "Landmarks"; // 12 = 60
option_favorites[4, 2] = "Pyramids of Giza";
option_favorites[4, 3] = "Oatmeal Factory";
option_favorites[4, 4] = "Leaning Tower of Pisa";
option_favorites[4, 5] = "The Moon";
option_favorites[4, 6] = "Stonehenge";
option_favorites[4, 7] = "Mt. Rushmore";
option_favorites[4, 8] = "GameStop";
option_favorites[4, 9] = "ToG Studios";
option_favorites[4, 10] = "Huge Cube";
option_favorites[4, 11] = "Neo New York Harbor";
option_favorites[4, 12] = "Statue of Clispaeth";
option_favorites[4, 13] = "Corn Cob Colosseum";

option_favorites[5, 0] = false;
option_favorites[5, 1] = "Vidcon A"; // 5 = 65
option_favorites[5, 2] = "Midnight [xSLASH].eclipse ]|[";
option_favorites[5, 3] = "Ziggurat Electron School";
option_favorites[5, 4] = "B:LADe gEAR_x_Havoc";
option_favorites[5, 5] = "Clown School 2"; //lowers luck by 2
option_favorites[5, 6] = "~F.A.T.E.~ _gain_ reveLation";

option_favorites[6, 0] = false;
option_favorites[6, 1] = "Vidcon C"; // 7 = 72
option_favorites[6, 2] = "Lanzenacht Mitsuru Geschtalten:#Chaos Children";
option_favorites[6, 3] = "Alchemist Heart Baney#-=Divine Comedy=-";
option_favorites[6, 4] = "B.I.O. Magician Ooze:#Escape from Brain City";
option_favorites[6, 5] = "mIst-edge ~over the clouds#of wonder~";
option_favorites[6, 6] = "BEAST Days &lt;Slayer&gt;:#High School Generation";
option_favorites[6, 7] = "S.avan.T Rise D.N.A -#innocent crime R0ND0 -";
option_favorites[6, 8] = "&lt;[SolaR]&gt; .rOmAnCiNg. ~#Grim XraptureX";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Phases //
if phase[0] &gt; 0 then
    {
    // Tick down //
    phase[0] -= dt();
    
    // Event //
    if phase[0] &lt;= 0 then
        {
        // Introduction to likes/favorites //
        if phase[1] &gt;= 1 and phase[1] &lt;= 2 then scr_cc_textbox(text[phase[1] - 1]);
        
        // Alpha in //
        if phase[1] = 3 then
            {
            timer_active = 30;
            timer_page = 5;
            timer_note_alphain = 1;
            timer_note_alphaout = 20;
            timer_event_alphain = 25;
            }
            
        // End speech //
        if phase[1] = 4 then scr_cc_textbox(text[2]);
        
        // End //
        if phase[1] = 5 then 
            {
            timer_transition = 15;
            phase[2] = 25;
            }
        }
    } 
    
// Event //
if active = true then
    {
    // Hover //
    for (i=0; i&lt;9; i+=1;) 
        {
        if page = 0 then option_likes[i, 0] = scr_cc_button_xy(8, 112, 46 + i * 16, 58 + i * 16);
        }
        
    // Hover //
    for (i=0; i&lt;7; i+=1;) 
        {
        if page = 1 then option_favorites[i, 0] = scr_cc_button_xy(8, 112, 46 + i * 16, 58 + i * 16);
        }
    
    // Hover choices //
    if option_selected &gt;= 0 then
        {
        if option_selected &gt;= 5 then
            {
            if page = 1 and option_selected = 5 then
                {
                for (i=0; i&lt;5; i+=1;)
                    {
                    choice_hover[option_selected, i] = scr_cc_button_xy(98, 376, 46 + i * 16, 58 + i * 16);
                    }
                }
            else if page = 1 and option_selected = 6 then
                {
                for (i=0; i&lt;6; i+=1;)
                    {
                    choice_hover[option_selected, i] = scr_cc_button_xy(98, 376, 46 + i * 28, 70 + i * 28);
                    }
                }
            else
                {
                for (i=0; i&lt;11; i+=1;)
                    {
                    choice_hover[option_selected, i] = scr_cc_button_xy(98, 376, 46 + i * 16, 58 + i * 16);
                    }
                }
            }
        else
            {
            for (i=0; i&lt;11; i+=1;)
                {
                choice_hover[option_selected, i] = scr_cc_button_xy(98, 376, 46 + i * 16, 58 + i * 16);
                }
            }
            
        // Select it /
        if MiniKeyPress("action") then
            {
            for (i=0; i&lt;11; i+=1;) 
                {
                if choice_hover[option_selected, i] = true and page = 0 then 
                    {
                    chosen_likes[option_selected] = i;
                    Quest("playerCCLikes" + string(option_selected + 1), i + 2);
                    audio_play_sound_ext("sn_cc_generic_button1", 10, false);
                    }
                if choice_hover[option_selected, i] = true and page = 1 then 
                    {
                    chosen_favorites[option_selected] = i;
                    Quest("playerCCFaves" + string(option_selected + 1), i + 2);
                    audio_play_sound_ext("sn_cc_generic_button1", 10, false);
                    }
                }
            }
        }
    
    // Select it //
    if MiniKeyPress("action") then
        {
        for (i=0; i&lt;9; i+=1;)
            {
            if option_likes[i, 0] = true then 
                {
                audio_play_sound_ext("sn_cc_generic_button1", 10, false);
                if option_selected = i then option_selected = -1;
                else option_selected = i;
                }
            }
        for (i=0; i&lt;7; i+=1;)
            {
            if option_favorites[i, 0] = true then 
                {
                audio_play_sound_ext("sn_cc_generic_button1", 10, false);
                if option_selected = i then option_selected = -1;
                else option_selected = i;
                }
            }
        }
        
    // De-Select it //
    if MiniKeyPress("cancel") then
        {
        option_selected = -1;
        audio_play_sound_ext("sn_cc_generic_button2", 10, false);
        }
    
    // View selection //
    option_view = scr_cc_button_xy(8, 112, 192, 209);
    if option_view = true then
        {
        if MiniKeyPress("action") then
            {
            audio_play_sound_ext("sn_cc_generic_button1", 10, false);
            option_selected = -1;
            }
        }
    
    // End //
    option_end = scr_cc_button_xy(8, 112, 211, 224);
    if option_end = true then
        {
        if MiniKeyPress("action") then
            {
            audio_play_sound_ext("sn_cc_generic_button1", 10, false);
            if page = 0 then
                {
                note = "Choose your favorites";
                active = false;
                timer_active = 40;
                timer_page = 25;
                timer_event_alphaout = 1;
                timer_note_alphain = 10;
                timer_note_alphaout = 30;
                timer_event_alphain = 35;
                }
            else
                {
                active = false;                
                phase[0] = 20;   
                phase[1] = 4;
                timer_event_alphaout = 1;
                event_user(0);
                }
            }
        }
    }

// Alpha out //
if timer_note_alphaout &gt; 0 then
    {
    // Tick down //
    timer_note_alphaout -= dt()
    
    // Event //
    if timer_note_alphaout &lt;= 0 then alpha_note_goal = 0; 
    }    
    
// Alpha in //
if timer_note_alphain &gt; 0 then
    {
    // Tick down //
    timer_note_alphain -= dt();
    
    // End //
    if timer_note_alphain &lt;= 0 then alpha_note_goal = 1;
    }
    
// Alpha out //
if timer_event_alphaout &gt; 0 then
    {
    // Tick down //
    timer_event_alphaout -= dt()
    
    // Event //
    if timer_event_alphaout &lt;= 0 then alpha_event_goal = 0; 
    }    
    
// Alpha in //
if timer_event_alphain &gt; 0 then
    {
    // Tick down //
    timer_event_alphain -= dt();
    
    // End //
    if timer_event_alphain &lt;= 0 then alpha_event_goal = 1;
    }
    
// Notification of what happens //
if timer_active &gt; 0 then
    {
    // Tick down //
    timer_active -= dt();
    
    // End //
    if timer_active &lt;= 0 then 
        {
        active = true;
        option_selected = -1;
        }
    }
    
// Page flip //
if timer_page &gt; 0 then
    {
    // Tick down //
    timer_page -= dt();
    
    // Event //
    if timer_page &lt;= 0 then page += 1;
    }
    
// Transition //
if timer_transition &gt; 0 then
    {
    // Tick down //
    timer_transition -= dt();
    
     // Event //
     if timer_transition &lt;= 0 then instance_create(0, 0, o_cc_transition);
     }
    
// End of this event //
if phase[2] &gt; 0 then
    {
    // Tick down //
    phase[2] -= dt();
    
    // End //
    if phase[2] &lt;= 0 then
        {
        with (o_cc_wizard) event_user(0);
        instance_destroy();
        }
    }
    
// Skip text with button //
scr_cc_textbox_skip();

// Type it //
scr_cc_textbox_type();

// Move to a next phase //
scr_cc_phase_skip_process();

// Alpha goals //
if alpha_textbox_timer &gt; 0 then alpha_textbox_timer -= dt();
else
    {
    if alpha_textbox &lt; alpha_textbox_goal then alpha_textbox += 0.1;
    if alpha_textbox &gt; alpha_textbox_goal then alpha_textbox -= 0.1;
    }

if alpha_event &lt; alpha_event_goal then alpha_event += 0.05;
if alpha_event &gt; alpha_event_goal then alpha_event -= 0.05;

if alpha_note &lt; alpha_note_goal then alpha_note += 0.05;
if alpha_note &gt; alpha_note_goal then alpha_note -= 0.05;

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Character data //
for (i=0; i&lt;9; i+=1;) o_cc_data.character_dropdown_likes[i] = chosen_likes[i];
for (i=0; i&lt;7; i+=1;) o_cc_data.character_dropdown_favorites[i] = chosen_favorites[i];
    


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw textboxes //
scr_cc_draw_textbox();

// Dim the screen //
draw_set_color(c_black);
draw_set_alpha(alpha_event * 0.5);
draw_rectangle(-2, -2, 386, 242, false);

// Draw note //
draw_set_alpha(alpha_note * 0.8);
draw_set_color(c_black);
draw_rectangle(-2, 102, 386, 134, false);
draw_set_color(c_red);
draw_set_font(global.fn_1);
draw_set_halign(fa_center);
draw_text(192, 110, note);

// Draw backdrops //
draw_set_alpha(alpha_event * 0.5);
draw_set_color(make_color_rgb(80, 0, 50));
draw_rectangle(6, 6, 376, 37, false);
draw_set_color(o_cc_data.color_event);
draw_rectangle(6, 37, 376, 232, false);

// Draw titles //
draw_set_halign(fa_left);
draw_set_font(global.fn_1);
draw_set_color(make_color_rgb(255, 180, 20));
draw_set_alpha(alpha_event);
draw_text(19, 13, "Category");
draw_text(131, 13, "Selection");
draw_set_font(global.fn_2);

// Hovers //
if page = 0 then
    {
    draw_set_color(make_color_rgb(20, 80, 160));
    draw_set_alpha(alpha_event * 0.8);
    for (i=0; i&lt;9; i+=1;) if option_likes[i, 0] = true then draw_rectangle(6, 46 + i * 16, 115, 58 + i * 16, false);
    if option_selected &gt;= 0 then 
        {
        for (i=0; i&lt;11; i+=1;) if choice_hover[option_selected, i] = true then draw_rectangle(118, 46 + i * 16, 376, 58 + i * 16, false);
        }
    
    // Draw frames //
    draw_sprite_ext(s_cc_dropdown_frames, 0, 192, 120, 1, 1, 0, c_white, alpha_event);
    
    // Draw them dropboxes //
    draw_set_alpha(alpha_event);
    draw_set_color(c_white);
    for (o=0; o&lt;9; o+=1;) 
        {
        if option_selected = o then
            {
            draw_set_color(make_color_rgb(250, 210, 20));
            draw_text(19, 48 + o * 16, option_likes[o, 1]);
            draw_set_color(c_white);
            for (i=0; i&lt;11; i+=1;) 
                {
                if chosen_likes[option_selected] = i then draw_set_color(make_color_rgb(40, 200, 170));
                else draw_set_color(c_white);
                draw_text(131, 48 + i * 16, option_likes[o, i + 2]);
                }
            }
        else 
            {
            draw_set_color(make_color_rgb(255, 255, 255));
            draw_text(19, 48 + o * 16, option_likes[o, 1]);
            }
        }
        
    // Draw all selected options //
    if option_selected = -1 then
        {
        draw_set_color(make_color_rgb(40, 200, 170));
        for (i=0; i&lt;9; i+=1;) draw_text(131, 48 + i * 16, option_likes[i, chosen_likes[i] + 2]);
        }
    }
else
    {
    draw_set_color(make_color_rgb(20, 80, 160));
    draw_set_alpha(alpha_event * 0.8);
    for (i=0; i&lt;7; i+=1;) if option_favorites[i, 0] = true then draw_rectangle(6, 46 + i * 16, 115, 58 + i * 16, false);
    if option_selected &gt;= 0 then 
        {
        if option_selected &lt;= 5 then
            {
            for (i=0; i&lt;11; i+=1;) if choice_hover[option_selected, i] = true then draw_rectangle(118, 46 + i * 16, 376, 58 + i * 16, false);
            }
        else if option_selected = 5 then
            {
            for (i=0; i&lt;7; i+=1;) if choice_hover[option_selected, i] = true then draw_rectangle(118, 46 + i * 16, 376, 58 + i * 16, false);
            }
        else if option_selected = 6 then
            {
            for (i=0; i&lt;8; i+=1;) if choice_hover[option_selected, i] = true then draw_rectangle(118, 46 + i * 28, 376, 70 + i * 28, false);
            }
        }
    
    // Draw frames //
    draw_sprite_ext(s_cc_dropdown_frames, 0, 192, 120, 1, 1, 0, c_white, alpha_event);
    
    // Draw them dropboxes //
    draw_set_alpha(alpha_event);
    draw_set_color(c_white);
    for (o=0; o&lt;7; o+=1;) 
        {
        if option_selected = o then
            {
            draw_set_color(make_color_rgb(250, 210, 20));
            draw_text(19, 48 + o * 16, option_favorites[o, 1]);
            draw_set_color(c_white);
            for (i=0; i&lt;11; i+=1;) 
                {
                if option_selected = 5 and i = 5 then i = 11;
                else if option_selected = 6 and i = 6 then i = 11;
                else
                    {
                    if chosen_favorites[option_selected] = i then draw_set_color(make_color_rgb(40, 200, 170));
                    else draw_set_color(c_white);
                    if option_selected = 6 then draw_text(131, 48 + i * 28, option_favorites[o, i + 2]);
                    else draw_text(131, 48 + i * 16, option_favorites[o, i + 2]);
                    }
                }
            }
        else 
            {
            draw_set_color(make_color_rgb(255, 255, 255));
            draw_text(19, 48 + o * 16, option_favorites[o, 1]);
            }
        }
    
    // Draw all selected options //
    if option_selected = -1 then
        {
        draw_set_color(make_color_rgb(40, 200, 170));
        for (i=0; i&lt;7; i+=1;) draw_text(131, 48 + i * 16, option_favorites[i, chosen_favorites[i] + 2]);
        }
    } 
    
// View button //
if option_view = true then
    {
    draw_set_color(make_color_rgb(250, 150, 20));
    draw_set_alpha(alpha_event * 0.8);
    draw_rectangle(6, 194, 115, 210, false);
    draw_set_color(make_color_rgb(240, 20, 40));
    }
else draw_set_color(make_color_rgb(220, 100, 120));
draw_set_alpha(alpha_event);
draw_text(19, 198, "Review");   
 
// End button //
if option_end = true then 
    {
    draw_set_color(make_color_rgb(250, 150, 20));
    draw_set_alpha(alpha_event * 0.8);
    draw_rectangle(6, 212, 115, 228, false);
    draw_set_color(make_color_rgb(240, 20, 40));
    }
else draw_set_color(make_color_rgb(220, 100, 120));
draw_set_alpha(alpha_event);
draw_text(19, 216, "Approve");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
