<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2510004</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create
scale = global.qmScale;
roomWidth = global.qmRoomWidth;
roomHeight = global.qmRoomHeight;
objCursor = o_curs;
if (x &gt;= 0) quickmenu("load"); //Loads up guns for o_hoopz pouch + gunbag ONLY if this is the guns menu

//The orgin of this object is at the top left at the start of the black grid box area
if (global.controlType == "pc") global.hotkeyEnabled = 1; else global.hotkeyEnabled = 0;
//gz stuff
hover_lock = -1;
hover_release = 0;
hover_override = 0;
press_time = 0; //do switch do press
menu_type = "guns"; //second is zauber
//menu_type = "zauber";

zauberW = 168 * scale;
//zauberH = 135 * scale;
dragAlpha = .66;
//offX and offY are for zauber side, they are 0 on gun side
offX = view_xview[0]; //0;
offY = view_yview[0]; //0;

//Hover box hilighter
hovBoxW[0] = 167; hovBoxH[0] = 21;
hovBoxW[1] = 167; hovBoxH[1] = 48;
hovBoxW[2] = 167; hovBoxH[2] = 21;
hovBoxW[3] = 127; hovBoxH[3] = 23;

//////////////////////////////////////////////////////////////////////////Gun bag segment
abilityTextWrap = 136; //this stays same noscale
stoneText = " st.";
//Value 0 and 1 are two values to be fed in related to guns used and not used???
bagHotkey = ""; //tilde doesn't exist so i have to use { - NOTE: hotkeys are saved on des troy
bagHover = 0;
bagVisible = scr_gun("gunbag");
bagClickable = (scr_gun("gunbag amount") &gt; 0);
bagW = (127 * scale); bagH = (23 * scale);
bagX0 = (30 * scale); bagY0 = (155 * scale); bagText0 = "Gun's Bag"; //was 156
bagX1 = bagX0 + (77 * scale); bagY1 = bagY0; bagText1 = string(scr_gun("gunbag reserve amount")); //Reserve guns
bagX2 = bagX1 + (11 * scale); bagY2 = bagY0; bagText2 = "-"; //Seperator
bagX3 = bagX2 + (11 * scale); bagY3 = bagY0; bagText3 = string(scr_gun("gunbag empty amount")); //Empty guns
bagBGAlpha = .66;
///////////////////////////////////////////////////////////////////////////Heart for guns
heartX = (156 * scale); heartY = (153 * scale); //160, 157
heartW = (23 * scale); heartH = (23 * scale);
heartVisible = (scr_gun("gunbag amount") &gt; 0);
//if (global.gunEquipped != 5) heartVisible = 0;
heartSub = 0; 
heartHover = 0;
heartBGAlpha = .66;

//BG when you have no inscribed guns dimensions
gunX0 = x; gunY0 = y + scale; gunW0 = (127 * scale) + ((8 * 5) * scale); gunH0 = (23 * scale);
//Largest BG for when you have guns
gunX1 = gunX0; gunY1 = gunY0; gunW1 = (127 * scale); gunH1 = ((8 * 17) * scale) - scale;
//Smaller BG that represents the mover
gunX2 = heartX; gunY2 = gunY0; gunW2 = heartW; gunH2 = ((8 * 17) * scale) - scale;
//No inscribed guns text
gunText0 = "No inscribed gun's";
zauberText0 = "No abilities";
zauberBGAlpha = .66;
gunBGAlpha = .66;
//



//gz / offal init
select = -1;
collapse = -1;
uncollapse = -1;
hovering = -1;

c_ldgray = make_color_rgb(43,46,40);
c_dgray = make_color_rgb(48,52,45);
c_owhite = make_color_rgb(204,204,204);
c_hyellow = make_color_rgb(255,255,127);
c_sblue = make_color_rgb(155,199,242);
c_syellow = make_color_rgb(255,202,19);
c_sred = make_color_rgb(238,96,83);
c_sgreen = make_color_rgb(96,238,83);
c_dred = make_color_rgb(59,32,34);

padding = 1 * scale;

item_count = 5;//5;
item_hover = -1;
//so it hilights properly, i must use global.gunEquipped
if (scr_equipment_guns_bandolier_equippedFrom()) {
    global.gunEquipped = scr_equipment_guns_bandolier_getSlot(scr_equipment_guns_getCurrentGun());
}
else global.gunEquipped = 5;
item_activated = global.gunEquipped; //this is where i'd check which gun is equipped
item_selected = item_activated;
item_last = item_activated;
item_collapsed = -1;
dropping = 0;
r_drag = 0;

b_hover = 0;

width_default = (334 / 2) * scale; //334
width_hover = (334 / 2) * scale; //334
width_selected = (334 / 2) * scale; //334
width_collapsed = (334 / 2) * scale; //334

height_default = (42 / 2) * scale; //42
height_hover = (42 / 2) * scale; //42
height_selected =  (94 / 2) * scale; //94
height_collapsed = (42 / 2) * scale; //42

for (i = 0; i &lt; 10; i += 1) ar_h[i] = 0; //For height adjustments FOR ABILITIES, need to init for guns
if (x &lt; -999) ////////////////////////ZAUBERS
{
    menu_type = "zauber";
    item_count = Zauber("amount"); //scr_items_ count(ITEMTYPE_ZAUBER);
    item_activated = Zauber("slot"); //scr_items_zauber_ getCurrent();
    characterAbility = item_activated;
    item_selected = item_activated;
    item_last = item_activated;
    infoY = y;
    //these are assigned in event user something
    //height_selected = 42;
    
    x += 9999;
    //////////////////////////y += (10 * 8) * scale;
    //9
    infoX = x;
    infoW = zauberW;
    infoH = (9 * 8) * scale;
    height_selected = height_default; //infoH;
    
    x += (8 * 24) * scale;
    scr_font(global.fn_2, c_white, 1, 1); //Needed for string height
    high = 0;
    for (i = 0; i &lt; item_count; i += 1)
    {
        //var zauber = scr_items_get(ITEMTYPE_ZAUBER, i);
        //ar_str[i, 0] = zauber[? "name"];
        var zau = Zauber("slot ref", i);
        ar_ref[i] = zau;
        ar_str[i, 0] = Zauber("name", zau);
        ar_info[i] = ""; //Zauber("name", Zauber("slot ref", i)); //zauber[? "desc"];
        zSpr[i] = s_item_16; //zauber[? "sprite"];
        zSub[i] = Zauber("sub", zau); // zauber[? "image"];
        ar_h[i] = string_height_ext(ar_info[i], -1, abilityTextWrap) * scale;
        ar_h[i] -= (3 * scale); 
        high = max(high, ar_h[i]);
    }
    zauberH = (height_default * item_count) - (scale * 2) + (item_count * scale);
    zauberH += high + 1;
}

uncollapsing = -1;
dragging = -1;

mdx = mouse_x;
mdy = mouse_y;
curs_off = 1;

drag_xbump = 24; //24
drag_xoff = 0;
drag_yoff = 0;
drag_rx = 0;
drag_ry = 0;
drag_rw = width_default;
drag_rh = height_default;
drag_str = '';
drag_str2 = '';

drag_dx = 0;
drag_dy = 0;
drag_dw = width_default;
drag_dh = height_default;

drag_str = '';

//for (i = 0; i &lt; 10; i += 1) ar_h[i] = 0; //For height adjustments FOR ABILITIES

for (i = 0; i &lt; item_count; i += 1)
{
    ar_rx[i] = 0;
    ar_rw[i] = width_default;
    ar_rh[i] = height_default;
}

if (menu_type == "guns")
{
    if (global.gunEquipped != -1)
    {
        ar_rw[item_selected] = width_selected;
        ar_rh[item_selected] = height_selected;
    }
}
else
{
    if (Zauber("slot") != NULL)
    {
        ar_rw[item_selected] = width_selected;
        ar_rh[item_selected] = height_selected + ar_h[item_selected];
    }
}


if (item_collapsed != -1) ar_rh[item_collapsed] = height_collapsed;

h = 0;
for (i = 0; i &lt; item_count; i += 1)
{
    
    ar_ry[i] = h + padding;
    h = ar_ry[i] + ar_rh[i];
}
h_start = h;

name = 0;
ammo_pc = 1; //ammo percent
dmg_base = 2;
dmg_1 = 3;
dmg_2 = 4;
dmg_3 = 5;
weight = 6;
dur = 7;
ammo = 8;
capacity = 9;
prefix1 = 10;
prefix2 = 11;
material = 12;
type = 13;
suffix = 14;
unidentified = 15;

//Set hotkeys
if (menu_type == "guns")
{
    item_count = scr_equipment_guns_bandolier_getSlotsUsed(); //was 0; fix for fuser error
    for (h = 0; h &lt; 5; h += 1) //was 6 - then 5
    {
        i = scr_gun("order", h); //## was h
        ar_str[h, name] = scr_gun("name", i);
        ar_str[h, dmg_base] = '44';
        ar_str[h, dmg_1] = '32';
        ar_str[h, dmg_2] = '0';
        ar_str[h, dmg_3] = '99';
        ar_str[h, weight] = string(scr_gun("weight", i));
        ar_str[h, dur] = '4';
        ar_str[h, ammo] = scr_gun("ammo", i);
        ar_str[h, capacity] = scr_gun("capacity", i);
        ar_str[h, prefix1] = scr_gun("prefix1", i);
        ar_str[h, prefix2] = scr_gun("prefix2", i);
        ar_str[h, material] = scr_gun("material", i);
        ar_str[h, type] = scr_gun("type", i);
        ar_str[h, suffix] = scr_gun("suffix", i);
        ar_str[h, unidentified] = scr_gun("unidentified", i);
        if (h &lt; 5) ar_hotkey[h] = scr_gun("hotkey", i);
    }
    i = 5;
    ar_str[h, name] = scr_gun("name", i);
        ar_str[h, dmg_base] = '44';
        ar_str[h, dmg_1] = '32';
        ar_str[h, dmg_2] = '0';
        ar_str[h, dmg_3] = '99';
        ar_str[h, weight] = string(scr_gun("weight", i));
        ar_str[h, dur] = '4';
        ar_str[h, ammo] = scr_gun("ammo", i);
        ar_str[h, capacity] = scr_gun("capacity", i);
        ar_str[h, prefix1] = scr_gun("prefix1", i);
        ar_str[h, prefix2] = scr_gun("prefix2", i);
        ar_str[h, material] = scr_gun("material", i);
        ar_str[h, type] = scr_gun("type", i);
        ar_str[h, suffix] = scr_gun("suffix", i);
        ar_str[h, unidentified] = scr_gun("unidentified", i);
}
else //if (1)
{
    //For zaubers, so I can display other values
    for (i = 0; i &lt; item_count; i += 1) ar_str[i,weight] = '65';
}

if (menu_type == "guns") 
{
    for (i = 0; i &lt; item_count; i += 1) 
    {
        if (ar_str[i, ammo] == 0 || ar_str[i, capacity] == 0) ar_str[i, ammo_pc] = 0;
        else ar_str[i, ammo_pc] = string(round((ar_str[i, ammo]/ar_str[i, capacity])*100)); //was 5
    }
}

//Set draw x and y to real x and y at start
for (i = 0; i &lt; item_count; i += 1) 
{
    ar_dx[i] = ar_rx[i];
    ar_dy[i] = ar_ry[i];
    ar_dw[i] = ar_rw[i];
    ar_dh[i] = ar_rh[i];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change zauber active, save gun positions
//Zauber
if (menu_type == "zauber") 
{
    //show_debug_message("zauber reorder");
    zaubs = Zauber("amount");
    slotSel = "";
    if (zaubs &gt; 1)
    {
        for (i = 0; i &lt; zaubs; i += 1)
        {
            slotOld[i] = i; //order to slot
            low = 99999;
            for (h = 0; h &lt; zaubs; h += 1)
            {
                if (ar_ry[h] &lt; low) {
                    slotNew[i] = ar_ref[h];
                    slotN[i] = h;
                    if (item_selected == h) slotSel = ar_ref[h]; //slotSel[i] = 1; else slotSel[i] = 0;
                    low = ar_ry[h];
                    g = h;
                }
            }
            ar_ry[g] = 9999;
        }
        //show_debug_message("zauber is... " + string(slotSel));     
        Zauber("clear");
        for (i = 0; i &lt; zaubs; i += 1) 
        {
            Zauber("gain", slotNew[i]);
            //if (slotSel[i]) Zauber("slot", slotN[i]); 
        }
        for (i = 0; i &lt; zaubs; i += 1) 
        {
            if (Zauber("slot ref", i) == slotSel) Zauber("slot", i);
        }
    }
}
else //Re-order o_hoopz gun list and shift equipped gun
{
    siz = scr_equipment_guns_bandolier_getSlotsUsed();
    
    //Get reorder info
    for (i = 0; i &lt; siz; i += 1)
    {
        low = 99999;
        for (h = 0; h &lt; siz; h += 1)
        {
            if (ar_ry[h] &lt; low) 
            { 
                gunSlotNew[i] = scr_gun("order", h); //## was h
                low = ar_ry[h]; 
                g = h;
            }
        }
        hotNew[i] = ar_hotkey[g];
        ar_ry[g] = 9999;
    }
    sel = -1;
    for (i = 0; i &lt; siz; i += 1) if (item_activated == gunSlotNew[i]) sel = i;
    
    //Remove as many bandolier guns hoopz has from his list
    var bandlist = scr_equipment_guns_bandolier_list();
    for (i = 0; i &lt; siz; i += 1) 
    {
        val[i] = ds_list_find_value(bandlist, 0);
        ds_list_delete(bandlist, 0);
    }
    
    //Reinsert - last goes first as inserting will push everything back
    //for (i = 0; i &lt; siz; i += 1)
    for (i = siz - 1; i &gt;= 0; i -= 1) 
    {
        ds_list_insert(bandlist, 0, val[gunSlotNew[i]]);
        ds_list_mark_as_map(bandlist, 0)
        scr_gun("hotkey", i, hotNew[i]); //gsn, hot[i]
    }
    
    //Change selection to shifted gun index, won't happen if i have gun bag gun equipped
    if (sel != -1)
    {
        //scr_equipment_guns_bandolier_equip(sel);
        scr_player_equip("object", scr_equipment_guns_bandolier_getGun(sel));
        scr_player_equip("hide"); // Hide gun pouch showing
    }
    else
    {
        if (item_selected == 5)
        {
            if (scr_equipment_guns_bandolier_equippedFrom()) scr_player_equip("object", scr_equipment_guns_bag_drawGun());
            scr_player_equip("hide"); // Hide gun pouch showing
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Determine the cursor subimage
if (hovering &gt;= 0)
{
    //objCursor.frame = 0; //begin step
    if (item_hover != -1) objCursor.frame = 1;
    if (rmx &gt;= (x+width_default-(24 * scale))) objCursor.frame = 2;
    else if (item_hover == item_activated) objCursor.frame = 0;
}
if (menu_type == "guns")
{
    if (b_hover != 0 || heartHover != 0) objCursor.frame = 1;
}
if (dragging &gt;= 0) objCursor.frame = 3;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset the cursor to pointer and item hover to -1
objCursor.frame = 0;
item_hover = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// step
//if (global.controlType == "xbox") scr_keys_process();
select = -1;
collapse = -1;
uncollapse = -1;
hovering = -1;

rmx = o_curs.x; rmy = o_curs.y;
fmx = view_xview[0] + o_curs.x; fmy = view_yview[0] + o_curs.y;

//This remains as I once had a debug function to toggle between PC and CONTROLLER
//In the future mid game controller toggling may exist so I'm leaving it in
if (global.controlType == "pc") global.hotkeyEnabled = 1; else global.hotkeyEnabled = 0;


//If hotkeys enabled, allow changing of hotkeys
if (menu_type == "guns")
{
    if (global.hotkeyEnabled == 1)
    {
        for (i = 0; i &lt; 5; i += 1)
        {
            if (keyboard_check_pressed(scr_gun("hotkey key", i)))
            {
                if (item_selected &gt;= 0 &amp;&amp; item_selected &lt;= 4)
                {
                    scr_gun("hotkey", scr_gun("order", item_selected), scr_gun("hotkey", i));
                    for (i = 0; i &lt; 5; i += 1) ar_hotkey[i] = scr_gun("hotkey", i);
                }
            }
        }
    }
}

//Test to see if I select the BAG or HEART symbol with the mouse before anything
if (menu_type == "guns" &amp;&amp; bagClickable == 1 &amp;&amp; global.controlType == "pc")
{
    b_hover = 0;
    heartHover = 0;
    if (item_collapsed &lt; 0) 
    {
        bagX0 -= (18 * scale);
        if (scr_mouse_rect(offX + bagX0, offY + bagY0, offX + bagX0 + bagW, offY + bagY0 + bagH)) //gun's bag
        {
            b_hover = 1;
            item_hover = -1;
            if (scr_mouse(mb_left)) //Mouse(mb_left)
            {
                mouse_clear(mb_left);
                if (item_selected &gt;= 0 &amp;&amp; item_selected &lt; item_count)
                {
                    for (i = 0; i &lt; item_count; i += 1) //pop
                    {
                        if (ar_ry[i] &gt; ar_ry[item_selected]) ar_ry[i] -= height_selected - height_default;
                    }
                    ar_rh[item_selected] = height_default;
                    ar_rw[item_selected] = width_default;
                }
                item_selected = 5;
                item_activated = 5;
            }
        }
        else if (heartVisible == 1 &amp;&amp; scr_mouse_rect(offX + heartX, offY + heartY, offX + heartX + heartW, offY + heartX + heartW)) //gun's bag
        {
            heartHover = 1;
            if (scr_mouse(mb_left)) //Mouse
            {
                mouse_clear(mb_left);
                heartSub = !heartSub;
            }
        }
        bagX0 += (18 * scale);
    }
}


//Find relative positions
//Set collapse height
highest = 0;
lowest = 0;
for(i = 0; i &lt; item_count; i += 1) 
{
    if (ar_ry[i] &lt; ar_ry[highest]) highest = i;
    if (ar_ry[i] &gt; ar_ry[lowest]) lowest = i;
}
if (item_selected &gt;= 0 &amp;&amp; item_selected &lt; item_count) //Only figure out up and down when NOT on gun bag
{
    s_up = highest;
    s_down = lowest;
    for(i = 0; i &lt; item_count; i += 1) 
    {
        if ((ar_ry[i] &lt; ar_ry[item_selected]) and (ar_ry[i] &gt; ar_ry[s_up])) s_up = i;
        if ((ar_ry[i] &gt; ar_ry[item_selected]) and (ar_ry[i] &lt; ar_ry[s_down])) s_down = i;
    }
}

if ((mdx != rmx) or (mdy != rmy) or (item_hover &gt;= 0)) curs_off = 0; //was mouse_x and mouse_y

//XBOX CONTROLLER
////////////////////////////////////////////////////////////////////////////////////////////////gz
if (menu_type == "guns" &amp;&amp; item_selected == 5) //If on guns bag, select / deselect heart
{
    if (scr_button("bumper right"))
    {
        if (hover_release == 1) heartSub = !heartSub;
        hover_release = 0;
    }
    else hover_release = 1;
}
else if (item_count &gt; 0) //Otherwise lock onto object based on toggle method
{
    if (global.toggleSwap == 0)
    {
        if (scr_button("bumper right"))
        {
            item_hover = item_selected;
            hover_override = 1;
        }
        else { item_hover = -1; hover_override = 0; }
    }
    else
    {
        if (scr_button("bumper right"))
        {
            if (hover_release == 1)
            {
                if (hover_lock == -1) { hover_lock = item_selected; hover_override = 1; }
                else { hover_override = 0; item_hover = -1; hover_lock = -1; }
            }
            hover_release = 0;
        }
        else hover_release = 1;
    }
}

doSwitch = 0;
doPress = 0;
//doSlide = 0;
//mouse_wheel_down()
if (scr_button("dpad up")) { doSwitch = -1; doSlide = 1; press_time += 1; }
else if (scr_button("dpad down")) { doSwitch = 1; doSlide = 1; press_time += 1; }
else press_time = 9;
if (press_time &gt;= 10) { doPress = doSwitch; press_time = 0; } else doPress = 0;
//if (mouse_wheel_down() || mouse_wheel_up()) doSlide = 1;

doPress2 = 0;
if (global.toggleSwap == 1)
{
    if (hover_lock != -1) item_hover = hover_lock;
}

//Need to check if I can even go up, if i'm on gun's bag, etc
//CONSIDER HOVER LOCK
//There is an error when trying to move a gun when there is only one, added clause
allowMove = 1;
if (menu_type == "guns") { if (scr_gun("amount") == 0) allowMove = 0; }
if (menu_type == "zauber") { if (scr_items_count(ITEMTYPE_ZAUBER) == 0) allowMove = 0; }
//Move using DPAD
if (hover_override == 1 &amp;&amp; allowMove == 1) 
{
    item_hover_org = item_hover;
    if (doPress = -1) //Move up
    {
        if (item_hover == highest) 
        {
            //item_hover = lowest; //make exception 
            for(i = 0; i &lt; item_count; i += 1)
            {
                if (i != item_hover_org) ar_ry[i] -= height_selected + ar_h[item_hover];
            }
            ar_ry[item_hover_org] = ar_ry[lowest] + height_collapsed;
        }
        else
        {
            ar_ry[item_hover] = ar_ry[s_up];
            ar_ry[s_up] = ar_ry[item_hover] + height_selected + ar_h[item_hover];// + padding;
        }
        doPress = 0;
    }
    if (doPress == 1) //Move down
    {
        if (item_hover == lowest) 
        {
            //item_hover = highest;
            for(i = 0; i &lt; item_count; i += 1)
            {
                if (i != item_hover_org) ar_ry[i] += height_selected + ar_h[item_hover];
            }
            ar_ry[item_hover_org] = ar_ry[highest] - height_selected - ar_h[item_hover];
        }
        else
        {
            ic = ar_ry[item_hover];
            ar_ry[item_hover] = ar_ry[s_down] + ar_rh[s_down] - height_selected - ar_h[item_hover];// - height_collapsed;
            ar_ry[s_down] = ic;
        }
        doPress = 0;
    }
}
//////////////////////////////////////////////////////////////////////////////////////new
//XBOX CONTROLLER
mwUp = 0;
mwDown = 0;
if (global.controlType == "pc")
{
    if (mouse_wheel_up()) mwUp = 1;
    if (mouse_wheel_down()) mwDown = 1;
}
// release drag
if (mouse_check_button_released(mb_left) &amp;&amp; global.controlType == "pc") 
{
    if (item_collapsed &gt;= 0) uncollapse = i;
    r_drag = 0;
}
else if (mwUp || doPress == -1) and (item_collapsed &lt; 0) //Mou se wheel or DPAD UP
{
    if (menu_type == "zauber") //standard select
    {
        if (item_count &gt; 0)
        {
            curs_off = 1;
            if (item_selected == highest) select = lowest;
            else select = s_up;
        }
    }
    else if (item_selected == 5) //if guns bag is selected and i'm going up
    {
        if (scr_gun("amount") &gt; 0)
        {
            select = lowest; //item_count - 1;
        }
    }
    else if (global.gunEquipped != -1) //You have a gun equipped and are moving up
    {
        if (item_selected == highest) //If you are the TOP (highest) item
        {
            if (bagClickable) //Wrap and go to gunbag if it exists
            {
                item_selected = 5;
                item_activated = 5;
                ar_rh[highest] = height_default;
                for (i = 0; i &lt; item_count; i += 1)
                {
                    if (i != highest) ar_ry[i] -= height_selected - height_default;//selected;
                }
            }
            else //otherwise just wrap and go lowest
            {
                select = lowest;
            }
        }
        else
        {
            //Regular
            curs_off = 1;
            select = s_up;
        }
    }
}
else if (mwDown || doPress == 1) and (item_collapsed &lt; 0) //Mou se wheel or DPAD DOWN
{
    if (menu_type == "zauber")
    {
        if (item_count &gt; 0)
        {
            curs_off = 1;
            if (item_selected = lowest) select = highest;
            else select = s_down;
        }
    }
    else if (item_selected == 5) //if guns bag is selected and i'm going down
    {
        if (scr_gun("amount") &gt; 0)
        {
            select = highest; //was 0
        }
    }
    else if (global.gunEquipped != -1) //You have a gun selected and are moving down
    {
        if (item_selected == lowest) //ind
        {
            if (bagClickable) //Wrap and go to gunbag if it exists
            {
                item_selected = 5;
                item_activated = 5;
                ar_rh[lowest] = height_default;
            }
            else //otherwise just wrap and go lowest
            {
                select = highest;
            }
        }
        else
        {
            //Regular
            curs_off = 1;
            select = s_down;
        }
    }
}
else if (global.controlType == "pc") // hover and clicked states
{
    for (i = 0; i &lt; item_count; i += 1)
    {
        if (scr_mouse_rect(offX + x + ar_rx[i], offY + y + ar_ry[i], offX + x + ar_rx[i] + width_hover, offY + y + ar_ry[i] + ar_rh[i]))
        {
            if ((mouse_check_button_pressed(mb_left)) and (rmx &lt; (x + width_default - (24 * scale)))) //offal 48
            {
                if (!dragging) { if (item_activated != i) select = i; } //else Ms g("hi"); }
            }
            else // drag
            {
                if (mouse_check_button_pressed(mb_left) and rmx &gt;= (x + width_default - (24 * scale))) //offal 48
                {
                     if (item_collapsed &lt; 0) // set to dragging
                     {
                        collapse = i;
                     }
                }
                else if (!curs_off)
                {
                    hovering = i; // hovering
                }
            }
        }
    }
}

mdx = rmx;
mdy = rmy;
    
//Selecting an object
if (select &gt;= 0 &amp;&amp; select != item_collapsed) 
{
    item_last = item_selected;
    item_activated = select;
    if (menu_type == "zauber") { Zauber("slot", select); und = item_count; } else und = 4;
    //Close current item - does nothing if -1
    if ((item_selected &gt;= 0 &amp;&amp; item_selected &lt;= und) &amp;&amp; item_selected != item_collapsed)
    {
        for (i = 0; i &lt; item_count; i += 1) //pop
        {
            if (ar_ry[i] &gt; ar_ry[item_selected]) ar_ry[i] -= height_selected - height_default + ar_h[item_selected]; ////@@@@
        }
        ar_rh[item_selected] = height_default;
        ar_rw[item_selected] = width_default;
    }
    //Open new item
    item_selected = select;
    for (i = 0; i &lt; item_count; i += 1) //push
    {
        if (ar_ry[i] &gt;= ar_ry[item_selected] &amp;&amp; i != item_selected) 
            ar_ry[i] += height_selected - height_default + ar_h[item_selected]; ////@@@@
    }
    ar_rh[item_selected] = height_selected + ar_h[item_selected];
    ar_rw[item_selected] = width_selected;
    item_hover = -1;
}
    
// uncollapse
if (uncollapse)
{
    if (item_collapsed &gt;= 0) 
    {
        // pop
        for(i = 0; i &lt; item_count; i += 1) 
        {
            if (ar_ry[i] &gt; ar_ry[item_collapsed])
            {
                if (item_collapsed == item_selected) ar_ry[i] -= height_collapsed - height_selected - ar_h[item_selected]; ////@@@@
                else ar_ry[i] -= height_collapsed - height_default;
            }
        }
        // new value
        ar_rh[item_collapsed] = height_default;
        if (item_collapsed == item_selected) ar_rh[item_collapsed] = height_selected + ar_h[item_selected]; ////@@@@
        ar_rw[item_collapsed] = width_default;
        uncollapsing = item_collapsed;
        item_collapsed = -1;
        //Ms g("hi");
        //item_hover = -1; ///////////////////////////////removed
    }
}
    
// collapse happens constantly when you click on a mover icon
if (collapse &gt;= 0) 
{
    //doDrag = 0;
    if (item_collapsed &gt;= 0)
    {
        // pop
        for(i = 0; i &lt; item_count; i += 1) 
        {
            if (ar_ry[i] &gt; ar_ry[item_collapsed])
            {
                if (item_collapsed == item_selected) ar_ry[i] -= height_collapsed - height_selected - ar_h[item_selected]; ////@@@@
                else ar_ry[i] -= height_collapsed - height_default;
            }
        }
        ar_rh[item_collapsed] = height_default;
        if (item_collapsed == item_selected) ar_rh[item_collapsed] = height_selected + ar_h[item_selected]; ////@@@@
        ar_rw[item_collapsed] = width_default;
    }
    // new value
    item_collapsed = collapse;
    drag_xoff = rmx - (ar_rx[item_collapsed]+x);
    drag_yoff = rmy - (ar_ry[item_collapsed]+y);

    drag_dw = ar_rw[item_collapsed];
    drag_dh = ar_rh[item_collapsed];
    drag_str = ar_str[item_collapsed, name];
    drag_str2 = ar_str[item_collapsed, weight];
    // push
    if (item_collapsed &gt;= 0) 
    {
        for (i = 0; i &lt; item_count; i += 1) 
        {
            if (ar_ry[i] &gt; ar_ry[item_collapsed])
            {
                if (item_collapsed == item_selected) ar_ry[i] += height_collapsed - height_selected - ar_h[item_selected]; ////@@@@
                else ar_ry[i] += height_collapsed - height_default;
            }
        }
        ar_rh[item_collapsed] = height_collapsed;
        ar_rw[item_collapsed] = width_collapsed;
    }
}

////////////////////////////////////////////////////////////////////////////////////gz
////////////////////////////////////////////////////////////////////////////////////new
////////////////////////////////////////////////////////////////////////////////////gz
    
// move collapsed
if (item_collapsed &gt;= 0) 
{
    // find relative positions - this is DUPLICATE CODE, need an event or something
    highest = 0;
    lowest = 0;
    for(i = 0; i &lt; item_count; i += 1) 
    {
        if (ar_ry[i] &lt; ar_ry[highest]) highest = i;
        if (ar_ry[i] &gt; ar_ry[lowest]) lowest = i;
    }
    s_up = highest;
    s_down = lowest;
    for (i = 0; i &lt; item_count; i += 1) 
    {
        if ((ar_ry[i] &gt; ar_ry[s_up]) and (ar_ry[i] &lt; ar_ry[item_collapsed])) s_up = i;
        if ((ar_ry[i] &lt; ar_ry[s_down]) and (ar_ry[i] &gt; ar_ry[item_collapsed])) s_down = i;
    }
    //if (s_down == item_selected) plus = ar_h[s_down]; else plus = 0;
    plus = 0;
    //mouse_y for both below
    if (((rmy - y) &lt; max(0, ar_ry[item_collapsed] - padding)) and (item_collapsed != highest)) //up 
    {
        ar_ry[item_collapsed] = ar_ry[s_up];
        ar_ry[s_up] = ar_ry[item_collapsed] + height_collapsed + padding;
    }
    else if ((rmy - y) &gt; min(h,ar_ry[item_collapsed] + ar_rh[s_down] + plus + padding) and (item_collapsed != lowest)) // move down
    {
        ic = ar_ry[item_collapsed];
        ar_ry[item_collapsed] = ar_ry[s_down] + ar_rh[s_down] + plus - height_collapsed;
        ar_ry[s_down] = ic;
    }
}

// hovering
if ((hovering &gt;= 0) and (item_collapsed &lt; 0)) 
{
    if ((item_hover &gt;= 0) and (item_hover != item_collapsed) and (item_hover != item_selected))
    {
        ar_rh[item_hover] = height_default;
        ar_rw[item_hover] = width_default;
    }
    if (hover_override == 0) item_hover = hovering;
    ar_rh[item_hover] = height_hover;
    ar_rw[item_hover] = width_hover;
}
else if (item_hover &gt;= 0)
{
    ar_rh[item_hover] = height_default;
    ar_rw[item_hover] = width_default;
}

//This always make the selected item big
if (menu_type == "guns")
{
    if (global.gunEquipped != -1)
    {
        ar_rw[item_selected] = width_selected;
        ar_rh[item_selected] = height_selected;
    }
}
else
{
    if (Zauber("slot") != NULL)
    {
        ar_rw[item_selected] = width_selected;
        ar_rh[item_selected] = height_selected + ar_h[item_selected]; ////@@@@
    }
}
//This always makes the collapsed / dragged item collapsed
if (item_collapsed &gt;= 0) 
{
    ar_rh[item_collapsed] = height_collapsed;
    ar_rw[item_collapsed] = width_collapsed;
}
   
// calc total height - used for drag lerp at very bottom
h = 0;
for(i = 0; i &lt; item_count; i += 1) h = max(h, ar_ry[i] + ar_rh[i]);
if (menu_type == "zauber") { if (item_selected != -1) h += ar_h[item_selected]; }
    
// dragging
dragging = item_collapsed;
if (dragging &gt;= 0) 
{
    drag_rx = rmx - drag_xoff; //was mouse_x
    drag_ry = rmy - drag_yoff; //was mouse_y
}
else if (uncollapsing &gt;= 0) 
{
    drag_rx = lerp(drag_rx, ar_rx[uncollapsing] - drag_xbump + x, 0.6);
    drag_ry = lerp(drag_ry, ar_ry[uncollapsing] + y, 0.6);
    if ((round(drag_rx) == round(ar_rx[uncollapsing]-drag_xbump+x)) and (round(drag_ry) == round(ar_ry[uncollapsing]+y)))
    {
        item_hover = uncollapsing;
        uncollapsing = -1;
    }
}

//Cursor frame is in end step

// tween        
for(i = 0; i &lt; item_count; i += 1) 
{
    ar_dx[i] = scr_math_smooth(ar_dx[i], ar_rx[i], 0.5);
    ar_dy[i] = scr_math_smooth(ar_dy[i], ar_ry[i], 0.5);
    ar_dw[i] = scr_math_smooth(ar_dw[i], ar_rw[i], 0.5);
    ar_dh[i] = scr_math_smooth(ar_dh[i], ar_rh[i], 0.5);
}

drag_dx = lerp(drag_rx,median((x-drag_xbump),(roomWidth-(width_default+drag_xbump)),drag_rx),0.6);
drag_dy = lerp(drag_ry, median(y, (y + h - height_default), drag_ry), 0.6);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ZAUBER TEXT INFO
//info
if (item_activated &lt; 0) exit;
if (item_activated == item_collapsed) exit;
i = item_activated;
dx = offX + (x + ar_dx[i]) + (29 * scale);
dy = offY + (y + ar_dy[i]) + height_default - (scale * 2); //+ scale;
if ((dragging &gt;= 0) or (uncollapsing &gt;= 0))
{
    if (dragging == item_activated || uncollapsing == item_activated)
    {
        dx = drag_dx + drag_xbump;
        dy = drag_dy;
        exit;
    }
}
scr_font(global.fn_2, c_white, 0);
draw_text_ext_transformed(dx + (0 * scale), dy + (0 * scale), ar_info[i], -1, abilityTextWrap, scale, scale, 0); //50, 4 // was 32
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUNS: Draws gun stats below when hovering
//This was removed as there are a few ideas as to what might go here
//The leading idea being some kind of spectrogram that shows stats
exit;
//This area is left blank for a spectrogram or some other deal down the line
//////////////////////////////////////////////////////////////////////////////////////GUN STATS
if (menu_type == "guns") 
{
    //if (gz_drag == 0) { if (i == item_collapsed) exit; }
    i = item_activated;
    dx = offX + (x + ar_dx[i]);
    dy = offY + (y + ar_dy[i]);
    if ((dragging &gt;= 0) or (uncollapsing &gt;= 0))
    {
        if (dragging == item_activated || uncollapsing == item_activated)
        {
        dx = drag_dx + drag_xbump;
        dy = drag_dy;
        exit;
        }
    }
    draw_sprite_ext(s_fix, i, dx + 106, dy + 50,2,2,0, c_white, 1);
    draw_sprite_ext(s_fix, i + 1, dx + 184, dy + 50,2,2,0, c_white, 1);    
    draw_sprite_ext(s_fix, i + 2, dx + 262, dy + 50,2,2,0, c_white, 1);  
    scr_font(global.fn_2, c_white, 0, 0);             
    //scr_color_valu e(dmg_1);
    draw_text_transformed(dx + 118, dy + 46,ar_str[i,dmg_1]+s,2,2,0);                
    //scr_color_valu e(dmg_2);
    draw_text_transformed(dx + 196, dy + 46,ar_str[i,dmg_2]+s,2,2,0);                
    //scr_color_valu e(dmg_3);
    draw_text_transformed(dx + 274, dy + 46,ar_str[i,dmg_3]+s,2,2,0);                
    //scr_color_valu e(weight);
    draw_text_transformed(dx + 172, dy + 70,ar_str[i,weight]+s,2,2,0);                
    //scr_color_valu e(dur);
    draw_text_transformed(dx + 286, dy + 70,ar_str[i,dur]+s,2,2,0);
    draw_set_color(c_owhite);
    draw_text_transformed(dx + 104, dy + 70,'Wght:',2,2,0);
    draw_text_transformed(dx + 226, dy + 70,'Dmg:',2,2,0);
    scr_font(global.fn_1, -1, 1);
    //scr_color_valu e(dmg_base);
    draw_text_transformed(dx + 50 + string_width(s), dy + 50,ar_str[i,dmg_base]+s,2,2,0);
    draw_set_color(c_sblue);
    draw_set_halign(fa_left);
}
////////////////////////////////////////////////////////////////////////////////END GUN STATS
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
//room_caption = string(fps);
//scr_font(Koni x7o, c_white, 0, 0); draw_text(8, 8, "The quick brown fox jumped over the lazy dog.");
//176, 232
offX = view_xview[0]; //0;
offY = view_yview[0]; //0;

equipIndex = item_selected; //global.gunEquipped;

scr_font(global.fn_1, c_white, 0, 0);
if (menu_type == "guns") //make sure input is disabled as well
{
    //Draw GUN BG
    if (scr_gun("amount") == 0) //NO INSCRIBED GUNS TEXT
    {
        scr_draw_rect(offX + gunX0, offY + gunY0, gunW0, gunH0, c_black, gunBGAlpha);
        scr_font(global.fn_1, c_white, 0);
        draw_text_transformed(offX + bagX0 - (12 * scale), offY + (2 * scale) + (y+padding), gunText0, scale, scale, 0);
    }
    else //Regular guns BG for dragging and so on
    {
        scr_draw_rect(offX + gunX1, offY + gunY1, gunW1, gunH1, c_black, gunBGAlpha);
        scr_draw_rect(offX + gunX2, offY + gunY2, gunW2, gunH2, c_black, gunBGAlpha);
    }
    
    //Draw hilighted gun name ie. violent terrifying anime pistol
    if (equipIndex != -1)
    {
        if (item_selected == equipIndex) c = c_syellow; else c = c_sblue;
        //draw_sprite_ext(s_tempgname, item_selected, offX + (1 * scale), offY + (180 * scale), scale, scale, 0, c, 1); //offal
        cl = draw_get_color(); draw_set_color(c);
        i = item_selected;
        DrawGunName(offX + (2 * scale), offY + (180 * scale),
            ar_str[i, prefix1], ar_str[i, prefix2], ar_str[i, material], ar_str[i, type], ar_str[i, suffix], NULL, ar_str[i, unidentified]);
        draw_set_color(cl);
    }
    
    if (bagVisible == 1)
    {
        //bag button
        scr_font(global.fn_1, c_white, 0, 0);
        scr_draw_rect(offX + bagX0 - (18 * scale), offY + bagY0 - (2 * scale), bagW, bagH, c_black, bagBGAlpha); //BG
        //Hilight gun's bag
        if (item_selected == 5)
        {
            //draw_sprite_ext(s_ghover, 3, offX + bagX0 - (18 * scale), offY + bagY0 - (2 * scale), scale, scale, 0, c_ldgray, 1); //offal
            scr_draw_rect(offX + bagX0 - (18 * scale), offY + bagY0 - (2 * scale), hovBoxW[3], hovBoxH[3], c_ldgray, 1);
        }
        if (b_hover) 
        {
            //draw_sprite_ext(s_ghover, 3, offX + bagX0 - (18 * scale), offY + bagY0 - (2 * scale), scale, scale, 0, c_ldgray, dragAlpha); //offal
            scr_draw_rect(offX + bagX0 - (18 * scale), offY + bagY0 - (2 * scale), hovBoxW[3], hovBoxH[3], c_ldgray, dragAlpha);
        }
        //Draw equipped deal
        if (equipIndex == 5) draw_sprite_ext(s_qicon, 0, offX + bagX0 - (13 * scale), offY + bagY0 + (4 * scale), scale, scale, 0, c_white, 1);
        if (b_hover) draw_set_color(c_hyellow);
        if (item_selected == 5) draw_set_color(c_syellow);
        scr_font(global.fn_2, -1, 0);
        //Draw hotkey numbers
        if (bagClickable == 0) draw_set_color(c_ldgray);
        if (menu_type == "guns" &amp;&amp; global.hotkeyEnabled) 
        { 
            int0 = (8 * scale);
            draw_text_transformed(offX + bagX0 + scale, offY + bagY0, bagHotkey, scale, scale, 0);
        } 
        else int0 = 0;
        scr_font(global.fn_1, -1, 0, 0);
        draw_text_transformed(offX + bagX0 + int0, offY + bagY0, bagText0, scale, scale, 0); //Gun's bag
        scr_font(global.fn_1, -1, 1, 0);
        bagText1 = string(scr_gun("gunbag reserve amount")); //Reserve guns
        bagText3 = string(scr_gun("gunbag empty amount")); //Empty guns
        draw_text_transformed(offX + bagX1, offY + bagY1, bagText3, scale, scale, 0); //Text: 5 (reserve) - swapped
        draw_text_transformed(offX + bagX2, offY + bagY2, bagText2, scale, scale, 0); //Text: - (bag delimiter)
        draw_text_transformed(offX + bagX3, offY + bagY3, bagText1, scale, scale, 0); //Text: 2 (empty) - swapped
    }
    
    if (heartVisible == 1)
    {
        scr_draw_rect(offX + heartX, offY + heartY, heartW, heartH, c_black, bagBGAlpha); //BG
        if (heartSub == 0)
        {
            if (heartHover == 1) draw_sprite_ext(s_gun_heart, 1, offX + heartX + (4 * scale), offY + heartY + (4 * scale), scale, scale, 0, c_white, .25);
            draw_sprite_ext(s_gun_heart, heartSub, offX + heartX + (4 * scale), offY + heartY + (4 * scale), scale, scale, 0, c_white, 1);
        }
        else
        {
            if (heartHover == 1) 
            {
                draw_sprite_ext(s_gun_heart, 0, offX + heartX + (4 * scale), offY + heartY + (4 * scale), scale, scale, 0, c_white, 1);
                draw_sprite_ext(s_gun_heart, 1, offX + heartX + (4 * scale), offY + heartY + (4 * scale), scale, scale, 0, c_white, .75);
            }
            else draw_sprite_ext(s_gun_heart, heartSub, offX + heartX + (4 * scale), offY + heartY + (4 * scale), scale, scale, 0, c_white, 1);
        }
    }
}
else //////////////////////////////////ZAUBER SECTION
{
    //Zauber BG
    dx = round(offX + x - (scale * 0));
    dy = round(offY + y + (scale * 1));
    if (Zauber("amount") == 0) //scr_items_count(ITEMTYPE_ZAUBER) == 0) //NO ABILITIES TEXT + BG
    {
        scr_draw_rect(dx, dy, gunW0, gunH0, c_black, zauberBGAlpha);
        scr_font(global.fn_1, c_white, 0);
        draw_text_transformed(dx + (6 * scale), dy + (2 * scale), zauberText0, scale, scale, 0);
    }
    else //Regular zauber BG
    {
        //scr_draw_rect(dx, dy, zauberW - (scale * 1), zauberH, c_black, zauberBGAlpha);
        scr_draw_rect(dx, dy, bagW, zauberH, c_black, zauberBGAlpha);
        scr_draw_rect(dx + ((18 * 8) * scale), dy, heartW, zauberH, c_black, zauberBGAlpha);
    }
}
   
//Draws when hovered over top part
if (item_collapsed &lt; 0) 
{     
    if (item_hover &gt;= 0)  
    {
         i = item_hover;
         c = c_dgray;
         
         //was item_hover = item_selected
         if (menu_type == "zauber")
         {
            //i = item_selected;
            dx = offX + (x+ar_dx[i]);
            dy = offY + (y+ar_dy[i]+(i=item_collapsed));
            if (item_hover == item_selected) { alp = 1; int0 = ar_h[i]; } else { alp = dragAlpha; int0 = 0; }
            scr_draw_rect(dx, dy, (167 * scale), height_default + int0, c_ldgray, alp);
         }
         else
         {
             if (menu_type == "guns") int0 = (item_hover == item_selected); else int0 = 0;
             if (item_hover == item_selected) alp = 1; else alp = dragAlpha;
             //below was c before, now just c_ldgray
             //draw_sprite_ext(s_ghover, int0, offX +(x+ar_dx[i]), offY + (y+ar_dy[i]+(i=item_collapsed)),scale,scale,0,c_ldgray, alp); //offal
             scr_draw_rect(offX +(x+ar_dx[i]), offY + (y+ar_dy[i]+(i=item_collapsed)), hovBoxW[int0], hovBoxH[int0], c_ldgray, alp);
         }
         
         //very small gfx glitch
         c = c_white;
         if (mouse_x &gt;= (x + width_default - (24 * scale))) c = c_hyellow;
         draw_sprite_ext(s_qicon, 2, offX + ((x+ar_dx[i])+(148 * scale)), offY + ((y+ar_dy[i]+(i=item_collapsed))+(2*scale)),scale,scale,0,c,1); //offal
         //draw_sprite_ext(s_qicon,2, offX + ((x+ar_dx[i])+296), offY + (-4+(y+ar_dy[i]+(i=item_collapsed))+8),scale,scale,0,c,1); //ref
         
         c = c_white;
         if (mouse_x &lt; (x + width_default - (24 * scale))) c = c_hyellow;
         //if (menu_type == "guns") draw_sprite_ext(s_qicon,1, offX + (x+ar_dx[i])+10 , offY + (y+ar_dy[i]+(i=item_collapsed))+8,2,2,0,c,1);
    }    
}

//Draws BG when an item is UNHOVERED but ACTIVE
if ((item_selected &gt;= 0 &amp;&amp; item_selected &lt;= 4) and (item_hover != item_selected) and (item_collapsed != item_selected))
{
     i = item_selected;
     c = c_ldgray;
     if (menu_type == "guns") 
     {
        //draw_sprite_ext(s_ghover,1, offX + (x+ar_dx[i]) , offY + (y+ar_dy[i]+(i=item_collapsed)),scale,scale,0,c,1); //scale
        scr_draw_rect(offX + (x+ar_dx[i]), offY + (y+ar_dy[i]+(i=item_collapsed)), hovBoxW[1], hovBoxH[1], c, 1);
     }
}

//Draws BG when an ability is UNHOVERED but ACTIVE
if (menu_type == "zauber" &amp;&amp; item_selected &gt;= 0 &amp;&amp; item_selected &lt; item_count)
{
    if ((item_hover != item_selected) and (item_collapsed != item_selected))
    {
        i = item_selected;
        dx = offX + (x+ar_dx[i]);
        dy = offY + (y+ar_dy[i]+(i=item_collapsed));
        scr_draw_rect(dx, dy, (167 * scale), height_default + ar_h[i], c_ldgray, 1);
    }
}

if (menu_type == "guns") event_user(1); //guns drop down (blank until figured out)
if (menu_type == "zauber") event_user(2); //Zauber drop down text

////////////////////////////////////////////////////////////////DRAW ALL ITEMS
for(i = 0; i &lt; item_count; i += 1) 
{
    if (uncollapsing != i) 
    {
        draw_set_color(c_ldgray);
        //appears when you are dragging an item = -2 added
        if (i == item_collapsed) 
        {
            //draw_sprite_ext(s_ghover,2,offX + (x+ar_dx[i]), offY + (y+ar_dy[i]+(i=item_collapsed)), scale, scale,0,c_ldgray,dragAlpha); //offal
            scr_draw_rect(offX + (x+ar_dx[i]), offY + (y+ar_dy[i]+(i=item_collapsed)), hovBoxW[2], hovBoxH[2], c_ldgray, dragAlpha);
        }
        draw_set_color(c_white);
        str = ar_str[i, name];
        str2 = ar_str[i, weight];
        if (i != item_collapsed) 
        {                
            if (menu_type == "guns") if (i == item_activated) draw_set_color(c_syellow);
            if ((i == item_hover) and (i != item_selected) and (mouse_x&lt;(x+width_default-(24 * scale)))) draw_set_color(c_hyellow); //offal
            if (menu_type == "guns") 
            {
                if (i == equipIndex) //item_activated) 
                    draw_sprite_ext(s_qicon,0,offX + (4 * scale)+(x+ar_dx[i]+padding),offY + (3 * scale)+(y+ar_dy[i]+padding),scale, scale,0,c_white,1); //offal
            }
            else 
            {
                if (i == item_selected)
                    draw_sprite_ext(s_qicon,0,offX + (4 * scale)+(x+ar_dx[i]+padding),offY + (3 * scale)+(y+ar_dy[i]+padding),scale, scale,0,c_white,1); //offal
                //if (i == hover_lock) draw_sprite_ext(s_qicon,2,offX + 8+(x+ar_dx[i]+padding),offY + 6+(y+ar_dy[i]+padding),2,2,0,c_white,1);
            }
            ////////////////////////////////////////////////////////////////////////////////////////This is the small number text
            scr_font(global.fn_2, -1, 1);
            //if ((i == item_count-1) and (b_hover)) draw_set_color(c_sred);
            if (i == item_hover) draw_set_color(c_hyellow);
            if (menu_type == "guns") 
            {
                if (i == item_selected) draw_set_color(c_sblue);
            }
            else //zaubers always yellow because they are equipped on click
            {
                if (i == item_selected) draw_set_color(c_syellow);
            }
            if (i == item_activated) draw_set_color(c_syellow);
            if (menu_type == "guns" &amp;&amp; global.hotkeyEnabled) 
            { 
                //if (i == item_activated) draw_set_color(c_syellow);
                int0 = 25 * scale; //50 offal
                draw_text_transformed(offX + (21 * scale)+(x+ar_dx[i]+padding+(ar_dw[i]-width_default)),offY + scale+(y+ar_dy[i]+padding),string(scr_gun("hotkey", scr_gun("order", i))),scale, scale,0);
            }
            else int0 = 21 * scale; //42 offal
            scr_font(global.fn_1, -1, 0); //draw_set_halign(fa_left);
            draw_text_transformed(offX + int0+(x+ar_dx[i]+padding+(ar_dw[i]-width_default)) ,offY + (-scale+(y+ar_dy[i]+padding)) ,str,scale,scale,0);
            draw_set_halign(fa_right);
            //percent
            if (menu_type == "guns") draw_text_transformed(offX + (117 * scale)+(x+ar_dx[i]+padding+(ar_dw[i]-width_default)) ,offY + (-scale+(y+ar_dy[i]+padding)) ,str2+stoneText,scale,scale,0); //offal
            draw_set_halign(fa_left);
            //the the lastb game
        }
    }
}

//Selected deal
if ((dragging &gt;= 0) || (uncollapsing &gt;= 0))
{
    draw_set_color(c_dgray);
    if (dragging == item_selected) draw_set_color(c_dkgray);
    drag_ddy = drag_dy;
    c = c_dgray;
    if ((dragging == item_hover) or (uncollapsing == item_hover)) c = c_ldgray;
    if (menu_type == "guns") int0 = uncollapsing == item_selected;
    else int0 = 0;

    //THIS IS THE DRAG SUBIMAGE
    //draw_sprite_ext(s_ghover,2,offX + drag_dx+drag_xbump,offY + drag_ddy,scale,scale,0,c,dragAlpha); //drag bg - scale    
    scr_draw_rect(offX + drag_dx+drag_xbump, offY + drag_ddy, hovBoxW[2], hovBoxH[2], c, dragAlpha);        
    draw_sprite_ext(s_qicon,2,offX + drag_dx+drag_xbump+(148 * scale),offY + (drag_ddy+(2 * scale)),scale,scale,0,c_hyellow,1); //mover - scale
    if (menu_type == "guns")
    {
        if (dragging == equipIndex || uncollapsing == equipIndex) 
        {
            draw_sprite_ext(s_qicon,0,offX + drag_dx+drag_xbump+(5 * scale),offY + drag_ddy+(4 * scale),scale,scale,0,c_white,1); //selector icon - scale
        }
    }
    else
    {
        i = dragging;
        if (i &lt; 0) i = uncollapsing;
        if (Zauber("slot") == i)
            draw_sprite_ext(s_qicon,0,offX + drag_dx+drag_xbump+(5 * scale),offY + drag_ddy+(4 * scale),scale, scale,0,c_white,1); //selector icon
    }
    draw_set_color(c_hyellow);
    i = dragging;
    if (i &lt; 0) i = uncollapsing;
    if (i == item_selected) draw_set_color(c_sblue);
    if (i == item_activated) draw_set_color(c_syellow);
    if ((i == item_hover) and (i != item_selected)) draw_set_color(c_hyellow)
    ////////////////////////////////////////////////////////////////////////////////////////This is the small number text
    scr_font(global.fn_2, -1, 1);
    if (menu_type == "guns" &amp;&amp; global.hotkeyEnabled) 
    { 
        int0 = 25 * scale; //50;
        draw_text_transformed(offX + (9 * scale)+x+drag_dx+drag_xbump+padding, offY + (1 * scale)+drag_ddy+padding,string(scr_gun("hotkey", scr_gun("order", i))),scale, scale,0);
    }
    else int0 = 21 * scale; //42;
    scr_font(global.fn_1, -1, 0);
    draw_text_transformed(offX + int0+drag_dx+drag_xbump+padding,offY + (-(scale)+drag_ddy+padding),drag_str,scale, scale,0);
    draw_set_halign(fa_right);
    //percent - 234 below px offal
    if (menu_type == "guns") draw_text_transformed(offX + (117 * scale) + (drag_dx+drag_xbump+padding) , offY + (-(scale)+(drag_ddy+padding)), drag_str2 + stoneText, scale, scale, 0);
    draw_set_halign(fa_left);
}

//Reset font
draw_set_halign(0);
draw_set_valign(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
