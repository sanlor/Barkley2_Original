<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_smogControl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup stuff //
interval = 1;

// Particle system //
system = part_system_create();
part_system_depth(system, -1000002);

// Particle emitter //
emitter = part_emitter_create(system);
part_emitter_region(system, emitter, 64, room_width-64, 64, room_height-64, ps_shape_rectangle, ps_distr_linear);

// Particle emitter for room starts, to fill up the room before transition ends //
emitter_start = part_emitter_create(system);
part_emitter_region(system, emitter_start, view_xview, view_xview+384, view_yview, view_yview+240, ps_shape_rectangle, ps_distr_linear);

// Particles //
particle = part_type_create();
part_type_alpha3(particle, 0.015, 0.025, 0.01);
part_type_color1(particle, make_color_rgb(255, 80, 220));
part_type_life(particle, 60, 120);
part_type_speed(particle, 0.1, 0.2, 0, 0);
part_type_direction(particle, 0, 360, 0, 0);
part_type_size(particle, 1.25, 2.2, 0, 0);
part_type_shape(particle, pt_shape_smoke);

// Some controlling variables // These are changed manually in the instances if need be //
fog_intensity = 5;
starting_fog = 2;

part_system_automatic_update(system, 0); // Added so it can be paused
// In the future, consider a different method (ie. smaller speeds with 
// updates based on FPS) to get this truly working with delta time
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Remove the particle system proper //
part_emitter_destroy(system,emitter);
part_system_destroy(system);
part_type_destroy(particle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step - Update fogs
if (paused()) exit;

// part_system_update(system); //Added for pausing

// Check for rain //
if instance_exists(o_effect_rain) then
    {
    // If rain exists, don't emit fog since rain already does it's own thing for that // Otherwise, have at it hoss //
    if o_effect_rain.rain = false then part_system_update(system); 
    else 
        {
        interval = -1;
        starting_fog = -1;
        }
    }
else part_system_update(system); 

// Start fog //
if starting_fog &gt; 0 then
    {
    // Starting fog, emitted before transition finishes so it looks more organic, like it was always there to begin with //
    part_emitter_region(system, emitter_start, view_xview - 32, view_xview + 416, view_yview - 32, view_yview + 272, ps_shape_rectangle, ps_distr_linear);
    repeat (2) part_emitter_burst(system, emitter_start, particle, irandom(10) + fog_intensity * 2);
    part_emitter_burst(system, emitter, particle, fog_intensity);
    starting_fog -= 1;
    }

// Interval //
if interval &gt; 0 then
    {
    // Tick down //
    interval -= 1;
    
    // Rain area //
    part_emitter_region(system, emitter, view_xview - 128, view_xview + 384 + 128, view_yview - 128, view_yview + 240 + 128, ps_shape_rectangle, ps_distr_linear);
    
    // Event //
    if interval = 0 then
        {
        part_emitter_burst(system, emitter, particle, irandom(8) + 4 + fog_intensity);
        interval = irandom(4) + 4;
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Adios //
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>64,64</point>
    <point>64,64</point>
  </PhysicsShapePoints>
</object>
