<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_slag_idle01</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1215752191</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create
global.event = 1;
audio_set_bgm(NULL_STRING);
criAct = 0;
criCou = 0;
echo = 3;
echoOnce = 0;


deadOnce = 0;
lockX = o_hoopz.x;
lockY = o_hoopz.y;
with (o_hoopz)
{
    lock_stance = true;
    scr_entity_animation_setFrame("default", 0);
    scr_entity_animation_setSpeed("default", 0);
    //scr_player_setStance(scr_player_stance_climbing);
}
hopCou = 0;
hopAni = 0;
o_curs.visible = 0;
o_curs.toggleCursor = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lock
o_hoopz.x = lockX;
o_hoopz.y = lockY;
with (o_hoopz) { scr_player_setStance(scr_player_stance_immobile); }

with (o_hoopz)
{
    o_slag06.hopCou += dt();
    if (o_slag06.hopCou &lt; 20)
    {
        sprite_index = s_HoopzStagger;
        facing += dt();
        facing = facing mod 8;
        scr_player_setDrawScript(scr_player_draw_stagger);
    }
    else
    {
        if (o_slag06.deadOnce == 0)
        {
            sprite_index = s_HoopzDeath;
        }
        o_slag06.deadOnce = 1;
        
        o_slag06.hopAni = min(9, o_slag06.hopAni + (dt() / 2));
        scr_entity_animation_setFrame("default", o_slag06.hopAni);
        scr_player_setDrawScript(scr_player_draw_death);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step


criCou += dt();
echo = max(0, echo - dt());
if (echo == 0) { if (echoOnce == 0) { audio_play_sound_ext("sn_mg_wrong", 10, 0); } echoOnce = 1; }
if (criCou &gt; 20) { if (criAct == 0) { event_user(15); } criAct = 1; }
if (criAct == 0) exit;
if (beamActive &gt;= 1) beam += 1 * dt_60();
if (beam &gt; (250 * numInc) &amp;&amp; beamActive == 1)
{
    audio_play_sound_ext("sn_critical", 10, 0);
    obj = instance_create(view_xview[0], view_yview[0] + (sch / 2), o_dummy); //
    objBeam = obj;
    obj.col = c_red;
    obj.xx = 0;
    obj.scl = 1;
    obj.scl = scl * 2;
    beamActive = 2;
    shake = 3;
}

if (beam &gt; (400 * numInc) &amp;&amp; beam &lt; (490 * numInc)) //350 , 440
{
    if (createOnce == 0) 
    { 
        for (i = 0; i &lt; objFills; i += 1) with (objFill[i]) { yyy = ystart; }
        for (i = 0; i &lt; objLines; i += 1) with (objLine[i]) { yy0 = y0O; yy1 = y1O; } //line
        objBeam.yyy = objBeam.y; //beam
        event_user(13); //fl main
        createOnce = 1; 
    }
    global.int0 = lengthdir_y(moveAway, moveAwayDir);
    moveAwayDir += (90.0 / (90.0 * numInc)) * dt_60();// *1 * numInc;
    
    for (i = 0; i &lt; objFills; i += 1) with (objFill[i]) { ystart = yyy + global.int0; }
    for (i = 0; i &lt; objLines; i += 1) with (objLine[i]) { y0O = yy0 + global.int0; y1O = yy1 + global.int0; } //line
    objBeam.y = objBeam.yyy + global.int0;
}

if (shake &gt;= 1) shake = max(1, shake - (0.025 * dt_60()));

//Line beam

//Line back

//Line fill
for (i = 0; i &lt; objFills; i += 1)
{
    with (objFill[i])
    {
        did = 1;
        for (i = 0; i &lt; kids; i += 1)
        {
            if (kid[i].complete == 0) did = 0;
        }
        
        shake = 4 * scl; //2.5;
        shakeX = -shake + random(shake * 2);
        shakeY = -shake + random(shake * 2);
        shakeX *= o_slag06.shake;
        shakeY *= o_slag06.shake;
        x = xstart + shakeX;
        y = ystart + shakeY;
        for (i = 0; i &lt; kids; i += 1)
        {
            if (kid[i].complete == 1)
            {
                kid[i].x0 = kid[i].x0O + shakeX;
                kid[i].y0 = kid[i].y0O + shakeY;
                kid[i].x1 = kid[i].x1O + shakeX;
                kid[i].y1 = kid[i].y1O + shakeY;
            }
        }
    }
}

//Lines
for (i = 0; i &lt; objLines; i += 1)
{
    with (objLine[i])
    {
        if (active == 1)
        {
            cou += 1 * dt_60();
            if (cou &gt; wat)
            {
                bck = dis * dt_60();// * tim;
                x0 += lengthdir_x(bck * lineScale, dir);
                y0 += lengthdir_y(bck * lineScale, dir);
                x1 += lengthdir_x(bck, dir);
                y1 += lengthdir_y(bck, dir);
                if (cou &gt; wat + tim) 
                {
                    x0 = x0O;
                    y0 = y0O;
                    x1 = x1O;
                    y1 = y1O;
                    active = 0;
                    complete = 1;
                    audio_play_sound_ext(sound, 10, 0);
                    kid = instance_create(mean(x0, x1), mean(y0, y1), o_dummy);
                    o_slag06.objLineBack[o_slag06.objLineBacks] = kid;
                    o_slag06.objLineBacks += 1;
                    //
                    kid.alp = 0;
                    kid.alpMax = 0.15;
                    kid.alpSpd = kid.alpMax / 15;
                    //
                    kid.dad = id;
                    kid.rot = dir;
                    kid.scl = 1280 * scl;
                }
            }
        }
    }
}

if (createOnce == 1) //fl code
{
    if (superfade == 1) 
    {
        with (o_hoopz) 
        { 
            global.event = 0; 
            o_curs.visible = 1;
            o_curs.toggleCursor = true;
            scr_player_respawn(); 
        }
    }
    //fl
    for (i = 0; i &lt; 3; i += 1) if (arm[i] != 999999) arm[i] -= dt_60();
    if (arm[0] &lt;= 0) { arm[0] = 999999; audio_play_sound_ext("sn_flub", 10, 0); }
    if (arm[1] &lt;= 0) { arm[1] = 999999; audio_play_sound_ext("sn_ptonywrong", 10, 0); }
    if (arm[2] &lt;= 0) { arm[2] = 999999; superfadeActive = 1; }
    
    mXDir += mXSpd * dt_60();
    mYDir += mYSpd * dt_60();
    mXLen = max(0, mXLen - 0.1);
    mYLen = max(0, mYLen - 0.1);
    scl += sclSpd * dt_60();
    scl = min(sclMax, scl);
    mxs = lengthdir_x(mXLen, mXDir) * scl;
    mys = lengthdir_x(mYLen, mYDir) * scl;
    
    //
    //////////// fl ltr
    //
    for (i = 0; i &lt; objLetters; i += 1)
    {
        obj = objLetter[i];
        event_user(11);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Activate
///Create
criAct = 1;

with (o_camera) _enabled = false;


scw = 384;
sch = 240;
for (i = 0; i &lt; 10; i += 1) texPath[i] = i;
texPaths = 10;
event_user(1); //Point data
flbRun = 0;
shake = 0;
scl = (.66 / 4) * 1;//global.screen_scale; //.75;

//Get first point to remove offset
moveAway = 300 * scl; //Move y up 100 after
moveAwayDir = 0;
createOnce = 0;

beamActive = 0;
beam = 0;
fade = 0;
fadeAmount = 0.66;
fadeActive = 0;

for (i = 0; i &lt; texPaths; i += 1) data[i] = "";
data[0] = "0, 7, 6 | 6, 5, 0 | 0, 5, 1 | 5, 4, 1 | 1, 2, 4 | 2, 3, 4";
data[1] = "0, 1, 101 | 101, 100, 0 | 1, 2, 102 | 102, 101, 1 | 2, 3, 103 | 103, 102, 2 | 3, 4, 103 | 0, 100, 11 | 100, 10, 11 | 8, 9, 104 | 104, 103, 8 | 103, 4, 8 | 4, 5, 8 | 5, 6, 7 | 7, 8, 5";

data[3] = "1, 2, 0 | 2, 11, 0 | 5, 6, 7 | 7, 8, 5 | 3, 4, 9 | 9, 10, 3";
data[4] = "0, 1, 2 | 2, 7, 0 | 3, 4, 5 | 5, 6, 3";
data[5] = data[3];
data[6] = data[0];
data[7] = "1, 101, 0 | 101, 100, 0 | 1, 2, 102 | 102, 101, 1 | 2, 3, 103 | 103, 102, 2 | 3, 4, 103 | 4, 5, 103 | 104, 6, 7 | 7, 105, 104 | 0, 100, 8 | 8, 9, 0";

data[9] = "5, 4, 0 | 4, 1, 0 | 4, 3, 2 | 2, 1, 4";

letters = 8;

wid = 170 * scl; //was 170
spc = 30 * scl; //was 20
hei = 200 * scl;

for (i = 0; i &lt; texPaths; i += 1)
{
    pth = texPath[i];
    texXOff[i] = (pgpx[pth, 0] * scl) - (wid / 2);
    texYOff[i] = (pgpy[pth, 0] * scl) - (hei / 2);
    texXOff[i] += 25 * scl;
}

//midX = 384 / 2; midY = 240 / 2;
midX = view_xview[0] + (scw / 2); 
midY = view_yview[0] + (sch / 2);
dx = midX + (((letters - 6.5) / 2) * spc) - ((letters / 2) * wid);
dy = midY;
dxO = dx;
dyO = dy;
for (i = 0; i &lt; texPaths; i += 1)
{
    texX[i] = dx;// - texXOff[i];
    texY[i] = dy;// - texYOff[i];
    
    ltrX[i] = dx;
    ltrY[i] = dy;
    
    if (i != 1 &amp;&amp; i != 7) dx += spc + wid;
}

//DS list technique
dsNumber = ds_list_create();
numInc = 0.5;//33;
num = 0;
for (ltr = 0; ltr &lt; texPaths; ltr += 1)
{
    pth = texPath[ltr];
    for (nod = 0; nod &lt; pgn[pth] - 1; nod += 1)
    {
        ds_list_add(dsNumber, num);
        num += numInc;
    }
}
//ds_list_shuffle(dsNumber);

//Get lines in order of nodes
objBeam = -999;
objLineBack[0] = -1;
objLineBacks = 0;
objLine[0] = -1;
objLines = 0;
objFill[0] = -1;
objFills = 0;
snd[0] = "sn_criticalbuildup"; sndMax = 1; sndInd = 0; //snd[1] = sn_chit1; snd[2] = sn_chit2; snd[3] = sn_chit3; sndMax = 4; sndInd = 0;
dx = dxO;
dy = dyO;
dx -= (wid / 2) - (25 * scl);
dy -= (hei / 2);
num = 0;
for (ltr = 0; ltr &lt; texPaths; ltr += 1)
{
    pth = texPath[ltr];
    for (nod = 0; nod &lt; pgn[pth] - 1; nod += 1)
    {
        obj = instance_create(0, 0, o_dummy); //line
        event_user(2); //Create for dummy
        objLine[objLines] = obj;
        objLines += 1;
        obj.sound = snd[sndInd]; sndInd += 1; if (sndInd &gt;= sndMax) sndInd = 0;
        obj.x0 = dx + (pgpx[pth, nod] * scl); //always plus offset
        obj.y0 = dy + (pgpy[pth, nod] * scl); //always plus offset
        obj.x1 = dx + (pgpx[pth, nod + 1] * scl); //always plus offset
        obj.y1 = dy + (pgpy[pth, nod + 1] * scl); //always plus offset
        obj.scl = scl;
        obj.num = ds_list_find_value(dsNumber, num); //num;
        ltrObj[ltr, nod] = obj;
        if (ltr &lt; 4) obj.side = -1; else obj.side = 1;
        event_user(3); //with (obj) event_user(0);
        num += 1; //0.5;
    }
    ltrNod[ltr] = nod;
    
    if (ltr != 1 &amp;&amp; ltr != 7) dx += spc + wid;
}


for (ltr = 0; ltr &lt; texPaths; ltr += 1)
{
    Delimit(data[ltr], " | ");
    for (i = 0; art[i] != "-999"; i += 1) dat[ltr, i] = art[i];
    dats[ltr] = i;
}

//
for (ltr = 0; ltr &lt; texPaths; ltr += 1)
{
    if (ltr == 0 || ltr == 1 || ltr == 3 || ltr == 4 || ltr == 5 || ltr == 6 || ltr == 7 || ltr == 9)
    {
        //else if (ltr != 6) continue;
        obj = instance_create(ltrX[ltr], ltrY[ltr], o_dummy); //fill
        //
        obj.yyy = obj.ystart;
        obj.kids = 0;
        obj.alp = 0;
        obj.maxAlp = 0.5;
        obj.offX = 0;
        obj.offY = 0;
        obj.scl = 1;
        //
        objFill[objFills] = obj;
        objFills += 1;
        //
        obj.scl = scl;
        obj.offX = texXOff[ltr];
        obj.offY = texYOff[ltr];
        //Assign lines as kids to fill object
        for (i = 0; i &lt; ltrNod[ltr]; i += 1)
        {
            obj.kid[i] = ltrObj[ltr, i];
        }
        obj.kids = ltrNod[ltr];
        
        for (i = 0; i &lt; dats[ltr]; i += 1)
        {
            Delimit(dat[ltr, i], ", ");
            int0 = real(art[0]);
            int1 = real(art[1]);
            int2 = real(art[2]);
            lt0 = ltr;
            lt1 = ltr;
            lt2 = ltr;
            if (int0 &gt;= 100) { int0 -= 100; lt0 += 1; }
            if (int1 &gt;= 100) { int1 -= 100; lt1 += 1; }
            if (int2 &gt;= 100) { int2 -= 100; lt2 += 1; }
            nod0 = ltrObj[lt0, int0];
            nod1 = ltrObj[lt1, int1];
            nod2 = ltrObj[lt2, int2];
            obj.triX0[i] = nod0.x0O; obj.triY0[i] = nod0.y0O;
            obj.triX1[i] = nod1.x0O; obj.triY1[i] = nod1.y0O;
            obj.triX2[i] = nod2.x0O; obj.triY2[i] = nod2.y0O;
        }
        obj.triangles = dats[ltr];
        event_user(4);
    }
    else if (ltr == 2 || ltr == 8)
    {
        //Set kids for hole
        for (i = 0; i &lt; ltrNod[ltr]; i += 1)
        {
            obj.kid[obj.kids] = ltrObj[ltr, i];
            obj.kids += 1;
        }
    }
}

///
//if (flbRun == 1) { event_user(0); }
flbRun = 1;
beamActive = 1;
fadeActive = 1;
fade = 0;
for (i = 0; i &lt; objLines; i += 1) objLine[i].active = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OBJ Fl Main
///Superfade
superfade = 0;
superfadeActive = 0;
superfadeSpd = 1.0 / 120;
scw = 384;
sch = 240;

objLetters = 0;
objDots = 0;
objDotbs = 0;

////////////////////////////////////////////////////////// fl
///create letters
arm[0] = 30;
arm[1] = (60 * 3.5);
arm[2] = (60 * 4.5);
event_user(10); //Load

scl = 0;
sclMax = (1.33 / 4) * 1;//global.screen_scale; //0.4;
sclSpd = sclMax / 90; //was 60

midX = view_xview[0] + (scw / 2);
midY = view_yview[0] + (sch * 0.6);

x = midX;
y = midY;

//
mXLen = 32 + random(4);
mXSpd = 6 + random(2);
mXDir = choose(0, 180); //random(360);

mYLen = 32 + random(4);
mYSpd = 6 + random(2);
mYDir = choose(0, 180); //random(360);

mXSpd = mXSpd / 2;
mYSpd = mYSpd / 2;

//gen
mxs = lengthdir_x(mXLen, mXDir);
mys = lengthdir_x(mYLen, mYDir);
//

dx = midX;
dy = midY;
spc = 160 + 0; //7 * 16
dx -= spc * 1.5;
xscl = 1;
yscl = 1;
kids = 0;
for (ltr = 0; ltr &lt; letters; ltr += 1)
{
    kid[ltr] = instance_create(0, 0, o_dummy); //dx, dy - fl ltr
    with (kid[ltr])
    {
        kids = 0;
        mXLen = 8 + random(4);
        mXSpd = 2 + random(2);
        mXDir = random(360);
        mYLen = 8 + random(4);
        mYSpd = 2 + random(2);
        mYDir = random(360);
        mxs = lengthdir_x(mXLen, mXDir);
        mys = lengthdir_x(mYLen, mYDir);
    }
    objLetter[objLetters] = kid[ltr];
    objLetters += 1;
    kid[ltr].dad = id;
    kid[ltr].relX = dx - midX;
    kid[ltr].relY = dy - midY;
    obj = kid[ltr];
    event_user(11);
    kids += 1;
    for (nod = 0; nod &lt; letterNodes[ltr]; nod += 1)
    {
        kid[ltr].kid[nod] = instance_create(0, 0, o_dummy); //dx + letterX[ltr, nod], dy + letterY[ltr, nod]
        obj = kid[ltr].kid[nod];
        event_user(12);
        objDot[objDots] = kid[ltr].kid[nod];
        objDots += 1;
        kid[ltr].kid[nod].dad = kid[ltr];
        kid[ltr].kid[nod].ox = letterX[ltr, nod];
        kid[ltr].kid[nod].oy = letterY[ltr, nod];
        kid[ltr].kid[nod].wait = 1;
        kid[ltr].kids += 1;
    }
    dx += spc;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OBJ Dot Cre
/// create jelly point
with (obj)
{
    xl = 1;
    yl = 1;
    
    dad = -1;
    gels = 3;
    alpDo = 0.5; //times alpha
    xSclDef = 0.75 - random(0.2);
    ySclDef = 0.75 - random(0.2);
    h = 0;
    for (i = 0; i &lt; gels; i += 1)
    {
        col[h, i] = merge_color(c_lime, c_black, random(0.5));
        xsclDir[h, i] = random(360);
        xsclSpd[h, i] = (2 + random(2)) * choose(1, -1);
        xsclLen[h, i] = 0.2;
        
        ysclDir[h, i] = random(360);
        ysclSpd[h, i] = (2 + random(2)) * choose(1, -1);
        ysclLen[h, i] = 0.2;
        
        rotDir[h, i] = random(360);
        rotSpd[h, i] = (1 + random(1)) * choose(1, -1);
        rotSpd[h, i] *= 0.25;
        
        //x move
        xDir[h, i] = random(360);
        xSpd[h, i] = (1 + random(1)) * choose(1, -1);
        xLen[h, i] = global.screen_scale;
        
        yDir[h, i] = random(360);
        ySpd[h, i] = (1 + random(1)) * choose(1, -1);
        yLen[h, i] = global.screen_scale;
        
        //alp
        alpDir[h, i] = random(360);
        alpSpd[h, i] = (1 + random(1)) * choose(1, -1);
        alpLen[h, i] = 0.25;
        
        //Generate
        xscl[h, i] = lengthdir_x(xsclLen[h, i], xsclDir[h, i]);
        yscl[h, i] = lengthdir_x(ysclLen[h, i], ysclDir[h, i]);
        xd[h, i] = lengthdir_x(xLen[h, i], xDir[h, i]);
        yd[h, i] = lengthdir_x(yLen[h, i], yDir[h, i]);
        alp[h, i] = 0.5 + lengthdir_x(alpLen[h, i], alpDir[h, i]);
    }
    
    kid = instance_create(-999, -999, o_dummy);
    o_slag06.objDotb[o_slag06.objDotbs] = kid;
    o_slag06.objDotbs += 1;
    kid.wait = 2;
    kid.col = c_green;
    kid.dad = id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OBJ Ltr
with (obj)
{
    x = dad.x + (relX * (dad.scl + (dad.mxs / 100)));
    y = dad.y + (relY * (dad.scl + (dad.mys / 100)));
    mXDir += mXSpd * dt_60();
    mYDir += mYSpd * dt_60();
    mxs = (lengthdir_x(mXLen, mXDir) * dad.scl) + dad.mxs;
    mys = (lengthdir_x(mYLen, mYDir) * dad.scl) + dad.mys;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Char data
h = 0;
i = 0;

//
letterX[h, i] = -48
letterY[h, i] = -64
i += 1;
letterX[h, i] = 48
letterY[h, i] = 0
i += 1;
letterX[h, i] = -48
letterY[h, i] = -32
i += 1;
letterX[h, i] = -16
letterY[h, i] = 0
i += 1;
letterX[h, i] = -48
letterY[h, i] = 32
i += 1;
letterX[h, i] = -48
letterY[h, i] = 64
i += 1;
letterX[h, i] = 16
letterY[h, i] = -64
i += 1;
letterX[h, i] = 48
letterY[h, i] = -64
i += 1;
letterX[h, i] = -16
letterY[h, i] = -64
i += 1;
letterX[h, i] = 16
letterY[h, i] = 0
i += 1;
letterX[h, i] = -48
letterY[h, i] = 0
i += 1;
letterX[h, i] = -32
letterY[h, i] = -64
i += 1;
letterX[h, i] = 0
letterY[h, i] = -64
i += 1;
letterX[h, i] = 32
letterY[h, i] = -64
i += 1;
letterX[h, i] = 32
letterY[h, i] = 0
i += 1;
letterX[h, i] = 0
letterY[h, i] = 0
i += 1;
letterX[h, i] = -32
letterY[h, i] = 0
i += 1;
letterX[h, i] = -48
letterY[h, i] = 48
i += 1;
letterX[h, i] = -48
letterY[h, i] = 16
i += 1;
letterX[h, i] = -48
letterY[h, i] = -16
i += 1;
letterX[h, i] = -48
letterY[h, i] = -48
i += 1;

letterNodes[h] = i;

h += 1;

//
i = 0;
letterX[h, i] = -48
letterY[h, i] = -64
i += 1;
letterX[h, i] = -48
letterY[h, i] = -32
i += 1;
letterX[h, i] = -48
letterY[h, i] = 32
i += 1;
letterX[h, i] = -48
letterY[h, i] = 64
i += 1;
letterX[h, i] = -48
letterY[h, i] = 0
i += 1;
letterX[h, i] = -48
letterY[h, i] = 48
i += 1;
letterX[h, i] = -48
letterY[h, i] = 16
i += 1;
letterX[h, i] = -48
letterY[h, i] = -16
i += 1;
letterX[h, i] = -48
letterY[h, i] = -48
i += 1;
letterX[h, i] = -32
letterY[h, i] = 64
i += 1;
letterX[h, i] = -16
letterY[h, i] = 64
i += 1;
letterX[h, i] = 0
letterY[h, i] = 64
i += 1;
letterX[h, i] = 16
letterY[h, i] = 64
i += 1;
letterX[h, i] = 32
letterY[h, i] = 64
i += 1;
letterX[h, i] = 48
letterY[h, i] = 64
i += 1;

letterNodes[h] = i;

h += 1;

//
i = 0;
letterX[h, i] = -48
letterY[h, i] = -64
i += 1;
letterX[h, i] = -48
letterY[h, i] = -32
i += 1;
letterX[h, i] = -48
letterY[h, i] = 32
i += 1;
letterX[h, i] = -48
letterY[h, i] = 64
i += 1;
letterX[h, i] = -48
letterY[h, i] = 0
i += 1;
letterX[h, i] = -48
letterY[h, i] = 48
i += 1;
letterX[h, i] = -48
letterY[h, i] = 16
i += 1;
letterX[h, i] = -48
letterY[h, i] = -16
i += 1;
letterX[h, i] = -48
letterY[h, i] = -48
i += 1;
letterX[h, i] = -32
letterY[h, i] = 64
i += 1;
letterX[h, i] = -16
letterY[h, i] = 64
i += 1;
letterX[h, i] = 0
letterY[h, i] = 64
i += 1;
letterX[h, i] = 16
letterY[h, i] = 64
i += 1;
letterX[h, i] = 32
letterY[h, i] = 64
i += 1;
letterX[h, i] = 48
letterY[h, i] = 64
i += 1;
letterX[h, i] = 48
letterY[h, i] = 48
i += 1;
letterX[h, i] = 48
letterY[h, i] = 32
i += 1;
letterX[h, i] = 48
letterY[h, i] = 16
i += 1;
letterX[h, i] = 48
letterY[h, i] = 0
i += 1;
letterX[h, i] = 48
letterY[h, i] = -16
i += 1;
letterX[h, i] = 48
letterY[h, i] = -32
i += 1;
letterX[h, i] = 48
letterY[h, i] = -48
i += 1;
letterX[h, i] = 48
letterY[h, i] = -64
i += 1;

letterNodes[h] = i;

h += 1;

//
i = 0;
letterX[h, i] = -48
letterY[h, i] = -64
i += 1;
letterX[h, i] = -48
letterY[h, i] = -32
i += 1;
letterX[h, i] = -48
letterY[h, i] = 32
i += 1;
letterX[h, i] = -48
letterY[h, i] = 64
i += 1;
letterX[h, i] = -48
letterY[h, i] = 0
i += 1;
letterX[h, i] = -48
letterY[h, i] = 48
i += 1;
letterX[h, i] = -48
letterY[h, i] = 16
i += 1;
letterX[h, i] = -48
letterY[h, i] = -16
i += 1;
letterX[h, i] = -48
letterY[h, i] = -48
i += 1;
letterX[h, i] = -32
letterY[h, i] = 64
i += 1;
letterX[h, i] = -16
letterY[h, i] = 64
i += 1;
letterX[h, i] = 0
letterY[h, i] = 64
i += 1;
letterX[h, i] = 16
letterY[h, i] = 64
i += 1;
letterX[h, i] = 48
letterY[h, i] = 32
i += 1;
letterX[h, i] = 48
letterY[h, i] = -32
i += 1;
letterX[h, i] = -32
letterY[h, i] = -64
i += 1;
letterX[h, i] = -16
letterY[h, i] = -64
i += 1;
letterX[h, i] = 0
letterY[h, i] = -64
i += 1;
letterX[h, i] = 16
letterY[h, i] = -64
i += 1;
letterX[h, i] = 32
letterY[h, i] = 0
i += 1;
letterX[h, i] = 16
letterY[h, i] = 0
i += 1;
letterX[h, i] = 0
letterY[h, i] = 0
i += 1;
letterX[h, i] = -16
letterY[h, i] = 0
i += 1;
letterX[h, i] = -32
letterY[h, i] = 0
i += 1;
letterX[h, i] = 32
letterY[h, i] = -48
i += 1;
letterX[h, i] = 32
letterY[h, i] = 48
i += 1;
letterX[h, i] = 32
letterY[h, i] = -16
i += 1;
letterX[h, i] = 32
letterY[h, i] = 16
i += 1;

letterNodes[h] = i;

h += 1;

letters = h;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OBJ Fill 0
///Get all triangles and make them relative to me
with (obj)
{
    for (i = 0; i &lt; triangles; i += 1)
    {
        triX0[i] -= x; triY0[i] -= y;
        triX1[i] -= x; triY1[i] -= y;
        triX2[i] -= x; triY2[i] -= y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OBJ Line 0
with (obj)
{
    x0O = x0;
    y0O = y0;
    x1O = x1;
    y1O = y1;
    
    yy0 = y0O;
    yy1 = y1O;
    
    dir = point_direction(x0, y0, x1, y1);
    dis = point_distance(x0, y0, x1, y1) * 5;
    
    if (side == -1) //-1 is closest edge
    {
        if (dir == 180) dir = 0;
    }
    else
    {
        if (dir == 0 || dir == 360) dir = 180;
    }
    
    lineScale = 0.5;
    wat = num * 2;
    tim = 16;
    bck = -dis * tim;
    x0 += lengthdir_x(bck * lineScale, dir);
    y0 += lengthdir_y(bck * lineScale, dir);
    x1 += lengthdir_x(bck, dir);
    y1 += lengthdir_y(bck, dir);
    
    x0L = x0;
    y0L = y0;
    x1L = x1;
    y1L = y1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OBJ Line Create
with (obj)
{
    x0 = 0;
    y0 = 0;
    x1 = 100;
    y1 = 100;
    
    x0L = x0;
    y0L = y0;
    x1L = x1;
    y1L = y1;
    
    active = 0;
    cou = 0;
    complete = 0;
    
    kid = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Point data
pgn[0]=9;pgpx[0,0]=0;pgpy[0,0]=0;pgpx[0,1]=-50;pgpy[0,1]=200;pgpx[0,2]=120;pgpy[0,2]=200;pgpx[0,3]=130;pgpy[0,3]=160;pgpx[0,4]=0;pgpy[0,4]=160;pgpx[0,5]=30;pgpy[0,5]=40;pgpx[0,6]=160;pgpy[0,6]=40;pgpx[0,7]=170;pgpy[0,7]=0;pgpx[0,8]=0;pgpy[0,8]=0;pgn[1]=13;pgpx[1,0]=0;pgpy[1,0]=0;pgpx[1,1]=120;pgpy[1,1]=0;pgpx[1,2]=160;pgpy[1,2]=40;pgpx[1,3]=150;pgpy[1,3]=80;pgpx[1,4]=130;pgpy[1,4]=100;pgpx[1,5]=140;pgpy[1,5]=120;pgpx[1,6]=120;pgpy[1,6]=200;pgpx[1,7]=80;pgpy[1,7]=200;pgpx[1,8]=100;pgpy[1,8]=120;pgpx[1,9]=10;pgpy[1,9]=120;pgpx[1,10]=-10;pgpy[1,10]=200;pgpx[1,11]=-50;pgpy[1,11]=200;pgpx[1,12]=0;pgpy[1,12]=0;pgn[2]=6;pgpx[2,0]=30;pgpy[2,0]=40;pgpx[2,1]=90;pgpy[2,1]=40;pgpx[2,2]=110;pgpy[2,2]=60;pgpx[2,3]=90;pgpy[2,3]=80;pgpx[2,4]=20;pgpy[2,4]=80;pgpx[2,5]=30;pgpy[2,5]=40;pgn[3]=13;pgpx[3,0]=0;pgpy[3,0]=0;pgpx[3,1]=170;pgpy[3,1]=0;pgpx[3,2]=160;pgpy[3,2]=40;pgpx[3,3]=95;pgpy[3,3]=40;pgpx[3,4]=65;pgpy[3,4]=160;pgpx[3,5]=130;pgpy[3,5]=160;pgpx[3,6]=120;pgpy[3,6]=200;pgpx[3,7]=-50;pgpy[3,7]=200;pgpx[3,8]=-40;pgpy[3,8]=160;pgpx[3,9]=25;pgpy[3,9]=160;pgpx[3,10]=55;pgpy[3,10]=40;pgpx[3,11]=-10;pgpy[3,11]=40;pgpx[3,12]=0;pgpy[3,12]=0;pgn[4]=9;pgpx[4,0]=0;pgpy[4,0]=0;pgpx[4,1]=170;pgpy[4,1]=0;pgpx[4,2]=160;pgpy[4,2]=40;pgpx[4,3]=95;pgpy[4,3]=40;pgpx[4,4]=55;pgpy[4,4]=200;pgpx[4,5]=15;pgpy[4,5]=200;pgpx[4,6]=55;pgpy[4,6]=40;pgpx[4,7]=-10;pgpy[4,7]=40;pgpx[4,8]=0;pgpy[4,8]=0;pgn[5]=13;pgpx[5,0]=0;pgpy[5,0]=0;pgpx[5,1]=170;pgpy[5,1]=0;pgpx[5,2]=160;pgpy[5,2]=40;pgpx[5,3]=95;pgpy[5,3]=40;pgpx[5,4]=65;pgpy[5,4]=160;pgpx[5,5]=130;pgpy[5,5]=160;pgpx[5,6]=120;pgpy[5,6]=200;pgpx[5,7]=-50;pgpy[5,7]=200;pgpx[5,8]=-40;pgpy[5,8]=160;pgpx[5,9]=25;pgpy[5,9]=160;pgpx[5,10]=55;pgpy[5,10]=40;pgpx[5,11]=-10;pgpy[5,11]=40;pgpx[5,12]=0;pgpy[5,12]=0;pgn[6]=9;pgpx[6,0]=0;pgpy[6,0]=0;pgpx[6,1]=-50;pgpy[6,1]=200;pgpx[6,2]=120;pgpy[6,2]=200;pgpx[6,3]=130;pgpy[6,3]=160;pgpx[6,4]=0;pgpy[6,4]=160;pgpx[6,5]=30;pgpy[6,5]=40;pgpx[6,6]=160;pgpy[6,6]=40;pgpx[6,7]=170;pgpy[6,7]=0;pgpx[6,8]=0;pgpy[6,8]=0;pgn[7]=11;pgpx[7,0]=-10;pgpy[7,0]=40;pgpx[7,1]=30;pgpy[7,1]=0;pgpx[7,2]=120;pgpy[7,2]=0;pgpx[7,3]=160;pgpy[7,3]=40;pgpx[7,4]=120;pgpy[7,4]=200;pgpx[7,5]=80;pgpy[7,5]=200;pgpx[7,6]=100;pgpy[7,6]=120;pgpx[7,7]=10;pgpy[7,7]=120;pgpx[7,8]=-10;pgpy[7,8]=200;pgpx[7,9]=-50;pgpy[7,9]=200;pgpx[7,10]=-10;pgpy[7,10]=40;pgn[8]=7;pgpx[8,0]=25;pgpy[8,0]=60;pgpx[8,1]=50;pgpy[8,1]=40;pgpx[8,2]=100;pgpy[8,2]=40;pgpx[8,3]=115;pgpy[8,3]=60;pgpx[8,4]=110;pgpy[8,4]=80;pgpx[8,5]=20;pgpy[8,5]=80;pgpx[8,6]=25;pgpy[8,6]=60;pgn[9]=7;pgpx[9,0]=0;pgpy[9,0]=0;pgpx[9,1]=-50;pgpy[9,1]=200;pgpx[9,2]=120;pgpy[9,2]=200;pgpx[9,3]=130;pgpy[9,3]=160;pgpx[9,4]=0;pgpy[9,4]=160;pgpx[9,5]=40;pgpy[9,5]=0;pgpx[9,6]=0;pgpy[9,6]=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear


flbRun = 0;
shake = 0;
fade = 0;
fadeActive = 0;
moveAwayDir = 0;
createOnce = 0;

//Line clear
for (i = 0; i &lt; objLines; i += 1)
{
    with (objLine[i])
    {
        active = 0;
        cou = 0;
        complete = 0;
        
        x0 = x0L;
        y0 = y0L;
        x1 = x1L;
        y1 = y1L;
        
        y0O = yy0;
        y1O = yy1;
        
        if (kid != -1)
        {
            with (kid) instance_destroy(); //kill line back
        }
        kid = -1;
    }
}

for (i = 0; i &lt; objFills; i += 1)
{
    with (objFill[i])
    {
        alp = 0;
        ystart = yyy;
    }
}

beamActive = 0;
beam = 0;
with (objBeam) instance_destroy();

with (oFlub) instance_destroy();
with (oFlubLetter) instance_destroy();
with (oFlubL) instance_destroy();
with (oFlubL2) instance_destroy();
with (oFlubFade) instance_destroy();

objBeam = -999;
objLineBacks = 0;
//objLines = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Overlay
if (criAct == 0) exit;
//Fade
draw_set_color(merge_color(c_red, c_black, 1.0));
if (fadeActive == 1)
{
    fade += 1 * dt_60();
    draw_set_alpha(min(fadeAmount, (fadeAmount / 90) * fade));
    draw_rectangle(view_xview[0], view_yview[0], view_xview[0] + scw, view_yview[0] + sch, 0);
    draw_set_alpha(1);
}

//Beam
if (instance_exists(objBeam))
{
    with (objBeam)
    {
        alp = .25 + random(0.125);
        ycl = 2.0 * scl;
        xx += (96 * scl) * dt_60();
        //xx = mouse_x;
        draw_sprite_ext(sMiniJellyLine0, 0, x + 0, y, xx, ycl, 0, col, alp);
        draw_sprite_ext(sMiniJellyCap, 0, x + xx, y, 1, ycl, 0, col, alp);
    }
}

//Line back
for (i = 0; i &lt; objLineBacks; i += 1)
{
    with (objLineBack[i])
    {
        alp += alpSpd * dt_60(); //.4 + random(0.1);
        alp = min(alpMax, alp);
        col = merge_color(c_black, c_red, .5);
        //draw_set_alpha(alp + random(alp * 0.25));
        siz = (1 / 64.0) * scl;
        dx = mean(dad.x0, dad.x1);
        dy = mean(dad.y0, dad.y1);
        draw_sprite_ext(sMiniJellyLine1, 0, dx, dy, siz / 2, 2, rot, col, alp + random(alp * 0.25)); //3 at 4
        draw_sprite_ext(sMiniJellyLine1, 0, dx, dy, siz, 1, rot, col, alp + random(alp * 0.25));
    }
}

//Line fill
for (i = 0; i &lt; objFills; i += 1)
{
    with (objFill[i])
    {
        did = 1;
        for (i = 0; i &lt; kids; i += 1) { if (kid[i].complete == 0) did = 0; }
        if (did == 1)
        {
            alp += (maxAlp / 15) * dt_60();
            alp = min(maxAlp, alp);
            draw_set_color(c_red);
            
            draw_set_alpha(alp + random(alp));
            for (i = 0; i &lt; triangles; i += 1)
            {
                dx0 = triX0[i]; dy0 = triY0[i];
                dx1 = triX1[i]; dy1 = triY1[i];
                dx2 = triX2[i]; dy2 = triY2[i];
                draw_triangle(x + dx0, y + dy0, x + dx1, y + dy1, x + dx2, y + dy2, 0);
            }
            
            xcl = 1 + random(.1);
            ycl = 1 + random(.1);
            draw_set_alpha(draw_get_alpha() / 2);
            for (i = 0; i &lt; triangles; i += 1)
            {
                dx0 = triX0[i] * xcl; dy0 = triY0[i] * ycl;
                dx1 = triX1[i] * xcl; dy1 = triY1[i] * ycl;
                dx2 = triX2[i] * xcl; dy2 = triY2[i] * ycl;
                ofx = x;
                ofy = y;
                draw_triangle(dx0 + ofx, dy0 + ofy, dx1 + ofx, dy1 + ofy, dx2 + ofx, dy2 + ofy, 0);
            }
            
            draw_set_alpha(1);
            draw_set_color(c_black);
        }
    }
}

//Lines
for (i = 0; i &lt; objLines; i += 1)
{
    with (objLine[i])
    {
        if (x0 != x0O || y0 != y0O || x1 != x1O || y1 != y1O) boost = 1; else boost = 0;
        alp = .8 + random(0.2);
        draw_set_color(merge_color(c_black, c_red, .5));
        draw_set_alpha(0.25 * alp);
        draw_line_width(x0, y0, x1, y1, 3 + boost); //7 at 4
        draw_set_alpha(0.5 * alp);
        draw_line_width(x0, y0, x1, y1, 2 + boost); //3 at 4
        draw_set_alpha(1 * alp);
        draw_line_width(x0, y0, x1, y1, 1 + boost);
    }
}

if (createOnce == 1)
{
    //Dotbs
    for (i = 0; i &lt; objDotbs; i += 1)
    {
        with (objDotb[i])
        {
            if (wait == 0)
            {
                h = 0;
                draw_sprite_ext(sMiniJelly64, 0, dad.dx[h, 0], dad.dy[h, 0], dad.DXS * 2, dad.DYS * 2, dad.rotDir[h, 0], col, .33);
                for (i = 0; i &lt; dad.gels; i += 1)
                {
                    xsl = dad.DXS + ((1.0 / 32) * 2);
                    ysl = dad.DYS + ((1.0 / 32) * 2);
                    draw_sprite_ext(sMiniJelly, 0, dad.dx[h, i], dad.dy[h, i], xsl, ysl, dad.rotDir[h, i], col, 1);
                }
            }
            wait = max(0, wait - 1);
        }
    }
    
    //Dots
    for (i = 0; i &lt; objDots; i += 1)
    {
        with (objDot[i])
        {
            if (wait == 0)
            {
                xl = dad.dad.scl + (dad.mxs / 100);
                yl = dad.dad.scl + (dad.mys / 100);
                
                for (i = 0; i &lt; gels; i += 1)
                {
                    xsclDir[h, i] += xsclSpd[h, i] * dt_60();
                    ysclDir[h, i] += ysclSpd[h, i] * dt_60();
                    rotDir[h, i] += rotSpd[h, i] * dt_60(); 
                    alpDir[h, i] += alpSpd[h, i] * dt_60(); 
                    
                    //Generate
                    xscl[h, i] = lengthdir_x(xsclLen[h, i], xsclDir[h, i]);
                    yscl[h, i] = lengthdir_x(ysclLen[h, i], ysclDir[h, i]);
                    
                    xd[h, i] = lengthdir_x(xLen[h, i], xDir[h, i]);
                    yd[h, i] = lengthdir_x(yLen[h, i], yDir[h, i]);
                    
                    alp[h, i] = 0.5 + lengthdir_x(alpLen[h, i], alpDir[h, i]);
                    
                    dx[h, i] = dad.x + (ox * xl);
                    dy[h, i] = dad.y + (oy * yl);
                    
                    dx[h, i] += xd[h, i];
                    dy[h, i] += yd[h, i];
                    
                    DXS = (xSclDef + xscl[h, i]) * dad.dad.scl;
                    DYS = (ySclDef + yscl[h, i]) * dad.dad.scl;
                    
                    DXS *= 0.9;
                    DYS *= 0.9;
                    
                    draw_sprite_ext(sMiniJelly, 1, dx[h, i], dy[h, i], DXS, DYS, rotDir[h, i], col[h, i], alpDo * alp[h, i]);
                }
            }
            wait = max(0, wait - 1);
        }
    }
    
    //Superfade
    if (superfadeActive)
    {
        superfade += superfadeSpd * dt_60();
        superfade = min(1, superfade);
        draw_set_color(c_black);
        draw_set_alpha(superfade);
        draw_rectangle(view_xview[0], view_yview[0], view_xview[0] + scw, view_yview[0] + sch, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>14,38</point>
    <point>22,22</point>
  </PhysicsShapePoints>
</object>
