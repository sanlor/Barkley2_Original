<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_babbySystem</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>EnemyCombatActor</parentName>
  <maskName>mask_disk_24by24</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// You get all the default variables from EnemyCombatActor
event_inherited();

var chargeTelegraph = 0.4; // In seconds how long to telegraph the charge
var chargeSpeed = 2.0; // Multiplier of speed to charge at hoopz
var chargeDistance = 75; // Distance he charges towards you
var chargeExhaust = 0.6; // Time he pauses after doing his charge attack

// Enemy stats
scr_enemyDB_statsGet(enemyBuild);

// Enemy configurations
lifedraw = 0; // Disable health bar
ailmentTotem_define(id, 0, 15, 15, 35);
scr_entity_setZHitbox(0, 48);
scr_entity_setMovementCollisionShape_circle(16);
scr_AI_aggro_configure(9999, 9999, 9999);
anim = 0;
animSpd = 0.2;
animStrike = 0;

deathSound = "duergar_death";
damageSound = "duergar_grunt";

// Passive and active states
var ark, conf, guard;
guard = scr_AI_addPassiveState(scr_AI_passive_guard);
ds_map_replace(guard, "sndAlertSound", "duergar_alert");

activeCircle = scr_AI_addActiveState(scr_AI_active_circle);
//activeCircle = scr_AI_addPassiveState(scr_AI_active_circle);
activeCircle[? "rotDist"] = 40;
//activeCircle[? "switchAddMaxDist"] = 55;
//activeCircle[? "switchRemoveMinDist"] = 35;
activeCircle[? "switchPriority"] = 10;
activeCircle[? "time"] = 10 + random(5); // In Step too

var movement = scr_AI_movement_init(scr_AI_movementType_standard);
movement[? "dirOffsetMax"] = 40;
activeCircle[? "walkScript"] = movement;

//activeApproach[? "stateAfterStop"] = activeCircle;

// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

// Slash attack
attack = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_action_charge);
attack[? "action"] = action; 
Attack("assign", action, "poke stun", 0.5, 0, 0.5, 0, 0, 0);
//AI_util_action_setDamage(action, 10, 1, 0, 0, 5, 150, STAGGER_HARDNESS_HARD);
action[? "maskDirs"] = 16; // 50?
action[? "walkSpdMod"] = chargeSpeed;
action[? "chargeDistance"] = chargeDistance;
action[? "approachDistance"] = 25;
action[? "range"] = 32; // 50?
action[? "beforeTime"] = chargeTelegraph * 10;
action[? "damageTime"] = 1; // Time held on damage frame
action[? "damageTimer"] = 6;
action[? "afterTime"] = chargeExhaust * 10; // 6
action[? "attackName"] = "shock";
action[? "sndAttackWarn"] = "duergar_brute_swipe";
action[? "sndAttackStrike"] = "duergar_brute_impact";
action[? "mask"] = mask_disk_32by32; //mask_crescent_32_16;
//action[? "atkLength"] = 16;

attack[? "distMax"] = 36 * 2; // 35? - 30
attack[? "cooldownTime"] = 10; //1.5; 
attack[? "cooldownTimeRnd"] = 10; //1.5;
attack[? "rechargeTime"] = 1.5;
attack[? "rechargeTimeRnd"] = 0;

//Initiate Animation Entities
scr_entity_animation_new("default");
_default_offset = 0;

// Visor
visAct = 0;
visSpr = s_babbySystemOverlay;
visCol = c_red;
visAlp = 0;
visDes = 0;
visSpd = 2; // Time in seconds to power up
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy
if (scr_stats_getCurrentStat(id, STAT_CURRENT_HP) &lt;= 0) 
{
    scr_fx_explosion_spawn_at(x, y, z, 7);
    Quest("bossBabby", 2);
    Quest("marqueeBossName", 0);
    Misc("music", "mus_blankTEMP", 0);
    
    // Blood
    var _obj, _dx, _dy;
    repeat (4) //Until there are "gibs" made, use a bunch of blood splatter for killing
    {
        _dx = x - 8 + floor(random(16));
        _dy = y - 8 + floor(random(16));
        _obj = instance_create(_dx, _dy, o_FX);
        _obj.sprite_index = s_fx_bloodBurst;
        _obj.image_speed = 0.25;
        _obj.image_angle = choose(0,90,180,270);
    }
    
    var debris = irandom(4) + 6;
    repeat (debris) 
    {
        var gib = instance_create(x + 8 - random(16),y + 8 - random(16),o_gibs);
        gib.sprite_index = s_enemyDeath_parts;
        gib.image_index = irandom(sprite_get_number(s_enemyDeath_parts) - 1);
        gib.z = z + 4 + random(32);
        gib.timer = 600;
        gib.move_z = 4 + random(4);
        gib.bloodburst = noone;
        gib.splatSound = "junkbot_death_partclink";
        gib.rot = 0;
        with (gib)
        {
            scr_entity_setDirSpd(random(360), 4 + random(24));
            scr_entity_setShadowSprite(sprite_index, image_index, 0, 0);
        }
    }
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End Step
if (visAct == 1) event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Begin Step
if (visAct == 1) event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
if (visAct == 1) event_inherited();
activeCircle[? "time"] = 10 + random(5);
//activeApproach[? "time"] = 10 + random(5);

hlt = abs(scr_stats_getCurrentStat(id, STAT_CURRENT_HP) - scr_stats_getEffectiveStat(id, STAT_EFFECTIVE_MAX_HP));
hltPct = (1 / global.bossHealth) * abs(hlt - global.bossHealth);
Quest("marqueeBossHealth", hltPct);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
event_inherited();

var _col,_hScale,_frm;
_col = image_blend;

var walking = 0; //a_walking
if (move_x != 0 || move_y != 0) walking = 1;
if (a_attackName == "stagger")
{
    _default_offset = 0;
    scr_entity_animation_setSpeed("default", 0);
    scr_entity_animation_setRange("default", _default_offset, 1);
}
else
{
    if (walking)
    {
        _default_offset = 0;
        scr_entity_animation_setSpeed("default", 1);
        scr_entity_animation_setRange("default", _default_offset + 1, 3);
    }
    else
    {
        _default_offset = 0;
        scr_entity_animation_setSpeed("default", 0);
        scr_entity_animation_setRange("default", _default_offset, 1);
    }
}


switch(a_attackName)
{
    case "shock":
    switch(a_attackState)
    {
        case "before":
            _default_offset = 5 + a_attackAnim/6; ///2
            scr_entity_animation_setSpeed("default", 0);
            scr_entity_animation_setRange("default", _default_offset, 1);
        break;
        
        case "attack":
            _default_offset = 8;
            _default_offset = 7;
            scr_entity_animation_setSpeed("default", 0);
            scr_entity_animation_setRange("default", _default_offset, 1);
        break;
           
        case "after":
            _default_offset = 8 + a_attackAnim/6;///4
            _default_offset = 8 + ((global.DELTA_TOTAL / 100) mod 2);
            scr_entity_animation_setSpeed("default", 0);
            scr_entity_animation_setRange("default", _default_offset, 1);
        break;    
    }
    break;
}

_dirdir = ((faceDir+360)mod 360) div 90;
if (_dirdir == 0 || _dirdir == 3) _hScale = 1; else _hScale = -1;

draw_sprite_ext(sprite_index, scr_entity_animation_getImage("default"), dx, dy, _hScale, 1, 0, _col, 1);

// Power Up light
if (paused() == 0) visAlp = Goto(visAlp, visDes, dt_sec() / visSpd);
draw_set_blend_mode(bm_add);
draw_sprite_ext(visSpr, scr_entity_animation_getImage("default"), dx, dy, _hScale, 1, 0, visCol, visAlp);
for (i = 0; i &lt; 4; i += 1)
{
    drx = dx + lengthdir_x(1, i * 90);
    dry = dy + lengthdir_y(1, i * 90);
    draw_sprite_ext(visSpr, scr_entity_animation_getImage("default"), drx, dry, _hScale, 1, 0, visCol, visAlp / 3);
}
for (i = 0; i &lt; 8; i += 1)
{
    drx = dx + lengthdir_x(2, i * 45);
    dry = dy + lengthdir_y(2, i * 45);
    draw_sprite_ext(visSpr, scr_entity_animation_getImage("default"), drx, dry, _hScale, 1, 0, visCol, visAlp / 6);
}
draw_set_blend_mode(bm_normal);

combatActor_draw_post();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>45,55</point>
    <point>45,45</point>
  </PhysicsShapePoints>
</object>
