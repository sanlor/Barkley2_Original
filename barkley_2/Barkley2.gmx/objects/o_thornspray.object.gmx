<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_bull_thornspray</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CombatAttackEntity</parentName>
  <maskName>s_bull</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
ds_list_add(target_list, EnemyCombatActor);
ds_list_add(target_list, PlayerCombatActor);
lastdmg = 0;
shadow_radius = 2; 

// Entity vars
dny = 6;
gravity_z = 0;
scr_entity_setZHitbox(0, 4);
hitbox_radius = 1.5;
scr_entity_setCollisionType(COLLISION_ONLY_SOLID);
scr_statusEffect_addToCombatAttack(statusEffect_thorny, self);

// Knockback
knockback_type = KNOCKBACKTYPE_MOVEMENT_DIRECTION;

// Call User Event 0 on hit
event_user_on_hit = 2;

weapon_from = noone;
sourceBullet = noone;

initDir = 0;

overallPower = 1;

superShot = false;
flasheffect = false;

shotHits = 0;
shotDamage = 0;
delayShot = false;
image_speed = 0;
bulletBurst = s_ricochet;

checkHit = true;

pKnockbackMod = 5;

count = 0
distcount = 0;
show_hiteffect = true;

z = 12;
scr_entity_setZHitbox(0, 2);
move_z = 0;

throughWalls = 0;
rangeEndGrav = 0;
accel = 0;
maxspd = 48;
minspd = 6;
lobDirection = 0;
lobGravity = 0;

distlife = 64;
distpowkeep = 64;  
timelife = 64;
timepowkeep = 64;
powLoss = 1; 

follow = 0;

col = c_white;

coldir = -1;

amod = 1;
dontcollide = 1;

returning = false;
returned = false;

displayBullet = true;

randomize();
image=irandom_range(0,7);

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if show_hiteffect
{
    obj = instance_create(x+lengthdir_x(speed,direction),y+lengthdir_y(speed,direction),o_ricochet)//o_splash);
    obj.sprite_index = bulletBurst;
    obj.image_index = scr_math_mod((move_dir + 11.25) div 22.5,16);
    obj.image_blend = c_white;
    obj.depth = depth;
    obj.image_xscale = image_xscale //+  .5*(image_blend = c_orange)
    obj.image_yscale = image_yscale //+ .5*(image_blend = c_orange)
    obj.drawHeight = z;
}

if(checkHit &amp;&amp; instance_exists(weapon_from))
{
    if(shotHits==0)
    { ///didnt hit nobody? tell the gun about that
        weapon_from[? "pChargeMissed"] +=1;
    }
    else
    {
        weapon_from[? "pChargeHits"] += shotHits;   
        weapon_from[? "pChargeDamage"] += shotDamage;   
    }
}

if(sprite_index == s_bull_bone)
{
    var _ric;
    _ric = instance_create(x,y,o_partburst);
    _ric.sprite_index = s_bull_bone;
    _ric.z = z;
    _ric.bits = floor(image_index/4)+irandom(2);
    _ric.biggestsize = round(image_index*0.7);
    with(_ric){event_user(7);}
}

if(sprite_index == s_bull_junk)
{
    var _ric;
    _ric = instance_create(x,y,o_partburst);
    _ric.sprite_index = s_bull_junk;
    _ric.z = z;
    _ric.bits = floor(image_index/5);
    _ric.biggestsize = round(image_index*0.7);
    with(_ric){event_user(7);}
}

if(sprite_index == s_bull_foam)
{
    var _ric;
    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_foam;
    _ric.image_index = image_index;
    _ric.image_speed = 0;
    _ric.z = z;
    _ric.move_z /=2;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;
    _ric.rotspd = random(30)*choose(1,0.5,0.25)*choose(1,-1);
}

if(sprite_index == s_bull_stone_tiny)
{
    var _ric;

    repeat(3)
    {
    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_bone;
    _ric.image_index = irandom(2);
    _ric.image_speed = 0;
    _ric.z = z;
    _ric.move_z /=3;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;
    }
}

if(sprite_index == s_bull_stone_small)
{
    var _ric;
    
    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_stone_tiny;
    _ric.image_index = irandom(4);
    _ric.image_speed = 0.2;
    _ric.z = z;
    _ric.move_z /=3;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;

    repeat(2)
    {
    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_bone;
    _ric.image_index = irandom(2);
    _ric.image_speed = 0;
    _ric.z = z;
    _ric.move_z /=3;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;
    }
}

if(sprite_index == s_bull_stone)
{
    var _ric;
    
    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_stone_small;
    _ric.image_index = irandom(4);
    _ric.image_speed = 0.2;
    _ric.z = z;
    _ric.move_z /=3;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;


    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_stone_tiny;
    _ric.image_index = irandom(4);
    _ric.image_speed = 0.2;
    _ric.z = z;
    _ric.move_z /=3;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;
    
    repeat(2)
    {
    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_bone;
    _ric.image_index = irandom(2);
    _ric.image_speed = 0;
    _ric.z = z;
    _ric.move_z /=3;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;
    }
}
    

if(sprite_index == s_bull_goo_tiny)
{
    _obj = instance_create(x,y,o_FX);
    _obj.sprite_index = s_bull_gooburst_tiny;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
}

if(sprite_index == s_bull_goo_small)
{
    _obj = instance_create(x,y,o_FX);
    _obj.sprite_index = s_bull_gooburst_small;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
}

if(sprite_index == s_bull_goo_med)
{
    _obj = instance_create(x,y,o_FX);
    _obj.sprite_index = s_bull_gooburst_med;
    _obj.image_speed = 0.25;
    _obj.image_angle = choose(0,90,180,270);
}

if(sprite_index == s_bull_goo_large)
{
    _obj = instance_create(x,y,o_FX);
    _obj.sprite_index = s_bull_gooburst_large;
    _obj.image_speed = 0.25;
}


if(sprite_index == s_bull_stone_large)
{
    var _ric;
    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_stone;
    _ric.image_index = irandom(4);
    _ric.image_speed = 0.2;
    _ric.z = z;
    _ric.move_z /=3;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;

    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_stone_small;
    _ric.image_index = irandom(4);
    _ric.image_speed = 0.2;
    _ric.z = z;
    _ric.move_z /=3;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;

    repeat(2)
    {
        _ric = instance_create(x,y,o_casings);
        _ric.rot = image_angle;
        _ric.sprite_index = s_bull_stone_tiny;
        _ric.image_index = irandom(4);
        _ric.image_speed = 0.2;
        _ric.z = z;
        _ric.move_z /=3;
        _ric.move_x /=2;
        _ric.move_y /=2;
        _ric.scale = 1;
    }
    
    repeat(3)
    {
    _ric = instance_create(x,y,o_casings);
    _ric.rot = image_angle;
    _ric.sprite_index = s_bull_bone;
    _ric.image_index = irandom(2);
    _ric.image_speed = 0;
    _ric.z = z;
    _ric.move_z /=3;
    _ric.move_x /=2;
    _ric.move_y /=2;
    _ric.scale = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var pow;
pow = scr_stats_getAttackStat(id,STAT_ATTACK_DMG_NORMAL);

switch(sprite_index)
{
    case s_bull:
        if(!superShot){sprite_index = s_physShot;}
        else{sprite_index = s_physSuperShot; image_xscale = image_xscale*1.5; image_yscale = image_yscale*1.4;}
        break;
    case s_bull_stone:
        if(pow&gt;48){sprite_index = s_bull_stone_large;}
        else if (pow&gt;24){sprite_index = s_bull_stone;}
        else if (pow&gt;12){sprite_index = s_bull_stone_small;}
        else{sprite_index = s_bull_stone_tiny;}
        image_angle = choose(0,90,180,270);
        image_xscale = 1;
        image_yscale = 1;
        break;
    case s_bull_foam:
        if(pow&gt;52){image_index = 4;}
        else if (pow&gt;32){image_index = 3;}
        else if (pow&gt;16){image_index = 2;}
        else if (pow&gt;8){image_index = 1;}
        else{image_index = 0;}
        image_xscale = 1;
        image_yscale = 1;
        break;
    case s_bull_rubber:
        if(pow&gt;48){image_index = 3;}
        else if (pow&gt;24){image_index = 2;}
        else if (pow&gt;12){image_index = 1;}
        else{image_index = 0;}
        break;
    case s_bull_bone:
        image_index = 6 + median(0,11,floor(pow/5)-1+irandom(2));
        image_angle = choose(0,90,180,270);
        image_xscale = 1;
        image_yscale = 1;
        break;
    case s_bull_junk:
        image_index = 7 + median(0,15,floor(pow/4)-1+irandom(2));
        image_angle = choose(0,90,180,270);
        image_xscale = 1;
        image_yscale = 1;
        break;
    case s_bull_goo_med:
        if(pow&gt;48){sprite_index = s_bull_goo_large;}
        else if (pow&gt;24){sprite_index = s_bull_goo_med;}
        else if (pow&gt;12){sprite_index = s_bull_goo_small;}
        else{sprite_index = s_bull_goo_tiny;}
        image_xscale = 1;
        image_yscale = 1;
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = move_dir;

// Follow 
if follow
{
    //The code below was executed every step for the bullet
    //As a result, slow bullets like stone would be easily controlled by the player
    //Commented out for now, can be enabled if needed later
    //x -= o_hoopz.delta_x / 2;
    //y -= o_hoopz.delta_y / 2;
}

// Hit ground
if (z &lt;=0)
{
    event_user(1);
}


if(lobGravity != 0)
{
    move_z -= lobGravity * dt();
}
    
// Distance fade and bullet timeout
if (((distcount + (4*move_dist*dt()) &gt; distlife &amp;&amp; distlife != -1) ||
    (count+(.5 * dt()) &gt; timelife &amp;&amp; timelife!=-1)))
{
    if (!returning || returned) {amod = amod*0.95*dt();}
}

if(((count&gt;distpowkeep &amp;&amp;distpowkeep!=-1)|| (count&gt;timepowkeep &amp;&amp; timepowkeep !=-1)))
{
    dmgratio*=powLoss;
}

move_dist += accel * dt();

if (move_dist&gt;maxspd) {move_dist = maxspd;}
if (move_dist&lt;minspd) {move_dist = minspd;}

count += dt();
distcount += abs(move_dist * dt());

scr_entity_setDirSpd(move_dir, move_dist);

// Also move according to offset
scr_collision_move_contact_solid(move_x_offset * dt(), move_y_offset * dt(), collision_check);


// Returning bullets
if(returning &amp;&amp; returned) ////returning bullets give back ammo when hoopz touches em
{
    move_x_offset = 0;
    move_y_offset = 0;
    
    if(returned)
    {
        var _chk;
        _chk = instance_place(x,y,o_hoopz);
        if(_chk != noone &amp;&amp; instance_exists(weapon_from))
        {
            weapon_from[? "pCurAmmo"] += weapon_from[? "pAmmoCost"] / weapon_from[? "pShots"]; ///ammo returned is based on ammo cost per shot / number of bullets launched per shot
            
            if (weapon_from[? "pCurAmmo"]&gt;weapon_from[? "pMaxAmmo"])
            {
                weapon_from[? "pCurAmmo"] = weapon_from[? "pMaxAmmo"];
            }
            
            show_hiteffect = false;
            event_user(5);
            instance_destroy();
        }
    }
}


if (rangeEndGrav != 0 &amp;&amp; distcount+48 &gt; distlife)
{
    if (!returning || returned)
    {
        lobGravity = rangeEndGrav;
    }
}
            
if (dontcollide&gt;0) {
    dontcollide-=1;
}
else
{
    if (!scr_entity_collision_nextPlaceFree(self))
    {
        if (throughWalls&gt;0) {
            throughWalls -= move_dist * dt();
        }
        else {
            event_user(2);
            instance_destroy();
        }
    }
    else if (((distcount &gt; distlife &amp;&amp; distlife != -1) ||
            (count &gt; timelife &amp;&amp; timelife != -1)) &amp;&amp;
            !delayShot) {
        if (!returning || returned)
        {
            show_hiteffect = false;
            x = xprevious;
            y = yprevious;
            event_user(5);
            instance_destroy();
        }
        else
        {
            // Trigger the returning bullet!
            distcount = -96;
            count = 3;
            returned = true;
            amod = 1;
            
            scr_entity_setMoveXY(-move_x, -move_y);
            
            initDir = (initDir + 180) mod 360;
        }
    }
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="sys_collision">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>coldir = point_direction(xprevious,yprevious,other.x,other.y);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shotHits +=1;
shotDamage += lastdmg;

lastdmg = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////bullet hits the ground;

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

if (displayBullet &amp;&amp; sprite_index != noone &amp;&amp; count &gt; 0.3) {
    draw_sprite_ext(sprite_index,image,dx,dy,image_xscale,image_yscale,image_angle,image_blend,image_alpha*amod);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,2</point>
    <point>4,4</point>
  </PhysicsShapePoints>
</object>
