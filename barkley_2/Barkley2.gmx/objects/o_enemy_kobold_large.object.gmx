<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sKoboldLargeMap</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_enemygroup_kobold</parentName>
  <maskName>mask_disk_40by32</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////you get all the default variables from EnemyCombatActor
event_inherited();

// Enemy stats
scr_enemyDB_statsGet(enemyBuild);

// Enemy configurations
scr_entity_setZHitbox(0, global.settingEnemyBigHeight);
ailmentTotem_define(id, 0, 0, 0, 0);
scr_entity_setMovementCollisionShape_circle(20);
scr_actor_setActorPushType(ACTOR_COLLISIONPUSH_IMMOBILE);
scr_entity_setCollisionType(COLLISION_ALL);

headType = irandom(8);
hasHead = true;

p_bulletOx = 0;
p_bulletOy = 0;
p_bulletOz = 24;

deathSound = "kobold_death";
damageSound = "kobold_grunt";
blobSound = "kobold_grunt";

var conf, guard;
guard = scr_AI_addPassiveState(scr_AI_passive_guard);
guard[? "sndAlertSound"] = "kobold_alert"; //attacking scream (desperate)

scr_AI_addActiveState(scr_AI_active_approach);
activeHangback = scr_AI_addActiveState(scr_AI_active_hangback);
activeHangback[? "switchPriority"] = 10;
activeHangback[? "switchRemoveMaxDist"] = 150;
activeHangback[? "switchAddMaxDist"] = 110;

// Create and configure AI switch
var attack, action;
conf = scr_AI_setSwitch(scr_AI_switch_standard);

hook_hitfx = enemy_hitfx_kobold_large;

// Spit
attackSpit = scr_AI_switch_standard("new_attack", conf);
action = scr_AI_addAction(scr_AI_action_patternshot);
attackSpit[? "action"] = action; 

action[? "attackName"] = "spit";
action[? "motion"] = 20;

switch(headType)
{
    case 0:
    case 1:
        action[? "beforeTime"] = 3;
        action[? "afterTime"] = 2;
        action[? "burst"] = 1;
        action[? "burstRnd"] = 2;
        action[? "range"] = 80;
        action[? "precision"] = 2;
        
        action[? "bulletObject"] = o_enemyAttack_bullet_oozeSpit;
        action[? "shotCount"] = 1;
        action[? "shotSpread"]= 0;
        action[? "shotAngle"]= 0;
        break;
        
    case 2:
    case 3:
        action[? "beforeTime"] = 8;
        action[? "afterTime"] = 2;
        action[? "burst"] = 1;
        action[? "burstRnd"] = 2;
        action[? "range"] = 80;
        action[? "precision"] = 20;

        action[? "bulletObject"] = o_enemyAttack_bullet_oozeSpit;
        action[? "shotCount"] = 3;
        action[? "shotSpread"]= 10;
        action[? "shotAngle"]= 0;
        
        action[? "shotCountMod"] = 1;
        action[? "shotSpreadMod"]= 20;
        action[? "shotAngle"]= 0;
        break;
        
    case 4:
        action[? "beforeTime"] = 6;
        action[? "afterTime"] = 2;
        action[? "burst"] = 1;
        action[? "burstRnd"] = 0;
        action[? "range"] = 120;
        action[? "precision"] = 10;

        action[? "bulletObject"] = o_enemyAttack_bullet_oozeSpit;
        action[? "shotCount"] = 8;
        action[? "shotSpread"]= 40;
        action[? "shotAngle"]= 0;
        
        break;
        
    case 5:
        action[? "beforeTime"] = 6;
        action[? "afterTime"] = 4;
        action[? "burst"] = 1;
        action[? "burstRnd"] = 0;
        action[? "range"] = 140;
        action[? "precision"] = 0;

        action[? "bulletObject"] = o_enemyAttack_bullet_largespit;
        action[? "shotCount"] = 1;
        action[? "shotSpread"]= 0;
        action[? "shotAngle"]= 0;
        break;
        
    case 6:
        action[? "beforeTime"] = 5;
        action[? "afterTime"] = 4;
        action[? "burst"] = 1;
        action[? "burstRnd"] = 2;
        action[? "range"] = 60;
        action[? "precision"] = 20;

        action[? "bulletObject"] = o_enemyAttack_bullet_oozeSpit;
        action[? "shotCount"] = 4;
        action[? "shotSpread"]= 30;
        action[? "shotAngle"]= 0;
        break;
        
    case 7:
        action[? "beforeTime"] = 6;
        action[? "afterTime"] = 2;
        action[? "burst"] = 1;
        action[? "burstRnd"] = 0;
        action[? "range"] = 90;
        action[? "precision"] = 10;

        action[? "bulletObject"] = o_enemyAttack_bullet_oozeSpit;
        action[? "shotCount"] = 3;
        action[? "shotSpread"]= 30;
        action[? "shotAngle"]= 0;
        break;

    case 8:
        action[? "beforeTime"] = 6;
        action[? "afterTime"] = 3;
        action[? "burst"] = 1;
        action[? "burstRnd"] = 2;
        action[? "range"] = 120;
        action[? "precision"] = 10;

        action[? "bulletObject"] = o_enemyAttack_bullet_oozeSpit;
        action[? "shotCount"] = 3;
        action[? "shotSpread"]= 20;
        action[? "shotAngle"]= 0;
        break;
        
}

if (action[? "bulletObject"] == o_enemyAttack_bullet_largespit) {
    AI_util_action_setDamage(action, 1, 0, 0, 2.5, 10, 180, STAGGER_HARDNESS_MEDIUM);
} else {
    AI_util_action_setDamage(action, 1, 0, 0, 1, 10, 100, STAGGER_HARDNESS_SOFT);
}
action[? "shotAimPattern"] ="x"; ///patterns: circle, cross, x, 8 directions, horiz, vert
action[? "shotAimWiggleRoom"] = 20; ///angle it can deviate from the aim pattern
action[? "xpatternAngle"] = 25;

action[? "sndAttackWarn"] = "kobold_attack"; //attacking scream (desperate)
action[? "sndAttackStrike"] = "kobold_spit";


attackSpit[? "distMax"] = 140;


// Clone
attackClone = scr_AI_switch_standard("new_attack", conf);
attackClone[? "ammo"] = 4;
action = scr_AI_addAction(scr_AI_action_clone);
attackClone[? "action"] = action; 

action[? "beforeTime"] = 8;
action[? "attackName"] = "clone";
action[? "dmg"] = 10;
action[? "burst"] = 1;
action[? "burstRnd"] = 0;
action[? "gunRange"] = 14;
action[? "sndAttackWarn"] = "kobold_attack"; //attacking scream (desperate)
action[? "sndAttackStrike"] = "kobold_clone";
action[? "bulletObject"] = o_enemy_koboldShot;

attackClone[? "distMax"] = 140;


///headgush
headgushintv = 0;
headgushburst = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initiate Animation Entities

scr_entity_animation_new("bodystand");
scr_entity_animation_setRange("bodystand", 4, 1);
scr_entity_animation_setSpeed("bodystand", 0);

scr_entity_animation_new("bodywalk");
scr_entity_animation_setRange("bodywalk", 0, 4);
scr_entity_animation_setSpeed("bodywalk", 1);

scr_entity_animation_new("headstand");
scr_entity_animation_setRange("headstand", 4, 1);
scr_entity_animation_setSpeed("headstand", 1);

scr_entity_animation_new("headwalk");
scr_entity_animation_setRange("headwalk", 0, 4);
scr_entity_animation_setSpeed("headwalk", 1);

scr_entity_animation_new("headstagger");
scr_entity_animation_setRange("headstagger", 5, 1);

scr_entity_animation_new("koboldclone_blob");
scr_entity_animation_setRange("koboldclone_blob", 4, 3);
scr_entity_animation_setSpeed("koboldclone_blob", 1);

scr_entity_animation_new("koboldclone_spawn");
scr_entity_animation_setRange("koboldclone_spawn", 8, 7);

scr_entity_animation_new("bodyspit_before");
scr_entity_animation_setRange("bodyspit_before", 15, 2);
scr_entity_animation_new("bodyspit_attack");
scr_entity_animation_setRange("bodyspit_attack", 17, 1);
scr_entity_animation_new("bodyspit_after");
scr_entity_animation_setRange("bodyspit_after", 17, 2);

scr_entity_animation_new("headspit_before");
scr_entity_animation_setRange("headspit_before", 5, 2);
scr_entity_animation_new("headspit_attack");
scr_entity_animation_setRange("headspit_attack", 7, 1);
scr_entity_animation_new("headspit_after");
scr_entity_animation_setRange("headspit_after", 7, 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if paused() exit;

if(!hasHead)
{
    if(headgushintv&lt;=0)
    {
        if(random(10)&lt;2)
        {
            var direcSprite = ((faceDir+360)mod 360) div 90;
            _blt = instance_create(x, y, o_enemy_koboldShot);
            _blt.z = z+48;
            with(_blt)
            {
                scr_math_dirDistToVector(random(360),5+random(4));
                move_x = __vx;
                move_y = __vy;
                move_z = 12 + random(4);
            }
        
        }
        else
        {
            var shot = instance_create(x,y, o_enemyAttack_crabbold_shot);
            shot.z = z + 48;
            var shotdir = random(360);
            with (shot)
            {
                scr_entity_setDirSpd(shotdir, 5 + random(4));
                move_z = 12 + random(4);
            }
            
            scr_stats_setAttackStat(shot, STAT_ATTACK_DMG_BIO, 20);
            ds_list_copy(shot.target_list, target_list);
            if (instance_exists(I_AI_target)) ds_list_add(shot.target_list, I_AI_target.object_index);
            
            // Sound
            audio_play_sound_AI(blobSound);
    
            headgushburst -=1;
            if(headgushburst==0)
            {
                headgushburst = 2+irandom(3);
                headgushintv = 12+random(12);
            }
            else
            {
                headgushintv = 2+random(3);
            }
        }
        
    }
    else
    {
        headgushintv-=dt();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _obj;

repeat(6)
{
    scr_fx_simple_ext(x-12+random(24),y-12+random(24), z + random(10),
                      s_koboldBigBurst, 0.5 + random(0.5),
                      1, 1, choose(0,90,180,270), c_white, 1);
}

repeat(4)
{
    _obj = instance_create(x,y-4,o_shootableGib);
    _obj.sprite_index = s_koboldLarge_gibs;
    _obj.bloodburst = s_koboldBigBurst;
    _obj.bounces = 6;
    _obj.image_index = irandom(_obj.image_number-1);
    _obj.move_z = 7 + random(7);
    _obj.gravity_z = 3;
    _obj.splatSound = "kobold_splatter";
}


instance_create(x+random(48)-24,y+random(48)-24,o_enemyAttack_oozeSplash);
instance_create(x+random(48)-24,y+random(48)-24,o_enemyAttack_oozeSplash);
instance_create(x,y,o_enemyAttack_oozeSplash);

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

var _col,_hScale;
_col = image_blend;

_hScale = 1;
var head_image = 0;
var body_image = 0;

_dir = ((faceDir+360)mod 360) div 90;

switch(_dir)
{
    case 0: _hScale = -1; break;
    case 1: _hScale = 1; break;
    case 2: _hScale = -1;break;
    case 3: _hScale = 1;break;
}

if (_dir == 2 or _dir == 3) {
    // Facing downwards
    scr_entity_animation_setShift("headstand", 18*headType);
    scr_entity_animation_setShift("headwalk", 18*headType);
    scr_entity_animation_setShift("headstagger", 18*headType);
    
    scr_entity_animation_setShift("headspit_before", 18*headType);
    scr_entity_animation_setShift("headspit_attack", 18*headType);
    scr_entity_animation_setShift("headspit_after", 18*headType);
    
    scr_entity_animation_setShift("bodystand", 0);
    scr_entity_animation_setShift("bodywalk", 0);
    scr_entity_animation_setShift("bodyspit_before", 0);
    scr_entity_animation_setShift("bodyspit_attack", 0);
    scr_entity_animation_setShift("bodyspit_after", 0);
    scr_entity_animation_setShift("koboldclone_blob", 0);
    scr_entity_animation_setShift("koboldclone_spawn", 0);
    
}
else
{
    // Facing upwards
    scr_entity_animation_setShift("headstand", 18*headType+9);
    scr_entity_animation_setShift("headwalk", 18*headType+9);
    scr_entity_animation_setShift("headstagger", 18*headType+9);
    
    scr_entity_animation_setShift("headspit_before", 18*headType+9);
    scr_entity_animation_setShift("headspit_attack", 18*headType+9);
    scr_entity_animation_setShift("headspit_after", 18*headType+9);
    
    scr_entity_animation_setShift("bodystand", 19);
    scr_entity_animation_setShift("bodywalk", 19);
    scr_entity_animation_setShift("bodyspit_before", 19);
    scr_entity_animation_setShift("bodyspit_attack", 19);
    scr_entity_animation_setShift("bodyspit_after", 19);
    scr_entity_animation_setShift("koboldclone_blob", 19);
    scr_entity_animation_setShift("koboldclone_spawn", 19);
}

if(a_attackName == "stagger")
{
    head_image = scr_entity_animation_getImage("headstagger");
    body_image = scr_entity_animation_getImage("koboldclone_blob");
}
else if(a_attackName=="spit")
{
        switch(a_attackState)
        {
            case "before":
                head_image = scr_entity_animation_imageByRatio("headspit_before", a_attackAnim, I_atk_shot_intBefore);
                body_image = scr_entity_animation_imageByRatio("bodyspit_before", a_attackAnim, I_atk_shot_intBefore);
                break;
                
            case "attack":
                head_image = scr_entity_animation_getImage("headspit_attack");
                body_image = scr_entity_animation_getImage("bodyspit_attack");
                break;
            
            case "after":
                head_image = scr_entity_animation_imageByRatio("headspit_after", a_attackAnim, I_atk_shot_intAfter);
                body_image = scr_entity_animation_imageByRatio("bodyspit_after", a_attackAnim, I_atk_shot_intAfter);
                break;
        }
        
}
else if(a_attackName=="clone")
{
    switch(a_attackState)
    {
        case "before":
            head_image = scr_entity_animation_getImage("headstand");
            body_image = scr_entity_animation_imageByRatio("koboldclone_blob", a_attackAnim, I_atk_shot_intBefore);
            break;
                
        case "attack":
            head_image = scr_entity_animation_getImage("headstand");
            body_image = scr_entity_animation_imageByRatio("koboldclone_spawn", a_attackAnim, 7);
            break;
            
        case "after":
            head_image = scr_entity_animation_getImage("headstand");
            body_image = scr_entity_animation_imageByRatio("koboldclone_blob", a_attackAnim, I_atk_shot_intAfter);
            break;
    }
}
else
{
    if(a_walking)
    {
        head_image = scr_entity_animation_getImage("headwalk");
        body_image = scr_entity_animation_getImage("bodywalk");
    }
    else
    {
        head_image = scr_entity_animation_getImage("headstand");
        body_image = scr_entity_animation_getImage("bodystand");
    }
}

draw_set_alpha(1);

DrawStripExt(s_koboldLarge_body,body_image,dx,dy,_hScale,1,0,_col,1);
if(hasHead){DrawStrip(s_koboldLarge_head,head_image,dx,dy-26,_hScale,1,_col,1);}

combatActor_draw_post();


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,15</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
