<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Phase setup //
phase[0] = 10;
phase[1] = 1;
phase[2] = 0;
phase[3] = 0;

// Phase skipping //
phase_skip_time = 0;
phase_skip_to = 0;
phase_skip = 0;

// Textbox setup //
textbox_written = "";
textbox_goal = "";
textbox_pause = 0;
textbox_position = 0;
textbox_skip = false;  

// Alpha setup //
alpha_textbox = 0;
alpha_textbox_goal = 0;
alpha_textbox_timer = 0;
alpha_event = 0;
alpha_event_goal = 0;

// Button setup //
button_generate_hover = false;
button_generate_click_effect = 0;
button_clear_hover = false;
button_clear_click_effect = 0;
button_premade_hover = false;
button_premade_click_effect = 0;
button_accept_clickable = false;
button_accept_hover = false;
button_accept_x = 236;
button_accept_y = 220;
button_accept_click_effect = 0;

// Other //
first_capital = true;
name_written = "";
name_position = 0;
cursor_blink = 8;
cursor_x = 0;
cursor_y = 1;
active = false;
letter_size = 1;
button_hover_uppercase = false
button_hover_lowercase = false;

// Premade pieces //
generated_piece_one[0] = "Bok";
generated_piece_one[1] = "Aa";
generated_piece_one[2] = "Tro";
generated_piece_one[3] = "Leep";
generated_piece_one[4] = "Erp";
generated_piece_one[5] = "Ool";
generated_piece_one[6] = "Pos";
generated_piece_one[7] = "Qax";
generated_piece_one[8] = "Xor";
generated_piece_one[9] = "Eee";
generated_piece_one[10] = "Tek";
generated_piece_one[11] = "A";
generated_piece_one[12] = "Eo";

generated_piece_two[0] = "app";
generated_piece_two[1] = "aza";
generated_piece_two[2] = "o";
generated_piece_two[3] = "iop";
generated_piece_two[4] = "iino";
generated_piece_two[5] = "xoxa";
generated_piece_two[6] = "pel";
generated_piece_two[7] = "stu";
generated_piece_two[8] = "rea";
generated_piece_two[9] = "ope";
generated_piece_two[10] = "x";
generated_piece_two[11] = "a";
generated_piece_two[12] = "wert";

generated_piece_three[0] = "tep";
generated_piece_three[1] = "ax";
generated_piece_three[2] = "rol";
generated_piece_three[3] = "aa";
generated_piece_three[4] = "bac";
generated_piece_three[5] = "x";
generated_piece_three[6] = "nera";
generated_piece_three[7] = "aaop";
generated_piece_three[8] = "asax";
generated_piece_three[9] = "e";
generated_piece_three[10] = "etra";
generated_piece_three[11] = "et";
generated_piece_three[12] = "oo";

// Defaults /
button_accept_text = "Accept";
button_generate_text = "Generate";

// Draw restriction //
dont_draw_cursor_hover = false
dont_draw_lettersize_hover = false

// Defaults if no text exists //
text[0] = "Greetings, young one. I have been awaiting your#arrival for some time now. The world has been#waiting for your arrival. Ah, but my manners...#Please, take a seat and make yourself comfortable.";
text[1] = "Tell me about yourself... Yes, your name... What is#your name?";   
text[2] = "Yes, an ancient name... a noble name. It has been#some time since I've heard that name. And yet, I#knew you carried it as soon as I laid eyes on you.";
text[3] = "It is a name that bears much strength, but also#much sorrow. It is a name with a tragic history, a#glorious history. And it is a name with history yet#unwritten...";   
text[4] = "Now answer me these questions, " + o_cc_data.character_name + ".";   
    
// Default //
premade_names = 15;
name_premade[0] = "Brayden";
name_premade[1] = "Kayden";
name_premade[2] = "Ayden";
name_premade[3] = "Hayden";
name_premade[4] = "Jayden";
name_premade[5] = "Braylen";
name_premade[6] = "Brycen";
name_premade[7] = "Trayden";
name_premade[8] = "Rayden";
name_premade[9] = "Mayden";
name_premade[10] = "Qayden";
name_premade[11] = "Gayden";
name_premade[12] = "Xayden";
name_premade[13] = "Nayden";
name_premade[14] = "Payden";

// Default name that is written //
for (i=0; i&lt;14; i+=1;)
    {
    name_value[i] = 41;
    name_letter[i] = " ";
    button_hover_name[i] = false;
    }

// Possible characters for name //
selection[0] = "A";
selection[1] = "B";    
selection[2] = "C";
selection[3] = "D";
selection[4] = "E";
selection[5] = "F";
selection[6] = "G";
selection[7] = "H";
selection[8] = "I";
selection[9] = "J";
selection[10] = "K";
selection[11] = "L";
selection[12] = "M";
selection[13] = "N";
selection[14] = "O";
selection[15] = "P";
selection[16] = "Q";
selection[17] = "R";
selection[18] = "S";
selection[19] = "T";
selection[20] = "U";
selection[21] = "V";
selection[22] = "W";
selection[23] = "X";
selection[24] = "Y";
selection[25] = "Z";
selection[26] = "-";
selection[27] = "_";
selection[28] = "1";
selection[29] = "2";
selection[30] = "3";
selection[31] = "4";
selection[32] = "5";
selection[33] = "6";
selection[34] = "7";
selection[35] = "8";
selection[36] = "9";
selection[37] = "0";
selection[38] = ":";
selection[39] = ";";
selection[40] = "$";
selection[41] = " ";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Phases //
if phase[0] &gt; 0 then
    {
    // Tick down //
    phase[0] -= dt();
    
    // Event //
    if phase[0] &lt;= 0 then   
        {
        // Opening Text //
        if phase[1] &gt;= 1 and phase[1] &lt;= 2 then scr_cc_textbox(text[phase[1] - 1]);
        
        // Move to NAME ENTRY event //
        if phase[1] = 3 then 
            {
            button_accept_clickable = true
            phase[3] = 6.6;
            }
            
        // Closing text //
        if phase[1] &gt;= 4 and phase[1] &lt;= 6 then scr_cc_textbox(text[phase[1] - 2]);
        
        // Ending //
        if phase[1] = 7 then
            {
            phase[2] = 5;
            alpha_textbox_goal = 0;
            alpha_event_goal = 0;
            }
        }
    } 
    
// Name entry system //
if active = true then
    {   
    // Effect areas for hovering effects //
    if scr_cc_button_xy(86, 297, 64, 130) = false then dont_draw_cursor_hover = true;
    else dont_draw_cursor_hover = false;
    
    // Draw cursor //
    if scr_cc_button_xy(86, 297, 131, 151) = false then dont_draw_lettersize_hover = true;
    else dont_draw_lettersize_hover = false;
    
    // Change name selector position hover //
    for (i=0; i&lt;14; i+=1;)
        {
        button_hover_name[i] = scr_cc_button_xy(92 + i * 14, 105 + i * 14, 36, 59);
        }
        
    // Press buttons on the name entry //
    for (i=0; i&lt;14; i+=1;)
        {
        if MiniKeyPress("action") then 
            {
            if button_hover_name[i] = true then
                {
                audio_play_sound_ext("sn_cc_name_click1", 10, false);
                name_position = i;
                }
            }
        if MiniKeyPress("cancel") then 
            {
            if button_hover_name[i] = true then
                {
                audio_play_sound_ext("sn_cc_name_click1", 10, false);
                name_letter[i] = " ";
                name_position = i;
                }
            }
        }
        
    // Letters //
    if scr_cc_button_xy(86, 297, 64, 130) = true then
        {        
        // Cursor X //
        for (i=0; i&lt;14; i+=1;)
            {
            if o_pointer.x &gt;= 94 + i * 14 and o_pointer.x &lt;= 108 + i * 14 then cursor_x = i;
            }
            
        // Cursor Y //
        for (i=0; i&lt;3; i+=1;)
            {
            if o_pointer.y &gt;= 67 + i * 20 and o_pointer.y &lt;= 87 + i * 20 then cursor_y = i + 1;
            }
            
        // Add letter //
        if MiniKeyPress("action") then
            {
            if o_pointer.x &gt;= 94 and o_pointer.x &lt;= 283 then
                {
                if cursor_y &gt;= 0 and cursor_y &lt; 4 then
                    {
                    if first_capital = true then
                        {
                        audio_play_sound_ext("sn_cc_name_click1", 10, false);
                        name_letter[name_position] = selection[cursor_x + (cursor_y - 1) * 14];
                        if name_position = 0 then 
                            {
                            first_capital = false;
                            letter_size = 0;
                            }
                        if name_position &lt; 13 then name_position += 1;
                        }
                    else
                        {
                        audio_play_sound_ext("sn_cc_name_click1", 10, false);
                        if letter_size = 0 then name_letter[name_position] = string_lower(selection[cursor_x + (cursor_y - 1) * 14]);
                        else name_letter[name_position] = selection[cursor_x + (cursor_y - 1) * 14];
                        if name_position &lt; 13 then name_position += 1;
                        }
                    }
                }
            }
        } 
        
    // Uppercase &amp; Lowercase //
    else  
        {
        // Cursor spot //
        if scr_cc_button_xy(0, 384, 137, 157) then cursor_y = 4;
            
        // Hover //
        button_hover_uppercase = scr_cc_button_xy(110, 188, 137, 163);
        button_hover_lowercase = scr_cc_button_xy(197, 276, 137, 163);
        
        // Lettersize //
        if MiniKeyPress("action") then
            {
            first_capital = false;
            if button_hover_uppercase = true then 
                {
                audio_play_sound_ext("sn_cc_name_uppercase", 10, false);
                letter_size = 0;
                }
            else if button_hover_lowercase = true then 
                {
                audio_play_sound_ext("sn_cc_name_lowercase", 10, false);
                letter_size = 1;
                }
            } 
        else if cursor_y = 4 then cursor_y = -1;
        }
        
    // Generate names button //
    button_generate_hover = scr_cc_button_xy(118, 194, 184, 200);
    
    // Press button //
    if button_generate_hover = true then
        {
        if MiniKeyPress("action") then 
            {
            event_user(1);
            button_generate_click_effect = 4;
            }
        }
        
    // Premade names button //
    button_premade_hover = scr_cc_button_xy(118, 194, 212, 228);
    
    // Press button //
    if button_premade_hover = true then
        {
        if MiniKeyPress("action") then  
            {
            event_user(2);
            button_premade_click_effect = 4;
            }
        }
        
    // Clear names button //
    button_clear_hover = scr_cc_button_xy(205, 265, 184, 200);
    
    // Press button //
    if button_clear_hover = true then
        {
        if MiniKeyPress("action") then
            {
            event_user(3);
            button_clear_click_effect = 4;
            }
        }
    }
    
// Clikc effects //
if button_generate_click_effect &gt; 0 then button_generate_click_effect -= 1;
if button_clear_click_effect &gt; 0 then button_clear_click_effect -= 1;
if button_premade_click_effect &gt; 0 then button_premade_click_effect -= 1;    

// Cursor blinking effect //
if cursor_blink &gt; 0 then cursor_blink -= dt();
else cursor_blink = 2;
    
// Name phase //
if phase[3] &gt; 0 then
    {
    // Tick down //
    phase[3] -= dt();
    
    // Event //
    if phase[3] &lt;= 0 then
        {
        active = true;
        alpha_event_goal = 1;
        }
    }

// End of this event //
if phase[2] &gt; 0 then
    {
    // Tick down //
    phase[2] -= dt();
    
    // End //
    if phase[2] &lt;= 0 then
        {
        with (o_cc_wizard) event_user(0);
        instance_destroy();
        }
    }
    
// Accept button //
scr_cc_button_accept();
    
// Skip text with button //
scr_cc_textbox_skip();

// Type it //
scr_cc_textbox_type();

// Move to a next phase //
scr_cc_phase_skip_process();

// Alpha for Textboxes //
if alpha_textbox_timer &gt; 0 then alpha_textbox_timer -= dt();
else
    {
    if alpha_textbox &lt; alpha_textbox_goal then alpha_textbox += 0.1;
    if alpha_textbox &gt; alpha_textbox_goal then alpha_textbox -= 0.1;
    }

// Alpha for Events //
if alpha_event &lt; alpha_event_goal then alpha_event += 0.1;
if alpha_event &gt; alpha_event_goal then alpha_event -= 0.1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear name
o_cc_data.character_name = " ";
for (i=0; i&lt;14; i+=1;)
    {
    name_value[i] = 41;
    name_letter[i] = " ";
    }
name_position = 0;
first_capital = true;

// Sound //
audio_play_sound_ext("sn_cc_name_clear", 1, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Compile name from the premade list name
rand = irandom(premade_names) - 1;
if rand &lt; 0 then rand = 0;
o_cc_data.character_name = name_premade[rand];

// String together the name //
for (i=0; i&lt;14; i+=1;) name_letter[i] = string_char_at(o_cc_data.character_name, i + 1);

// Sound //
audio_play_sound_ext("sn_cc_name_premade", 1, false);

// Used a premade name //
o_cc_data.character_name_type = 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generate Name from pieces
o_cc_data.character_name = generated_piece_one[irandom(12)] + generated_piece_two[irandom(12)] + generated_piece_three[irandom(12)];

// Put the name together //
for (i=0; i&lt;14; i+=1;) name_letter[i] = string_char_at(o_cc_data.character_name, i + 1);

// Sound //
audio_play_sound_ext("sn_cc_name_generate", 1, false);

// Used a generated name //
o_cc_data.character_name_type = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Name compilation
o_cc_data.character_name = "";
for (i=0; i&lt;14; i+=1;) o_cc_data.character_name += name_letter[i];

// Check for blanks //
blank = string_count(" ", o_cc_data.character_name);

// All blanks? Try again buddy //
if blank &gt;= 14 then audio_play_sound_ext("sn_cc_wizard_talk03", 10, false);
else
    {
    // Remove blanks at ends //
    for (i=0; i&lt;13; i+=1;)
        {
        if string_char_at(o_cc_data.character_name, 1) = " " then o_cc_data.character_name = string_copy(o_cc_data.character_name, 2, 13 - i);
        else i = 13;
        }
    for (i=0; i&lt;13; i+=1;)
        {
        if string_char_at(o_cc_data.character_name, 14 - i) = " " then o_cc_data.character_name = string_copy(o_cc_data.character_name, 0, 13 - i);
        else i = 13;
        }
        
    // Used a custom name //
    o_cc_data.character_name_type = 0;
        
    // Sound //
    audio_play_sound_ext("sn_cc_button_accept", 1, false);

    // Update the line with the name the player gives //
    text[4] = "Now answer me these questions, " + o_cc_data.character_name + ".";
    Quest("playerCCName", o_cc_data.character_name);
    
    // Can't click again //
    button_accept_clickable = false;
    
    // Ending //
    scr_cc_wizard_emote(-1);
    alpha_event_goal = 0;
    phase[0] = 15;
    phase[1] += 1;
    active = false;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw textboxes //
scr_cc_draw_textbox();

// Dim the background //
draw_set_alpha(alpha_event * 0.5);
draw_set_color(c_black);
draw_rectangle(-2, -2, 386, 242, false);

// Draw the frames //
draw_sprite_ext(s_cc_name_frames, 1, 192, 99, 1, 1, 0, c_white, alpha_event * 0.5);
draw_sprite_ext(s_cc_name_frames, 0, 192, 99, 1, 1, 0, c_white, alpha_event);

// Name position highlighter //
for (i=0; i&lt;14; i+=1;)
    {
    if button_hover_name[i] = true then draw_sprite_ext(s_cc_name_entry_cursor, 3, 101 + i * 14, 48, 1, 1, 0, c_white, alpha_event);
    }

// Name position blink //
if cursor_blink &gt;= 0.8 then draw_sprite_ext(s_cc_name_entry_cursor, 0, 101 + name_position * 14, 48, 1, 1, 0, c_white, alpha_event * 0.5);
    
// Draw highlight cursor //
if dont_draw_cursor_hover = false then
    {
    if cursor_y &gt; 0 and cursor_y &lt; 4 then
        {
        draw_sprite_ext(s_cc_name_entry_cursor, 0, 101 + cursor_x * 14, 59 + cursor_y * 20, 1, 1, 0, c_white, alpha_event * 0.5);
        }
    }

// Lower or uppercase //
if dont_draw_lettersize_hover = false then
    {
    if button_hover_uppercase = true then draw_sprite_ext(s_cc_name_entry_cursor, 1, 151, 147, 1, 1, 0, c_white, alpha_event * 0.5);
    if button_hover_lowercase = true then draw_sprite_ext(s_cc_name_entry_cursor, 2, 151 + 84, 147, 1, 1, 0, c_white, alpha_event * 0.5);
    }
draw_sprite_ext(s_cc_name_entry_cursor, 1 + letter_size, 151 + letter_size * 84, 147, 1, 1, 0, c_red, alpha_event * 0.5);

// Draw written name //
draw_set_font(global.fn_1);
draw_set_alpha(alpha_event);
draw_set_color(make_color_rgb(120, 255, 120));
for (i=0; i&lt;14; i+=1;)
    {
    draw_text(97 + i * 14, 39, name_letter[i])
    }
    
// Draw letters in the box //
draw_set_color(c_white);
for (i=0; i&lt;14; i+=1;)
    {
    if letter_size = 0 then
        {
        draw_text(97 + i * 14, 70, string_lower(selection[i]))
        draw_text(97 + i * 14, 90, string_lower(selection[i + 14]))
        draw_text(97 + i * 14, 110, string_lower(selection[i + 28]))
        }
    else
        {
        draw_text(97 + i * 14, 70, selection[i])
        draw_text(97 + i * 14, 90, selection[i + 14])
        draw_text(97 + i * 14, 110, selection[i + 28])
        }
    }
    
// Draw lower/upper //
draw_set_color(make_color_rgb(255, 255, 255));
draw_text(111, 137, "Lowercase");
draw_text(201, 137, "Uppercase");
    
// Generate button //
draw_set_alpha(alpha_event * 0.5);
if button_generate_click_effect &gt; 0 then draw_set_color(make_color_rgb(250, 0, 40));
else
    {
    if button_generate_hover = true then draw_set_color(make_color_rgb(40, 190, 250)); 
    else draw_set_color(o_cc_data.color_event);
    }
draw_rectangle(118, 184, 194, 202, false);
draw_set_font(global.fn_2);
draw_set_color(c_white);
draw_set_alpha(alpha_event);
draw_text(125, 187, string(button_generate_text));
draw_sprite_ext(s_cc_name_generate_button, 0, 156, 192, 1, 1, 0, c_white, alpha_event);

// Premade button //
draw_set_alpha(alpha_event * 0.5);
if button_premade_click_effect &gt; 0 then draw_set_color(make_color_rgb(250, 0, 40));
else
    {
    if button_premade_hover = true then draw_set_color(make_color_rgb(40, 190, 250)); 
    else draw_set_color(o_cc_data.color_event);
    }
draw_rectangle(118, 213, 194, 231, false);
draw_set_font(global.fn_2);
draw_set_color(c_white);
draw_set_alpha(alpha_event);
draw_text(127, 215, "Premade");
draw_sprite_ext(s_cc_name_generate_button, 0, 156, 220, 1, 1, 0, c_white, alpha_event);

// Clear button //
draw_set_alpha(alpha_event * 0.5);
if button_clear_click_effect &gt; 0 then draw_set_color(make_color_rgb(250, 0, 40));
else
    {
    if button_clear_hover = true then draw_set_color(make_color_rgb(40, 190, 250)); 
    else draw_set_color(o_cc_data.color_event);
    }
draw_rectangle(204, 184, 263, 200, false);
draw_set_font(global.fn_2);
draw_set_color(c_white);
draw_set_alpha(alpha_event);
draw_text(218, 187, "Clear");
draw_sprite_ext(s_cc_button_accept, 0, 236, 192, 1, 1, 0, c_white, alpha_event);

// Draw button //
scr_cc_draw_button_accept();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
