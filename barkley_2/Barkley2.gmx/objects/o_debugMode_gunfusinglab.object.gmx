<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2100000</depth>
  <persistent>0</persistent>
  <parentName>o_debugMode</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menuscreen = "manage";
menubuttonsHover = -1;

cursor_pic = 0;

///MANAGE screen vars
bagSelected = 0;
gunSelectedInd = -1;
gunSelectedObj = NULL;

undoItem = noone;
qgenRarity = 100;
qgenPoints = 200;

bagHovered = 0;
gunHoveredInd = -1;
gunReserveScroll = 0;
bottomMenuHover = -1;
topMenuHover = -1;

heldtmr = 0;
dragging = -1;
geneMenuHover = -1;

gunmapSurf = noone;
gunSelChanged = false;
matsel = 0;

selectingMaterial = false;
selectingType = false;
selectingPrefix1 = false;
selectingPrefix2 = false;
selectingSuffix = false;

_lsize = 0;

///GENERATE screen vars

///FUSE screen vars
gunSelect1 = NULL;
gunSelect2 = NULL;

surfshiftx = 0;
surfshifty = 0;

gunIndex1 = 0;
gunIndex2 = 1;

gnSelScroll = 0;
gunResult = NULL;
rerolling = false;

hoverElement = -1;
hoverGun = -1;

pt1x = 0;
pt1y = 0;
pt2x = 0;
pt2y = 0;

powRatio = 0.5;
pickingGun = 0;

gunSelScroll = 0;

/////GUN MAP SCREEN
zoomlvl = 3;
typeSelected = 0;
gmapOverx = -1;
gmapOvery = -1;
gmapScrollx = 0;
gmapScrolly = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>paused(true);

var _cx,_cy,_clickd;
_cx = o_curs.x*global.screen_scale; //2;
_cy = o_curs.y*global.screen_scale; //2;
_lsize = scr_equipment_guns_bag_getSlotsUsed();

_clickd = false;
_holding = false;
_deselect = false;
cursor_pic = 0;

if(mouse_check_button_pressed(mb_left))
{
    _clickd = true;
    _deselect = true;
}
if(mouse_check_button(mb_left))
{
    _holding = true;
    heldtmr +=1;
}
    //_interceptClick = true;
    

menubuttonsHover = -1;
if(!selectingMaterial &amp;&amp; !selectingType &amp;&amp; !selectingPrefix1 &amp;&amp; !selectingPrefix2 &amp;&amp; !selectingSuffix)
{
    if(scr_checkbounds(_cx,_cy,16,16,240,80))///manage guns top button
    {
        menubuttonsHover = 0;
        if(_clickd){menuscreen = "manage"; _deselect = false; surface_free(gunmapSurf); gunmapSurf = noone;}
    }
        
    if(scr_checkbounds(_cx,_cy,256,16,480,80))///fuse guns top button
    {
        menubuttonsHover = 1;
        if(_clickd){menuscreen = "fusion"; _deselect = false; rerolling = true; surface_free(gunmapSurf); gunmapSurf = noone;}
    }
       
    if(scr_checkbounds(_cx,_cy,496,16,720,80))///fuse guns top button
    {
        menubuttonsHover = 2;
        if(_clickd){menuscreen = "gun space"; _deselect = false; surface_free(gunmapSurf); gunmapSurf = noone;}
    }   
}
    /*
///MANAGE screen vars
bagSelected = 0;
gunSelectedInd = -1;
undoItem = noone;
qgenRarity = 100;
qgenPoints = 200;

baghovered = 0;
gunHoveredInd = -1;
topMenuHover

gunReserveScroll = 0;

ds_list_size(scr_equipment_guns_bandolier_list())&lt;scr_equipment_guns_bandolier_getSlotsTotal()
ds_list_size(scr_equipment_guns_bag_list()) + ds_list_size() &lt; scr_equipment_guns_bag_getSlotsTotal()
    */


switch(menuscreen)
{
    case "manage":
    {
        var needRebuild = false; ///gun needs to recompile its stats
        
        if((selectingType||selectingMaterial||selectingPrefix1||selectingPrefix2||selectingSuffix) &amp;&amp; gunSelectedObj != NULL)
        {
            _deselect = false;
            matsel = -1;
            if(_cy&lt;444)
            {
                matsel = floor((_cy-5)/20) + floor((_cx-5)/220)*22;
            }
            if(_clickd)
            {
                if(matsel!=-1)
                {
                    if(matsel==0 &amp;&amp; selectingType==true)
                    {
                        selectingType = false;
                    }
                    else
                    {
                        var ves = ""
                        
                        if(selectingMaterial)
                        {
                            ves = ds_list_find_value(global.materialName,matsel);
                            if(is_string(ves))
                            {
                                gunSelectedObj[? "pMaterial"]= ves;
                                needRebuild = true;
                            }
                        }
                    
                        if(selectingType)
                        {
                            ves = Gunsmap("index to type", matsel);
                            if(is_string(ves))
                            {
                                gunSelectedObj[? "pType"] = ves;
                                gunSelectedObj[? "gunmap_pos"] = -1;
                                needRebuild = true;
                            }
                        }
                        
                        if(selectingPrefix1)
                        {
                            ves = scr_combat_weapons_fusion_affixhood("prefix1","name",matsel);
                            if(is_string(ves))
                            {
                                gunSelectedObj[? "pPrefix1"] = ves;
                                needRebuild = true;
                            }
                        }
                        
                        if(selectingPrefix2)
                        {
                            ves = scr_combat_weapons_fusion_affixhood("prefix2","name",matsel);
                            if(is_string(ves))
                            {
                                gunSelectedObj[? "pPrefix2"] = ves;
                                needRebuild = true;
                            }
                        }
                        
                        if(selectingSuffix)
                        {
                            ves = scr_combat_weapons_fusion_affixhood("suffix","name",matsel);
                            if(is_string(ves))
                            {
                                gunSelectedObj[? "pSuffix"] = ves;
                                needRebuild = true;
                            }
                        }
                    }
                }
                else
                {
                    selectingType = false;
                    selectingMaterial = false;
                    selectingPrefix1 = false;
                    selectingPrefix2 = false;
                    selectingSuffix = false;
                }
            }
        }
        else
        {
            /////INVENTORY IS ONLY MODIFIABLE IF NOT MODIFING CURRENT WEAPON
            
            ///scrolling gun reserve
            if(scr_checkbounds(_cx,_cy,0,336,48,496))
            {
                if(gunReserveScroll&gt;0)
                {
                gunReserveScroll-=1;
                if(_cx&lt;24){gunReserveScroll-=1;}
                if(_cx&lt;12){gunReserveScroll-=1;}
                }
            }
            if(scr_checkbounds(_cx,_cy,1456,336,1536,496))
            {
                if(1408+gunReserveScroll&lt;_lsize*128)
                {
                    gunReserveScroll+=1;
                    if(_cx&gt;1488){gunReserveScroll+=1;}
                    if(_cx&gt;1500){gunReserveScroll+=1;}
                }
            }
            
            if(scr_checkbounds(_cx,_cy,48,128,1456,296)) ///selecting the gun pouch
            {bagHovered = 0;}
            else if(scr_checkbounds(_cx,_cy,48,336,1456,502)) ///selecting the gun reserve
            {bagHovered = 1;}
            else
            {
                bagHovered = -1;
                gunHoveredInd = -1;
            }
            
            ////gun selection
            if(bagHovered !=-1)
            {
                var trysel;
                trysel = (_cx-48)/128;
                if(bagHovered ==0)
                {if(floor(trysel)&lt;ds_list_size(scr_equipment_guns_bandolier_list())){gunHoveredInd = floor(trysel); cursor_pic = 1;}}
                else if(floor(trysel)+gunReserveScroll/128&lt;_lsize)
                {
                gunHoveredInd = floor(trysel+gunReserveScroll/128); cursor_pic = 1;
                }
                else{gunHoveredInd = -1;}
                
                if(_clickd)
                {
                    bagSelected = bagHovered;
                    gunSelectedInd = gunHoveredInd;
                    heldtmr = 0;
                    if(gunSelectedInd!=-1)
                    {
                        if(bagHovered==0)
                        {
                            gunSelectedObj = scr_equipment_guns_bandolier_getGun(gunSelectedInd);
                            dragging = gunSelectedObj;
                        }
                        else
                        {
                            gunSelectedObj = scr_equipment_guns_bag_getGun(gunSelectedInd);
                            dragging = gunSelectedObj;
                            
                        }
                        _deselect = false;
                    }
                }
                
            }
            
            /////DRAG AND DROP
            if(dragging != noone &amp;&amp; !_holding)
            {
                if(heldtmr&gt;8)
                {
                    if(bagSelected != bagHovered &amp;&amp; bagHovered != -1)
                    {
                        if(bagSelected==0)
                        {
                            if(ds_list_size(scr_equipment_guns_bandolier_list())&gt;1)
                            {
                                ds_list_delete(scr_equipment_guns_bandolier_list(),gunSelectedInd);
                                scr_equipment_guns_bag_removeGun(gunSelectedInd);
                                scr_equipment_guns_bag_addGun(gunSelectedObj);
                                bagSelected = 1;
                                gunSelectedInd = scr_equipment_guns_bag_getSlotsUsed()-1;
                            }
                        }
                        else
                        {
                            if(ds_list_size(scr_equipment_guns_bandolier_list())&lt;scr_equipment_guns_bandolier_getSlotsTotal())
                            {
                                scr_equipment_guns_bag_removeGun(gunSelectedInd);
                                scr_equipment_guns_bag_addGun(gunSelectedObj);
                                bagSelected = 0;
                                gunSelectedInd = scr_equipment_guns_bag_getSlotsUsed()-1;
                            }
                        }
                    }
                }
                
                dragging = noone;
                heldtmr = 0;
            }
            
            /////TOP MENU BUTTONS
            topMenuHover = -1;
            if(scr_checkbounds(_cx,_cy,768,0,944,48)) ///SAVE button
            {
                topMenuHover = 1;
                
            }
            
            if(scr_checkbounds(_cx,_cy,960,0,1136,48)) ///LOAD button
            {
                topMenuHover = 2;
            }
            
            if(scr_checkbounds(_cx,_cy,1344,0,1520,48)) ///CLEAR BAG button
            {
                topMenuHover = 4;
                var _i = 0;
                
                if(_clickd)
                {
                    if(show_question("Clear gun reserve?"))
                    {
                        while(ds_list_size(scr_equipment_guns_bag_list())&gt;0)
                        {
                            gunSelectedObj = ds_list_find_value(scr_equipment_guns_bag_list(),0);
                            ds_list_delete(scr_equipment_guns_bag_list(),0);
                            ds_map_destroy(gunSelectedObj);
                        }
                        gunSelectedObj = NULL;
                        gunSelectedInd = -1;
                    } 
                    _deselect = false;
                }
            }
            
            if(scr_checkbounds(_cx,_cy,768,64,944,176)) ///GENERATE button  
            {
                topMenuHover = 5
                if(_clickd)
                {
                    if(bagSelected == 0)
                    {
                        if (ds_list_size(scr_equipment_guns_bandolier_list())&lt;scr_equipment_guns_bandolier_getSlotsTotal())
                        {
                            gunSelectedObj = scr_combat_weapons_generate("","Steel",140,50);
                            //ds_list_add(scr_equipment_guns_bandolier_list(),gunSelectedObj); //old code
                            scr_equipment_guns_bandolier_addGun(gunSelectedObj);
                            gunSelectedObj[? "pName"] = chr(65 + floor(random(26))) + chr(65 + floor(random(26))) + chr(65 + floor(random(26))) + chr(65 + floor(random(26)));
                            gunSelectedInd = ds_list_size(scr_equipment_guns_bandolier_list())-1;
                        }
                    }
                    else
                    {
                        if (_lsize&lt;scr_equipment_guns_bag_getSlotsTotal())
                        {
                            gunSelectedObj = scr_combat_weapons_generate("","Steel",140,50);
                            scr_equipment_guns_bag_addGun(gunSelectedObj);
                            gunSelectedInd = scr_equipment_guns_bag_getSlotsUsed()-1;
                        }
                    }
                    _deselect = false;
                }
            }
            
            if(scr_checkbounds(_cx,_cy,960,64,1328,112)) ///QUICK GEN button
            {
                if(_cx&lt;1040)///editing quickgen rarity
                {
                    topMenuHover = 6;
                    if(_clickd)
                    {
                        qgenRarity = get_integer("Set quickgen RARITY",qgenRarity);
                        _deselect = false;
                    }
                }
                else if(_cx&lt;1120)///editing quickgen pt value
                {
                    topMenuHover = 7;
                    if(_clickd)
                    {
                        qgenPoints = get_integer("Set quickgen POINT VALUE",qgenPoints);
                        _deselect = false;
                    }
                }
                else
                {///launch quickgen
                    topMenuHover = 8;
                    if(_clickd)
                    {
                        if(bagSelected == 0)
                        {
                            //if(ds_list_size(scr_equipment_guns_bandolier_list())&gt;1)
                            //{
                                if (ds_list_size(scr_equipment_guns_bandolier_list())&lt;scr_equipment_guns_bandolier_getSlotsTotal())
                                {
                                    gunSelectedObj = scr_combat_weapons_generate("","",qgenPoints,qgenRarity);
                                    ds_list_add(scr_equipment_guns_bandolier_list(),gunSelectedObj);
                                    gunSelectedInd = ds_list_size(scr_equipment_guns_bandolier_list())-1;
                                }
                            //}
                        }
                        else
                        {
                            if (_lsize&lt;scr_equipment_guns_bag_getSlotsTotal())
                            {
                                gunSelectedObj = scr_combat_weapons_generate("","",qgenPoints,qgenRarity);
                                ds_list_add(scr_equipment_guns_bandolier_list(),gunSelectedObj);
                                gunSelectedInd = ds_list_size(scr_equipment_guns_bandolier_list())-1;
                            }
                        }
                        
                        _deselect = false;
                    }
                }  
            }
            
            if(gunSelectedObj != NULL)
            {
                if(scr_checkbounds(_cx,_cy,1152,0,1328,48)) ///DELETE button
                {
                    topMenuHover = 3;
                    if(_clickd)
                    {
                        var _deleted = false;
                        if(bagSelected == 0)
                        {
                            if(ds_list_size(scr_equipment_guns_bandolier_list())&gt;1){ds_list_delete(scr_equipment_guns_bandolier_list(),gunSelectedInd); _deleted = true;}
                        }
                        else
                        {
                           ds_list_delete(scr_equipment_guns_bag_list(),gunSelectedInd);
                           _deleted = true;
                        }
                        
                        if(_deleted)
                        {
                            ds_map_destroy(gunSelectedObj)
                            if(bagSelected==0)
                            {
                                gunSelectedInd = min(ds_list_size(scr_equipment_guns_bandolier_list())-1,gunSelectedInd);
                                gunSelectedObj = scr_equipment_guns_bandolier_getGun(gunSelectedInd);
                            }
                            else
                            {
                                if(_lsize&gt;1)
                                {
                                    gunSelectedInd = min(_lsize-2,gunSelectedInd);
                                    gunSelectedObj = scr_equipment_guns_bag_getGun(gunSelectedInd);
                                    //gunSelectedObj = scr_equipment_guns_bandolier_getGun(gunSelectedInd);
                                }
                                else{gunSelectedInd = -1; gunSelectedObj = NULL;}
                            }
                            _deselect = false;
                        }
                    }
                }
                
                if(scr_checkbounds(_cx,_cy,1344,64,1520,112)) ///DUPLICATE button
                {
                    topMenuHover = 9
                }   
            }
        }////END OF TOP MENU
        
        ///BOTTOM MENU
        if(gunSelectedObj != NULL)
        {
            bottomMenuHover = 0;
            
            if(scr_checkbounds(_cx,_cy,27,552,464,575))///gun type
            {
                bottomMenuHover = 1;
                if(_clickd)
                {
                    //gunSelectedObj[? "pType = get_string("Enter weapon TYPE",gunSelectedObj[? "pType);
                    selectingType = true;
                    _deselect = false;
                    needRebuild = true;
                }
            } 
            
            if(scr_checkbounds(_cx,_cy,492,552,928,575))///gun material
            {
                bottomMenuHover = 2;
                if(_clickd)
                {
                    //gunSelectedObj[? "pMaterial = get_string("Enter weapon MATERIAL",gunSelectedObj[? "pMaterial);
                    selectingMaterial = true;
                    _deselect = false;
                    needRebuild = true;
                }
            } 
            
            if(scr_checkbounds(_cx,_cy,24,603,217,712)) ///gun stats
            {
                if(_cy&lt;636)
                {
                    bottomMenuHover = 3; 
                    if(_clickd){gunSelectedObj[? "sPower"] = get_integer("Enter weapon BASE POWER",gunSelectedObj[? "sPower"]); needRebuild = true; _deselect = false; }
                }
                else if(_cy&lt;654)
                {
                    bottomMenuHover = 4;
                    if(_clickd){gunSelectedObj[? "sSpeed"] = get_integer("Enter weapon BASE SPEED",gunSelectedObj[? "sSpeed"]); needRebuild = true; _deselect = false; }
                }
                else if(_cy&lt;672)
                {
                    bottomMenuHover = 5;
                    if(_clickd){gunSelectedObj[? "sAmmo"] = get_integer("Enter weapon BASE AMMO",gunSelectedObj[? "sAmmo"]); needRebuild = true; _deselect = false; }
                }
                else if(_cy&lt;688)
                {
                    bottomMenuHover = 6;
                    if(_clickd){gunSelectedObj[? "sAffix"] = get_integer("Enter weapon BASE AFFIX",gunSelectedObj[? "sAffix"]); needRebuild = true; _deselect = false; }
                }
                else if(_cy&gt;698)
                {
                    bottomMenuHover = 7;
                    if(_clickd){gunSelectedObj[? "sWeight"] = get_integer("Enter weapon BASE WEIGHT",gunSelectedObj[? "sWeight"]); needRebuild = true; _deselect = false; }
                }
            }
            
            if(scr_checkbounds(_cx,_cy,272,585,1266,774)) //affixes and genes
            {
                if(_cx&lt;592){bottomMenuHover=8;}
                else if(_cx&gt;608 &amp;&amp; _cx&lt;928){bottomMenuHover=9;}
                else if(_cx&gt;944){bottomMenuHover=10;}
                
                if(bottomMenuHover&gt;=8)
                {
                    _deselect = false;
                    if(_cy&lt;605)///changing a whole affix
                    {
                        geneMenuHover = 0;
                        if(_clickd)
                        {
                            var pef = "";
                            switch(bottomMenuHover)
                            {
                                case 8:
                                    selectingPrefix1 = true;
                                    //pef = get_string("Enter weapon PREFIX 1",gunSelectedObj[? "pPrefix1);
                                    //if(pef != "" &amp;&amp; scr_combat_weapons_Prefix1(pef,"checkval")!= noone){gunSelectedObj[? "pPrefix1 = pef;}
                                    //needRebuild = true;
                                    break;
                                case 9:
                                    selectingPrefix2 = true;
                                    //pef = get_string("Enter weapon PREFIX 2",gunSelectedObj[? "pPrefix2);
                                    //if(pef != "" &amp;&amp; scr_combat_weapons_Prefix2(pef,"checkval")!= noone){gunSelectedObj[? "pPrefix2 = pef;}
                                    //needRebuild = true;
                                    break;
                                case 10:
                                    selectingSuffix = true;
                                    //pef = get_string("Enter weapon SUFFIX",gunSelectedObj[? "pSuffix);
                                    //if(pef != "" &amp;&amp; scr_combat_weapons_Suffix(pef,"checkval")!= noone){gunSelectedObj[? "pAffix = pef;}
                                    //needRebuild = true;
                                    break;
                            }
                        }
                    }
                    else///editing genes
                    {
                        geneMenuHover = floor((_cy - 597)/16);
                        switch(bottomMenuHover)
                        {
                            case 8: if(_cx&gt;434){geneMenuHover+=12;} if(geneMenuHover&gt;16){geneMenuHover = -1;} break;
                            case 9: if(_cx&gt;770){geneMenuHover+=12;} if(geneMenuHover&gt;14){geneMenuHover = -1;} break;
                            case 10: if(_cx&gt;1106){geneMenuHover+=12;} if(geneMenuHover&gt;20){geneMenuHover = -1;} break;
                        }

                    }
                }
                else{geneMenuHover = -1;}
            }
        }
        
        if(_deselect){gunSelectedObj = NULL; _deselect = false;}
        if(needRebuild){scr_combat_weapons_regenerate(gunSelectedObj);}
                
        break;
    }
    
    case "fusion":
    {
        hoverGun = -1;
        hoverElement = -1;
        
        if(pickingGun==0)
        {
            if(rerolling || gunResult = NULL)
            {
                surface_free(gunmapSurf);
                
                gunSelect1 = scr_getGunFromIndex(gunIndex1);
                gunSelect2 = scr_getGunFromIndex(gunIndex2);
                
                if(gunSelect1 != NULL &amp;&amp; gunSelect2 != NULL)
                {
                    if(gunResult != NULL) {
                        ds_map_destroy(gunResult)
                    }
                    gunResult = scr_combat_weapons_fusion(gunSelect1,gunSelect2);
                }
                else
                {
                    gunResult = NULL;
                }
                rerolling = false;
            }
            topMenuHover = -1;
            
            if(scr_checkbounds(_cx,_cy,816,32,1024,80)) ///RE-ROLL button
            {
                topMenuHover = 0
                if(_clickd)
                {
                    rerolling = true;
                }
            }
            
            if(scr_checkbounds(_cx,_cy,1040,32,1248,80)) ///FUSE button
            {
                topMenuHover = 1
                if(_clickd)
                {
                    if(gunResult != NULL)
                    {
                        scr_combat_weapons_destroygun(gunSelect1);
                        scr_combat_weapons_destroygun(gunSelect2);
                        
                        // Attempt to add to bandolier, otherwise add to bag
                        if(!scr_equipment_guns_bandolier_addGun(gunResult)) {
                            scr_equipment_guns_bag_addGun(gunResult);   
                        }
                        
                        gunResult = NULL;
                        rerolling = true;
                    }
                }
            }
            
            if(scr_checkbounds(_cx,_cy,1264,32,1472,80)) ///FUSEKEEP button
            {
                topMenuHover = 2
                if(_clickd)
                {
                    if(gunResult != NULL)
                    {
                        // Attempt to add to bandolier, otherwise add to bag
                        if(!scr_equipment_guns_bandolier_addGun(gunResult)) {
                            scr_equipment_guns_bag_addGun(gunResult);   
                        }
                        rerolling = NULL;
                        gunResult = NULL;
                    }
                }
            }
            
            
            if(scr_checkbounds(_cx,_cy,16,96,688,512))
            {
                
                if(_cx&lt;318){hoverGun = 0;}
                if(_cx&gt;386){hoverGun = 1;}
                if(hoverGun&gt;=0)
                {
                    if(_cy&lt;204)
                    {
                        hoverElement = 0;
                        if(_clickd)
                        {if(hoverGun==0)
                        {
                        pickingGun=1;
                        max(0,gnSelScroll = (gunIndex1-2)*128);
                        }
                        else
                        {
                        pickingGun=2;
                        max(0,gnSelScroll = (gunIndex2-4)*128);
                        }}
                    }
                    else if(_cy&lt;227){hoverElement = 1;}
                    else if(_cy&lt;249){hoverElement = 2;}
                    else if(_cy&gt;486){hoverElement = 11;}
                    else if(_cy&gt;464){hoverElement = 10;}
                    else if(_cy&gt;441){hoverElement = 9;}
                    else if(_cy&gt;419){hoverElement = 8;}
                    else
                    {
                        if(_cy&gt;268 &amp;&amp; _cy&lt;364 &amp;&amp; ((_cx&gt;16+102 &amp;&amp; _cx&lt;16+138)||(_cx&gt;386+102 &amp;&amp; _cx&lt;386+138)))
                        {
                            if(_cy&lt;284){hoverElement = 3;}
                            else if(_cy&lt;299){}
                            else if(_cy&lt;314){hoverElement = 4;}
                            else if(_cy&lt;329){hoverElement = 5;}
                            else if(_cy&lt;344){hoverElement = 6;}
                            else{hoverElement = 7;}
                        }
                    }
                }
            }
        }
        else
        {
        
            ///scrolling gun reserve
            if(scr_checkbounds(_cx,_cy,0,90,48,269))
            {
                if(gnSelScroll&gt;0)
                {
                gnSelScroll-=1;
                if(_cx&lt;24){gnSelScroll-=1;}
                if(_cx&lt;12){gnSelScroll-=1;}
                }
            }
            if(scr_checkbounds(_cx,_cy,1456,90,1536,269))
            {
                if(1408+gnSelScroll&lt;_lsize*128)
                {
                    gnSelScroll+=1;
                    if(_cx&gt;1488){gnSelScroll+=1;}
                    if(_cx&gt;1500){gnSelScroll+=1;}
                }
            }
        
            var trysel,gnSelObj;
            trysel = (_cx-32)/128;
            gunHoveredInd = floor(trysel+gnSelScroll/128);

            if(_clickd)
            {
                if(_cy&gt;90 &amp;&amp; _cy&lt;260)
                {
                    if(gunHoveredInd!=-1)
                    {
                        gnSelObj = scr_getGunFromIndex(gunHoveredInd);

                        if(gnSelObj != NULL)
                        {
                            if(pickingGun==1){gunSelect1 = gnSelObj; gunIndex1 = gunHoveredInd;}
                            else{gunSelect2 = gnSelObj; gunIndex2 = gunHoveredInd;}
                            pickingGun = 0;
                        }
                    }
                }
                else
                {
                    pickingGun = 0;
                }
            }
        }
        
        break;
    }
    
    case "gun space":
    {
        if(keyboard_check_pressed(vk_add))
        {
            zoomlvl+=1;
            surface_free(gunmapSurf);
            gunmapSurf = noone;
        }
        if(keyboard_check_pressed(vk_subtract))
        {
            zoomlvl-=1;
            surface_free(gunmapSurf);
            gunmapSurf = noone;
        }
        if(zoomlvl&gt;5){zoomlvl =5;}
        if(zoomlvl&lt;3){zoomlvl =3;}
        
        if(zoomlvl&gt;3)
        {
            if(_cx&lt;300){gmapScrollx-=1;}
            if(_cx&lt;200){gmapScrollx-=1;}
            if(_cx&lt;100){gmapScrollx-=1;}
            if(_cx&lt;50){gmapScrollx-=1;}
            
            if(_cx&gt;1236){gmapScrollx+=1;}
            if(_cx&gt;1336){gmapScrollx+=1;}
            if(_cx&gt;1436){gmapScrollx+=1;}
            if(_cx&gt;1486){gmapScrollx+=1;}
            
            if(_cy&lt;150){gmapScrolly-=1;}
            if(_cy&lt;100){gmapScrolly-=1;}
            if(_cy&lt;50){gmapScrolly-=1;}
            if(_cy&lt;25){gmapScrolly-=1;}
            
            if(_cy&gt;810){gmapScrolly+=1;}
            if(_cy&gt;860){gmapScrolly+=1;}
            if(_cy&gt;910){gmapScrolly+=1;}
            if(_cy&gt;935){gmapScrolly+=1;}
        }
        
        gmapOverx = (gmapScrollx+48+96*10)mod 96;
        gmapOvery = (gmapScrolly+48+96*10)mod 96;
        
        if(scr_checkbounds(_cx,_cy,576,288,960,672))
        {
            gmapOverx = 96*2+gmapScrollx-48+floor((_cx-576)/4);
            gmapOvery = 96*2+gmapScrolly-48+floor((_cy-288)/4);
        
            if(_clickd)
            {
                gmapScrollx = 96*2+gmapScrollx-48+floor((_cx-576)/4);
                gmapScrolly = 96*2+gmapScrolly-48+floor((_cy-288)/4);
                surface_free(gunmapSurf); gunmapSurf = noone;
            }
        }
        
        typeSelectedIndex = 0;//ds_grid_get(global.gunmap_grid,gmapOverx,gmapOvery);
        typeSelected = GUN_TYPE_PISTOL;//scr_gunmp_getTypeName(typeSelectedIndex);
        
        gmapScrollx = (gmapScrollx+96) mod 96;
        gmapScrolly = (gmapScrolly+96) mod 96;
        break;
    }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_background(bg_labtest,0,0);
draw_set_font(global.fn_2)
draw_set_color(c_black);
draw_set_alpha(0.6);
draw_rectangle(0,0,1536,960,false);


if(menubuttonsHover==0){draw_set_color(c_white);}else{draw_set_color(c_ltgray);}
if(menuscreen=="manage"){draw_set_color(c_gray);}
draw_rectangle(16,16,240,80,false) ///MANAGE GUNS

if(menubuttonsHover==1){draw_set_color(c_white);}else{draw_set_color(c_ltgray);}
if(menuscreen=="fusion"){draw_set_color(c_gray);}
draw_rectangle(256,16,480,80,false) ///FUSE GUNS

if(menubuttonsHover==2){draw_set_color(c_white);}else{draw_set_color(c_ltgray);}
if(menuscreen=="gun space"){draw_set_color(c_gray);}
draw_rectangle(496,16,720,80,false) ///GUN SPACE
    
draw_set_color(c_white);
draw_set_halign(fa_center);
draw_text(128,40,"MANAGE GUN'S");
draw_text(368,40,"FUSE GUN'S");
draw_text(608,40,"GUN MAP");    

///DRAW MAIN MENU
switch(menuscreen)
{
case "manage":
    var _nb,_i,_gn,psx,psy,bagdoing;
    /////DRAW TOP MENU
    
    draw_set_alpha(1);
    if(topMenuHover==1){draw_set_color(c_white);}else{draw_set_color(c_ltgray);}
    draw_rectangle(768,0,944,48,false) ///SAVE button
    if(topMenuHover==2){draw_set_color(c_white);}else{draw_set_color(c_ltgray);}
    draw_rectangle(960,0,1136,48,false) ///LOAD button
    if(topMenuHover==3){draw_set_color(c_white);}else{draw_set_color(c_ltgray);}
    draw_rectangle(1152,0,1328,48,false) ///DELETE button
    if(topMenuHover==4){draw_set_color(c_white);}else{draw_set_color(c_ltgray);}
    draw_rectangle(1344,0,1520,48,false) ///CLEAR BAG button
    if(topMenuHover==5){draw_set_color(c_white);}else{draw_set_color(c_ltgray);}
    draw_rectangle(768,64,944,112,false) ///GENERATE button
    if(topMenuHover==8){draw_set_color(c_white);}else{draw_set_color(c_ltgray);}
    draw_rectangle(960,64,1328,112,false) ///QUICK GEN button
    if(topMenuHover==9){draw_set_color(c_white);}else{draw_set_color(c_ltgray);}
    draw_rectangle(1344,64,1520,112,false) ///DUPLICATE button
    
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_text(853,16,"SAVE ARSENAL");
    draw_text(1052,16,"LOAD ARSENAL");
    draw_text(1239,16,"DELETE GUN");
    draw_text(1436,16,"CLEAR BAG");
    draw_text(853,80,"GENERATE");
    draw_text(1227,80,"QUICK GEN");
    draw_text(1436,80,"DUPLICATE GUN");
    
    draw_set_color(c_ltgray);
    draw_rectangle(963,67,1037,108,false);
    draw_rectangle(1118,67,1037,108,false);
    
    if(topMenuHover==6){draw_set_color(c_white);}else{draw_set_color(c_ltgray);}
    draw_text(1003,70,"rarity");
    draw_text(1003,86,string(qgenRarity));
    if(topMenuHover==7){draw_set_color(c_white);}else{draw_set_color(c_ltgray);}
    draw_text(1085,70,"pt value");
    draw_text(1085,86,string(qgenPoints));

    draw_set_halign(fa_left);
    
    /////DRAW GUN BAGS
    draw_set_alpha(1);
    if(bagSelected==0){draw_set_color(c_ltgray);}else{draw_set_color(c_gray);}
    draw_rectangle(16,124,1488,300,false)
    draw_rectangle(32,106,352,125,false)
    draw_text(44,112,"GUN BANDOLIER " + string(ds_list_size(scr_equipment_guns_bandolier_list())) + "/"+string(scr_equipment_guns_bandolier_getSlotsUsed()));
    
    if(bagSelected==1){draw_set_color(c_ltgray);}else{draw_set_color(c_gray);}
    draw_rectangle(16,332,1488,516,false)
    draw_rectangle(32,314,352,335,false)
    draw_text(44,320,"GUN BAG " + string(_lsize) + "/"+string(scr_equipment_guns_bag_getSlotsUsed()));

    bagdoing = 0;
    while(bagdoing&lt;2)
    {
        if(bagdoing==0){_nb = ds_list_size(scr_equipment_guns_bandolier_list());}
        else{_nb = _lsize;}
        
        for(_i=0; _i&lt;_nb; _i+=1)
        {
            psx = 48+128*_i

            if(bagdoing==0)
            {
                psy = 128;
                _gn = scr_equipment_guns_bandolier_getGun(_i);
            }
            else
            {
                psx = psx - gunReserveScroll;
                psy=336;
                _gn = scr_equipment_guns_bag_getGun(_i);
            }
            
            draw_set_color(make_color_rgb(200,200,200));
            if(_i&gt;ds_list_size(scr_equipment_guns_bag_list())&amp;&amp; bagdoing==1){draw_set_color(make_color_rgb(210,180,180));}
            if(bagSelected == bagdoing &amp;&amp; gunSelectedInd == _i){draw_set_color(make_color_rgb(255,255,255));}
            draw_rectangle(psx,psy,psx+128,psy+168,false);
            
            if(bagHovered == bagdoing &amp;&amp; gunHoveredInd == _i){_a = 1;}else{_a = 0.75;}
            
            if(_gn != NULL &amp;&amp; ds_exists(_gn, ds_type_map))
            {
                var spr = assetOrNull(_gn[? "hudIconSprite"], asset_sprite);
                if (spr != NULL) {
                    HUD("gun draw", spr,_gn[? "hudIconFrame"],psx+11,psy+50,2,2,_gn[? "col"],_a);
                }
                draw_set_font(global.fn_2)
                draw_set_color(c_white);
                draw_set_alpha(_a);
                if(_gn[? "pPrefix1"] != "empty"){draw_text(psx+4,psy+2,_gn[? "pPrefix1"]);}
                if(_gn[? "pPrefix2"] != "empty"){draw_text(psx+4,psy+10,_gn[? "pPrefix2"]);}
                draw_text(psx+4,psy+20,_gn[? "pMaterial"]);
                draw_text(psx+4,psy+30,_gn[? "pType"]);
                if(_gn[? "pSuffix"] != "empty"){draw_text(psx+4,psy+40,_gn[? "pSuffix"]);}
                
                draw_set_font(global.fn_small);
                draw_set_color(c_black);
                 
                draw_text(psx+4,psy+100,"POW ("+string(floor(_gn[? "sPower"]))+")");
                draw_text(psx+4,psy+108,"SPD ("+string(floor(_gn[? "sSpeed"]))+")");
                draw_text(psx+4,psy+116,"AMM ("+string(floor(_gn[? "sAmmo"]))+")");
                draw_text(psx+4,psy+124,"AFX ("+string(floor(_gn[? "sAffix"]))+")");
                draw_text(psx+4,psy+132,"WT  ("+string(floor(_gn[? "sWeight"]))+")");
                draw_text(psx+4,psy+142,"RANGE " + string(floor(_gn[? "pRange"])));
                draw_text(psx+4,psy+156,"POINT VALUE "+string(floor(_gn[? "numberval"])));
                
                draw_text(psx+55,psy+100,string(_gn[? "pDamageMin"]) + "-" + string(_gn[? "pDamageMin"] +_gn[? "pDamageRand"]));
                draw_text(psx+55,psy+108,string(_gn[? "pFireSpeed"]));
                draw_text(psx+55,psy+116,string(_gn[? "pMaxAmmo"]));
                draw_text(psx+55,psy+124,string(_gn[? "pAffix"]));
                draw_text(psx+55,psy+132,string(_gn[? "pWeight"]));
                
                draw_set_alpha(1);
            }
        }
        
        bagdoing += 1;
    }
    
    
    ////DRAW SELECTED GUN DETAILS
    draw_set_color(make_color_rgb(230,230,230));
    draw_rectangle(16,520,1488,800,false)
    
    if(gunSelectedObj != NULL &amp;&amp; ds_exists(gunSelectedObj, ds_type_map))
    {
        _gn = gunSelectedObj;
        
        if(bottomMenuHover ==1){draw_set_color(c_white);}else{draw_set_color(make_color_rgb(215,215,215));}
        draw_rectangle(24,554,464,586,false)
        if(bottomMenuHover ==2){draw_set_color(c_white);}else{draw_set_color(make_color_rgb(215,215,215));}
        draw_rectangle(492,554,928,586,false)
        
        if(bottomMenuHover ==8 &amp;&amp; geneMenuHover==0){draw_set_color(c_white);}else{draw_set_color(make_color_rgb(215,215,215));}
        draw_rectangle(272,588,592,606,false);
        if(bottomMenuHover ==9 &amp;&amp; geneMenuHover==0){draw_set_color(c_white);}else{draw_set_color(make_color_rgb(215,215,215));}
        draw_rectangle(608,588,928,606,false);
        if(bottomMenuHover ==10 &amp;&amp; geneMenuHover==0){draw_set_color(c_white);}else{draw_set_color(make_color_rgb(215,215,215));}
        draw_rectangle(944,588,1264,606,false);
        
        Gunsmap("draw", 1280, 596, 2, Gunsmap("type to index", _gn[? "pType"]), _gn[? "gunmap_pos"]);
        
        draw_set_color(c_black);
        draw_set_alpha(1);
        draw_set_font(fnt_debugLrg);
        draw_text(29,512, GunMap(_gn, "model"));
        
        draw_set_font(fnt_debugMed);
        draw_set_color(make_color_rgb(20,20,20));
        draw_text(32,552,"TYPE: "+_gn[? "pType"]);
        draw_text(498,552,"MATERIAL: "+_gn[? "pMaterial"]);
        
        draw_text(276,580,"PREF 1: "+_gn[? "pPrefix1"]);
        draw_text(614,580,"PREF 2: "+_gn[? "pPrefix2"]);
        draw_text(950,580,"SUFFX: "+_gn[? "pSuffix"]);
        
        if(bottomMenuHover ==3){draw_set_color(c_white);}else{draw_set_color(make_color_rgb(205,205,205));}
        draw_rectangle(24,604,260,638,false) ///pow
        if(bottomMenuHover ==4){draw_set_color(c_white);}else{draw_set_color(make_color_rgb(205,205,205));}
        draw_rectangle(24,640,260,656,false) ///spd
        if(bottomMenuHover ==5){draw_set_color(c_white);}else{draw_set_color(make_color_rgb(205,205,205));}
        draw_rectangle(24,658,260,674,false) ///ammo
        if(bottomMenuHover ==6){draw_set_color(c_white);}else{draw_set_color(make_color_rgb(205,205,205));}
        draw_rectangle(24,676,260,692,false) ///afx
        if(bottomMenuHover ==7){draw_set_color(c_white);}else{draw_set_color(make_color_rgb(205,205,205));}
        draw_rectangle(24,694,260,710,false) ///wgt
        
        draw_set_color(c_ltgray);
        draw_set_alpha(0.4);
        draw_rectangle(80,604,114,714,false)
        draw_set_alpha(1);
        draw_set_color(make_color_rgb(20,20,20));

        draw_set_font(fnt_debugSml);
        draw_text(32,582,"POINT VALUE "+string(_gn[? "numberval"]));
        
        ///labels
        draw_text(32,604,"POW");
        draw_text(32,640,"SPD");
        draw_text(32,658,"AMM");
        draw_text(32,676,"AFX");
        draw_text(32,694,"WT");
        draw_text(32,716,"RANGE");
        
        ///editable values
        if(bottomMenuHover ==3){draw_set_color(c_black);}else{draw_set_color(c_dkgray);}
        draw_text(88,604,string(floor(_gn[? "sPower"])));
        if(bottomMenuHover ==4){draw_set_color(c_black);}else{draw_set_color(c_dkgray);}
        draw_text(88,640,string(floor(_gn[? "sSpeed"])));
        if(bottomMenuHover ==5){draw_set_color(c_black);}else{draw_set_color(c_dkgray);}
        draw_text(88,658,string(floor(_gn[? "sAmmo"])));
        if(bottomMenuHover ==6){draw_set_color(c_black);}else{draw_set_color(c_dkgray);}
        draw_text(88,676,string(floor(_gn[? "sAffix"])));
        if(bottomMenuHover ==7){draw_set_color(c_black);}else{draw_set_color(c_dkgray);}
        draw_text(88,694,string(floor(_gn[? "sWeight"])));
        
        draw_set_color(make_color_rgb(20,20,20));
        draw_text(88,716,string(_gn[? "sRange"]));
        
        draw_text(122,604,"X");
        draw_text(122,640,"X");
        draw_text(122,658,"X");
        draw_text(122,676,"X");
        draw_text(122,694,"X");
        draw_text(122,716,"X");
        
        ///modifier ratios
        draw_text(136,604,string(_gn[? "pPowerMod"]));
        draw_text(136,618,string(_gn[? "pPowerMaxMod"]));
        draw_text(136,640,string(_gn[? "pSpeedMod"]));
        draw_text(136,658,string(_gn[? "pAmmoMod"]));
        draw_text(136,676,string(_gn[? "pAffixMod"]));
        draw_text(136,694,string(_gn[? "pWeightMod"]));
        draw_text(136,716,string(_gn[? "pRangeMod"]));
        
        draw_text(172,604,"=");
        draw_text(172,618,"=");
        draw_text(172,640,"=");
        draw_text(172,658,"=");
        draw_text(172,676,"=");
        draw_text(172,694,"=");
        draw_text(172,716,"=");
        
        draw_set_color(make_color_rgb(40,10,10));
        ///totals
        draw_set_halign(fa_right);
        
        draw_text(260,604,string(_gn[? "pDamageMin"]) + "min");
        draw_text(264,618,string(_gn[? "pDamageMin"] +_gn[? "pDamageRand"]) + "max");
        draw_text(238,640,string(_gn[? "pFireSpeed"]));
        draw_text(218,658,string(_gn[? "pMaxAmmo"]));
        draw_text(238,676,string(_gn[? "pAffix"]));
        draw_text(238,694,string(_gn[? "pWeight"]));
        draw_text(220,716,string(_gn[? "pRange"]));
        
        draw_set_color(make_color_rgb(20,20,20));
        
        draw_text(174,734,"SHOTS/SEC:");
        draw_text(174,746,"DAMAGE/SHOT:");
        draw_text(174,758,"DAMAGE/SEC:");
        draw_text(174,770,"DAMAGE/LOADOUT:");
        
        blPerSec = (((15 + power(1 + _gn[? "pFireSpeed"],1.75) / 4 )/_gn[? "pFireTimerTarget"])*60) * _gn[? "pBurstAmount"] * _gn[? "pAmmoCost"];
        add = "";
        
        
        draw_text(240,734,string(blPerSec));
        draw_text(240,746,string(_gn[? "pDamageMin"]+_gn[? "pDamageRand"]/2));
        draw_text(240,758,string(blPerSec*(_gn[? "pDamageMin"]+_gn[? "pDamageRand"]/2)*_gn[? "pShots"]));
        draw_text(240,770,string(floor((_gn[? "pMaxAmmo"]/_gn[? "pAmmoCost"])*(_gn[? "pDamageMin"]+_gn[? "pDamageRand"]/2)*_gn[? "pShots"])));
        draw_set_halign(fa_left);
        
        if(_gn[? "pShots"]&gt;1){draw_text(243,746, + "x"+string(_gn[? "pShots"]));}
        var spr = assetOrNull(_gn[? "hudIconSprite"], asset_sprite);
        if (spr != NULL) {
            HUD("gun draw", spr,_gn[? "hudIconFrame"],1279,511,4,4,_gn[? "col"],_a);
        }
        
        if(selectingMaterial||selectingType||selectingPrefix1||selectingPrefix2||selectingSuffix)
        {
            var nmb = 0;
            if(selectingMaterial){nmb=ds_list_size(global.materialName);}
            if(selectingType){nmb=ds_list_size(global.gunsmapType);} // REPLACE WITH AN INTERFACE LATER IF POSSIBLE
            if(selectingPrefix1){nmb=ds_list_size(global.affixName[0]);}
            if(selectingPrefix2){nmb=ds_list_size(global.affixName[1]);}
            if(selectingSuffix){nmb=ds_list_size(global.affixName[2]);}
            for(i=0; i&lt;nmb; i+=1)
            {
                var _pxi = i div 22;
                var _pyi = i mod 22;
                var typename = "";
                if(selectingType){typename= Gunsmap("index to type", i);}
                if(selectingMaterial){typename=ds_list_find_value(global.materialName,i);}
                if(selectingPrefix1){typename=scr_combat_weapons_fusion_affixhood("prefix1","name",i);}
                if(selectingPrefix2){typename=scr_combat_weapons_fusion_affixhood("prefix2","name",i);}
                if(selectingSuffix){typename=scr_combat_weapons_fusion_affixhood("suffix","name",i);}
                draw_set_color(c_ltgray);
                if(matsel==i){draw_set_color(c_white);}
                draw_rectangle(5+220*_pxi,5+20*_pyi,5+218+220*_pxi,5+20*_pyi+18,false);
                draw_set_color(c_black);
                if(i==0 &amp;&amp; selectingType){typename = "CANCEL";}
                draw_text(5+220*_pxi,5+20*_pyi,typename);
            }
        }
    }
    break;
    
    case "fusion":
    {
        var _rep = 0;
        var _gn = NULL;
        var posx,posy;
        
        if(gunSelect1 != NULL &amp;&amp; gunSelect2 != NULL)
        {
            gr1 = gunSelect1[? "numberval"] / (gunSelect1[? "numberval"]+gunSelect2[? "numberval"]);
            gr2 = gunSelect2[? "numberval"] / (gunSelect1[? "numberval"]+gunSelect2[? "numberval"]);
            if(gr1 == gr2){powRatio = 0.5;}
            else
            {
                if (gr1 &gt; gr2) powRatio = 1 - power(gr2, 1.5);
                else powRatio = power(gr1, 1.5);
            }
            
            draw_set_alpha(1);
            draw_set_color(c_red);
            draw_rectangle(322,96,350,512,false);
            draw_rectangle(354,96,382,512,false);
            
            draw_set_color(c_green);
            draw_rectangle(322,512-powRatio*416,350,512,false);
            draw_rectangle(354,512-(1-powRatio)*416,382,512,false);
        }
        
        
        if(topMenuHover==0){draw_set_color(c_white);}else{draw_set_color(c_gray);}
        draw_rectangle(816,32,1024,80,false) ///RE-ROLL button

        if(topMenuHover==1){draw_set_color(c_white);}else{draw_set_color(c_gray);}
        draw_rectangle(1040,32,1248,80,false) ///FUSE button

        if(topMenuHover==2){draw_set_color(c_white);}else{draw_set_color(c_gray);}
        draw_rectangle(1264,32,1472,80,false) ///FUSEKEEP button

        draw_set_color(c_white);
        draw_set_halign(fa_center);
        draw_text(921,48,"RE-ROLL");
        draw_text(1147,48,"FUSE GUN'S");
        draw_text(1368,48,"FUSE + KEEP COMPONENTS");
        
        draw_set_halign(fa_left);
        
        if (gunResult != gunResult)
            Gunsmap("draw", 1132, 390, 3, Gunsmap("type to index", gunResult[? "pType"]), gunResult[? "gunmap_pos"]);
        
        repeat(3)
        {    
            posy = 96;
            if(_rep==0)
            {
                posx = 16;
                _gn = gunSelect1;
            }
            else if(_rep==1)
            {
                posx = 386;
                _gn = gunSelect2;
            }
            else
            {
                posx = 705;
                _gn = gunResult;
            }
            
            draw_set_color(c_ltgray);
            draw_set_alpha(1);
            draw_rectangle(posx,posy,posx+302,posy+416,false);
            
            if(gunResult != NULL)
            {
                draw_set_alpha(0.6);  
                draw_line(1132+pt1x*4+2,390+pt1y*4+2,1132+pt2x*4+2,390+pt2y*4+2);
            }
            
            if(hoverGun==_rep &amp;&amp; hoverElement==0){draw_set_color(c_white);}else{draw_set_color(c_gray);}
            draw_rectangle(posx+3,posy+3,posx+295,posy+107,false);
            
            if(_gn != NULL &amp;&amp; ds_exists(_gn, ds_type_map))
            {
                var __px,__py,_col;
                
                __px = ((_gn[? "gunmap_pos"] mod 96)-surfshiftx+96*5)mod 96;
                __py = ((_gn[? "gunmap_pos"] div 96)-surfshifty+96*5)mod 96;
                
                if(hoverGun==_rep){_col = c_white;}else{_col = c_gray;}
                draw_set_color(_col);
                draw_sprite_ext(s_pixel,0,1132+__px*4+2,390+__py*4+2,3,3,0,_col,1);
                draw_text(1132+__px*4-6,390+__py*4+10,string(_rep));           
                
                if(_rep==0){pt1x = __px; pt1y = __py;}
                else if (_rep==1){pt2x = __px; pt2y = __py;}
                
                var spr = assetOrNull(_gn[? "hudIconSprite"], asset_sprite);
                if (spr != NULL) {
                    //draw_sprite_ext(spr,_gn[? "hudIconFrame"],posx+56,posy+7,4,4,0,_gn[? "col"],_a); ///////////
                    HUD("gun draw", spr,_gn[? "hudIconFrame"],posx+56,posy+7,4,4,_gn[? "col"],_a);
                }
            
                if(hoverGun==_rep &amp;&amp; hoverElement==1){draw_set_color(c_white);}else{draw_set_color(c_gray);}
                draw_rectangle(posx+17,posy+113,posx+285,posy+111+19,false);
                if(hoverGun==_rep &amp;&amp; hoverElement==2){draw_set_color(c_white);}else{draw_set_color(c_gray);}
                draw_rectangle(posx+17,posy+136,posx+285,posy+134+19,false);
                
                if(hoverGun==_rep &amp;&amp; hoverElement==3){draw_set_color(c_white);}else{draw_set_color(c_gray);}
                draw_rectangle(posx+108,posy+175,posx+108+26,posy+173+14,false);
                if(hoverGun==_rep &amp;&amp; hoverElement==4){draw_set_color(c_white);}else{draw_set_color(c_gray);}
                draw_rectangle(posx+108,posy+207,posx+108+26,posy+205+14,false);
                if(hoverGun==_rep &amp;&amp; hoverElement==5){draw_set_color(c_white);}else{draw_set_color(c_gray);}
                draw_rectangle(posx+108,posy+223,posx+108+26,posy+221+14,false);
                if(hoverGun==_rep &amp;&amp; hoverElement==6){draw_set_color(c_white);}else{draw_set_color(c_gray);}
                draw_rectangle(posx+108,posy+239,posx+108+26,posy+237+14,false);
                if(hoverGun==_rep &amp;&amp; hoverElement==7){draw_set_color(c_white);}else{draw_set_color(c_gray);}
                draw_rectangle(posx+108,posy+255,posx+108+26,posy+253+14,false);
                
                if(hoverGun==_rep &amp;&amp; hoverElement==8){draw_set_color(c_white);}else{draw_set_color(c_gray);}
                draw_rectangle(posx+17,posy+320,posx+285,posy+318+19,false);
                if(hoverGun==_rep &amp;&amp; hoverElement==9){draw_set_color(c_white);}else{draw_set_color(c_gray);}
                draw_rectangle(posx+17,posy+343,posx+285,posy+341+19,false);
                if(hoverGun==_rep &amp;&amp; hoverElement==10){draw_set_color(c_white);}else{draw_set_color(c_gray);}
                draw_rectangle(posx+17,posy+366,posx+285,posy+364+19,false);
                
                draw_set_halign(fa_right);
                draw_set_color(c_white);

                draw_text(posx+152,posy+157,"POINT VALUE:");
                draw_text(posx+196,posy+157,string(_gn[? "numberval"]));
                
                draw_text(posx+96,posy+176,"POWER");
                draw_text(posx+96,posy+208,"SPEED");
                draw_text(posx+96,posy+224,"AMMO");
                draw_text(posx+96,posy+240,"AFFIX");
                draw_text(posx+96,posy+256,"WEIGHT");
                
                draw_text(posx+132,posy+176,string(floor(_gn[? "sPower"])));
                draw_text(posx+132,posy+208,string(floor(_gn[? "sSpeed"])));
                draw_text(posx+132,posy+224,string(floor(_gn[? "sAmmo"])));
                draw_text(posx+132,posy+240,string(floor(_gn[? "sAffix"])));
                draw_text(posx+132,posy+256,string(floor(_gn[? "sWeight"])));
                
                draw_text(posx+149,posy+176,"x");
                draw_text(posx+149,posy+190,"x");
                draw_text(posx+149,posy+208,"x");
                draw_text(posx+149,posy+224,"x");
                draw_text(posx+149,posy+240,"x");
                draw_text(posx+149,posy+256,"x");
                
                draw_text(posx+180,posy+176,string(_gn[? "pPowerMod"]));
                draw_text(posx+180,posy+190,string(_gn[? "pPowerMaxMod"]));
                draw_text(posx+180,posy+208,string(_gn[? "pSpeedMod"]));
                draw_text(posx+180,posy+224,string(_gn[? "pAmmoMod"]));
                draw_text(posx+180,posy+240,string(_gn[? "pAffixMod"]));
                draw_text(posx+180,posy+256,string(_gn[? "pWeightMod"]));
                
                draw_text(posx+194,posy+176,"=");
                draw_text(posx+194,posy+190,"=");
                draw_text(posx+194,posy+208,"=");
                draw_text(posx+194,posy+224,"=");
                draw_text(posx+194,posy+240,"=");
                draw_text(posx+194,posy+256,"=");
                
                draw_text(posx+245,posy+176,string_format(_gn[? "pDamageMin"],0,2));
                draw_text(posx+245,posy+190,string_format(_gn[? "pDamageMin"] +_gn[? "pDamageRand"],0,2));
                draw_text(posx+245,posy+208,string_format(_gn[? "pFireSpeed"],0,2));
                draw_text(posx+225,posy+224,string(_gn[? "pMaxAmmo"]));
                draw_text(posx+245,posy+240,string_format(_gn[? "pAffix"],0,2));
                draw_text(posx+245,posy+256,string_format(_gn[? "pWeight"],0,2));
                
                draw_text(posx+180,posy+272,"SHOTS PER SECOND:");
                draw_text(posx+180,posy+284,"DAMAGE PER SECOND:");
                draw_text(posx+180,posy+296,"DAMAGE PER LOADOUT:");
                draw_text(posx+180,posy+308,"SHOOTING RANGE:");
                
                blPerSec = (((15 + power(1 + _gn[? "pFireSpeed"],1.75) / 4 )/_gn[? "pFireTimerTarget"])*60) * _gn[? "pBurstAmount"] * _gn[? "pAmmoCost"];
                
                draw_text(posx+256,posy+272,string_format(blPerSec,0,2));
                draw_text(posx+256,posy+284,string_format(blPerSec*(_gn[? "pDamageMin"]+_gn[? "pDamageRand"])/2,0,2));
                draw_text(posx+256,posy+296,string_format(floor(_gn[? "pMaxAmmo"]*(_gn[? "pDamageMin"]+_gn[? "pDamageRand"]/2)),0,2));
                draw_text(posx+256,posy+308,string_format(_gn[? "pRange"],0,2));
                
                draw_set_halign(fa_left);
                
                draw_text(posx+20,posy+120,"TYPE: "+_gn[? "pType"]);
                draw_text(posx+20,posy+142,"MATERIAL: "+_gn[? "pMaterial"]);
                draw_text(posx+20,posy+327,"PREF1: "+_gn[? "pPrefix1"]);
                draw_text(posx+20,posy+351,"PREF2: "+_gn[? "pPrefix2"]);
                draw_text(posx+20,posy+373,"SUFFX: "+_gn[? "pSuffix"]);
                
            }
            _rep+=1;
        }
        
        if(pickingGun!=0)
        {
            nb = ds_list_size(scr_equipment_guns_bandolier_list())+_lsize;
            
            for(_i=0; _i&lt;nb; _i+=1)
            {
                psx = 32+128*_i
                psx = psx - gnSelScroll;
                psy=94;
                
                _gn = scr_getGunFromIndex(_i);
                draw_set_alpha(1);
                draw_set_color(make_color_rgb(180,180,180));
                if(gunHoveredInd==_i){draw_set_color(make_color_rgb(220,220,220));}
                if((pickingGun==1 &amp;&amp; gunSelect1 == _i)||(pickingGun==2 &amp;&amp; gunSelect2 == _i)){draw_set_color(make_color_rgb(255,255,255));}
                if((pickingGun==2 &amp;&amp; gunSelect1 == _i)||(pickingGun==1 &amp;&amp; gunSelect2 == _i)){draw_set_color(make_color_rgb(255,200,200));}
                
                draw_rectangle(psx,psy,psx+128,psy+168,false);
                
                if(_gn != NULL &amp;&amp; ds_exists(_gn, ds_type_map))
                {
                    
                    var spr = assetOrNull(_gn[? "hudIconSprite"], asset_sprite);
                    if (spr != NULL) {
                        //draw_sprite_ext(spr,_gn[? "hudIconFrame"],psx+11,psy+50,2,2,0,_gn[? "col"],_a);
                        HUD("gun draw", spr,_gn[? "hudIconFrame"],psx+11,psy+50,2,2,_gn[? "col"],_a);
                    }
                    draw_set_font(global.fn_2)
                    draw_set_color(c_white);
                    draw_set_alpha(_a);
                    if(_gn[? "pPrefix1"] != "empty"){draw_text(psx+4,psy+2,_gn[? "pPrefix1"]);}
                    if(_gn[? "pPrefix2"] != "empty"){draw_text(psx+4,psy+10,_gn[? "pPrefix2"]);}
                    draw_text(psx+4,psy+20,_gn[? "pMaterial"]);
                    draw_text(psx+4,psy+30,_gn[? "pType"]);
                    if(_gn[? "pSuffix"] != "empty"){draw_text(psx+4,psy+40,_gn[? "pSuffix"]);}
                    
                    draw_set_font(global.fn_small);
                    draw_set_color(c_black);
                     
                    draw_text(psx+4,psy+100,"POW ("+string(floor(_gn[? "sPower"]))+")");
                    draw_text(psx+4,psy+108,"SPD ("+string(floor(_gn[? "sSpeed"]))+")");
                    draw_text(psx+4,psy+116,"AMM ("+string(floor(_gn[? "sAmmo"]))+")");
                    draw_text(psx+4,psy+124,"AFX ("+string(floor(_gn[? "sAffix"]))+")");
                    draw_text(psx+4,psy+132,"WT  ("+string(floor(_gn[? "sWeight"]))+")");
                    draw_text(psx+4,psy+142,"RANGE " + string(floor(_gn[? "pRange"])));
                    draw_text(psx+4,psy+156,"POINT VALUE "+string(floor(_gn[? "numberval"])));
                    
                    draw_text(psx+55,psy+100,string(_gn[? "pDamageMin"]) + "-" + string(_gn[? "pDamageMin"] +_gn[? "pDamageRand"]));
                    draw_text(psx+55,psy+108,string(_gn[? "pFireSpeed"]));
                    draw_text(psx+55,psy+116,string(_gn[? "pMaxAmmo"]));
                    draw_text(psx+55,psy+124,string(_gn[? "pAffix"]));
                    draw_text(psx+55,psy+132,string(_gn[? "pWeight"]));
                    
                    draw_set_alpha(1);
                }
            }
        }
        
    }
    break;
        
    case "gun space":
    {
    
        if(surface_exists(gunmapSurf))
        {
            switch(zoomlvl)
            {
                case 3:
                    draw_surface(gunmapSurf,768-192,480-192);
                    break;
                case 4:
                case 5:
                case 6:
                    draw_surface_stretched(gunmapSurf,40,90,1456,960);
                    break;
                    
            }
        }
        else
        {
            //if(zoomlvl&gt;3){gunmapSurf = scr_gunma_getTexture(zoomlvl,gmapScrollx,gmapScrolly);}
            //else{gunmapSurf = scr_gunma_getTexture(zoomlvl,gmapScrollx,gmapScrolly);}
        }
        
    }
        
}


/*
dragging != noone &amp;&amp; !_holding)
        {
            if(heldtmr&gt;8)
*/
if(dragging &gt;= 0 &amp;&amp; heldtmr &gt; 8)
{
    if (_gn != NULL &amp;&amp; ds_exists(_gn, ds_type_map)) {
        var spr = assetOrNull(_gn[? "hudIconSprite"], asset_sprite);
        if (spr != NULL) {
            //draw_sprite_ext(spr,_gn[? "hudIconFrame"],o_curs.x*global.screen_scale div 1 - 25,o_curs.y*global.screen_scale div 1 - 12,1,1,0,_gn[? "col"],_a);
            HUD("gun draw", spr, _gn[? "hudIconFrame"], o_curs.x*global.screen_scale div 1 - 25,o_curs.y*global.screen_scale div 1 - 12,1,1,_gn[? "col"],_a);
        }
    }
}
else
{
    switch(cursor_pic)
    {
        case 0:
            draw_sprite_ext(s_spawnEdit_Cursors,5,o_curs.x*global.screen_scale div 1,o_curs.y*global.screen_scale div 1,global.screen_scale,global.screen_scale,0,c_white,1);
            break;
        case 1:
            draw_sprite_ext(s_spawnEdit_Cursors,7,o_curs.x*global.screen_scale div 1,o_curs.y*global.screen_scale div 1,global.screen_scale,global.screen_scale,0,c_white,1);
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
