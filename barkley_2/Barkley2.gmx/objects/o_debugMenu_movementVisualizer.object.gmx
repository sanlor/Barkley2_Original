<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2100000</depth>
  <persistent>0</persistent>
  <parentName>o_debugMode</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>paths = ds_list_create();

path_timeout = 30;
path_timer = path_timeout;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i = 0; i &lt; ds_list_size(paths); i++)
{
    if(path_exists(paths[| i]))
    {
        path_delete(paths[| i]);
    }
}

ds_list_destroy(paths);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(ds_list_empty(paths)) exit;

path_timer -= dt();

if(path_timer &lt;= 0)
{
    // the oldest path is always purged
    path_delete(paths[| 0]);
    ds_list_delete(paths, 0);
    path_timer = path_timeout;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw coords

draw_set_alpha(1);
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(global.fn_2);

var str;

if(instance_exists(o_hoopz))
{
    with(o_hoopz)
    {
        str =  "(" + string(x) + ",";
        str += string(y) + ",";
        str += string(base_z) + ")";
    }
}

draw_text(2,2,str);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Render world
draw_set_color(c_blue);
scr_draw_collision_rtree(sys_collision.c_tree);
draw_set_color(c_green);
scr_draw_collision_rtree(sys_collision.c_ostree);
draw_set_color(c_purple);
scr_draw_collision_rtree(sys_collision.c_wadetree);

// Render hitboxes for CombatActors
draw_set_colour(c_orange);
with Actor {
    // Render SAT movement collision shape
    sat_debug_drawshape(scr_entity_getMovementCollisionShape(id))
}


// Render hitboxes for CombatAttackEntity
draw_set_colour(c_red);
with CombatAttackEntity {
    // Render SAT movement collision shape
    sat_debug_drawshape(scr_entity_getMovementCollisionShape(id))
}


// Paths
draw_set_colour(c_white);
with Entity {
    if (path_support) {
        // Render path if active
        if (scr_path_active()) {
            draw_path(scr_path_get(),0,0,1);
        }
    }
}

if(!ds_list_empty(paths))
{
    for(var i = 0; i &lt; ds_list_size(paths); i++)
    {
        if(i == 0)
            // draw path timeout
            draw_set_alpha(path_timer / path_timeout);
        else
            draw_set_alpha(1);
        
        draw_path(paths[| i],0,0,1);
    }
}

// Jump Points

with EnemyCombatActor
{
    if(scr_actor_isWading(self.id) &amp;&amp; ds_exists(activeMoveTowardsLand, ds_type_map))
    {
        var jumpAction = activeMoveTowardsLand[? "jumpAction"];
        
        if(jumpAction != NULL)
        {
            var jump_to_x = jumpAction[? "targetx"];
            var jump_to_y = jumpAction[? "targety"];
            
            draw_set_color(c_aqua);
            draw_circle(jump_to_x, jump_to_y, 4, false);
        }
    }
}

// Render audio emitters //
draw_set_colour(c_aqua);
with o_sfx_audio_emitter_parent {
    draw_circle(x, y, 6, true);
    draw_text(x, y, "Snd");
    }

draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
