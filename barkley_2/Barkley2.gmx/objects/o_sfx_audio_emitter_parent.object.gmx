<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_sfxemitter</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup //
start_delay = 0.1;

// This line is just to stop crashes in some specific cases //
audioemit = audio_emitter_create();
sndInd = -1;
timerRetry = 50;
timer_remove = 0;

// Falloff &amp; Gain //
falloff_ref_dist = 200;
falloff_max_dist = 400; 
falloff_factor = 1;
gain = 0.75;
gainTime = 1; // time in seconds to fade in effect
gainCount = 0; // Counter for above

// Position //
x_pos = x;
y_pos = y;
z_pos = 0;

// Sound //
sound = "sn_oceanwaves01";
loop = true;
priority = 80;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free the emitter, stop the loop
if audio_emitter_exists(audioemit) then audio_emitter_free(audioemit);
if (sndInd != -1) { audio_stop_sound(sndInd); sndInd = -1; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Delay //
if paused() exit;

// Delay timer //
if start_delay &gt; 0 then 
    {
    // Tick down //
    start_delay -= dt();
    
    // Event //
    if start_delay &lt;= 0 then
        {
        if (audio_emitter_exists(audioemit)) audio_emitter_free(audioemit);
        audioemit = audio_emitter_create();
        audio_emitter_falloff(audioemit, falloff_ref_dist, falloff_max_dist, falloff_factor);
        audio_emitter_gain(audioemit, 0);
        audio_emitter_position(audioemit, x_pos, y_pos, z_pos);
        sndInd = audio_play_sound_on_ext(audioemit, sound, loop, priority); //EXTSND
        }
    }
else // Sound is playing, fade it in
    {
    gainCount = Goto(gainCount, gainTime, dt_sec());
    audio_emitter_gain(audioemit, gain * abs(1 - oBlack.alpha) * global.sfx_gain_master); //(gain / gainTime) * gainCount);
    }
    
// Remove the emitter //
if timer_remove &gt; 0 then
    {
    // Tick down //
    timer_remove -= dt();
    
    // Event //
    if timer_remove &lt;= 0 then instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free the emitter, stop the loop
if audio_emitter_exists(audioemit) then audio_emitter_free(audioemit);
if (sndInd != -1) { audio_stop_sound(sndInd); sndInd = -1; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>7,9</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
